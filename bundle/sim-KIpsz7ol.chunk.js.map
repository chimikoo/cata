{"version":3,"file":"sim-KIpsz7ol.chunk.js","sources":["../../../ui/shaman/enhancement/inputs.ts","../../../ui/shaman/enhancement/presets.ts","../../../ui/shaman/enhancement/sim.ts","../../../ui/core/components/fire_elemental_inputs.ts"],"sourcesContent":["import * as InputHelpers from '../../core/components/input_helpers.js';\nimport { Spec } from '../../core/proto/common.js';\nimport { ShamanImbue, ShamanSyncType } from '../../core/proto/shaman.js';\nimport { ActionId } from '../../core/proto_utils/action_id.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const ShamanImbueOH = InputHelpers.makeSpecOptionsEnumIconInput<Spec.SpecEnhancementShaman, ShamanImbue>({\n\tfieldName: 'imbueOh',\n\tvalues: [\n\t\t{ value: ShamanImbue.NoImbue, tooltip: 'No Off Hand Enchant' },\n\t\t{ actionId: ActionId.fromSpellId(58804), value: ShamanImbue.WindfuryWeapon },\n\t\t{ actionId: ActionId.fromSpellId(58790), value: ShamanImbue.FlametongueWeapon, text: 'R10' },\n\t\t{ actionId: ActionId.fromSpellId(58789), value: ShamanImbue.FlametongueWeaponDownrank, text: 'R9' },\n\t\t{ actionId: ActionId.fromSpellId(58796), value: ShamanImbue.FrostbrandWeapon },\n\t],\n});\n\nexport const SyncTypeInput = InputHelpers.makeSpecOptionsEnumInput<Spec.SpecEnhancementShaman, ShamanSyncType>({\n\tfieldName: 'syncType',\n\tlabel: 'Sync/Stagger Setting',\n\tlabelTooltip: `Choose your sync or stagger option Perfect\n\t\t<ul>\n\t\t\t<li><div>Auto: Will auto pick sync options based on your weapons attack speeds</div></li>\n\t\t\t<li><div>None: No Sync or Staggering, used for mismatched weapon speeds</div></li>\n\t\t\t<li><div>Perfect Sync: Makes your weapons always attack at the same time, for match weapon speeds</div></li>\n\t\t\t<li><div>Delayed Offhand: Adds a slight delay to the offhand attacks while staying within the 0.5s flurry ICD window</div></li>\n\t\t</ul>`,\n\tvalues: [\n\t\t{ name: 'Automatic', value: ShamanSyncType.Auto },\n\t\t{ name: 'None', value: ShamanSyncType.NoSync },\n\t\t{ name: 'Perfect Sync', value: ShamanSyncType.SyncMainhandOffhandSwings },\n\t\t{ name: 'Delayed Offhand', value: ShamanSyncType.DelayOffhandSwings },\n\t],\n});\n","import * as PresetUtils from '../../core/preset_utils.js';\nimport { Consumes, Debuffs, Faction, Flask, Food, Glyphs, Potions, RaidBuffs, TristateEffect } from '../../core/proto/common.js';\nimport {\n\tAirTotem,\n\tEarthTotem,\n\tEnhancementShaman_Options as EnhancementShamanOptions,\n\tFireTotem,\n\tShamanImbue,\n\tShamanMajorGlyph,\n\tShamanShield,\n\tShamanSyncType,\n\tShamanTotems,\n\tWaterTotem,\n} from '../../core/proto/shaman.js';\nimport { SavedTalents } from '../../core/proto/ui.js';\nimport DefaultFt from './apls/default_ft.apl.json';\nimport DefaultWf from './apls/default_wf.apl.json';\nimport Phase3Apl from './apls/phase_3.apl.json';\nimport P1Gear from './gear_sets/p1.gear.json';\nimport P2FtGear from './gear_sets/p2_ft.gear.json';\nimport P2WfGear from './gear_sets/p2_wf.gear.json';\nimport P3AllianceGear from './gear_sets/p3_alliance.gear.json';\nimport P3HordeGear from './gear_sets/p3_horde.gear.json';\nimport P4FtGear from './gear_sets/p4_ft.gear.json';\nimport P4WfGear from './gear_sets/p4_wf.gear.json';\nimport PreraidGear from './gear_sets/preraid.gear.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const PRERAID_PRESET = PresetUtils.makePresetGear('Preraid Preset', PreraidGear);\nexport const P1_PRESET = PresetUtils.makePresetGear('P1 Preset', P1Gear);\nexport const P2_PRESET_FT = PresetUtils.makePresetGear('P2 Preset FT', P2FtGear);\nexport const P2_PRESET_WF = PresetUtils.makePresetGear('P2 Preset WF', P2WfGear);\nexport const P3_PRESET_ALLIANCE = PresetUtils.makePresetGear('P3 Preset [A]', P3AllianceGear, { faction: Faction.Alliance });\nexport const P3_PRESET_HORDE = PresetUtils.makePresetGear('P3 Preset [H]', P3HordeGear, { faction: Faction.Horde });\nexport const P4_PRESET_FT = PresetUtils.makePresetGear('P4 Preset FT', P4FtGear);\nexport const P4_PRESET_WF = PresetUtils.makePresetGear('P4 Preset WF', P4WfGear);\n\nexport const ROTATION_FT_DEFAULT = PresetUtils.makePresetAPLRotation('Default FT', DefaultFt);\nexport const ROTATION_WF_DEFAULT = PresetUtils.makePresetAPLRotation('Default WF', DefaultWf);\nexport const ROTATION_PHASE_3 = PresetUtils.makePresetAPLRotation('Phase 3', Phase3Apl);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/cata/talent-calc and copy the numbers in the url.\nexport const StandardTalents = {\n\tname: 'Standard',\n\tdata: SavedTalents.create({\n\t\t// talentsString: '053030152-30405003105021333031131031051',\n\t\t// glyphs: Glyphs.create({\n\t\t// \tmajor1: ShamanMajorGlyph.GlyphOfFireNova,\n\t\t// \tmajor2: ShamanMajorGlyph.GlyphOfFlametongueWeapon,\n\t\t// \tmajor3: ShamanMajorGlyph.GlyphOfFeralSpirit,\n\t\t// \t//minor glyphs dont affect damage done, all convenience/QoL\n\t\t// }),\n\t}),\n};\n\nexport const Phase3Talents = {\n\tname: 'Phase 3',\n\tdata: SavedTalents.create({\n\t\t// talentsString: '053030152-30505003105001333031131131051',\n\t\t// glyphs: Glyphs.create({\n\t\t// \tmajor1: ShamanMajorGlyph.GlyphOfFireNova,\n\t\t// \tmajor2: ShamanMajorGlyph.GlyphOfFlametongueWeapon,\n\t\t// \tmajor3: ShamanMajorGlyph.GlyphOfFeralSpirit,\n\t\t// \t//minor glyphs dont affect damage done, all convenience/QoL\n\t\t// }),\n\t}),\n};\n\nexport const DefaultOptions = EnhancementShamanOptions.create({\n\tclassOptions: {\n\t\tshield: ShamanShield.LightningShield,\n\t\ttotems: ShamanTotems.create({\n\t\t\tearth: EarthTotem.StrengthOfEarthTotem,\n\t\t\tfire: FireTotem.MagmaTotem,\n\t\t\twater: WaterTotem.ManaSpringTotem,\n\t\t\tair: AirTotem.WindfuryTotem,\n\t\t}),\n\t\timbueMh: ShamanImbue.WindfuryWeapon,\n\t},\n\timbueOh: ShamanImbue.FlametongueWeapon,\n\tsyncType: ShamanSyncType.Auto,\n});\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.PotionOfSpeed,\n\tflask: Flask.FlaskOfEndlessRage,\n\tfood: Food.FoodFishFeast,\n});\n\nexport const DefaultRaidBuffs = RaidBuffs.create({\n\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\tarcaneBrilliance: true,\n\tleaderOfThePack: TristateEffect.TristateEffectImproved,\n\ttotemOfWrath: true,\n\twrathOfAirTotem: true,\n\tmoonkinAura: TristateEffect.TristateEffectImproved,\n\tsanctifiedRetribution: true,\n\tdivineSpirit: true,\n\tbattleShout: TristateEffect.TristateEffectImproved,\n\tdemonicPactSp: 500,\n});\n\nexport const DefaultDebuffs = Debuffs.create({\n\tbloodFrenzy: true,\n\tsunderArmor: true,\n\tcurseOfWeakness: TristateEffect.TristateEffectRegular,\n\tcurseOfElements: true,\n\tfaerieFire: TristateEffect.TristateEffectImproved,\n\tjudgementOfWisdom: true,\n\tmisery: true,\n\ttotemOfWrath: true,\n\tshadowMastery: true,\n});\n","import { FireElementalSection } from '../../core/components/fire_elemental_inputs.js';\nimport * as BuffDebuffInputs from '../../core/components/inputs/buffs_debuffs.js';\nimport * as OtherInputs from '../../core/components/other_inputs.js';\nimport { IndividualSimUI, registerSpecConfig } from '../../core/individual_sim_ui.js';\nimport { Player } from '../../core/player.js';\nimport { PlayerClasses } from '../../core/player_classes';\nimport { APLRotation } from '../../core/proto/apl.js';\nimport { Faction, IndividualBuffs, ItemSlot, PartyBuffs, PseudoStat, Race, Spec, Stat, TristateEffect } from '../../core/proto/common.js';\nimport { ShamanImbue } from '../../core/proto/shaman.js';\nimport { Stats } from '../../core/proto_utils/stats.js';\nimport * as ShamanInputs from '../inputs.js';\nimport * as EnhancementInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecEnhancementShaman, {\n\tcssClass: 'enhancement-shaman-sim-ui',\n\tcssScheme: PlayerClasses.getCssClass(PlayerClasses.Shaman),\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [\n\t\tStat.StatIntellect,\n\t\tStat.StatAgility,\n\t\tStat.StatStrength,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatExpertise,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellHaste,\n\t],\n\tepPseudoStats: [PseudoStat.PseudoStatMainHandDps, PseudoStat.PseudoStatOffHandDps],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatAttackPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatStamina,\n\t\tStat.StatStrength,\n\t\tStat.StatAgility,\n\t\tStat.StatIntellect,\n\t\tStat.StatAttackPower,\n\t\tStat.StatMeleeHit,\n\t\tStat.StatMeleeCrit,\n\t\tStat.StatMeleeHaste,\n\t\tStat.StatExpertise,\n\t\tStat.StatArmorPenetration,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t],\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.P4_PRESET_WF.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap(\n\t\t\t{\n\t\t\t\t[Stat.StatIntellect]: 1.48,\n\t\t\t\t[Stat.StatAgility]: 1.59,\n\t\t\t\t[Stat.StatStrength]: 1.1,\n\t\t\t\t[Stat.StatSpellPower]: 1.13,\n\t\t\t\t[Stat.StatSpellHit]: 0, //default EP assumes cap\n\t\t\t\t[Stat.StatSpellCrit]: 0.91,\n\t\t\t\t[Stat.StatSpellHaste]: 0.37,\n\t\t\t\t[Stat.StatAttackPower]: 1.0,\n\t\t\t\t[Stat.StatMeleeHit]: 1.38,\n\t\t\t\t[Stat.StatMeleeCrit]: 0.81,\n\t\t\t\t[Stat.StatMeleeHaste]: 1.61, //haste is complicated\n\t\t\t\t[Stat.StatArmorPenetration]: 0.48,\n\t\t\t\t[Stat.StatExpertise]: 0, //default EP assumes cap\n\t\t\t},\n\t\t\t{\n\t\t\t\t[PseudoStat.PseudoStatMainHandDps]: 5.21,\n\t\t\t\t[PseudoStat.PseudoStatOffHandDps]: 2.21,\n\t\t\t},\n\t\t),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.StandardTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: Presets.DefaultRaidBuffs,\n\t\tpartyBuffs: PartyBuffs.create({}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfWisdom: TristateEffect.TristateEffectImproved,\n\t\t\tblessingOfMight: TristateEffect.TristateEffectImproved,\n\t\t\tjudgementsOfTheWise: true,\n\t\t}),\n\t\tdebuffs: Presets.DefaultDebuffs,\n\t},\n\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [ShamanInputs.ShamanShieldInput(), ShamanInputs.ShamanImbueMH(), EnhancementInputs.ShamanImbueOH],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [BuffDebuffInputs.ReplenishmentBuff, BuffDebuffInputs.MP5Buff, BuffDebuffInputs.SpellHasteBuff, BuffDebuffInputs.SpiritBuff],\n\texcludeBuffDebuffInputs: [BuffDebuffInputs.BleedDebuff],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [EnhancementInputs.SyncTypeInput, OtherInputs.TankAssignment, OtherInputs.InFrontOfTarget],\n\t},\n\titemSwapSlots: [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand],\n\tcustomSections: [ShamanInputs.TotemsSection, FireElementalSection],\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [Presets.StandardTalents, Presets.Phase3Talents],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [Presets.ROTATION_FT_DEFAULT, Presets.ROTATION_WF_DEFAULT, Presets.ROTATION_PHASE_3],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [\n\t\t\tPresets.PRERAID_PRESET,\n\t\t\tPresets.P1_PRESET,\n\t\t\tPresets.P2_PRESET_FT,\n\t\t\tPresets.P2_PRESET_WF,\n\t\t\tPresets.P3_PRESET_ALLIANCE,\n\t\t\tPresets.P3_PRESET_HORDE,\n\t\t\tPresets.P4_PRESET_FT,\n\t\t\tPresets.P4_PRESET_WF,\n\t\t],\n\t},\n\n\tautoRotation: (player: Player<Spec.SpecEnhancementShaman>): APLRotation => {\n\t\tconst hasT94P =\n\t\t\tplayer.getCurrentStats().sets.includes(\"Triumphant Nobundo's Battlegear (4pc)\") ||\n\t\t\tplayer.getCurrentStats().sets.includes(\"Nobundo's Battlegear (4pc)\") ||\n\t\t\tplayer.getCurrentStats().sets.includes(\"Triumphant Thrall's Battlegear (4pc)\") ||\n\t\t\tplayer.getCurrentStats().sets.includes(\"Thrall's Battlegear (4pc)\");\n\t\tconst options = player.getSpecOptions();\n\n\t\tif (hasT94P) {\n\t\t\tconsole.log('has set');\n\t\t\treturn Presets.ROTATION_PHASE_3.rotation.rotation!;\n\t\t} else if (options.classOptions?.imbueMh == ShamanImbue.FlametongueWeapon) {\n\t\t\treturn Presets.ROTATION_FT_DEFAULT.rotation.rotation!;\n\t\t} else {\n\t\t\treturn Presets.ROTATION_WF_DEFAULT.rotation.rotation!;\n\t\t}\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecEnhancementShaman,\n\t\t\ttalents: Presets.StandardTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceDraenei,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.P1_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_PRESET_FT.gear,\n\t\t\t\t\t3: Presets.P3_PRESET_ALLIANCE.gear,\n\t\t\t\t\t4: Presets.P4_PRESET_FT.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.P1_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_PRESET_FT.gear,\n\t\t\t\t\t3: Presets.P3_PRESET_HORDE.gear,\n\t\t\t\t\t4: Presets.P4_PRESET_FT.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class EnhancementShamanSimUI extends IndividualSimUI<Spec.SpecEnhancementShaman> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecEnhancementShaman>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n","import * as InputHelpers from '../components/input_helpers.js';\nimport { IndividualSimUI } from '../individual_sim_ui';\nimport { Player } from '../player';\nimport { ShamanTotems } from '../proto/shaman';\nimport { ActionId } from '../proto_utils/action_id.js';\nimport { ShamanSpecs } from '../proto_utils/utils';\nimport { EventID } from '../typed_event';\nimport { BooleanPicker } from './boolean_picker';\nimport { ContentBlock } from './content_block';\nimport { IconPicker } from './icon_picker';\nimport { Input } from './input';\nimport { NumberPicker } from './number_picker';\n\nexport function FireElementalSection(parentElem: HTMLElement, simUI: IndividualSimUI<any>): ContentBlock {\n\tconst contentBlock = new ContentBlock(parentElem, 'fire-elemental-settings', {\n\t\theader: { title: 'Fire Elemental' },\n\t});\n\n\tconst fireElementalIconContainer = Input.newGroupContainer();\n\tfireElementalIconContainer.classList.add('fire-elemental-icon-container');\n\n\tcontentBlock.bodyElement.appendChild(fireElementalIconContainer);\n\n\tconst fireElementalBooleanIconInput = InputHelpers.makeBooleanIconInput<ShamanSpecs, ShamanTotems, Player<ShamanSpecs>>(\n\t\t{\n\t\t\tgetModObject: (player: Player<ShamanSpecs>) => player,\n\t\t\tgetValue: (player: Player<ShamanSpecs>) => player.getClassOptions().totems || ShamanTotems.create(),\n\t\t\tsetValue: (eventID: EventID, player: Player<ShamanSpecs>, newVal: ShamanTotems) => {\n\t\t\t\tconst newOptions = player.getClassOptions();\n\t\t\t\tnewOptions.totems = newVal;\n\t\t\t\tplayer.setClassOptions(eventID, newOptions);\n\n\t\t\t\t// Hacky fix ItemSwapping is in the Rotation proto, this will let the Rotation know to update showWhen\n\t\t\t\t// TODO move the ItemSwap enabled to a spec option and have the ItemSwap proto be apart of player.\n\t\t\t\tplayer.rotationChangeEmitter.emit(eventID);\n\t\t\t},\n\t\t\tchangeEmitter: (player: Player<ShamanSpecs>) => player.specOptionsChangeEmitter,\n\t\t},\n\t\tActionId.fromSpellId(2894),\n\t\t'useFireElemental',\n\t);\n\n\tnew IconPicker(fireElementalIconContainer, simUI.player, fireElementalBooleanIconInput);\n\n\tnew NumberPicker(contentBlock.bodyElement, simUI.player, {\n\t\tpositive: true,\n\t\tlabel: 'Bonus spell power',\n\t\tlabelTooltip: 'Bonus spell power to snapshot Fire Elemental with. Will prioritize dropping Fire Elemental if greater then 0',\n\t\tinline: true,\n\t\tgetValue: (player: Player<ShamanSpecs>) => player.getClassOptions().totems?.bonusSpellpower || 0,\n\t\tsetValue: (eventID: EventID, player: Player<ShamanSpecs>, newVal: number) => {\n\t\t\tconst newOptions = player.getClassOptions();\n\n\t\t\tif (newOptions.totems) {\n\t\t\t\tnewOptions.totems.bonusSpellpower = newVal;\n\t\t\t}\n\n\t\t\tplayer.setClassOptions(eventID, newOptions);\n\t\t},\n\t\tchangedEvent: (player: Player<ShamanSpecs>) => player.specOptionsChangeEmitter,\n\t});\n\n\tnew BooleanPicker(contentBlock.bodyElement, simUI.player, {\n\t\tlabel: 'Use Tier 10 (4pc)',\n\t\tlabelTooltip: 'Will use Tier 10 (4pc) to snapshot Fire Elemental.',\n\t\tinline: true,\n\t\tgetValue: (player: Player<ShamanSpecs>) => player.getClassOptions().totems?.enhTierTenBonus || false,\n\t\tsetValue: (eventID: EventID, player: Player<ShamanSpecs>, newVal: boolean) => {\n\t\t\tconst newOptions = player.getClassOptions();\n\n\t\t\tif (newOptions.totems) {\n\t\t\t\tnewOptions.totems.enhTierTenBonus = newVal;\n\t\t\t}\n\n\t\t\tplayer.setClassOptions(eventID, newOptions);\n\t\t},\n\t\tchangedEvent: (player: Player<ShamanSpecs>) => player.currentStatsEmitter,\n\t\tshowWhen: (player: Player<ShamanSpecs>) => {\n\t\t\tconst hasBonus = player.getCurrentStats().sets.includes(\"Frost Witch's Battlegear (4pc)\");\n\t\t\treturn hasBonus;\n\t\t},\n\t});\n\n\treturn contentBlock;\n}\n"],"names":["ShamanImbueOH","InputHelpers.makeSpecOptionsEnumIconInput","fieldName","values","value","ShamanImbue","NoImbue","tooltip","actionId","ActionId","fromSpellId","WindfuryWeapon","FlametongueWeapon","text","FlametongueWeaponDownrank","FrostbrandWeapon","SyncTypeInput","InputHelpers.makeSpecOptionsEnumInput","label","labelTooltip","name","ShamanSyncType","Auto","NoSync","SyncMainhandOffhandSwings","DelayOffhandSwings","PRERAID_PRESET","PresetUtils.makePresetGear","P1_PRESET","P1Gear","P2_PRESET_FT","P2FtGear","P2_PRESET_WF","P2WfGear","P3_PRESET_ALLIANCE","P3AllianceGear","faction","Faction","Alliance","P3_PRESET_HORDE","P3HordeGear","Horde","P4_PRESET_FT","P4FtGear","P4_PRESET_WF","P4WfGear","ROTATION_FT_DEFAULT","PresetUtils.makePresetAPLRotation","DefaultFt","ROTATION_WF_DEFAULT","DefaultWf","ROTATION_PHASE_3","Phase3Apl","StandardTalents","data","SavedTalents","create","Phase3Talents","DefaultOptions","EnhancementShamanOptions","classOptions","shield","ShamanShield","LightningShield","totems","ShamanTotems","earth","EarthTotem","StrengthOfEarthTotem","fire","FireTotem","MagmaTotem","water","WaterTotem","ManaSpringTotem","air","AirTotem","WindfuryTotem","imbueMh","imbueOh","syncType","DefaultConsumes","Consumes","defaultPotion","Potions","PotionOfSpeed","flask","Flask","FlaskOfEndlessRage","food","Food","FoodFishFeast","DefaultRaidBuffs","RaidBuffs","giftOfTheWild","TristateEffect","TristateEffectImproved","arcaneBrilliance","leaderOfThePack","totemOfWrath","wrathOfAirTotem","moonkinAura","sanctifiedRetribution","divineSpirit","battleShout","demonicPactSp","DefaultDebuffs","Debuffs","bloodFrenzy","sunderArmor","curseOfWeakness","TristateEffectRegular","curseOfElements","faerieFire","judgementOfWisdom","misery","shadowMastery","SPEC_CONFIG","registerSpecConfig","Spec","SpecEnhancementShaman","cssClass","cssScheme","PlayerClasses","getCssClass","Shaman","knownIssues","epStats","Stat","StatIntellect","StatAgility","StatStrength","StatAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","StatSpellPower","StatSpellCrit","StatSpellHit","StatSpellHaste","epPseudoStats","PseudoStat","PseudoStatMainHandDps","PseudoStatOffHandDps","epReferenceStat","displayStats","StatHealth","StatStamina","defaults","gear","Presets.P4_PRESET_WF","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","talents","Presets.StandardTalents","specOptions","Presets.DefaultOptions","raidBuffs","Presets.DefaultRaidBuffs","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","blessingOfMight","judgementsOfTheWise","debuffs","Presets.DefaultDebuffs","playerIconInputs","ShamanInputs.ShamanShieldInput","ShamanInputs.ShamanImbueMH","EnhancementInputs.ShamanImbueOH","includeBuffDebuffInputs","BuffDebuffInputs.ReplenishmentBuff","BuffDebuffInputs.MP5Buff","BuffDebuffInputs.SpellHasteBuff","BuffDebuffInputs.SpiritBuff","excludeBuffDebuffInputs","BuffDebuffInputs.BleedDebuff","otherInputs","inputs","EnhancementInputs.SyncTypeInput","OtherInputs.TankAssignment","OtherInputs.InFrontOfTarget","itemSwapSlots","ItemSlot","ItemSlotMainHand","ItemSlotOffHand","customSections","ShamanInputs.TotemsSection","parentElem","simUI","contentBlock","ContentBlock","header","title","fireElementalIconContainer","Input","newGroupContainer","classList","add","bodyElement","appendChild","fireElementalBooleanIconInput","InputHelpers.makeBooleanIconInput","getModObject","player","getValue","getClassOptions","setValue","eventID","newVal","newOptions","setClassOptions","rotationChangeEmitter","emit","changeEmitter","specOptionsChangeEmitter","IconPicker","NumberPicker","positive","inline","bonusSpellpower","changedEvent","BooleanPicker","enhTierTenBonus","currentStatsEmitter","showWhen","getCurrentStats","sets","includes","encounterPicker","showExecuteProportion","presets","Presets.Phase3Talents","rotations","Presets.ROTATION_FT_DEFAULT","Presets.ROTATION_WF_DEFAULT","Presets.ROTATION_PHASE_3","Presets.PRERAID_PRESET","Presets.P1_PRESET","Presets.P2_PRESET_FT","Presets.P2_PRESET_WF","Presets.P3_PRESET_ALLIANCE","Presets.P3_PRESET_HORDE","Presets.P4_PRESET_FT","autoRotation","hasT94P","options","getSpecOptions","console","log","rotation","raidSimPresets","spec","defaultFactionRaces","Unknown","Race","RaceUnknown","RaceDraenei","RaceOrc","defaultGear","EnhancementShamanSimUI","IndividualSimUI","constructor","super"],"mappings":"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"}