{"version":3,"file":"detailed_results-B8LXSl10.chunk.js","sources":["../../../ui/core/constants/lang.ts","../../../node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/base64.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-format-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/goog-varint.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/assert.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/binary-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/json-format-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/message-type-contract.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/lower-camel-case.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-info.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/oneof.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-type-check.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-long-convert.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-scalar-default.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-reader.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-writer.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-merge-partial.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-equals.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/message-type.js","../../../node_modules/@protobuf-ts/runtime/build/es2015/reflection-create.js","../../../ui/core/proto/common.ts","../../../ui/core/constants/mechanics.ts","../../../ui/core/proto/shaman.ts","../../../ui/core/proto/druid.ts","../../../ui/core/proto/apl.ts","../../../ui/core/proto/warrior.ts","../../../ui/core/proto/warlock.ts","../../../ui/core/proto/rogue.ts","../../../ui/core/proto/priest.ts","../../../ui/core/proto/paladin.ts","../../../ui/core/proto/mage.ts","../../../ui/core/proto/hunter.ts","../../../ui/core/proto/death_knight.ts","../../../ui/core/proto/api.ts","../../../ui/core/constants/other.ts","../../../ui/core/player_class.ts","../../../ui/core/player_spec.ts","../../../ui/core/player_specs/death_knight.ts","../../../ui/core/player_classes/death_knight.ts","../../../ui/core/player_specs/druid.ts","../../../ui/core/player_specs/hunter.ts","../../../ui/core/player_specs/mage.ts","../../../ui/core/player_specs/paladin.ts","../../../ui/core/player_specs/priest.ts","../../../ui/core/player_specs/rogue.ts","../../../ui/core/player_specs/shaman.ts","../../../ui/core/player_specs/warlock.ts","../../../ui/core/player_specs/warrior.ts","../../../ui/core/player_specs/index.ts","../../../ui/core/player_classes/druid.ts","../../../ui/core/player_classes/hunter.ts","../../../ui/core/player_classes/mage.ts","../../../ui/core/player_classes/paladin.ts","../../../ui/core/player_classes/priest.ts","../../../ui/core/player_classes/rogue.ts","../../../ui/core/player_classes/shaman.ts","../../../ui/core/player_classes/warlock.ts","../../../ui/core/player_classes/warrior.ts","../../../ui/core/player_classes/index.ts","../../../ui/core/proto/ui.ts","../../../ui/core/utils.ts","../../../ui/core/proto_utils/utils.ts","../../../ui/core/typed_event.ts","../../../ui/core/proto_utils/gems.ts","../../../ui/core/proto_utils/names.ts","../../../ui/core/proto_utils/stats.ts","../../../ui/core/proto_utils/equipped_item.ts","../../../ui/core/proto_utils/gear.ts","../../../ui/core/proto_utils/database.ts","../../../ui/core/proto_utils/action_id.ts","../../../node_modules/tsx-vanilla/lib/index.js","../../../ui/core/proto_utils/logs_parser.tsx","../../../ui/core/proto_utils/sim_result.ts","../../../ui/core/components/component.ts","../../../ui/core/components/input.tsx","../../../ui/core/components/boolean_picker.ts","../../../ui/core/components/dropdown_picker.ts","../../../ui/core/components/unit_picker.ts","../../../ui/core/components/detailed_results/result_component.ts","../../../ui/core/components/detailed_results/results_filter.ts","../../../node_modules/tippy.js/dist/tippy.esm.js","../../../ui/core/components/detailed_results/metrics_table.tsx","../../../ui/core/components/detailed_results/cast_metrics.ts","../../../ui/core/components/detailed_results/dtps_melee_metrics.ts","../../../ui/core/components/detailed_results/dtps_spell_metrics.ts","../../../ui/core/components/detailed_results/healing_metrics.ts","../../../ui/core/components/detailed_results/melee_metrics.ts","../../../ui/core/components/detailed_results/spell_metrics.ts","../../../ui/core/components/detailed_results/resource_metrics.ts","../../../ui/core/components/detailed_results/color_settings.ts","../../../ui/core/components/detailed_results/source_chart.ts","../../../ui/core/components/detailed_results/player_damage.ts","../../../ui/core/components/detailed_results/aura_metrics.ts","../../../ui/core/components/detailed_results/dps_histogram.ts","../../../ui/core/components/detailed_results/timeline.tsx","../../../ui/core/components/detailed_results/log_runner.tsx","../../../ui/core/components/raid_sim_action.ts","../../../ui/core/components/detailed_results/topline_results.ts","../../../ui/core/components/detailed_results.ts"],"sourcesContent":["export const wowheadSupportedLanguages: Record<string, string> = {\n\t'en': 'English',\n\t'cn': '简体中文',\n\t'de': 'Deutsch',\n\t'es': 'Español',\n\t'fr': 'Français',\n\t'it': 'Italiano',\n\t'ko': '한국어',\n\t'pt': 'Português Brasileiro',\n\t'ru': 'Русский',\n};\n\n// Returns a 2-letter language code if it is a wowhead-supported language, or '' otherwise.\nexport function getBrowserLanguageCode(): string {\n\tconst browserLang = (navigator.language || '').substring(0, 2);\n\tif (Object.keys(wowheadSupportedLanguages).includes(browserLang)) {\n\t\treturn browserLang;\n\t} else {\n\t\treturn '';\n\t}\n}\n\nexport function getLanguageCode(): string {\n\treturn cachedLanguageCode_;\n}\n\nexport function getWowheadLanguagePrefix(): string {\n\treturn cachedWowheadLanguagePrefix_;\n}\n\nexport function setLanguageCode(newLang: string) {\n\t// Use '' instead of 'en' because wowhead doesn't like having the en/ prefix.\n\tcachedLanguageCode_ = newLang == 'en' ? '' : newLang;\n\tcachedWowheadLanguagePrefix_ = cachedLanguageCode_ ? cachedLanguageCode_ + '/' : '';\n}\n\nlet cachedLanguageCode_: string = '';\nlet cachedWowheadLanguagePrefix_: string = '';\n","/**\n * Get the type of a JSON value.\n * Distinguishes between array, null and object.\n */\nexport function typeofJsonValue(value) {\n    let t = typeof value;\n    if (t == \"object\") {\n        if (Array.isArray(value))\n            return \"array\";\n        if (value === null)\n            return \"null\";\n    }\n    return t;\n}\n/**\n * Is this a JSON object (instead of an array or null)?\n */\nexport function isJsonObject(value) {\n    return value !== null && typeof value == \"object\" && !Array.isArray(value);\n}\n","// lookup table from base64 character to byte\nlet encTable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n// lookup table from base64 character *code* to byte because lookup by number is fast\nlet decTable = [];\nfor (let i = 0; i < encTable.length; i++)\n    decTable[encTable[i].charCodeAt(0)] = i;\n// support base64url variants\ndecTable[\"-\".charCodeAt(0)] = encTable.indexOf(\"+\");\ndecTable[\"_\".charCodeAt(0)] = encTable.indexOf(\"/\");\n/**\n * Decodes a base64 string to a byte array.\n *\n * - ignores white-space, including line breaks and tabs\n * - allows inner padding (can decode concatenated base64 strings)\n * - does not require padding\n * - understands base64url encoding:\n *   \"-\" instead of \"+\",\n *   \"_\" instead of \"/\",\n *   no padding\n */\nexport function base64decode(base64Str) {\n    // estimate byte size, not accounting for inner padding and whitespace\n    let es = base64Str.length * 3 / 4;\n    // if (es % 3 !== 0)\n    // throw new Error('invalid base64 string');\n    if (base64Str[base64Str.length - 2] == '=')\n        es -= 2;\n    else if (base64Str[base64Str.length - 1] == '=')\n        es -= 1;\n    let bytes = new Uint8Array(es), bytePos = 0, // position in byte array\n    groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0 // previous byte\n    ;\n    for (let i = 0; i < base64Str.length; i++) {\n        b = decTable[base64Str.charCodeAt(i)];\n        if (b === undefined) {\n            // noinspection FallThroughInSwitchStatementJS\n            switch (base64Str[i]) {\n                case '=':\n                    groupPos = 0; // reset state when padding found\n                case '\\n':\n                case '\\r':\n                case '\\t':\n                case ' ':\n                    continue; // skip white-space, and padding\n                default:\n                    throw Error(`invalid base64 string.`);\n            }\n        }\n        switch (groupPos) {\n            case 0:\n                p = b;\n                groupPos = 1;\n                break;\n            case 1:\n                bytes[bytePos++] = p << 2 | (b & 48) >> 4;\n                p = b;\n                groupPos = 2;\n                break;\n            case 2:\n                bytes[bytePos++] = (p & 15) << 4 | (b & 60) >> 2;\n                p = b;\n                groupPos = 3;\n                break;\n            case 3:\n                bytes[bytePos++] = (p & 3) << 6 | b;\n                groupPos = 0;\n                break;\n        }\n    }\n    if (groupPos == 1)\n        throw Error(`invalid base64 string.`);\n    return bytes.subarray(0, bytePos);\n}\n/**\n * Encodes a byte array to a base64 string.\n * Adds padding at the end.\n * Does not insert newlines.\n */\nexport function base64encode(bytes) {\n    let base64 = '', groupPos = 0, // position in base64 group\n    b, // current byte\n    p = 0; // carry over from previous byte\n    for (let i = 0; i < bytes.length; i++) {\n        b = bytes[i];\n        switch (groupPos) {\n            case 0:\n                base64 += encTable[b >> 2];\n                p = (b & 3) << 4;\n                groupPos = 1;\n                break;\n            case 1:\n                base64 += encTable[p | b >> 4];\n                p = (b & 15) << 2;\n                groupPos = 2;\n                break;\n            case 2:\n                base64 += encTable[p | b >> 6];\n                base64 += encTable[b & 63];\n                groupPos = 0;\n                break;\n        }\n    }\n    // padding required?\n    if (groupPos) {\n        base64 += encTable[p];\n        base64 += '=';\n        if (groupPos == 1)\n            base64 += '=';\n    }\n    return base64;\n}\n","/**\n * This handler implements the default behaviour for unknown fields.\n * When reading data, unknown fields are stored on the message, in a\n * symbol property.\n * When writing data, the symbol property is queried and unknown fields\n * are serialized into the output again.\n */\nexport var UnknownFieldHandler;\n(function (UnknownFieldHandler) {\n    /**\n     * The symbol used to store unknown fields for a message.\n     * The property must conform to `UnknownFieldContainer`.\n     */\n    UnknownFieldHandler.symbol = Symbol.for(\"protobuf-ts/unknown\");\n    /**\n     * Store an unknown field during binary read directly on the message.\n     * This method is compatible with `BinaryReadOptions.readUnknownField`.\n     */\n    UnknownFieldHandler.onRead = (typeName, message, fieldNo, wireType, data) => {\n        let container = is(message) ? message[UnknownFieldHandler.symbol] : message[UnknownFieldHandler.symbol] = [];\n        container.push({ no: fieldNo, wireType, data });\n    };\n    /**\n     * Write unknown fields stored for the message to the writer.\n     * This method is compatible with `BinaryWriteOptions.writeUnknownFields`.\n     */\n    UnknownFieldHandler.onWrite = (typeName, message, writer) => {\n        for (let { no, wireType, data } of UnknownFieldHandler.list(message))\n            writer.tag(no, wireType).raw(data);\n    };\n    /**\n     * List unknown fields stored for the message.\n     * Note that there may be multiples fields with the same number.\n     */\n    UnknownFieldHandler.list = (message, fieldNo) => {\n        if (is(message)) {\n            let all = message[UnknownFieldHandler.symbol];\n            return fieldNo ? all.filter(uf => uf.no == fieldNo) : all;\n        }\n        return [];\n    };\n    /**\n     * Returns the last unknown field by field number.\n     */\n    UnknownFieldHandler.last = (message, fieldNo) => UnknownFieldHandler.list(message, fieldNo).slice(-1)[0];\n    const is = (message) => message && Array.isArray(message[UnknownFieldHandler.symbol]);\n})(UnknownFieldHandler || (UnknownFieldHandler = {}));\n/**\n * Merges binary write or read options. Later values override earlier values.\n */\nexport function mergeBinaryOptions(a, b) {\n    return Object.assign(Object.assign({}, a), b);\n}\n/**\n * Protobuf binary format wire types.\n *\n * A wire type provides just enough information to find the length of the\n * following value.\n *\n * See https://developers.google.com/protocol-buffers/docs/encoding#structure\n */\nexport var WireType;\n(function (WireType) {\n    /**\n     * Used for int32, int64, uint32, uint64, sint32, sint64, bool, enum\n     */\n    WireType[WireType[\"Varint\"] = 0] = \"Varint\";\n    /**\n     * Used for fixed64, sfixed64, double.\n     * Always 8 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit64\"] = 1] = \"Bit64\";\n    /**\n     * Used for string, bytes, embedded messages, packed repeated fields\n     *\n     * Only repeated numeric types (types which use the varint, 32-bit,\n     * or 64-bit wire types) can be packed. In proto3, such fields are\n     * packed by default.\n     */\n    WireType[WireType[\"LengthDelimited\"] = 2] = \"LengthDelimited\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"StartGroup\"] = 3] = \"StartGroup\";\n    /**\n     * Used for groups\n     * @deprecated\n     */\n    WireType[WireType[\"EndGroup\"] = 4] = \"EndGroup\";\n    /**\n     * Used for fixed32, sfixed32, float.\n     * Always 4 bytes with little-endian byte order.\n     */\n    WireType[WireType[\"Bit32\"] = 5] = \"Bit32\";\n})(WireType || (WireType = {}));\n","// Copyright 2008 Google Inc.  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n// * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n// * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Code generated by the Protocol Buffer compiler is owned by the owner\n// of the input file used when generating it.  This code is not\n// standalone and requires a support library to be linked with it.  This\n// support library is itself covered by the above license.\n/**\n * Read a 64 bit varint as two JS numbers.\n *\n * Returns tuple:\n * [0]: low bits\n * [0]: high bits\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L175\n */\nexport function varint64read() {\n    let lowBits = 0;\n    let highBits = 0;\n    for (let shift = 0; shift < 28; shift += 7) {\n        let b = this.buf[this.pos++];\n        lowBits |= (b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    let middleByte = this.buf[this.pos++];\n    // last four bits of the first 32 bit number\n    lowBits |= (middleByte & 0x0F) << 28;\n    // 3 upper bits are part of the next 32 bit number\n    highBits = (middleByte & 0x70) >> 4;\n    if ((middleByte & 0x80) == 0) {\n        this.assertBounds();\n        return [lowBits, highBits];\n    }\n    for (let shift = 3; shift <= 31; shift += 7) {\n        let b = this.buf[this.pos++];\n        highBits |= (b & 0x7F) << shift;\n        if ((b & 0x80) == 0) {\n            this.assertBounds();\n            return [lowBits, highBits];\n        }\n    }\n    throw new Error('invalid varint');\n}\n/**\n * Write a 64 bit varint, given as two JS numbers, to the given bytes array.\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/writer.js#L344\n */\nexport function varint64write(lo, hi, bytes) {\n    for (let i = 0; i < 28; i = i + 7) {\n        const shift = lo >>> i;\n        const hasNext = !((shift >>> 7) == 0 && hi == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    const splitBits = ((lo >>> 28) & 0x0F) | ((hi & 0x07) << 4);\n    const hasMoreBits = !((hi >> 3) == 0);\n    bytes.push((hasMoreBits ? splitBits | 0x80 : splitBits) & 0xFF);\n    if (!hasMoreBits) {\n        return;\n    }\n    for (let i = 3; i < 31; i = i + 7) {\n        const shift = hi >>> i;\n        const hasNext = !((shift >>> 7) == 0);\n        const byte = (hasNext ? shift | 0x80 : shift) & 0xFF;\n        bytes.push(byte);\n        if (!hasNext) {\n            return;\n        }\n    }\n    bytes.push((hi >>> 31) & 0x01);\n}\n// constants for binary math\nconst TWO_PWR_32_DBL = (1 << 16) * (1 << 16);\n/**\n * Parse decimal string of 64 bit integer value as two JS numbers.\n *\n * Returns tuple:\n * [0]: minus sign?\n * [1]: low bits\n * [2]: high bits\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64fromString(dec) {\n    // Check for minus sign.\n    let minus = dec[0] == '-';\n    if (minus)\n        dec = dec.slice(1);\n    // Work 6 decimal digits at a time, acting like we're converting base 1e6\n    // digits to binary. This is safe to do with floating point math because\n    // Number.isSafeInteger(ALL_32_BITS * 1e6) == true.\n    const base = 1e6;\n    let lowBits = 0;\n    let highBits = 0;\n    function add1e6digit(begin, end) {\n        // Note: Number('') is 0.\n        const digit1e6 = Number(dec.slice(begin, end));\n        highBits *= base;\n        lowBits = lowBits * base + digit1e6;\n        // Carry bits from lowBits to highBits\n        if (lowBits >= TWO_PWR_32_DBL) {\n            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);\n            lowBits = lowBits % TWO_PWR_32_DBL;\n        }\n    }\n    add1e6digit(-24, -18);\n    add1e6digit(-18, -12);\n    add1e6digit(-12, -6);\n    add1e6digit(-6);\n    return [minus, lowBits, highBits];\n}\n/**\n * Format 64 bit integer value (as two JS numbers) to decimal string.\n *\n * Copyright 2008 Google Inc.\n */\nexport function int64toString(bitsLow, bitsHigh) {\n    // Skip the expensive conversion if the number is small enough to use the\n    // built-in conversions.\n    if ((bitsHigh >>> 0) <= 0x1FFFFF) {\n        return '' + (TWO_PWR_32_DBL * bitsHigh + (bitsLow >>> 0));\n    }\n    // What this code is doing is essentially converting the input number from\n    // base-2 to base-1e7, which allows us to represent the 64-bit range with\n    // only 3 (very large) digits. Those digits are then trivial to convert to\n    // a base-10 string.\n    // The magic numbers used here are -\n    // 2^24 = 16777216 = (1,6777216) in base-1e7.\n    // 2^48 = 281474976710656 = (2,8147497,6710656) in base-1e7.\n    // Split 32:32 representation into 16:24:24 representation so our\n    // intermediate digits don't overflow.\n    let low = bitsLow & 0xFFFFFF;\n    let mid = (((bitsLow >>> 24) | (bitsHigh << 8)) >>> 0) & 0xFFFFFF;\n    let high = (bitsHigh >> 16) & 0xFFFF;\n    // Assemble our three base-1e7 digits, ignoring carries. The maximum\n    // value in a digit at this step is representable as a 48-bit integer, which\n    // can be stored in a 64-bit floating point number.\n    let digitA = low + (mid * 6777216) + (high * 6710656);\n    let digitB = mid + (high * 8147497);\n    let digitC = (high * 2);\n    // Apply carries from A to B and from B to C.\n    let base = 10000000;\n    if (digitA >= base) {\n        digitB += Math.floor(digitA / base);\n        digitA %= base;\n    }\n    if (digitB >= base) {\n        digitC += Math.floor(digitB / base);\n        digitB %= base;\n    }\n    // Convert base-1e7 digits to base-10, with optional leading zeroes.\n    function decimalFrom1e7(digit1e7, needLeadingZeros) {\n        let partial = digit1e7 ? String(digit1e7) : '';\n        if (needLeadingZeros) {\n            return '0000000'.slice(partial.length) + partial;\n        }\n        return partial;\n    }\n    return decimalFrom1e7(digitC, /*needLeadingZeros=*/ 0) +\n        decimalFrom1e7(digitB, /*needLeadingZeros=*/ digitC) +\n        // If the final 1e7 digit didn't need leading zeros, we would have\n        // returned via the trivial code path at the top.\n        decimalFrom1e7(digitA, /*needLeadingZeros=*/ 1);\n}\n/**\n * Write a 32 bit varint, signed or unsigned. Same as `varint64write(0, value, bytes)`\n *\n * Copyright 2008 Google Inc.  All rights reserved.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/1b18833f4f2a2f681f4e4a25cdf3b0a43115ec26/js/binary/encoder.js#L144\n */\nexport function varint32write(value, bytes) {\n    if (value >= 0) {\n        // write value as varint 32\n        while (value > 0x7f) {\n            bytes.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        bytes.push(value);\n    }\n    else {\n        for (let i = 0; i < 9; i++) {\n            bytes.push(value & 127 | 128);\n            value = value >> 7;\n        }\n        bytes.push(1);\n    }\n}\n/**\n * Read an unsigned 32 bit varint.\n *\n * See https://github.com/protocolbuffers/protobuf/blob/8a71927d74a4ce34efe2d8769fda198f52d20d12/js/experimental/runtime/kernel/buffer_decoder.js#L220\n */\nexport function varint32read() {\n    let b = this.buf[this.pos++];\n    let result = b & 0x7F;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 7;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 14;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    b = this.buf[this.pos++];\n    result |= (b & 0x7F) << 21;\n    if ((b & 0x80) == 0) {\n        this.assertBounds();\n        return result;\n    }\n    // Extract only last 4 bits\n    b = this.buf[this.pos++];\n    result |= (b & 0x0F) << 28;\n    for (let readBytes = 5; ((b & 0x80) !== 0) && readBytes < 10; readBytes++)\n        b = this.buf[this.pos++];\n    if ((b & 0x80) != 0)\n        throw new Error('invalid varint');\n    this.assertBounds();\n    // Result can have 32 bits, convert it to unsigned\n    return result >>> 0;\n}\n","import { int64fromString, int64toString } from \"./goog-varint\";\nlet BI;\nexport function detectBi() {\n    const dv = new DataView(new ArrayBuffer(8));\n    const ok = globalThis.BigInt !== undefined\n        && typeof dv.getBigInt64 === \"function\"\n        && typeof dv.getBigUint64 === \"function\"\n        && typeof dv.setBigInt64 === \"function\"\n        && typeof dv.setBigUint64 === \"function\";\n    BI = ok ? {\n        MIN: BigInt(\"-9223372036854775808\"),\n        MAX: BigInt(\"9223372036854775807\"),\n        UMIN: BigInt(\"0\"),\n        UMAX: BigInt(\"18446744073709551615\"),\n        C: BigInt,\n        V: dv,\n    } : undefined;\n}\ndetectBi();\nfunction assertBi(bi) {\n    if (!bi)\n        throw new Error(\"BigInt unavailable, see https://github.com/timostamm/protobuf-ts/blob/v1.0.8/MANUAL.md#bigint-support\");\n}\n// used to validate from(string) input (when bigint is unavailable)\nconst RE_DECIMAL_STR = /^-?[0-9]+$/;\n// constants for binary math\nconst TWO_PWR_32_DBL = 0x100000000;\nconst HALF_2_PWR_32 = 0x080000000;\n// base class for PbLong and PbULong provides shared code\nclass SharedPbLong {\n    /**\n     * Create a new instance with the given bits.\n     */\n    constructor(lo, hi) {\n        this.lo = lo | 0;\n        this.hi = hi | 0;\n    }\n    /**\n     * Is this instance equal to 0?\n     */\n    isZero() {\n        return this.lo == 0 && this.hi == 0;\n    }\n    /**\n     * Convert to a native number.\n     */\n    toNumber() {\n        let result = this.hi * TWO_PWR_32_DBL + (this.lo >>> 0);\n        if (!Number.isSafeInteger(result))\n            throw new Error(\"cannot convert to safe number\");\n        return result;\n    }\n}\n/**\n * 64-bit unsigned integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbULong extends SharedPbLong {\n    /**\n     * Create instance from a `string`, `number` or `bigint`.\n     */\n    static from(value) {\n        if (BI)\n            // noinspection FallThroughInSwitchStatementJS\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    if (value == \"\")\n                        throw new Error('string is no integer');\n                    value = BI.C(value);\n                case \"number\":\n                    if (value === 0)\n                        return this.ZERO;\n                    value = BI.C(value);\n                case \"bigint\":\n                    if (!value)\n                        return this.ZERO;\n                    if (value < BI.UMIN)\n                        throw new Error('signed value for ulong');\n                    if (value > BI.UMAX)\n                        throw new Error('ulong too large');\n                    BI.V.setBigUint64(0, value, true);\n                    return new PbULong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n            }\n        else\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    value = value.trim();\n                    if (!RE_DECIMAL_STR.test(value))\n                        throw new Error('string is no integer');\n                    let [minus, lo, hi] = int64fromString(value);\n                    if (minus)\n                        throw new Error('signed value for ulong');\n                    return new PbULong(lo, hi);\n                case \"number\":\n                    if (value == 0)\n                        return this.ZERO;\n                    if (!Number.isSafeInteger(value))\n                        throw new Error('number is no integer');\n                    if (value < 0)\n                        throw new Error('signed value for ulong');\n                    return new PbULong(value, value / TWO_PWR_32_DBL);\n            }\n        throw new Error('unknown value ' + typeof value);\n    }\n    /**\n     * Convert to decimal string.\n     */\n    toString() {\n        return BI ? this.toBigInt().toString() : int64toString(this.lo, this.hi);\n    }\n    /**\n     * Convert to native bigint.\n     */\n    toBigInt() {\n        assertBi(BI);\n        BI.V.setInt32(0, this.lo, true);\n        BI.V.setInt32(4, this.hi, true);\n        return BI.V.getBigUint64(0, true);\n    }\n}\n/**\n * ulong 0 singleton.\n */\nPbULong.ZERO = new PbULong(0, 0);\n/**\n * 64-bit signed integer as two 32-bit values.\n * Converts between `string`, `number` and `bigint` representations.\n */\nexport class PbLong extends SharedPbLong {\n    /**\n     * Create instance from a `string`, `number` or `bigint`.\n     */\n    static from(value) {\n        if (BI)\n            // noinspection FallThroughInSwitchStatementJS\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    if (value == \"\")\n                        throw new Error('string is no integer');\n                    value = BI.C(value);\n                case \"number\":\n                    if (value === 0)\n                        return this.ZERO;\n                    value = BI.C(value);\n                case \"bigint\":\n                    if (!value)\n                        return this.ZERO;\n                    if (value < BI.MIN)\n                        throw new Error('signed long too small');\n                    if (value > BI.MAX)\n                        throw new Error('signed long too large');\n                    BI.V.setBigInt64(0, value, true);\n                    return new PbLong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));\n            }\n        else\n            switch (typeof value) {\n                case \"string\":\n                    if (value == \"0\")\n                        return this.ZERO;\n                    value = value.trim();\n                    if (!RE_DECIMAL_STR.test(value))\n                        throw new Error('string is no integer');\n                    let [minus, lo, hi] = int64fromString(value);\n                    if (minus) {\n                        if (hi > HALF_2_PWR_32 || (hi == HALF_2_PWR_32 && lo != 0))\n                            throw new Error('signed long too small');\n                    }\n                    else if (hi >= HALF_2_PWR_32)\n                        throw new Error('signed long too large');\n                    let pbl = new PbLong(lo, hi);\n                    return minus ? pbl.negate() : pbl;\n                case \"number\":\n                    if (value == 0)\n                        return this.ZERO;\n                    if (!Number.isSafeInteger(value))\n                        throw new Error('number is no integer');\n                    return value > 0\n                        ? new PbLong(value, value / TWO_PWR_32_DBL)\n                        : new PbLong(-value, -value / TWO_PWR_32_DBL).negate();\n            }\n        throw new Error('unknown value ' + typeof value);\n    }\n    /**\n     * Do we have a minus sign?\n     */\n    isNegative() {\n        return (this.hi & HALF_2_PWR_32) !== 0;\n    }\n    /**\n     * Negate two's complement.\n     * Invert all the bits and add one to the result.\n     */\n    negate() {\n        let hi = ~this.hi, lo = this.lo;\n        if (lo)\n            lo = ~lo + 1;\n        else\n            hi += 1;\n        return new PbLong(lo, hi);\n    }\n    /**\n     * Convert to decimal string.\n     */\n    toString() {\n        if (BI)\n            return this.toBigInt().toString();\n        if (this.isNegative()) {\n            let n = this.negate();\n            return '-' + int64toString(n.lo, n.hi);\n        }\n        return int64toString(this.lo, this.hi);\n    }\n    /**\n     * Convert to native bigint.\n     */\n    toBigInt() {\n        assertBi(BI);\n        BI.V.setInt32(0, this.lo, true);\n        BI.V.setInt32(4, this.hi, true);\n        return BI.V.getBigInt64(0, true);\n    }\n}\n/**\n * long 0 singleton.\n */\nPbLong.ZERO = new PbLong(0, 0);\n","import { WireType } from \"./binary-format-contract\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { varint32read, varint64read } from \"./goog-varint\";\nconst defaultsRead = {\n    readUnknownField: true,\n    readerFactory: bytes => new BinaryReader(bytes),\n};\n/**\n * Make options for reading binary data form partial options.\n */\nexport function binaryReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\nexport class BinaryReader {\n    constructor(buf, textDecoder) {\n        this.varint64 = varint64read; // dirty cast for `this`\n        /**\n         * Read a `uint32` field, an unsigned 32 bit varint.\n         */\n        this.uint32 = varint32read; // dirty cast for `this` and access to protected `buf`\n        this.buf = buf;\n        this.len = buf.length;\n        this.pos = 0;\n        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);\n        this.textDecoder = textDecoder !== null && textDecoder !== void 0 ? textDecoder : new TextDecoder(\"utf-8\", {\n            fatal: true,\n            ignoreBOM: true,\n        });\n    }\n    /**\n     * Reads a tag - field number and wire type.\n     */\n    tag() {\n        let tag = this.uint32(), fieldNo = tag >>> 3, wireType = tag & 7;\n        if (fieldNo <= 0 || wireType < 0 || wireType > 5)\n            throw new Error(\"illegal tag: field no \" + fieldNo + \" wire type \" + wireType);\n        return [fieldNo, wireType];\n    }\n    /**\n     * Skip one element on the wire and return the skipped data.\n     * Supports WireType.StartGroup since v2.0.0-alpha.23.\n     */\n    skip(wireType) {\n        let start = this.pos;\n        // noinspection FallThroughInSwitchStatementJS\n        switch (wireType) {\n            case WireType.Varint:\n                while (this.buf[this.pos++] & 0x80) {\n                    // ignore\n                }\n                break;\n            case WireType.Bit64:\n                this.pos += 4;\n            case WireType.Bit32:\n                this.pos += 4;\n                break;\n            case WireType.LengthDelimited:\n                let len = this.uint32();\n                this.pos += len;\n                break;\n            case WireType.StartGroup:\n                // From descriptor.proto: Group type is deprecated, not supported in proto3.\n                // But we must still be able to parse and treat as unknown.\n                let t;\n                while ((t = this.tag()[1]) !== WireType.EndGroup) {\n                    this.skip(t);\n                }\n                break;\n            default:\n                throw new Error(\"cant skip wire type \" + wireType);\n        }\n        this.assertBounds();\n        return this.buf.subarray(start, this.pos);\n    }\n    /**\n     * Throws error if position in byte array is out of range.\n     */\n    assertBounds() {\n        if (this.pos > this.len)\n            throw new RangeError(\"premature EOF\");\n    }\n    /**\n     * Read a `int32` field, a signed 32 bit varint.\n     */\n    int32() {\n        return this.uint32() | 0;\n    }\n    /**\n     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32() {\n        let zze = this.uint32();\n        // decode zigzag\n        return (zze >>> 1) ^ -(zze & 1);\n    }\n    /**\n     * Read a `int64` field, a signed 64-bit varint.\n     */\n    int64() {\n        return new PbLong(...this.varint64());\n    }\n    /**\n     * Read a `uint64` field, an unsigned 64-bit varint.\n     */\n    uint64() {\n        return new PbULong(...this.varint64());\n    }\n    /**\n     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64() {\n        let [lo, hi] = this.varint64();\n        // decode zig zag\n        let s = -(lo & 1);\n        lo = ((lo >>> 1 | (hi & 1) << 31) ^ s);\n        hi = (hi >>> 1 ^ s);\n        return new PbLong(lo, hi);\n    }\n    /**\n     * Read a `bool` field, a variant.\n     */\n    bool() {\n        let [lo, hi] = this.varint64();\n        return lo !== 0 || hi !== 0;\n    }\n    /**\n     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32() {\n        return this.view.getUint32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32() {\n        return this.view.getInt32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64() {\n        return new PbULong(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64() {\n        return new PbLong(this.sfixed32(), this.sfixed32());\n    }\n    /**\n     * Read a `float` field, 32-bit floating point number.\n     */\n    float() {\n        return this.view.getFloat32((this.pos += 4) - 4, true);\n    }\n    /**\n     * Read a `double` field, a 64-bit floating point number.\n     */\n    double() {\n        return this.view.getFloat64((this.pos += 8) - 8, true);\n    }\n    /**\n     * Read a `bytes` field, length-delimited arbitrary data.\n     */\n    bytes() {\n        let len = this.uint32();\n        let start = this.pos;\n        this.pos += len;\n        this.assertBounds();\n        return this.buf.subarray(start, start + len);\n    }\n    /**\n     * Read a `string` field, length-delimited data converted to UTF-8 text.\n     */\n    string() {\n        return this.textDecoder.decode(this.bytes());\n    }\n}\n","/**\n * assert that condition is true or throw error (with message)\n */\nexport function assert(condition, msg) {\n    if (!condition) {\n        throw new Error(msg);\n    }\n}\n/**\n * assert that value cannot exist = type `never`. throw runtime error if it does.\n */\nexport function assertNever(value, msg) {\n    throw new Error(msg !== null && msg !== void 0 ? msg : 'Unexpected object: ' + value);\n}\nconst FLOAT32_MAX = 3.4028234663852886e+38, FLOAT32_MIN = -3.4028234663852886e+38, UINT32_MAX = 0xFFFFFFFF, INT32_MAX = 0X7FFFFFFF, INT32_MIN = -0X80000000;\nexport function assertInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid int 32: ' + typeof arg);\n    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN)\n        throw new Error('invalid int 32: ' + arg);\n}\nexport function assertUInt32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid uint 32: ' + typeof arg);\n    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0)\n        throw new Error('invalid uint 32: ' + arg);\n}\nexport function assertFloat32(arg) {\n    if (typeof arg !== \"number\")\n        throw new Error('invalid float 32: ' + typeof arg);\n    if (!Number.isFinite(arg))\n        return;\n    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN)\n        throw new Error('invalid float 32: ' + arg);\n}\n","import { PbLong, PbULong } from \"./pb-long\";\nimport { varint32write, varint64write } from \"./goog-varint\";\nimport { assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nconst defaultsWrite = {\n    writeUnknownFields: true,\n    writerFactory: () => new BinaryWriter(),\n};\n/**\n * Make options for writing binary data form partial options.\n */\nexport function binaryWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\nexport class BinaryWriter {\n    constructor(textEncoder) {\n        /**\n         * Previous fork states.\n         */\n        this.stack = [];\n        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();\n        this.chunks = [];\n        this.buf = [];\n    }\n    /**\n     * Return all bytes written and reset this writer.\n     */\n    finish() {\n        this.chunks.push(new Uint8Array(this.buf)); // flush the buffer\n        let len = 0;\n        for (let i = 0; i < this.chunks.length; i++)\n            len += this.chunks[i].length;\n        let bytes = new Uint8Array(len);\n        let offset = 0;\n        for (let i = 0; i < this.chunks.length; i++) {\n            bytes.set(this.chunks[i], offset);\n            offset += this.chunks[i].length;\n        }\n        this.chunks = [];\n        return bytes;\n    }\n    /**\n     * Start a new fork for length-delimited data like a message\n     * or a packed repeated field.\n     *\n     * Must be joined later with `join()`.\n     */\n    fork() {\n        this.stack.push({ chunks: this.chunks, buf: this.buf });\n        this.chunks = [];\n        this.buf = [];\n        return this;\n    }\n    /**\n     * Join the last fork. Write its length and bytes, then\n     * return to the previous state.\n     */\n    join() {\n        // get chunk of fork\n        let chunk = this.finish();\n        // restore previous state\n        let prev = this.stack.pop();\n        if (!prev)\n            throw new Error('invalid state, fork stack empty');\n        this.chunks = prev.chunks;\n        this.buf = prev.buf;\n        // write length of chunk as varint\n        this.uint32(chunk.byteLength);\n        return this.raw(chunk);\n    }\n    /**\n     * Writes a tag (field number and wire type).\n     *\n     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.\n     *\n     * Generated code should compute the tag ahead of time and call `uint32()`.\n     */\n    tag(fieldNo, type) {\n        return this.uint32((fieldNo << 3 | type) >>> 0);\n    }\n    /**\n     * Write a chunk of raw bytes.\n     */\n    raw(chunk) {\n        if (this.buf.length) {\n            this.chunks.push(new Uint8Array(this.buf));\n            this.buf = [];\n        }\n        this.chunks.push(chunk);\n        return this;\n    }\n    /**\n     * Write a `uint32` value, an unsigned 32 bit varint.\n     */\n    uint32(value) {\n        assertUInt32(value);\n        // write value as varint 32, inlined for speed\n        while (value > 0x7f) {\n            this.buf.push((value & 0x7f) | 0x80);\n            value = value >>> 7;\n        }\n        this.buf.push(value);\n        return this;\n    }\n    /**\n     * Write a `int32` value, a signed 32 bit varint.\n     */\n    int32(value) {\n        assertInt32(value);\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `bool` value, a variant.\n     */\n    bool(value) {\n        this.buf.push(value ? 1 : 0);\n        return this;\n    }\n    /**\n     * Write a `bytes` value, length-delimited arbitrary data.\n     */\n    bytes(value) {\n        this.uint32(value.byteLength); // write length of chunk as varint\n        return this.raw(value);\n    }\n    /**\n     * Write a `string` value, length-delimited data converted to UTF-8 text.\n     */\n    string(value) {\n        let chunk = this.textEncoder.encode(value);\n        this.uint32(chunk.byteLength); // write length of chunk as varint\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `float` value, 32-bit floating point number.\n     */\n    float(value) {\n        assertFloat32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setFloat32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `double` value, a 64-bit floating point number.\n     */\n    double(value) {\n        let chunk = new Uint8Array(8);\n        new DataView(chunk.buffer).setFloat64(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.\n     */\n    fixed32(value) {\n        assertUInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setUint32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.\n     */\n    sfixed32(value) {\n        assertInt32(value);\n        let chunk = new Uint8Array(4);\n        new DataView(chunk.buffer).setInt32(0, value, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.\n     */\n    sint32(value) {\n        assertInt32(value);\n        // zigzag encode\n        value = ((value << 1) ^ (value >> 31)) >>> 0;\n        varint32write(value, this.buf);\n        return this;\n    }\n    /**\n     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.\n     */\n    sfixed64(value) {\n        let chunk = new Uint8Array(8);\n        let view = new DataView(chunk.buffer);\n        let long = PbLong.from(value);\n        view.setInt32(0, long.lo, true);\n        view.setInt32(4, long.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.\n     */\n    fixed64(value) {\n        let chunk = new Uint8Array(8);\n        let view = new DataView(chunk.buffer);\n        let long = PbULong.from(value);\n        view.setInt32(0, long.lo, true);\n        view.setInt32(4, long.hi, true);\n        return this.raw(chunk);\n    }\n    /**\n     * Write a `int64` value, a signed 64-bit varint.\n     */\n    int64(value) {\n        let long = PbLong.from(value);\n        varint64write(long.lo, long.hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.\n     */\n    sint64(value) {\n        let long = PbLong.from(value), \n        // zigzag encode\n        sign = long.hi >> 31, lo = (long.lo << 1) ^ sign, hi = ((long.hi << 1) | (long.lo >>> 31)) ^ sign;\n        varint64write(lo, hi, this.buf);\n        return this;\n    }\n    /**\n     * Write a `uint64` value, an unsigned 64-bit varint.\n     */\n    uint64(value) {\n        let long = PbULong.from(value);\n        varint64write(long.lo, long.hi, this.buf);\n        return this;\n    }\n}\n","const defaultsWrite = {\n    emitDefaultValues: false,\n    enumAsInteger: false,\n    useProtoFieldName: false,\n    prettySpaces: 0,\n}, defaultsRead = {\n    ignoreUnknownFields: false,\n};\n/**\n * Make options for reading JSON data from partial options.\n */\nexport function jsonReadOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;\n}\n/**\n * Make options for writing JSON data from partial options.\n */\nexport function jsonWriteOptions(options) {\n    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;\n}\n/**\n * Merges JSON write or read options. Later values override earlier values. Type registries are merged.\n */\nexport function mergeJsonOptions(a, b) {\n    var _a, _b;\n    let c = Object.assign(Object.assign({}, a), b);\n    c.typeRegistry = [...((_a = a === null || a === void 0 ? void 0 : a.typeRegistry) !== null && _a !== void 0 ? _a : []), ...((_b = b === null || b === void 0 ? void 0 : b.typeRegistry) !== null && _b !== void 0 ? _b : [])];\n    return c;\n}\n","/**\n * The symbol used as a key on message objects to store the message type.\n *\n * Note that this is an experimental feature - it is here to stay, but\n * implementation details may change without notice.\n */\nexport const MESSAGE_TYPE = Symbol.for(\"protobuf-ts/message-type\");\n","/**\n * Converts snake_case to lowerCamelCase.\n *\n * Should behave like protoc:\n * https://github.com/protocolbuffers/protobuf/blob/e8ae137c96444ea313485ed1118c5e43b2099cf1/src/google/protobuf/compiler/java/java_helpers.cc#L118\n */\nexport function lowerCamelCase(snakeCase) {\n    let capNext = false;\n    const sb = [];\n    for (let i = 0; i < snakeCase.length; i++) {\n        let next = snakeCase.charAt(i);\n        if (next == '_') {\n            capNext = true;\n        }\n        else if (/\\d/.test(next)) {\n            sb.push(next);\n            capNext = true;\n        }\n        else if (capNext) {\n            sb.push(next.toUpperCase());\n            capNext = false;\n        }\n        else if (i == 0) {\n            sb.push(next.toLowerCase());\n        }\n        else {\n            sb.push(next);\n        }\n    }\n    return sb.join('');\n}\n","import { lowerCamelCase } from \"./lower-camel-case\";\n/**\n * Scalar value types. This is a subset of field types declared by protobuf\n * enum google.protobuf.FieldDescriptorProto.Type The types GROUP and MESSAGE\n * are omitted, but the numerical values are identical.\n */\nexport var ScalarType;\n(function (ScalarType) {\n    // 0 is reserved for errors.\n    // Order is weird for historical reasons.\n    ScalarType[ScalarType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n    ScalarType[ScalarType[\"FLOAT\"] = 2] = \"FLOAT\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT64 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT64\"] = 3] = \"INT64\";\n    ScalarType[ScalarType[\"UINT64\"] = 4] = \"UINT64\";\n    // Not ZigZag encoded.  Negative numbers take 10 bytes.  Use TYPE_SINT32 if\n    // negative values are likely.\n    ScalarType[ScalarType[\"INT32\"] = 5] = \"INT32\";\n    ScalarType[ScalarType[\"FIXED64\"] = 6] = \"FIXED64\";\n    ScalarType[ScalarType[\"FIXED32\"] = 7] = \"FIXED32\";\n    ScalarType[ScalarType[\"BOOL\"] = 8] = \"BOOL\";\n    ScalarType[ScalarType[\"STRING\"] = 9] = \"STRING\";\n    // Tag-delimited aggregate.\n    // Group type is deprecated and not supported in proto3. However, Proto3\n    // implementations should still be able to parse the group wire format and\n    // treat group fields as unknown fields.\n    // TYPE_GROUP = 10,\n    // TYPE_MESSAGE = 11,  // Length-delimited aggregate.\n    // New in version 2.\n    ScalarType[ScalarType[\"BYTES\"] = 12] = \"BYTES\";\n    ScalarType[ScalarType[\"UINT32\"] = 13] = \"UINT32\";\n    // TYPE_ENUM = 14,\n    ScalarType[ScalarType[\"SFIXED32\"] = 15] = \"SFIXED32\";\n    ScalarType[ScalarType[\"SFIXED64\"] = 16] = \"SFIXED64\";\n    ScalarType[ScalarType[\"SINT32\"] = 17] = \"SINT32\";\n    ScalarType[ScalarType[\"SINT64\"] = 18] = \"SINT64\";\n})(ScalarType || (ScalarType = {}));\n/**\n * JavaScript representation of 64 bit integral types. Equivalent to the\n * field option \"jstype\".\n *\n * By default, protobuf-ts represents 64 bit types as `bigint`.\n *\n * You can change the default behaviour by enabling the plugin parameter\n * `long_type_string`, which will represent 64 bit types as `string`.\n *\n * Alternatively, you can change the behaviour for individual fields\n * with the field option \"jstype\":\n *\n * ```protobuf\n * uint64 my_field = 1 [jstype = JS_STRING];\n * uint64 other_field = 2 [jstype = JS_NUMBER];\n * ```\n */\nexport var LongType;\n(function (LongType) {\n    /**\n     * Use JavaScript `bigint`.\n     *\n     * Field option `[jstype = JS_NORMAL]`.\n     */\n    LongType[LongType[\"BIGINT\"] = 0] = \"BIGINT\";\n    /**\n     * Use JavaScript `string`.\n     *\n     * Field option `[jstype = JS_STRING]`.\n     */\n    LongType[LongType[\"STRING\"] = 1] = \"STRING\";\n    /**\n     * Use JavaScript `number`.\n     *\n     * Large values will loose precision.\n     *\n     * Field option `[jstype = JS_NUMBER]`.\n     */\n    LongType[LongType[\"NUMBER\"] = 2] = \"NUMBER\";\n})(LongType || (LongType = {}));\n/**\n * Protobuf 2.1.0 introduced packed repeated fields.\n * Setting the field option `[packed = true]` enables packing.\n *\n * In proto3, all repeated fields are packed by default.\n * Setting the field option `[packed = false]` disables packing.\n *\n * Packed repeated fields are encoded with a single tag,\n * then a length-delimiter, then the element values.\n *\n * Unpacked repeated fields are encoded with a tag and\n * value for each element.\n *\n * `bytes` and `string` cannot be packed.\n */\nexport var RepeatType;\n(function (RepeatType) {\n    /**\n     * The field is not repeated.\n     */\n    RepeatType[RepeatType[\"NO\"] = 0] = \"NO\";\n    /**\n     * The field is repeated and should be packed.\n     * Invalid for `bytes` and `string`, they cannot be packed.\n     */\n    RepeatType[RepeatType[\"PACKED\"] = 1] = \"PACKED\";\n    /**\n     * The field is repeated but should not be packed.\n     * The only valid repeat type for repeated `bytes` and `string`.\n     */\n    RepeatType[RepeatType[\"UNPACKED\"] = 2] = \"UNPACKED\";\n})(RepeatType || (RepeatType = {}));\n/**\n * Turns PartialFieldInfo into FieldInfo.\n */\nexport function normalizeFieldInfo(field) {\n    var _a, _b, _c, _d;\n    field.localName = (_a = field.localName) !== null && _a !== void 0 ? _a : lowerCamelCase(field.name);\n    field.jsonName = (_b = field.jsonName) !== null && _b !== void 0 ? _b : lowerCamelCase(field.name);\n    field.repeat = (_c = field.repeat) !== null && _c !== void 0 ? _c : RepeatType.NO;\n    field.opt = (_d = field.opt) !== null && _d !== void 0 ? _d : (field.repeat ? false : field.oneof ? false : field.kind == \"message\");\n    return field;\n}\n/**\n * Read custom field options from a generated message type.\n *\n * @deprecated use readFieldOption()\n */\nexport function readFieldOptions(messageType, fieldName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n    return options && options[extensionName] ? extensionType.fromJson(options[extensionName]) : undefined;\n}\nexport function readFieldOption(messageType, fieldName, extensionName, extensionType) {\n    var _a;\n    const options = (_a = messageType.fields.find((m, i) => m.localName == fieldName || i == fieldName)) === null || _a === void 0 ? void 0 : _a.options;\n    if (!options) {\n        return undefined;\n    }\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\nexport function readMessageOption(messageType, extensionName, extensionType) {\n    const options = messageType.options;\n    const optionVal = options[extensionName];\n    if (optionVal === undefined) {\n        return optionVal;\n    }\n    return extensionType ? extensionType.fromJson(optionVal) : optionVal;\n}\n","/**\n * Is the given value a valid oneof group?\n *\n * We represent protobuf `oneof` as algebraic data types (ADT) in generated\n * code. But when working with messages of unknown type, the ADT does not\n * help us.\n *\n * This type guard checks if the given object adheres to the ADT rules, which\n * are as follows:\n *\n * 1) Must be an object.\n *\n * 2) Must have a \"oneofKind\" discriminator property.\n *\n * 3) If \"oneofKind\" is `undefined`, no member field is selected. The object\n * must not have any other properties.\n *\n * 4) If \"oneofKind\" is a `string`, the member field with this name is\n * selected.\n *\n * 5) If a member field is selected, the object must have a second property\n * with this name. The property must not be `undefined`.\n *\n * 6) No extra properties are allowed. The object has either one property\n * (no selection) or two properties (selection).\n *\n */\nexport function isOneofGroup(any) {\n    if (typeof any != 'object' || any === null || !any.hasOwnProperty('oneofKind')) {\n        return false;\n    }\n    switch (typeof any.oneofKind) {\n        case \"string\":\n            if (any[any.oneofKind] === undefined)\n                return false;\n            return Object.keys(any).length == 2;\n        case \"undefined\":\n            return Object.keys(any).length == 1;\n        default:\n            return false;\n    }\n}\n/**\n * Returns the value of the given field in a oneof group.\n */\nexport function getOneofValue(oneof, kind) {\n    return oneof[kind];\n}\nexport function setOneofValue(oneof, kind, value) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = kind;\n    if (value !== undefined) {\n        oneof[kind] = value;\n    }\n}\nexport function setUnknownOneofValue(oneof, kind, value) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = kind;\n    if (value !== undefined && kind !== undefined) {\n        oneof[kind] = value;\n    }\n}\n/**\n * Removes the selected field in a oneof group.\n *\n * Note that the recommended way to modify a oneof group is to set\n * a new object:\n *\n * ```ts\n * message.result = { oneofKind: undefined };\n * ```\n */\nexport function clearOneofValue(oneof) {\n    if (oneof.oneofKind !== undefined) {\n        delete oneof[oneof.oneofKind];\n    }\n    oneof.oneofKind = undefined;\n}\n/**\n * Returns the selected value of the given oneof group.\n *\n * Not that the recommended way to access a oneof group is to check\n * the \"oneofKind\" property and let TypeScript narrow down the union\n * type for you:\n *\n * ```ts\n * if (message.result.oneofKind === \"error\") {\n *   message.result.error; // string\n * }\n * ```\n *\n * In the rare case you just need the value, and do not care about\n * which protobuf field is selected, you can use this function\n * for convenience.\n */\nexport function getSelectedOneofValue(oneof) {\n    if (oneof.oneofKind === undefined) {\n        return undefined;\n    }\n    return oneof[oneof.oneofKind];\n}\n","import { LongType, ScalarType } from \"./reflection-info\";\nimport { isOneofGroup } from \"./oneof\";\n// noinspection JSMethodCanBeStatic\nexport class ReflectionTypeCheck {\n    constructor(info) {\n        var _a;\n        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n    }\n    prepare() {\n        if (this.data)\n            return;\n        const req = [], known = [], oneofs = [];\n        for (let field of this.fields) {\n            if (field.oneof) {\n                if (!oneofs.includes(field.oneof)) {\n                    oneofs.push(field.oneof);\n                    req.push(field.oneof);\n                    known.push(field.oneof);\n                }\n            }\n            else {\n                known.push(field.localName);\n                switch (field.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        if (!field.opt || field.repeat)\n                            req.push(field.localName);\n                        break;\n                    case \"message\":\n                        if (field.repeat)\n                            req.push(field.localName);\n                        break;\n                    case \"map\":\n                        req.push(field.localName);\n                        break;\n                }\n            }\n        }\n        this.data = { req, known, oneofs: Object.values(oneofs) };\n    }\n    /**\n     * Is the argument a valid message as specified by the\n     * reflection information?\n     *\n     * Checks all field types recursively. The `depth`\n     * specifies how deep into the structure the check will be.\n     *\n     * With a depth of 0, only the presence of fields\n     * is checked.\n     *\n     * With a depth of 1 or more, the field types are checked.\n     *\n     * With a depth of 2 or more, the members of map, repeated\n     * and message fields are checked.\n     *\n     * Message fields will be checked recursively with depth - 1.\n     *\n     * The number of map entries / repeated values being checked\n     * is < depth.\n     */\n    is(message, depth, allowExcessProperties = false) {\n        if (depth < 0)\n            return true;\n        if (message === null || message === undefined || typeof message != 'object')\n            return false;\n        this.prepare();\n        let keys = Object.keys(message), data = this.data;\n        // if a required field is missing in arg, this cannot be a T\n        if (keys.length < data.req.length || data.req.some(n => !keys.includes(n)))\n            return false;\n        if (!allowExcessProperties) {\n            // if the arg contains a key we dont know, this is not a literal T\n            if (keys.some(k => !data.known.includes(k)))\n                return false;\n        }\n        // \"With a depth of 0, only the presence and absence of fields is checked.\"\n        // \"With a depth of 1 or more, the field types are checked.\"\n        if (depth < 1) {\n            return true;\n        }\n        // check oneof group\n        for (const name of data.oneofs) {\n            const group = message[name];\n            if (!isOneofGroup(group))\n                return false;\n            if (group.oneofKind === undefined)\n                continue;\n            const field = this.fields.find(f => f.localName === group.oneofKind);\n            if (!field)\n                return false; // we found no field, but have a kind, something is wrong\n            if (!this.field(group[group.oneofKind], field, allowExcessProperties, depth))\n                return false;\n        }\n        // check types\n        for (const field of this.fields) {\n            if (field.oneof !== undefined)\n                continue;\n            if (!this.field(message[field.localName], field, allowExcessProperties, depth))\n                return false;\n        }\n        return true;\n    }\n    field(arg, field, allowExcessProperties, depth) {\n        let repeated = field.repeat;\n        switch (field.kind) {\n            case \"scalar\":\n                if (arg === undefined)\n                    return field.opt;\n                if (repeated)\n                    return this.scalars(arg, field.T, depth, field.L);\n                return this.scalar(arg, field.T, field.L);\n            case \"enum\":\n                if (arg === undefined)\n                    return field.opt;\n                if (repeated)\n                    return this.scalars(arg, ScalarType.INT32, depth);\n                return this.scalar(arg, ScalarType.INT32);\n            case \"message\":\n                if (arg === undefined)\n                    return true;\n                if (repeated)\n                    return this.messages(arg, field.T(), allowExcessProperties, depth);\n                return this.message(arg, field.T(), allowExcessProperties, depth);\n            case \"map\":\n                if (typeof arg != 'object' || arg === null)\n                    return false;\n                if (depth < 2)\n                    return true;\n                if (!this.mapKeys(arg, field.K, depth))\n                    return false;\n                switch (field.V.kind) {\n                    case \"scalar\":\n                        return this.scalars(Object.values(arg), field.V.T, depth, field.V.L);\n                    case \"enum\":\n                        return this.scalars(Object.values(arg), ScalarType.INT32, depth);\n                    case \"message\":\n                        return this.messages(Object.values(arg), field.V.T(), allowExcessProperties, depth);\n                }\n                break;\n        }\n        return true;\n    }\n    message(arg, type, allowExcessProperties, depth) {\n        if (allowExcessProperties) {\n            return type.isAssignable(arg, depth);\n        }\n        return type.is(arg, depth);\n    }\n    messages(arg, type, allowExcessProperties, depth) {\n        if (!Array.isArray(arg))\n            return false;\n        if (depth < 2)\n            return true;\n        if (allowExcessProperties) {\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!type.isAssignable(arg[i], depth - 1))\n                    return false;\n        }\n        else {\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!type.is(arg[i], depth - 1))\n                    return false;\n        }\n        return true;\n    }\n    scalar(arg, type, longType) {\n        let argType = typeof arg;\n        switch (type) {\n            case ScalarType.UINT64:\n            case ScalarType.FIXED64:\n            case ScalarType.INT64:\n            case ScalarType.SFIXED64:\n            case ScalarType.SINT64:\n                switch (longType) {\n                    case LongType.BIGINT:\n                        return argType == \"bigint\";\n                    case LongType.NUMBER:\n                        return argType == \"number\" && !isNaN(arg);\n                    default:\n                        return argType == \"string\";\n                }\n            case ScalarType.BOOL:\n                return argType == 'boolean';\n            case ScalarType.STRING:\n                return argType == 'string';\n            case ScalarType.BYTES:\n                return arg instanceof Uint8Array;\n            case ScalarType.DOUBLE:\n            case ScalarType.FLOAT:\n                return argType == 'number' && !isNaN(arg);\n            default:\n                // case ScalarType.UINT32:\n                // case ScalarType.FIXED32:\n                // case ScalarType.INT32:\n                // case ScalarType.SINT32:\n                // case ScalarType.SFIXED32:\n                return argType == 'number' && Number.isInteger(arg);\n        }\n    }\n    scalars(arg, type, depth, longType) {\n        if (!Array.isArray(arg))\n            return false;\n        if (depth < 2)\n            return true;\n        if (Array.isArray(arg))\n            for (let i = 0; i < arg.length && i < depth; i++)\n                if (!this.scalar(arg[i], type, longType))\n                    return false;\n        return true;\n    }\n    mapKeys(map, type, depth) {\n        let keys = Object.keys(map);\n        switch (type) {\n            case ScalarType.INT32:\n            case ScalarType.FIXED32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n            case ScalarType.UINT32:\n                return this.scalars(keys.slice(0, depth).map(k => parseInt(k)), type, depth);\n            case ScalarType.BOOL:\n                return this.scalars(keys.slice(0, depth).map(k => k == 'true' ? true : k == 'false' ? false : k), type, depth);\n            default:\n                return this.scalars(keys, type, depth, LongType.STRING);\n        }\n    }\n}\n","import { LongType } from \"./reflection-info\";\n/**\n * Utility method to convert a PbLong or PbUlong to a JavaScript\n * representation during runtime.\n *\n * Works with generated field information, `undefined` is equivalent\n * to `STRING`.\n */\nexport function reflectionLongConvert(long, type) {\n    switch (type) {\n        case LongType.BIGINT:\n            return long.toBigInt();\n        case LongType.NUMBER:\n            return long.toNumber();\n        default:\n            // case undefined:\n            // case LongType.STRING:\n            return long.toString();\n    }\n}\n","import { isJsonObject, typeofJsonValue } from \"./json-typings\";\nimport { base64decode } from \"./base64\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\n/**\n * Reads proto3 messages in canonical JSON format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonReader {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        var _a;\n        if (this.fMap === undefined) {\n            this.fMap = {};\n            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n            for (const field of fieldsInput) {\n                this.fMap[field.name] = field;\n                this.fMap[field.jsonName] = field;\n                this.fMap[field.localName] = field;\n            }\n        }\n    }\n    // Cannot parse JSON <type of jsonValue> for <type name>#<fieldName>.\n    assert(condition, fieldName, jsonValue) {\n        if (!condition) {\n            let what = typeofJsonValue(jsonValue);\n            if (what == \"number\" || what == \"boolean\")\n                what = jsonValue.toString();\n            throw new Error(`Cannot parse JSON ${what} for ${this.info.typeName}#${fieldName}`);\n        }\n    }\n    /**\n     * Reads a message from canonical JSON format into the target message.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    read(input, message, options) {\n        this.prepare();\n        const oneofsHandled = [];\n        for (const [jsonKey, jsonValue] of Object.entries(input)) {\n            const field = this.fMap[jsonKey];\n            if (!field) {\n                if (!options.ignoreUnknownFields)\n                    throw new Error(`Found unknown field while reading ${this.info.typeName} from JSON format. JSON key: ${jsonKey}`);\n                continue;\n            }\n            const localName = field.localName;\n            // handle oneof ADT\n            let target; // this will be the target for the field value, whether it is member of a oneof or not\n            if (field.oneof) {\n                if (jsonValue === null && (field.kind !== 'enum' || field.T()[0] !== 'google.protobuf.NullValue')) {\n                    continue;\n                }\n                // since json objects are unordered by specification, it is not possible to take the last of multiple oneofs\n                if (oneofsHandled.includes(field.oneof))\n                    throw new Error(`Multiple members of the oneof group \"${field.oneof}\" of ${this.info.typeName} are present in JSON.`);\n                oneofsHandled.push(field.oneof);\n                target = message[field.oneof] = {\n                    oneofKind: localName\n                };\n            }\n            else {\n                target = message;\n            }\n            // we have handled oneof above. we just have read the value into `target`.\n            if (field.kind == 'map') {\n                if (jsonValue === null) {\n                    continue;\n                }\n                // check input\n                this.assert(isJsonObject(jsonValue), field.name, jsonValue);\n                // our target to put map entries into\n                const fieldObj = target[localName];\n                // read entries\n                for (const [jsonObjKey, jsonObjValue] of Object.entries(jsonValue)) {\n                    this.assert(jsonObjValue !== null, field.name + \" map value\", null);\n                    // read value\n                    let val;\n                    switch (field.V.kind) {\n                        case \"message\":\n                            val = field.V.T().internalJsonRead(jsonObjValue, options);\n                            break;\n                        case \"enum\":\n                            val = this.enum(field.V.T(), jsonObjValue, field.name, options.ignoreUnknownFields);\n                            if (val === false)\n                                continue;\n                            break;\n                        case \"scalar\":\n                            val = this.scalar(jsonObjValue, field.V.T, field.V.L, field.name);\n                            break;\n                    }\n                    this.assert(val !== undefined, field.name + \" map value\", jsonObjValue);\n                    // read key\n                    let key = jsonObjKey;\n                    if (field.K == ScalarType.BOOL)\n                        key = key == \"true\" ? true : key == \"false\" ? false : key;\n                    key = this.scalar(key, field.K, LongType.STRING, field.name).toString();\n                    fieldObj[key] = val;\n                }\n            }\n            else if (field.repeat) {\n                if (jsonValue === null)\n                    continue;\n                // check input\n                this.assert(Array.isArray(jsonValue), field.name, jsonValue);\n                // our target to put array entries into\n                const fieldArr = target[localName];\n                // read array entries\n                for (const jsonItem of jsonValue) {\n                    this.assert(jsonItem !== null, field.name, null);\n                    let val;\n                    switch (field.kind) {\n                        case \"message\":\n                            val = field.T().internalJsonRead(jsonItem, options);\n                            break;\n                        case \"enum\":\n                            val = this.enum(field.T(), jsonItem, field.name, options.ignoreUnknownFields);\n                            if (val === false)\n                                continue;\n                            break;\n                        case \"scalar\":\n                            val = this.scalar(jsonItem, field.T, field.L, field.name);\n                            break;\n                    }\n                    this.assert(val !== undefined, field.name, jsonValue);\n                    fieldArr.push(val);\n                }\n            }\n            else {\n                switch (field.kind) {\n                    case \"message\":\n                        if (jsonValue === null && field.T().typeName != 'google.protobuf.Value') {\n                            this.assert(field.oneof === undefined, field.name + \" (oneof member)\", null);\n                            continue;\n                        }\n                        target[localName] = field.T().internalJsonRead(jsonValue, options, target[localName]);\n                        break;\n                    case \"enum\":\n                        let val = this.enum(field.T(), jsonValue, field.name, options.ignoreUnknownFields);\n                        if (val === false)\n                            continue;\n                        target[localName] = val;\n                        break;\n                    case \"scalar\":\n                        target[localName] = this.scalar(jsonValue, field.T, field.L, field.name);\n                        break;\n                }\n            }\n        }\n    }\n    /**\n     * Returns `false` for unrecognized string representations.\n     *\n     * google.protobuf.NullValue accepts only JSON `null` (or the old `\"NULL_VALUE\"`).\n     */\n    enum(type, json, fieldName, ignoreUnknownFields) {\n        if (type[0] == 'google.protobuf.NullValue')\n            assert(json === null || json === \"NULL_VALUE\", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} only accepts null.`);\n        if (json === null)\n            // we require 0 to be default value for all enums\n            return 0;\n        switch (typeof json) {\n            case \"number\":\n                assert(Number.isInteger(json), `Unable to parse field ${this.info.typeName}#${fieldName}, enum can only be integral number, got ${json}.`);\n                return json;\n            case \"string\":\n                let localEnumName = json;\n                if (type[2] && json.substring(0, type[2].length) === type[2])\n                    // lookup without the shared prefix\n                    localEnumName = json.substring(type[2].length);\n                let enumNumber = type[1][localEnumName];\n                if (typeof enumNumber === 'undefined' && ignoreUnknownFields) {\n                    return false;\n                }\n                assert(typeof enumNumber == \"number\", `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} has no value for \"${json}\".`);\n                return enumNumber;\n        }\n        assert(false, `Unable to parse field ${this.info.typeName}#${fieldName}, cannot parse enum value from ${typeof json}\".`);\n    }\n    scalar(json, type, longType, fieldName) {\n        let e;\n        try {\n            switch (type) {\n                // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n                // Either numbers or strings are accepted. Exponent notation is also accepted.\n                case ScalarType.DOUBLE:\n                case ScalarType.FLOAT:\n                    if (json === null)\n                        return .0;\n                    if (json === \"NaN\")\n                        return Number.NaN;\n                    if (json === \"Infinity\")\n                        return Number.POSITIVE_INFINITY;\n                    if (json === \"-Infinity\")\n                        return Number.NEGATIVE_INFINITY;\n                    if (json === \"\") {\n                        e = \"empty string\";\n                        break;\n                    }\n                    if (typeof json == \"string\" && json.trim().length !== json.length) {\n                        e = \"extra whitespace\";\n                        break;\n                    }\n                    if (typeof json != \"string\" && typeof json != \"number\") {\n                        break;\n                    }\n                    let float = Number(json);\n                    if (Number.isNaN(float)) {\n                        e = \"not a number\";\n                        break;\n                    }\n                    if (!Number.isFinite(float)) {\n                        // infinity and -infinity are handled by string representation above, so this is an error\n                        e = \"too large or small\";\n                        break;\n                    }\n                    if (type == ScalarType.FLOAT)\n                        assertFloat32(float);\n                    return float;\n                // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n                case ScalarType.INT32:\n                case ScalarType.FIXED32:\n                case ScalarType.SFIXED32:\n                case ScalarType.SINT32:\n                case ScalarType.UINT32:\n                    if (json === null)\n                        return 0;\n                    let int32;\n                    if (typeof json == \"number\")\n                        int32 = json;\n                    else if (json === \"\")\n                        e = \"empty string\";\n                    else if (typeof json == \"string\") {\n                        if (json.trim().length !== json.length)\n                            e = \"extra whitespace\";\n                        else\n                            int32 = Number(json);\n                    }\n                    if (int32 === undefined)\n                        break;\n                    if (type == ScalarType.UINT32)\n                        assertUInt32(int32);\n                    else\n                        assertInt32(int32);\n                    return int32;\n                // int64, fixed64, uint64: JSON value will be a decimal string. Either numbers or strings are accepted.\n                case ScalarType.INT64:\n                case ScalarType.SFIXED64:\n                case ScalarType.SINT64:\n                    if (json === null)\n                        return reflectionLongConvert(PbLong.ZERO, longType);\n                    if (typeof json != \"number\" && typeof json != \"string\")\n                        break;\n                    return reflectionLongConvert(PbLong.from(json), longType);\n                case ScalarType.FIXED64:\n                case ScalarType.UINT64:\n                    if (json === null)\n                        return reflectionLongConvert(PbULong.ZERO, longType);\n                    if (typeof json != \"number\" && typeof json != \"string\")\n                        break;\n                    return reflectionLongConvert(PbULong.from(json), longType);\n                // bool:\n                case ScalarType.BOOL:\n                    if (json === null)\n                        return false;\n                    if (typeof json !== \"boolean\")\n                        break;\n                    return json;\n                // string:\n                case ScalarType.STRING:\n                    if (json === null)\n                        return \"\";\n                    if (typeof json !== \"string\") {\n                        e = \"extra whitespace\";\n                        break;\n                    }\n                    try {\n                        encodeURIComponent(json);\n                    }\n                    catch (e) {\n                        e = \"invalid UTF8\";\n                        break;\n                    }\n                    return json;\n                // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n                // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n                case ScalarType.BYTES:\n                    if (json === null || json === \"\")\n                        return new Uint8Array(0);\n                    if (typeof json !== 'string')\n                        break;\n                    return base64decode(json);\n            }\n        }\n        catch (error) {\n            e = error.message;\n        }\n        this.assert(false, fieldName + (e ? \" - \" + e : \"\"), json);\n    }\n}\n","import { base64encode } from \"./base64\";\nimport { PbLong, PbULong } from \"./pb-long\";\nimport { ScalarType } from \"./reflection-info\";\nimport { assert, assertFloat32, assertInt32, assertUInt32 } from \"./assert\";\n/**\n * Writes proto3 messages in canonical JSON format using reflection\n * information.\n *\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n */\nexport class ReflectionJsonWriter {\n    constructor(info) {\n        var _a;\n        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];\n    }\n    /**\n     * Converts the message to a JSON object, based on the field descriptors.\n     */\n    write(message, options) {\n        const json = {}, source = message;\n        for (const field of this.fields) {\n            // field is not part of a oneof, simply write as is\n            if (!field.oneof) {\n                let jsonValue = this.field(field, source[field.localName], options);\n                if (jsonValue !== undefined)\n                    json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n                continue;\n            }\n            // field is part of a oneof\n            const group = source[field.oneof];\n            if (group.oneofKind !== field.localName)\n                continue; // not selected, skip\n            const opt = field.kind == 'scalar' || field.kind == 'enum'\n                ? Object.assign(Object.assign({}, options), { emitDefaultValues: true }) : options;\n            let jsonValue = this.field(field, group[field.localName], opt);\n            assert(jsonValue !== undefined);\n            json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;\n        }\n        return json;\n    }\n    field(field, value, options) {\n        let jsonValue = undefined;\n        if (field.kind == 'map') {\n            assert(typeof value == \"object\" && value !== null);\n            const jsonObj = {};\n            switch (field.V.kind) {\n                case \"scalar\":\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        const val = this.scalar(field.V.T, entryValue, field.name, false, true);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n                case \"message\":\n                    const messageType = field.V.T();\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        const val = this.message(messageType, entryValue, field.name, options);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n                case \"enum\":\n                    const enumInfo = field.V.T();\n                    for (const [entryKey, entryValue] of Object.entries(value)) {\n                        assert(entryValue === undefined || typeof entryValue == 'number');\n                        const val = this.enum(enumInfo, entryValue, field.name, false, true, options.enumAsInteger);\n                        assert(val !== undefined);\n                        jsonObj[entryKey.toString()] = val; // JSON standard allows only (double quoted) string as property key\n                    }\n                    break;\n            }\n            if (options.emitDefaultValues || Object.keys(jsonObj).length > 0)\n                jsonValue = jsonObj;\n        }\n        else if (field.repeat) {\n            assert(Array.isArray(value));\n            const jsonArr = [];\n            switch (field.kind) {\n                case \"scalar\":\n                    for (let i = 0; i < value.length; i++) {\n                        const val = this.scalar(field.T, value[i], field.name, field.opt, true);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n                case \"enum\":\n                    const enumInfo = field.T();\n                    for (let i = 0; i < value.length; i++) {\n                        assert(value[i] === undefined || typeof value[i] == 'number');\n                        const val = this.enum(enumInfo, value[i], field.name, field.opt, true, options.enumAsInteger);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n                case \"message\":\n                    const messageType = field.T();\n                    for (let i = 0; i < value.length; i++) {\n                        const val = this.message(messageType, value[i], field.name, options);\n                        assert(val !== undefined);\n                        jsonArr.push(val);\n                    }\n                    break;\n            }\n            // add converted array to json output\n            if (options.emitDefaultValues || jsonArr.length > 0 || options.emitDefaultValues)\n                jsonValue = jsonArr;\n        }\n        else {\n            switch (field.kind) {\n                case \"scalar\":\n                    jsonValue = this.scalar(field.T, value, field.name, field.opt, options.emitDefaultValues);\n                    break;\n                case \"enum\":\n                    jsonValue = this.enum(field.T(), value, field.name, field.opt, options.emitDefaultValues, options.enumAsInteger);\n                    break;\n                case \"message\":\n                    jsonValue = this.message(field.T(), value, field.name, options);\n                    break;\n            }\n        }\n        return jsonValue;\n    }\n    /**\n     * Returns `null` as the default for google.protobuf.NullValue.\n     */\n    enum(type, value, fieldName, optional, emitDefaultValues, enumAsInteger) {\n        if (type[0] == 'google.protobuf.NullValue')\n            return !emitDefaultValues && !optional ? undefined : null;\n        if (value === undefined) {\n            assert(optional);\n            return undefined;\n        }\n        if (value === 0 && !emitDefaultValues && !optional)\n            // we require 0 to be default value for all enums\n            return undefined;\n        assert(typeof value == 'number');\n        assert(Number.isInteger(value));\n        if (enumAsInteger || !type[1].hasOwnProperty(value))\n            // if we don't now the enum value, just return the number\n            return value;\n        if (type[2])\n            // restore the dropped prefix\n            return type[2] + type[1][value];\n        return type[1][value];\n    }\n    message(type, value, fieldName, options) {\n        if (value === undefined)\n            return options.emitDefaultValues ? null : undefined;\n        return type.internalJsonWrite(value, options);\n    }\n    scalar(type, value, fieldName, optional, emitDefaultValues) {\n        if (value === undefined) {\n            assert(optional);\n            return undefined;\n        }\n        const ed = emitDefaultValues || optional;\n        // noinspection FallThroughInSwitchStatementJS\n        switch (type) {\n            // int32, fixed32, uint32: JSON value will be a decimal number. Either numbers or strings are accepted.\n            case ScalarType.INT32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assertInt32(value);\n                return value;\n            case ScalarType.FIXED32:\n            case ScalarType.UINT32:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assertUInt32(value);\n                return value;\n            // float, double: JSON value will be a number or one of the special string values \"NaN\", \"Infinity\", and \"-Infinity\".\n            // Either numbers or strings are accepted. Exponent notation is also accepted.\n            case ScalarType.FLOAT:\n                assertFloat32(value);\n            case ScalarType.DOUBLE:\n                if (value === 0)\n                    return ed ? 0 : undefined;\n                assert(typeof value == 'number');\n                if (Number.isNaN(value))\n                    return 'NaN';\n                if (value === Number.POSITIVE_INFINITY)\n                    return 'Infinity';\n                if (value === Number.NEGATIVE_INFINITY)\n                    return '-Infinity';\n                return value;\n            // string:\n            case ScalarType.STRING:\n                if (value === \"\")\n                    return ed ? '' : undefined;\n                assert(typeof value == 'string');\n                return value;\n            // bool:\n            case ScalarType.BOOL:\n                if (value === false)\n                    return ed ? false : undefined;\n                assert(typeof value == 'boolean');\n                return value;\n            // JSON value will be a decimal string. Either numbers or strings are accepted.\n            case ScalarType.UINT64:\n            case ScalarType.FIXED64:\n                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n                let ulong = PbULong.from(value);\n                if (ulong.isZero() && !ed)\n                    return undefined;\n                return ulong.toString();\n            // JSON value will be a decimal string. Either numbers or strings are accepted.\n            case ScalarType.INT64:\n            case ScalarType.SFIXED64:\n            case ScalarType.SINT64:\n                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');\n                let long = PbLong.from(value);\n                if (long.isZero() && !ed)\n                    return undefined;\n                return long.toString();\n            // bytes: JSON value will be the data encoded as a string using standard base64 encoding with paddings.\n            // Either standard or URL-safe base64 encoding with/without paddings are accepted.\n            case ScalarType.BYTES:\n                assert(value instanceof Uint8Array);\n                if (!value.byteLength)\n                    return ed ? \"\" : undefined;\n                return base64encode(value);\n        }\n    }\n}\n","import { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Creates the default value for a scalar type.\n */\nexport function reflectionScalarDefault(type, longType = LongType.STRING) {\n    switch (type) {\n        case ScalarType.BOOL:\n            return false;\n        case ScalarType.UINT64:\n        case ScalarType.FIXED64:\n            return reflectionLongConvert(PbULong.ZERO, longType);\n        case ScalarType.INT64:\n        case ScalarType.SFIXED64:\n        case ScalarType.SINT64:\n            return reflectionLongConvert(PbLong.ZERO, longType);\n        case ScalarType.DOUBLE:\n        case ScalarType.FLOAT:\n            return 0.0;\n        case ScalarType.BYTES:\n            return new Uint8Array(0);\n        case ScalarType.STRING:\n            return \"\";\n        default:\n            // case ScalarType.INT32:\n            // case ScalarType.UINT32:\n            // case ScalarType.SINT32:\n            // case ScalarType.FIXED32:\n            // case ScalarType.SFIXED32:\n            return 0;\n    }\n}\n","import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { LongType, ScalarType } from \"./reflection-info\";\nimport { reflectionLongConvert } from \"./reflection-long-convert\";\nimport { reflectionScalarDefault } from \"./reflection-scalar-default\";\n/**\n * Reads proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryReader {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        var _a;\n        if (!this.fieldNoToField) {\n            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];\n            this.fieldNoToField = new Map(fieldsInput.map(field => [field.no, field]));\n        }\n    }\n    /**\n     * Reads a message from binary format into the target message.\n     *\n     * Repeated fields are appended. Map entries are added, overwriting\n     * existing keys.\n     *\n     * If a message field is already present, it will be merged with the\n     * new data.\n     */\n    read(reader, message, options, length) {\n        this.prepare();\n        const end = length === undefined ? reader.len : reader.pos + length;\n        while (reader.pos < end) {\n            // read the tag and find the field\n            const [fieldNo, wireType] = reader.tag(), field = this.fieldNoToField.get(fieldNo);\n            if (!field) {\n                let u = options.readUnknownField;\n                if (u == \"throw\")\n                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.info.typeName}`);\n                let d = reader.skip(wireType);\n                if (u !== false)\n                    (u === true ? UnknownFieldHandler.onRead : u)(this.info.typeName, message, fieldNo, wireType, d);\n                continue;\n            }\n            // target object for the field we are reading\n            let target = message, repeated = field.repeat, localName = field.localName;\n            // if field is member of oneof ADT, use ADT as target\n            if (field.oneof) {\n                target = target[field.oneof];\n                // if other oneof member selected, set new ADT\n                if (target.oneofKind !== localName)\n                    target = message[field.oneof] = {\n                        oneofKind: localName\n                    };\n            }\n            // we have handled oneof above, we just have read the value into `target[localName]`\n            switch (field.kind) {\n                case \"scalar\":\n                case \"enum\":\n                    let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                    let L = field.kind == \"scalar\" ? field.L : undefined;\n                    if (repeated) {\n                        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                        if (wireType == WireType.LengthDelimited && T != ScalarType.STRING && T != ScalarType.BYTES) {\n                            let e = reader.uint32() + reader.pos;\n                            while (reader.pos < e)\n                                arr.push(this.scalar(reader, T, L));\n                        }\n                        else\n                            arr.push(this.scalar(reader, T, L));\n                    }\n                    else\n                        target[localName] = this.scalar(reader, T, L);\n                    break;\n                case \"message\":\n                    if (repeated) {\n                        let arr = target[localName]; // safe to assume presence of array, oneof cannot contain repeated values\n                        let msg = field.T().internalBinaryRead(reader, reader.uint32(), options);\n                        arr.push(msg);\n                    }\n                    else\n                        target[localName] = field.T().internalBinaryRead(reader, reader.uint32(), options, target[localName]);\n                    break;\n                case \"map\":\n                    let [mapKey, mapVal] = this.mapEntry(field, reader, options);\n                    // safe to assume presence of map object, oneof cannot contain repeated values\n                    target[localName][mapKey] = mapVal;\n                    break;\n            }\n        }\n    }\n    /**\n     * Read a map field, expecting key field = 1, value field = 2\n     */\n    mapEntry(field, reader, options) {\n        let length = reader.uint32();\n        let end = reader.pos + length;\n        let key = undefined; // javascript only allows number or string for object properties\n        let val = undefined;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case 1:\n                    if (field.K == ScalarType.BOOL)\n                        key = reader.bool().toString();\n                    else\n                        // long types are read as string, number types are okay as number\n                        key = this.scalar(reader, field.K, LongType.STRING);\n                    break;\n                case 2:\n                    switch (field.V.kind) {\n                        case \"scalar\":\n                            val = this.scalar(reader, field.V.T, field.V.L);\n                            break;\n                        case \"enum\":\n                            val = reader.int32();\n                            break;\n                        case \"message\":\n                            val = field.V.T().internalBinaryRead(reader, reader.uint32(), options);\n                            break;\n                    }\n                    break;\n                default:\n                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) in map entry for ${this.info.typeName}#${field.name}`);\n            }\n        }\n        if (key === undefined) {\n            let keyRaw = reflectionScalarDefault(field.K);\n            key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;\n        }\n        if (val === undefined)\n            switch (field.V.kind) {\n                case \"scalar\":\n                    val = reflectionScalarDefault(field.V.T, field.V.L);\n                    break;\n                case \"enum\":\n                    val = 0;\n                    break;\n                case \"message\":\n                    val = field.V.T().create();\n                    break;\n            }\n        return [key, val];\n    }\n    scalar(reader, type, longType) {\n        switch (type) {\n            case ScalarType.INT32:\n                return reader.int32();\n            case ScalarType.STRING:\n                return reader.string();\n            case ScalarType.BOOL:\n                return reader.bool();\n            case ScalarType.DOUBLE:\n                return reader.double();\n            case ScalarType.FLOAT:\n                return reader.float();\n            case ScalarType.INT64:\n                return reflectionLongConvert(reader.int64(), longType);\n            case ScalarType.UINT64:\n                return reflectionLongConvert(reader.uint64(), longType);\n            case ScalarType.FIXED64:\n                return reflectionLongConvert(reader.fixed64(), longType);\n            case ScalarType.FIXED32:\n                return reader.fixed32();\n            case ScalarType.BYTES:\n                return reader.bytes();\n            case ScalarType.UINT32:\n                return reader.uint32();\n            case ScalarType.SFIXED32:\n                return reader.sfixed32();\n            case ScalarType.SFIXED64:\n                return reflectionLongConvert(reader.sfixed64(), longType);\n            case ScalarType.SINT32:\n                return reader.sint32();\n            case ScalarType.SINT64:\n                return reflectionLongConvert(reader.sint64(), longType);\n        }\n    }\n}\n","import { UnknownFieldHandler, WireType } from \"./binary-format-contract\";\nimport { RepeatType, ScalarType } from \"./reflection-info\";\nimport { assert } from \"./assert\";\nimport { PbLong, PbULong } from \"./pb-long\";\n/**\n * Writes proto3 messages in binary format using reflection information.\n *\n * https://developers.google.com/protocol-buffers/docs/encoding\n */\nexport class ReflectionBinaryWriter {\n    constructor(info) {\n        this.info = info;\n    }\n    prepare() {\n        if (!this.fields) {\n            const fieldsInput = this.info.fields ? this.info.fields.concat() : [];\n            this.fields = fieldsInput.sort((a, b) => a.no - b.no);\n        }\n    }\n    /**\n     * Writes the message to binary format.\n     */\n    write(message, writer, options) {\n        this.prepare();\n        for (const field of this.fields) {\n            let value, // this will be our field value, whether it is member of a oneof or not\n            emitDefault, // whether we emit the default value (only true for oneof members)\n            repeated = field.repeat, localName = field.localName;\n            // handle oneof ADT\n            if (field.oneof) {\n                const group = message[field.oneof];\n                if (group.oneofKind !== localName)\n                    continue; // if field is not selected, skip\n                value = group[localName];\n                emitDefault = true;\n            }\n            else {\n                value = message[localName];\n                emitDefault = false;\n            }\n            // we have handled oneof above. we just have to honor `emitDefault`.\n            switch (field.kind) {\n                case \"scalar\":\n                case \"enum\":\n                    let T = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                    if (repeated) {\n                        assert(Array.isArray(value));\n                        if (repeated == RepeatType.PACKED)\n                            this.packed(writer, T, field.no, value);\n                        else\n                            for (const item of value)\n                                this.scalar(writer, T, field.no, item, true);\n                    }\n                    else if (value === undefined)\n                        assert(field.opt);\n                    else\n                        this.scalar(writer, T, field.no, value, emitDefault || field.opt);\n                    break;\n                case \"message\":\n                    if (repeated) {\n                        assert(Array.isArray(value));\n                        for (const item of value)\n                            this.message(writer, options, field.T(), field.no, item);\n                    }\n                    else {\n                        this.message(writer, options, field.T(), field.no, value);\n                    }\n                    break;\n                case \"map\":\n                    assert(typeof value == 'object' && value !== null);\n                    for (const [key, val] of Object.entries(value))\n                        this.mapEntry(writer, options, field, key, val);\n                    break;\n            }\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u === true ? UnknownFieldHandler.onWrite : u)(this.info.typeName, message, writer);\n    }\n    mapEntry(writer, options, field, key, value) {\n        writer.tag(field.no, WireType.LengthDelimited);\n        writer.fork();\n        // javascript only allows number or string for object properties\n        // we convert from our representation to the protobuf type\n        let keyValue = key;\n        switch (field.K) {\n            case ScalarType.INT32:\n            case ScalarType.FIXED32:\n            case ScalarType.UINT32:\n            case ScalarType.SFIXED32:\n            case ScalarType.SINT32:\n                keyValue = Number.parseInt(key);\n                break;\n            case ScalarType.BOOL:\n                assert(key == 'true' || key == 'false');\n                keyValue = key == 'true';\n                break;\n        }\n        // write key, expecting key field number = 1\n        this.scalar(writer, field.K, 1, keyValue, true);\n        // write value, expecting value field number = 2\n        switch (field.V.kind) {\n            case 'scalar':\n                this.scalar(writer, field.V.T, 2, value, true);\n                break;\n            case 'enum':\n                this.scalar(writer, ScalarType.INT32, 2, value, true);\n                break;\n            case 'message':\n                this.message(writer, options, field.V.T(), 2, value);\n                break;\n        }\n        writer.join();\n    }\n    message(writer, options, handler, fieldNo, value) {\n        if (value === undefined)\n            return;\n        handler.internalBinaryWrite(value, writer.tag(fieldNo, WireType.LengthDelimited).fork(), options);\n        writer.join();\n    }\n    /**\n     * Write a single scalar value.\n     */\n    scalar(writer, type, fieldNo, value, emitDefault) {\n        let [wireType, method, isDefault] = this.scalarInfo(type, value);\n        if (!isDefault || emitDefault) {\n            writer.tag(fieldNo, wireType);\n            writer[method](value);\n        }\n    }\n    /**\n     * Write an array of scalar values in packed format.\n     */\n    packed(writer, type, fieldNo, value) {\n        if (!value.length)\n            return;\n        assert(type !== ScalarType.BYTES && type !== ScalarType.STRING);\n        // write tag\n        writer.tag(fieldNo, WireType.LengthDelimited);\n        // begin length-delimited\n        writer.fork();\n        // write values without tags\n        let [, method,] = this.scalarInfo(type);\n        for (let i = 0; i < value.length; i++)\n            writer[method](value[i]);\n        // end length delimited\n        writer.join();\n    }\n    /**\n     * Get information for writing a scalar value.\n     *\n     * Returns tuple:\n     * [0]: appropriate WireType\n     * [1]: name of the appropriate method of IBinaryWriter\n     * [2]: whether the given value is a default value\n     *\n     * If argument `value` is omitted, [2] is always false.\n     */\n    scalarInfo(type, value) {\n        let t = WireType.Varint;\n        let m;\n        let i = value === undefined;\n        let d = value === 0;\n        switch (type) {\n            case ScalarType.INT32:\n                m = \"int32\";\n                break;\n            case ScalarType.STRING:\n                d = i || !value.length;\n                t = WireType.LengthDelimited;\n                m = \"string\";\n                break;\n            case ScalarType.BOOL:\n                d = value === false;\n                m = \"bool\";\n                break;\n            case ScalarType.UINT32:\n                m = \"uint32\";\n                break;\n            case ScalarType.DOUBLE:\n                t = WireType.Bit64;\n                m = \"double\";\n                break;\n            case ScalarType.FLOAT:\n                t = WireType.Bit32;\n                m = \"float\";\n                break;\n            case ScalarType.INT64:\n                d = i || PbLong.from(value).isZero();\n                m = \"int64\";\n                break;\n            case ScalarType.UINT64:\n                d = i || PbULong.from(value).isZero();\n                m = \"uint64\";\n                break;\n            case ScalarType.FIXED64:\n                d = i || PbULong.from(value).isZero();\n                t = WireType.Bit64;\n                m = \"fixed64\";\n                break;\n            case ScalarType.BYTES:\n                d = i || !value.byteLength;\n                t = WireType.LengthDelimited;\n                m = \"bytes\";\n                break;\n            case ScalarType.FIXED32:\n                t = WireType.Bit32;\n                m = \"fixed32\";\n                break;\n            case ScalarType.SFIXED32:\n                t = WireType.Bit32;\n                m = \"sfixed32\";\n                break;\n            case ScalarType.SFIXED64:\n                d = i || PbLong.from(value).isZero();\n                t = WireType.Bit64;\n                m = \"sfixed64\";\n                break;\n            case ScalarType.SINT32:\n                m = \"sint32\";\n                break;\n            case ScalarType.SINT64:\n                d = i || PbLong.from(value).isZero();\n                m = \"sint64\";\n                break;\n        }\n        return [t, m, i || d];\n    }\n}\n","/**\n * Copy partial data into the target message.\n *\n * If a singular scalar or enum field is present in the source, it\n * replaces the field in the target.\n *\n * If a singular message field is present in the source, it is merged\n * with the target field by calling mergePartial() of the responsible\n * message type.\n *\n * If a repeated field is present in the source, its values replace\n * all values in the target array, removing extraneous values.\n * Repeated message fields are copied, not merged.\n *\n * If a map field is present in the source, entries are added to the\n * target map, replacing entries with the same key. Entries that only\n * exist in the target remain. Entries with message values are copied,\n * not merged.\n *\n * Note that this function differs from protobuf merge semantics,\n * which appends repeated fields.\n */\nexport function reflectionMergePartial(info, target, source) {\n    let fieldValue, // the field value we are working with\n    input = source, output; // where we want our field value to go\n    for (let field of info.fields) {\n        let name = field.localName;\n        if (field.oneof) {\n            const group = input[field.oneof]; // this is the oneof`s group in the source\n            if ((group === null || group === void 0 ? void 0 : group.oneofKind) == undefined) { // the user is free to omit\n                continue; // we skip this field, and all other members too\n            }\n            fieldValue = group[name]; // our value comes from the the oneof group of the source\n            output = target[field.oneof]; // and our output is the oneof group of the target\n            output.oneofKind = group.oneofKind; // always update discriminator\n            if (fieldValue == undefined) {\n                delete output[name]; // remove any existing value\n                continue; // skip further work on field\n            }\n        }\n        else {\n            fieldValue = input[name]; // we are using the source directly\n            output = target; // we want our field value to go directly into the target\n            if (fieldValue == undefined) {\n                continue; // skip further work on field, existing value is used as is\n            }\n        }\n        if (field.repeat)\n            output[name].length = fieldValue.length; // resize target array to match source array\n        // now we just work with `fieldValue` and `output` to merge the value\n        switch (field.kind) {\n            case \"scalar\":\n            case \"enum\":\n                if (field.repeat)\n                    for (let i = 0; i < fieldValue.length; i++)\n                        output[name][i] = fieldValue[i]; // not a reference type\n                else\n                    output[name] = fieldValue; // not a reference type\n                break;\n            case \"message\":\n                let T = field.T();\n                if (field.repeat)\n                    for (let i = 0; i < fieldValue.length; i++)\n                        output[name][i] = T.create(fieldValue[i]);\n                else if (output[name] === undefined)\n                    output[name] = T.create(fieldValue); // nothing to merge with\n                else\n                    T.mergePartial(output[name], fieldValue);\n                break;\n            case \"map\":\n                // Map and repeated fields are simply overwritten, not appended or merged\n                switch (field.V.kind) {\n                    case \"scalar\":\n                    case \"enum\":\n                        Object.assign(output[name], fieldValue); // elements are not reference types\n                        break;\n                    case \"message\":\n                        let T = field.V.T();\n                        for (let k of Object.keys(fieldValue))\n                            output[name][k] = T.create(fieldValue[k]);\n                        break;\n                }\n                break;\n        }\n    }\n}\n","import { ScalarType } from \"./reflection-info\";\n/**\n * Determines whether two message of the same type have the same field values.\n * Checks for deep equality, traversing repeated fields, oneof groups, maps\n * and messages recursively.\n * Will also return true if both messages are `undefined`.\n */\nexport function reflectionEquals(info, a, b) {\n    if (a === b)\n        return true;\n    if (!a || !b)\n        return false;\n    for (let field of info.fields) {\n        let localName = field.localName;\n        let val_a = field.oneof ? a[field.oneof][localName] : a[localName];\n        let val_b = field.oneof ? b[field.oneof][localName] : b[localName];\n        switch (field.kind) {\n            case \"enum\":\n            case \"scalar\":\n                let t = field.kind == \"enum\" ? ScalarType.INT32 : field.T;\n                if (!(field.repeat\n                    ? repeatedPrimitiveEq(t, val_a, val_b)\n                    : primitiveEq(t, val_a, val_b)))\n                    return false;\n                break;\n            case \"map\":\n                if (!(field.V.kind == \"message\"\n                    ? repeatedMsgEq(field.V.T(), objectValues(val_a), objectValues(val_b))\n                    : repeatedPrimitiveEq(field.V.kind == \"enum\" ? ScalarType.INT32 : field.V.T, objectValues(val_a), objectValues(val_b))))\n                    return false;\n                break;\n            case \"message\":\n                let T = field.T();\n                if (!(field.repeat\n                    ? repeatedMsgEq(T, val_a, val_b)\n                    : T.equals(val_a, val_b)))\n                    return false;\n                break;\n        }\n    }\n    return true;\n}\nconst objectValues = Object.values;\nfunction primitiveEq(type, a, b) {\n    if (a === b)\n        return true;\n    if (type !== ScalarType.BYTES)\n        return false;\n    let ba = a;\n    let bb = b;\n    if (ba.length !== bb.length)\n        return false;\n    for (let i = 0; i < ba.length; i++)\n        if (ba[i] != bb[i])\n            return false;\n    return true;\n}\nfunction repeatedPrimitiveEq(type, a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!primitiveEq(type, a[i], b[i]))\n            return false;\n    return true;\n}\nfunction repeatedMsgEq(type, a, b) {\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++)\n        if (!type.equals(a[i], b[i]))\n            return false;\n    return true;\n}\n","import { normalizeFieldInfo } from \"./reflection-info\";\nimport { ReflectionTypeCheck } from \"./reflection-type-check\";\nimport { ReflectionJsonReader } from \"./reflection-json-reader\";\nimport { ReflectionJsonWriter } from \"./reflection-json-writer\";\nimport { ReflectionBinaryReader } from \"./reflection-binary-reader\";\nimport { ReflectionBinaryWriter } from \"./reflection-binary-writer\";\nimport { reflectionCreate } from \"./reflection-create\";\nimport { reflectionMergePartial } from \"./reflection-merge-partial\";\nimport { typeofJsonValue } from \"./json-typings\";\nimport { jsonReadOptions, jsonWriteOptions, } from \"./json-format-contract\";\nimport { reflectionEquals } from \"./reflection-equals\";\nimport { binaryWriteOptions } from \"./binary-writer\";\nimport { binaryReadOptions } from \"./binary-reader\";\n/**\n * This standard message type provides reflection-based\n * operations to work with a message.\n */\nexport class MessageType {\n    constructor(name, fields, options) {\n        this.defaultCheckDepth = 16;\n        this.typeName = name;\n        this.fields = fields.map(normalizeFieldInfo);\n        this.options = options !== null && options !== void 0 ? options : {};\n        this.refTypeCheck = new ReflectionTypeCheck(this);\n        this.refJsonReader = new ReflectionJsonReader(this);\n        this.refJsonWriter = new ReflectionJsonWriter(this);\n        this.refBinReader = new ReflectionBinaryReader(this);\n        this.refBinWriter = new ReflectionBinaryWriter(this);\n    }\n    create(value) {\n        let message = reflectionCreate(this);\n        if (value !== undefined) {\n            reflectionMergePartial(this, message, value);\n        }\n        return message;\n    }\n    /**\n     * Clone the message.\n     *\n     * Unknown fields are discarded.\n     */\n    clone(message) {\n        let copy = this.create();\n        reflectionMergePartial(this, copy, message);\n        return copy;\n    }\n    /**\n     * Determines whether two message of the same type have the same field values.\n     * Checks for deep equality, traversing repeated fields, oneof groups, maps\n     * and messages recursively.\n     * Will also return true if both messages are `undefined`.\n     */\n    equals(a, b) {\n        return reflectionEquals(this, a, b);\n    }\n    /**\n     * Is the given value assignable to our message type\n     * and contains no [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n     */\n    is(arg, depth = this.defaultCheckDepth) {\n        return this.refTypeCheck.is(arg, depth, false);\n    }\n    /**\n     * Is the given value assignable to our message type,\n     * regardless of [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?\n     */\n    isAssignable(arg, depth = this.defaultCheckDepth) {\n        return this.refTypeCheck.is(arg, depth, true);\n    }\n    /**\n     * Copy partial data into the target message.\n     */\n    mergePartial(target, source) {\n        reflectionMergePartial(this, target, source);\n    }\n    /**\n     * Create a new message from binary format.\n     */\n    fromBinary(data, options) {\n        let opt = binaryReadOptions(options);\n        return this.internalBinaryRead(opt.readerFactory(data), data.byteLength, opt);\n    }\n    /**\n     * Read a new message from a JSON value.\n     */\n    fromJson(json, options) {\n        return this.internalJsonRead(json, jsonReadOptions(options));\n    }\n    /**\n     * Read a new message from a JSON string.\n     * This is equivalent to `T.fromJson(JSON.parse(json))`.\n     */\n    fromJsonString(json, options) {\n        let value = JSON.parse(json);\n        return this.fromJson(value, options);\n    }\n    /**\n     * Write the message to canonical JSON value.\n     */\n    toJson(message, options) {\n        return this.internalJsonWrite(message, jsonWriteOptions(options));\n    }\n    /**\n     * Convert the message to canonical JSON string.\n     * This is equivalent to `JSON.stringify(T.toJson(t))`\n     */\n    toJsonString(message, options) {\n        var _a;\n        let value = this.toJson(message, options);\n        return JSON.stringify(value, null, (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0 ? _a : 0);\n    }\n    /**\n     * Write the message to binary format.\n     */\n    toBinary(message, options) {\n        let opt = binaryWriteOptions(options);\n        return this.internalBinaryWrite(message, opt.writerFactory(), opt).finish();\n    }\n    /**\n     * This is an internal method. If you just want to read a message from\n     * JSON, use `fromJson()` or `fromJsonString()`.\n     *\n     * Reads JSON value and merges the fields into the target\n     * according to protobuf rules. If the target is omitted,\n     * a new instance is created first.\n     */\n    internalJsonRead(json, options, target) {\n        if (json !== null && typeof json == \"object\" && !Array.isArray(json)) {\n            let message = target !== null && target !== void 0 ? target : this.create();\n            this.refJsonReader.read(json, message, options);\n            return message;\n        }\n        throw new Error(`Unable to parse message ${this.typeName} from JSON ${typeofJsonValue(json)}.`);\n    }\n    /**\n     * This is an internal method. If you just want to write a message\n     * to JSON, use `toJson()` or `toJsonString().\n     *\n     * Writes JSON value and returns it.\n     */\n    internalJsonWrite(message, options) {\n        return this.refJsonWriter.write(message, options);\n    }\n    /**\n     * This is an internal method. If you just want to write a message\n     * in binary format, use `toBinary()`.\n     *\n     * Serializes the message in binary format and appends it to the given\n     * writer. Returns passed writer.\n     */\n    internalBinaryWrite(message, writer, options) {\n        this.refBinWriter.write(message, writer, options);\n        return writer;\n    }\n    /**\n     * This is an internal method. If you just want to read a message from\n     * binary data, use `fromBinary()`.\n     *\n     * Reads data from binary format and merges the fields into\n     * the target according to protobuf rules. If the target is\n     * omitted, a new instance is created first.\n     */\n    internalBinaryRead(reader, length, options, target) {\n        let message = target !== null && target !== void 0 ? target : this.create();\n        this.refBinReader.read(reader, message, options, length);\n        return message;\n    }\n}\n","import { reflectionScalarDefault } from \"./reflection-scalar-default\";\nimport { MESSAGE_TYPE } from './message-type-contract';\n/**\n * Creates an instance of the generic message, using the field\n * information.\n */\nexport function reflectionCreate(type) {\n    const msg = {};\n    Object.defineProperty(msg, MESSAGE_TYPE, { enumerable: false, value: type });\n    for (let field of type.fields) {\n        let name = field.localName;\n        if (field.opt)\n            continue;\n        if (field.oneof)\n            msg[field.oneof] = { oneofKind: undefined };\n        else if (field.repeat)\n            msg[name] = [];\n        else\n            switch (field.kind) {\n                case \"scalar\":\n                    msg[name] = reflectionScalarDefault(field.T, field.L);\n                    break;\n                case \"enum\":\n                    // we require 0 to be default value for all enums\n                    msg[name] = 0;\n                    break;\n                case \"map\":\n                    msg[name] = {};\n                    break;\n            }\n    }\n    return msg;\n}\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"common.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.UnitStats\n */\nexport interface UnitStats {\n    /**\n     * @generated from protobuf field: repeated double stats = 1;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: repeated double pseudo_stats = 2;\n     */\n    pseudoStats: number[];\n}\n/**\n * @generated from protobuf message proto.ReforgeStat\n */\nexport interface ReforgeStat {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: repeated proto.Stat fromStat = 2;\n     */\n    fromStat: Stat[];\n    /**\n     * @generated from protobuf field: repeated proto.Stat toStat = 3;\n     */\n    toStat: Stat[];\n    /**\n     * @generated from protobuf field: double multiplier = 4;\n     */\n    multiplier: number;\n}\n/**\n * Buffs that affect the entire raid.\n *\n * @generated from protobuf message proto.RaidBuffs\n */\nexport interface RaidBuffs {\n    /**\n     * +Stats\n     *\n     * @generated from protobuf field: proto.TristateEffect gift_of_the_wild = 1;\n     */\n    giftOfTheWild: TristateEffect;\n    /**\n     * +Stam\n     *\n     * @generated from protobuf field: proto.TristateEffect power_word_fortitude = 2;\n     */\n    powerWordFortitude: TristateEffect;\n    /**\n     * +Health\n     *\n     * @generated from protobuf field: proto.TristateEffect commanding_shout = 3;\n     */\n    commandingShout: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect blood_pact = 4;\n     */\n    bloodPact: TristateEffect;\n    /**\n     * + Agi and Str\n     *\n     * @generated from protobuf field: bool horn_of_winter = 5;\n     */\n    hornOfWinter: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect strength_of_earth_totem = 6;\n     */\n    strengthOfEarthTotem: TristateEffect; // none, normal, 15% improved\n    /**\n     * +Intell and/or Spi\n     *\n     * @generated from protobuf field: bool arcane_brilliance = 7;\n     */\n    arcaneBrilliance: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect fel_intelligence = 8;\n     */\n    felIntelligence: TristateEffect;\n    /**\n     * @generated from protobuf field: bool divine_spirit = 9;\n     */\n    divineSpirit: boolean;\n    /**\n     * +AP\n     *\n     * @generated from protobuf field: proto.TristateEffect battle_shout = 10;\n     */\n    battleShout: TristateEffect;\n    /**\n     * 10% AP\n     *\n     * @generated from protobuf field: bool trueshot_aura = 11;\n     */\n    trueshotAura: boolean;\n    /**\n     * @generated from protobuf field: bool unleashed_rage = 12;\n     */\n    unleashedRage: boolean;\n    /**\n     * @generated from protobuf field: bool abominations_might = 13;\n     */\n    abominationsMight: boolean;\n    /**\n     * 5% phy crit\n     *\n     * @generated from protobuf field: proto.TristateEffect leader_of_the_pack = 14;\n     */\n    leaderOfThePack: TristateEffect;\n    /**\n     * @generated from protobuf field: bool rampage = 15;\n     */\n    rampage: boolean;\n    /**\n     * 20% Melee Haste\n     *\n     * @generated from protobuf field: bool icy_talons = 16;\n     */\n    icyTalons: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect windfury_totem = 17;\n     */\n    windfuryTotem: TristateEffect; // none, 16%, 20%\n    /**\n     * +Spell Power\n     *\n     * @generated from protobuf field: bool totem_of_wrath = 18;\n     */\n    totemOfWrath: boolean;\n    /**\n     * @generated from protobuf field: bool flametongue_totem = 19;\n     */\n    flametongueTotem: boolean;\n    /**\n     * @generated from protobuf field: int32 demonic_pact_sp = 44;\n     */\n    demonicPactSp: number; // SP buff NEW CORRECT\n    /**\n     * +5% Spell Crit and/or +3% Haste\n     *\n     * @generated from protobuf field: bool swift_retribution = 21;\n     */\n    swiftRetribution: boolean; // haste only\n    /**\n     * @generated from protobuf field: proto.TristateEffect moonkin_aura = 22;\n     */\n    moonkinAura: TristateEffect; // both crit and haste\n    /**\n     * @generated from protobuf field: bool elemental_oath = 23;\n     */\n    elementalOath: boolean; // crit only\n    /**\n     * 5% spell haste\n     *\n     * @generated from protobuf field: bool wrath_of_air_totem = 24;\n     */\n    wrathOfAirTotem: boolean;\n    /**\n     * 3% dmg\n     *\n     * @generated from protobuf field: bool ferocious_inspiration = 25;\n     */\n    ferociousInspiration: boolean;\n    /**\n     * @generated from protobuf field: bool sanctified_retribution = 26;\n     */\n    sanctifiedRetribution: boolean;\n    /**\n     * @generated from protobuf field: bool arcane_empowerment = 27;\n     */\n    arcaneEmpowerment: boolean;\n    /**\n     * mp5\n     *\n     * @generated from protobuf field: proto.TristateEffect mana_spring_totem = 28;\n     */\n    manaSpringTotem: TristateEffect;\n    /**\n     * Resistances\n     *\n     * @generated from protobuf field: bool shadow_protection = 33;\n     */\n    shadowProtection: boolean;\n    /**\n     * @generated from protobuf field: bool nature_resistance_totem = 45;\n     */\n    natureResistanceTotem: boolean;\n    /**\n     * @generated from protobuf field: bool aspect_of_the_wild = 46;\n     */\n    aspectOfTheWild: boolean;\n    /**\n     * @generated from protobuf field: bool frost_resistance_aura = 47;\n     */\n    frostResistanceAura: boolean;\n    /**\n     * @generated from protobuf field: bool frost_resistance_totem = 48;\n     */\n    frostResistanceTotem: boolean;\n    /**\n     * Miscellaneous\n     *\n     * @generated from protobuf field: bool bloodlust = 29;\n     */\n    bloodlust: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect thorns = 30;\n     */\n    thorns: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect devotion_aura = 31;\n     */\n    devotionAura: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect stoneskin_totem = 42;\n     */\n    stoneskinTotem: TristateEffect;\n    /**\n     * @generated from protobuf field: bool retribution_aura = 32;\n     */\n    retributionAura: boolean;\n    /**\n     * @generated from protobuf field: bool strength_of_wrynn = 49;\n     */\n    strengthOfWrynn: boolean;\n    /**\n     * Drums\n     *\n     * @generated from protobuf field: bool drums_of_forgotten_kings = 34;\n     */\n    drumsOfForgottenKings: boolean;\n    /**\n     * @generated from protobuf field: bool drums_of_the_wild = 35;\n     */\n    drumsOfTheWild: boolean;\n    /**\n     * Scroll\n     *\n     * @generated from protobuf field: bool scroll_of_protection = 36;\n     */\n    scrollOfProtection: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_stamina = 37;\n     */\n    scrollOfStamina: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_strength = 38;\n     */\n    scrollOfStrength: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_agility = 39;\n     */\n    scrollOfAgility: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_intellect = 40;\n     */\n    scrollOfIntellect: boolean;\n    /**\n     * @generated from protobuf field: bool scroll_of_spirit = 41;\n     */\n    scrollOfSpirit: boolean;\n}\n/**\n * Buffs that affect a single party.\n *\n * @generated from protobuf message proto.PartyBuffs\n */\nexport interface PartyBuffs {\n    /**\n     * Item Buffs\n     *\n     * @generated from protobuf field: int32 atiesh_mage = 1;\n     */\n    atieshMage: number;\n    /**\n     * @generated from protobuf field: int32 atiesh_warlock = 2;\n     */\n    atieshWarlock: number;\n    /**\n     * @generated from protobuf field: bool braided_eternium_chain = 3;\n     */\n    braidedEterniumChain: boolean;\n    /**\n     * @generated from protobuf field: bool eye_of_the_night = 4;\n     */\n    eyeOfTheNight: boolean;\n    /**\n     * @generated from protobuf field: bool chain_of_the_twilight_owl = 5;\n     */\n    chainOfTheTwilightOwl: boolean;\n    /**\n     * Group buffs\n     *\n     * @generated from protobuf field: int32 mana_tide_totems = 6;\n     */\n    manaTideTotems: number;\n    /**\n     * @generated from protobuf field: bool heroic_presence = 7;\n     */\n    heroicPresence: boolean;\n}\n/**\n * These are usually individual actions taken by other Characters.\n *\n * @generated from protobuf message proto.IndividualBuffs\n */\nexport interface IndividualBuffs {\n    /**\n     * 10% Stats\n     *\n     * @generated from protobuf field: bool blessing_of_kings = 1;\n     */\n    blessingOfKings: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect blessing_of_wisdom = 2;\n     */\n    blessingOfWisdom: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect blessing_of_might = 3;\n     */\n    blessingOfMight: TristateEffect;\n    /**\n     * @generated from protobuf field: bool blessing_of_sanctuary = 4;\n     */\n    blessingOfSanctuary: boolean;\n    /**\n     * @generated from protobuf field: bool vigilance = 5;\n     */\n    vigilance: boolean;\n    /**\n     * @generated from protobuf field: bool renewed_hope = 6;\n     */\n    renewedHope: boolean; // Only used in individual sims\n    //   as the class that provides these would cast them in raid sim\n    /**\n     * How many of each of these buffs the player will be receiving.\n     *\n     * @generated from protobuf field: int32 hymn_of_hope = 7;\n     */\n    hymnOfHope: number;\n    /**\n     * @generated from protobuf field: int32 hand_of_salvation = 8;\n     */\n    handOfSalvation: number;\n    /**\n     * @generated from protobuf field: int32 rapture = 9;\n     */\n    rapture: number;\n    /**\n     * @generated from protobuf field: int32 innervates = 10;\n     */\n    innervates: number;\n    /**\n     * @generated from protobuf field: int32 power_infusions = 11;\n     */\n    powerInfusions: number;\n    /**\n     * @generated from protobuf field: int32 unholy_frenzy = 12;\n     */\n    unholyFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 revitalize_rejuvination = 13;\n     */\n    revitalizeRejuvination: number;\n    /**\n     * @generated from protobuf field: int32 revitalize_wild_growth = 21;\n     */\n    revitalizeWildGrowth: number;\n    /**\n     * @generated from protobuf field: int32 tricks_of_the_trades = 19;\n     */\n    tricksOfTheTrades: number;\n    /**\n     * @generated from protobuf field: int32 divine_guardians = 23;\n     */\n    divineGuardians: number;\n    /**\n     * @generated from protobuf field: int32 pain_suppressions = 24;\n     */\n    painSuppressions: number;\n    /**\n     * @generated from protobuf field: int32 hand_of_sacrifices = 25;\n     */\n    handOfSacrifices: number;\n    /**\n     * @generated from protobuf field: int32 guardian_spirits = 26;\n     */\n    guardianSpirits: number;\n    /**\n     * Technically a debuff, but only used by individual sims.\n     *\n     * @generated from protobuf field: int32 shattering_throws = 20;\n     */\n    shatteringThrows: number;\n    /**\n     * Replenishment\n     *\n     * @generated from protobuf field: bool vampiric_touch = 14;\n     */\n    vampiricTouch: boolean;\n    /**\n     * @generated from protobuf field: bool hunting_party = 15;\n     */\n    huntingParty: boolean;\n    /**\n     * @generated from protobuf field: bool judgements_of_the_wise = 16;\n     */\n    judgementsOfTheWise: boolean;\n    /**\n     * @generated from protobuf field: bool improved_soul_leech = 17;\n     */\n    improvedSoulLeech: boolean;\n    /**\n     * @generated from protobuf field: bool enduring_winter = 18;\n     */\n    enduringWinter: boolean;\n    /**\n     * @generated from protobuf field: bool focus_magic = 22;\n     */\n    focusMagic: boolean;\n}\n/**\n * @generated from protobuf message proto.Consumes\n */\nexport interface Consumes {\n    /**\n     * @generated from protobuf field: proto.Flask flask = 1;\n     */\n    flask: Flask;\n    /**\n     * @generated from protobuf field: proto.BattleElixir battle_elixir = 2;\n     */\n    battleElixir: BattleElixir;\n    /**\n     * @generated from protobuf field: proto.GuardianElixir guardian_elixir = 3;\n     */\n    guardianElixir: GuardianElixir;\n    /**\n     * @generated from protobuf field: proto.Food food = 6;\n     */\n    food: Food;\n    /**\n     * @generated from protobuf field: proto.PetFood pet_food = 7;\n     */\n    petFood: PetFood;\n    /**\n     * @generated from protobuf field: int32 pet_scroll_of_agility = 8;\n     */\n    petScrollOfAgility: number;\n    /**\n     * @generated from protobuf field: int32 pet_scroll_of_strength = 9;\n     */\n    petScrollOfStrength: number;\n    /**\n     * @generated from protobuf field: proto.Potions default_potion = 10;\n     */\n    defaultPotion: Potions;\n    /**\n     * @generated from protobuf field: proto.Potions prepop_potion = 11;\n     */\n    prepopPotion: Potions;\n    /**\n     * @generated from protobuf field: proto.Conjured default_conjured = 12;\n     */\n    defaultConjured: Conjured;\n    /**\n     * @generated from protobuf field: bool thermal_sapper = 15;\n     */\n    thermalSapper: boolean;\n    /**\n     * @generated from protobuf field: bool explosive_decoy = 16;\n     */\n    explosiveDecoy: boolean;\n    /**\n     * @generated from protobuf field: proto.Explosive filler_explosive = 17;\n     */\n    fillerExplosive: Explosive;\n}\n/**\n * @generated from protobuf message proto.Debuffs\n */\nexport interface Debuffs {\n    /**\n     * @generated from protobuf field: bool judgement_of_wisdom = 1;\n     */\n    judgementOfWisdom: boolean;\n    /**\n     * @generated from protobuf field: bool judgement_of_light = 2;\n     */\n    judgementOfLight: boolean;\n    /**\n     * @generated from protobuf field: bool misery = 3;\n     */\n    misery: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect faerie_fire = 4;\n     */\n    faerieFire: TristateEffect;\n    /**\n     * 13% bonus spell damage\n     *\n     * @generated from protobuf field: bool curse_of_elements = 5;\n     */\n    curseOfElements: boolean;\n    /**\n     * @generated from protobuf field: bool ebon_plaguebringer = 6;\n     */\n    ebonPlaguebringer: boolean;\n    /**\n     * @generated from protobuf field: bool earth_and_moon = 7;\n     */\n    earthAndMoon: boolean;\n    /**\n     * +3% to crit against target\n     *\n     * @generated from protobuf field: bool heart_of_the_crusader = 8;\n     */\n    heartOfTheCrusader: boolean;\n    /**\n     * @generated from protobuf field: bool master_poisoner = 9;\n     */\n    masterPoisoner: boolean;\n    /**\n     * @generated from protobuf field: bool totem_of_wrath = 10;\n     */\n    totemOfWrath: boolean;\n    /**\n     * 5% spell crit\n     *\n     * @generated from protobuf field: bool shadow_mastery = 11;\n     */\n    shadowMastery: boolean;\n    /**\n     * @generated from protobuf field: bool improved_scorch = 12;\n     */\n    improvedScorch: boolean;\n    /**\n     * @generated from protobuf field: bool winters_chill = 13;\n     */\n    wintersChill: boolean;\n    /**\n     * @generated from protobuf field: bool blood_frenzy = 14;\n     */\n    bloodFrenzy: boolean;\n    /**\n     * @generated from protobuf field: bool savage_combat = 15;\n     */\n    savageCombat: boolean;\n    /**\n     * TODO: validate these\n     *\n     * @generated from protobuf field: bool gift_of_arthas = 16;\n     */\n    giftOfArthas: boolean;\n    /**\n     * Bleed %\n     *\n     * @generated from protobuf field: bool mangle = 17;\n     */\n    mangle: boolean;\n    /**\n     * @generated from protobuf field: bool trauma = 18;\n     */\n    trauma: boolean;\n    /**\n     * @generated from protobuf field: bool stampede = 19;\n     */\n    stampede: boolean;\n    /**\n     * Major armor\n     *\n     * @generated from protobuf field: bool expose_armor = 20;\n     */\n    exposeArmor: boolean;\n    /**\n     * @generated from protobuf field: bool sunder_armor = 21;\n     */\n    sunderArmor: boolean;\n    /**\n     * @generated from protobuf field: bool acid_spit = 22;\n     */\n    acidSpit: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect curse_of_weakness = 23;\n     */\n    curseOfWeakness: TristateEffect;\n    /**\n     * @generated from protobuf field: bool sting = 24;\n     */\n    sting: boolean;\n    /**\n     * @generated from protobuf field: bool spore_cloud = 37;\n     */\n    sporeCloud: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect demoralizing_roar = 25;\n     */\n    demoralizingRoar: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect demoralizing_shout = 26;\n     */\n    demoralizingShout: TristateEffect;\n    /**\n     * @generated from protobuf field: bool vindication = 36;\n     */\n    vindication: boolean;\n    /**\n     * @generated from protobuf field: bool demoralizing_screech = 34;\n     */\n    demoralizingScreech: boolean;\n    /**\n     * @generated from protobuf field: proto.TristateEffect thunder_clap = 27;\n     */\n    thunderClap: TristateEffect;\n    /**\n     * @generated from protobuf field: proto.TristateEffect frost_fever = 28;\n     */\n    frostFever: TristateEffect;\n    /**\n     * @generated from protobuf field: bool infected_wounds = 29;\n     */\n    infectedWounds: boolean;\n    /**\n     * @generated from protobuf field: bool judgements_of_the_just = 30;\n     */\n    judgementsOfTheJust: boolean;\n    /**\n     * @generated from protobuf field: bool insect_swarm = 31;\n     */\n    insectSwarm: boolean;\n    /**\n     * @generated from protobuf field: bool scorpid_sting = 32;\n     */\n    scorpidSting: boolean;\n    /**\n     * @generated from protobuf field: bool shadow_embrace = 33;\n     */\n    shadowEmbrace: boolean;\n    /**\n     * 1 = normal, 2 = talented, 3 = talented+glyphed\n     *\n     * @generated from protobuf field: int32 hunters_mark = 35;\n     */\n    huntersMark: number;\n    /**\n     * @generated from protobuf field: bool crystal_yield = 38;\n     */\n    crystalYield: boolean;\n}\n/**\n * @generated from protobuf message proto.TargetInput\n */\nexport interface TargetInput {\n    /**\n     * @generated from protobuf field: proto.InputType input_type = 1;\n     */\n    inputType: InputType;\n    /**\n     * @generated from protobuf field: string label = 2;\n     */\n    label: string;\n    /**\n     * @generated from protobuf field: string tooltip = 5;\n     */\n    tooltip: string;\n    /**\n     * @generated from protobuf field: bool bool_value = 3;\n     */\n    boolValue: boolean;\n    /**\n     * @generated from protobuf field: double number_value = 4;\n     */\n    numberValue: number;\n}\n/**\n * @generated from protobuf message proto.Target\n */\nexport interface Target {\n    /**\n     * The in-game NPC ID.\n     *\n     * @generated from protobuf field: int32 id = 14;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 15;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: int32 level = 4;\n     */\n    level: number;\n    /**\n     * @generated from protobuf field: proto.MobType mob_type = 3;\n     */\n    mobType: MobType;\n    /**\n     * @generated from protobuf field: repeated double stats = 5;\n     */\n    stats: number[];\n    /**\n     * Auto attack parameters.\n     *\n     * @generated from protobuf field: double min_base_damage = 7;\n     */\n    minBaseDamage: number;\n    /**\n     * @generated from protobuf field: double damage_spread = 19;\n     */\n    damageSpread: number; // replaces tight_enemy_damage\n    /**\n     * @generated from protobuf field: double swing_speed = 8;\n     */\n    swingSpeed: number;\n    /**\n     * @generated from protobuf field: bool dual_wield = 9;\n     */\n    dualWield: boolean;\n    /**\n     * @generated from protobuf field: bool dual_wield_penalty = 10;\n     */\n    dualWieldPenalty: boolean;\n    /**\n     * @generated from protobuf field: bool parry_haste = 12;\n     */\n    parryHaste: boolean;\n    /**\n     * @generated from protobuf field: bool suppress_dodge = 16;\n     */\n    suppressDodge: boolean; // Sunwell Radiance\n    /**\n     * @generated from protobuf field: proto.SpellSchool spell_school = 13;\n     */\n    spellSchool: SpellSchool; // Allows elemental attacks.\n    /**\n     * Index in Raid.tanks indicating the player tanking this mob.\n     * -1 or invalid index indicates not being tanked.\n     *\n     * @generated from protobuf field: int32 tank_index = 6;\n     */\n    tankIndex: number;\n    /**\n     * Custom Target AI parameters\n     *\n     * @generated from protobuf field: repeated proto.TargetInput target_inputs = 18;\n     */\n    targetInputs: TargetInput[];\n}\n/**\n * @generated from protobuf message proto.Encounter\n */\nexport interface Encounter {\n    /**\n     * @generated from protobuf field: double duration = 1;\n     */\n    duration: number;\n    /**\n     * Variation in the duration\n     *\n     * @generated from protobuf field: double duration_variation = 2;\n     */\n    durationVariation: number;\n    /**\n     * The ratio of the encounter duration, between 0 and 1, for which the targets\n     * will be in execute range (<= 20%) for the purposes of Warrior Execute, Mage Molten\n     * Fury, etc.\n     *\n     * @generated from protobuf field: double execute_proportion_20 = 3;\n     */\n    executeProportion20: number;\n    /**\n     * Key for Affliction warlock Drain Soul\n     *\n     * @generated from protobuf field: double execute_proportion_25 = 7;\n     */\n    executeProportion25: number;\n    /**\n     * Same as execute_proportion but for 35%.\n     *\n     * @generated from protobuf field: double execute_proportion_35 = 4;\n     */\n    executeProportion35: number;\n    /**\n     * If set, will use the targets health value instead of a duration for fight length.\n     *\n     * @generated from protobuf field: bool use_health = 5;\n     */\n    useHealth: boolean;\n    /**\n     * If type != Simple or Custom, then this may be empty.\n     *\n     * @generated from protobuf field: repeated proto.Target targets = 6;\n     */\n    targets: Target[];\n}\n/**\n * @generated from protobuf message proto.PresetTarget\n */\nexport interface PresetTarget {\n    /**\n     * @generated from protobuf field: string path = 1;\n     */\n    path: string;\n    /**\n     * @generated from protobuf field: proto.Target target = 2;\n     */\n    target?: Target;\n}\n/**\n * @generated from protobuf message proto.PresetEncounter\n */\nexport interface PresetEncounter {\n    /**\n     * @generated from protobuf field: string path = 1;\n     */\n    path: string;\n    /**\n     * @generated from protobuf field: repeated proto.PresetTarget targets = 2;\n     */\n    targets: PresetTarget[];\n}\n/**\n * @generated from protobuf message proto.ItemRandomSuffix\n */\nexport interface ItemRandomSuffix {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: repeated double stats = 3;\n     */\n    stats: number[];\n}\n/**\n * @generated from protobuf message proto.ItemSpec\n */\nexport interface ItemSpec {\n    /**\n     * @generated from protobuf field: int32 id = 2;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: int32 random_suffix = 6;\n     */\n    randomSuffix: number;\n    /**\n     * @generated from protobuf field: int32 enchant = 3;\n     */\n    enchant: number;\n    /**\n     * @generated from protobuf field: repeated int32 gems = 4;\n     */\n    gems: number[];\n    /**\n     * @generated from protobuf field: int32 reforging = 5;\n     */\n    reforging: number; // reforging id\n}\n/**\n * @generated from protobuf message proto.EquipmentSpec\n */\nexport interface EquipmentSpec {\n    /**\n     * @generated from protobuf field: repeated proto.ItemSpec items = 1;\n     */\n    items: ItemSpec[];\n}\n/**\n * @generated from protobuf message proto.SimDatabase\n */\nexport interface SimDatabase {\n    /**\n     * @generated from protobuf field: repeated proto.SimItem items = 1;\n     */\n    items: SimItem[];\n    /**\n     * @generated from protobuf field: repeated proto.ItemRandomSuffix random_suffixes = 5;\n     */\n    randomSuffixes: ItemRandomSuffix[];\n    /**\n     * @generated from protobuf field: repeated proto.SimEnchant enchants = 2;\n     */\n    enchants: SimEnchant[];\n    /**\n     * @generated from protobuf field: repeated proto.SimGem gems = 3;\n     */\n    gems: SimGem[];\n    /**\n     * @generated from protobuf field: repeated proto.ReforgeStat reforge_stats = 6;\n     */\n    reforgeStats: ReforgeStat[];\n}\n/**\n * Contains only the Item info needed by the sim.\n *\n * @generated from protobuf message proto.SimItem\n */\nexport interface SimItem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.ItemType type = 3;\n     */\n    type: ItemType;\n    /**\n     * @generated from protobuf field: proto.ArmorType armor_type = 4;\n     */\n    armorType: ArmorType;\n    /**\n     * @generated from protobuf field: proto.WeaponType weapon_type = 5;\n     */\n    weaponType: WeaponType;\n    /**\n     * @generated from protobuf field: proto.HandType hand_type = 6;\n     */\n    handType: HandType;\n    /**\n     * @generated from protobuf field: proto.RangedWeaponType ranged_weapon_type = 7;\n     */\n    rangedWeaponType: RangedWeaponType;\n    /**\n     * @generated from protobuf field: repeated double stats = 8;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: repeated proto.GemColor gem_sockets = 9;\n     */\n    gemSockets: GemColor[];\n    /**\n     * @generated from protobuf field: repeated double socketBonus = 10;\n     */\n    socketBonus: number[];\n    /**\n     * @generated from protobuf field: double weapon_damage_min = 11;\n     */\n    weaponDamageMin: number;\n    /**\n     * @generated from protobuf field: double weapon_damage_max = 12;\n     */\n    weaponDamageMax: number;\n    /**\n     * @generated from protobuf field: double weapon_speed = 13;\n     */\n    weaponSpeed: number;\n    /**\n     * @generated from protobuf field: string set_name = 14;\n     */\n    setName: string;\n    /**\n     * @generated from protobuf field: int32 rand_prop_points = 15;\n     */\n    randPropPoints: number;\n}\n/**\n * Contains only the Enchant info needed by the sim.\n *\n * @generated from protobuf message proto.SimEnchant\n */\nexport interface SimEnchant {\n    /**\n     * @generated from protobuf field: int32 effect_id = 1;\n     */\n    effectId: number;\n    /**\n     * @generated from protobuf field: repeated double stats = 2;\n     */\n    stats: number[];\n}\n/**\n * Contains only the Gem info needed by the sim.\n *\n * @generated from protobuf message proto.SimGem\n */\nexport interface SimGem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.GemColor color = 3;\n     */\n    color: GemColor;\n    /**\n     * @generated from protobuf field: repeated double stats = 4;\n     */\n    stats: number[];\n}\n/**\n * @generated from protobuf message proto.UnitReference\n */\nexport interface UnitReference {\n    /**\n     * The type of unit being referenced.\n     *\n     * @generated from protobuf field: proto.UnitReference.Type type = 2;\n     */\n    type: UnitReference_Type;\n    /**\n     * Index of the player/target/pet/etc depending on value of type.\n     *\n     * @generated from protobuf field: int32 index = 3;\n     */\n    index: number;\n    /**\n     * Reference to the owner, only used iff this is a pet.\n     *\n     * @generated from protobuf field: proto.UnitReference owner = 4;\n     */\n    owner?: UnitReference;\n}\n/**\n * @generated from protobuf enum proto.UnitReference.Type\n */\nexport enum UnitReference_Type {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Player = 1;\n     */\n    Player = 1,\n    /**\n     * @generated from protobuf enum value: Target = 2;\n     */\n    Target = 2,\n    /**\n     * @generated from protobuf enum value: Pet = 3;\n     */\n    Pet = 3,\n    /**\n     * @generated from protobuf enum value: Self = 4;\n     */\n    Self = 4,\n    /**\n     * @generated from protobuf enum value: CurrentTarget = 5;\n     */\n    CurrentTarget = 5,\n    /**\n     * @generated from protobuf enum value: AllPlayers = 6;\n     */\n    AllPlayers = 6,\n    /**\n     * @generated from protobuf enum value: AllTargets = 7;\n     */\n    AllTargets = 7\n}\n/**\n * @generated from protobuf message proto.ActionID\n */\nexport interface ActionID {\n    /**\n     * @generated from protobuf oneof: raw_id\n     */\n    rawId: {\n        oneofKind: \"spellId\";\n        /**\n         * @generated from protobuf field: int32 spell_id = 1;\n         */\n        spellId: number;\n    } | {\n        oneofKind: \"itemId\";\n        /**\n         * @generated from protobuf field: int32 item_id = 2;\n         */\n        itemId: number;\n    } | {\n        oneofKind: \"otherId\";\n        /**\n         * @generated from protobuf field: proto.OtherAction other_id = 3;\n         */\n        otherId: OtherAction;\n    } | {\n        oneofKind: undefined;\n    };\n    /**\n     * Distinguishes between different versions of the same action.\n     * Currently the only use for this is Shaman Lightning Overload.\n     *\n     * @generated from protobuf field: int32 tag = 4;\n     */\n    tag: number;\n}\n/**\n * @generated from protobuf message proto.Glyphs\n */\nexport interface Glyphs {\n    /**\n     * @generated from protobuf field: int32 prime1 = 1;\n     */\n    prime1: number;\n    /**\n     * @generated from protobuf field: int32 prime2 = 2;\n     */\n    prime2: number;\n    /**\n     * @generated from protobuf field: int32 prime3 = 3;\n     */\n    prime3: number;\n    /**\n     * @generated from protobuf field: int32 major1 = 4;\n     */\n    major1: number;\n    /**\n     * @generated from protobuf field: int32 major2 = 5;\n     */\n    major2: number;\n    /**\n     * @generated from protobuf field: int32 major3 = 6;\n     */\n    major3: number;\n    /**\n     * @generated from protobuf field: int32 minor1 = 7;\n     */\n    minor1: number;\n    /**\n     * @generated from protobuf field: int32 minor2 = 8;\n     */\n    minor2: number;\n    /**\n     * @generated from protobuf field: int32 minor3 = 9;\n     */\n    minor3: number;\n}\n/**\n * Custom options for a particular cooldown.\n *\n * @generated from protobuf message proto.Cooldown\n */\nexport interface Cooldown {\n    /**\n     * Identifies the cooldown to which these settings will apply.\n     *\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * Fixed times at which to use this cooldown. Each value corresponds to a usage,\n     * e.g. first value is the first usage, second value is the second usage.\n     * Any usages after the specified timings will occur as soon as possible, subject\n     * to the ShouldActivate() condition.\n     *\n     * @generated from protobuf field: repeated double timings = 2;\n     */\n    timings: number[];\n}\n/**\n * @generated from protobuf message proto.Cooldowns\n */\nexport interface Cooldowns {\n    /**\n     * @generated from protobuf field: repeated proto.Cooldown cooldowns = 1;\n     */\n    cooldowns: Cooldown[];\n    /**\n     * % HP threshold, below which defensive cooldowns can be used.\n     *\n     * @generated from protobuf field: double hp_percent_for_defensives = 2;\n     */\n    hpPercentForDefensives: number;\n}\n/**\n * @generated from protobuf message proto.HealingModel\n */\nexport interface HealingModel {\n    /**\n     * Healing per second to apply.\n     *\n     * @generated from protobuf field: double hps = 1;\n     */\n    hps: number;\n    /**\n     * How often healing is applied.\n     *\n     * @generated from protobuf field: double cadence_seconds = 2;\n     */\n    cadenceSeconds: number;\n    /**\n     * Variation in the cadence.\n     *\n     * @generated from protobuf field: double cadence_variation = 5;\n     */\n    cadenceVariation: number;\n    /**\n     * % Inspiration buff uptime\n     *\n     * @generated from protobuf field: double inspiration_uptime = 3;\n     */\n    inspirationUptime: number;\n    /**\n     * TMI burst window bin size\n     *\n     * @generated from protobuf field: int32 burst_window = 4;\n     */\n    burstWindow: number;\n}\n/**\n * @generated from protobuf message proto.CustomRotation\n */\nexport interface CustomRotation {\n    /**\n     * @generated from protobuf field: repeated proto.CustomSpell spells = 1;\n     */\n    spells: CustomSpell[];\n}\n/**\n * @generated from protobuf message proto.CustomSpell\n */\nexport interface CustomSpell {\n    /**\n     * This should usually be a spec-specific enum value.\n     *\n     * @generated from protobuf field: int32 spell = 1;\n     */\n    spell: number;\n    /**\n     * Desired cast rate for this spell. Not used by most custom rotations, this is\n     * primarily for healers.\n     *\n     * @generated from protobuf field: double casts_per_minute = 2;\n     */\n    castsPerMinute: number;\n}\n/**\n * @generated from protobuf message proto.ItemSwap\n */\nexport interface ItemSwap {\n    /**\n     * @generated from protobuf field: proto.ItemSpec mh_item = 1;\n     */\n    mhItem?: ItemSpec;\n    /**\n     * @generated from protobuf field: proto.ItemSpec oh_item = 2;\n     */\n    ohItem?: ItemSpec;\n    /**\n     * @generated from protobuf field: proto.ItemSpec ranged_item = 3;\n     */\n    rangedItem?: ItemSpec;\n}\n/**\n * @generated from protobuf message proto.Duration\n */\nexport interface Duration {\n    /**\n     * @generated from protobuf field: double ms = 1;\n     */\n    ms: number;\n}\n/**\n * @generated from protobuf enum proto.Spec\n */\nexport enum Spec {\n    /**\n     * @generated from protobuf enum value: SpecUnknown = 0;\n     */\n    SpecUnknown = 0,\n    /**\n     * @generated from protobuf enum value: SpecBloodDeathKnight = 1;\n     */\n    SpecBloodDeathKnight = 1,\n    /**\n     * @generated from protobuf enum value: SpecFrostDeathKnight = 2;\n     */\n    SpecFrostDeathKnight = 2,\n    /**\n     * @generated from protobuf enum value: SpecUnholyDeathKnight = 3;\n     */\n    SpecUnholyDeathKnight = 3,\n    /**\n     * @generated from protobuf enum value: SpecBalanceDruid = 4;\n     */\n    SpecBalanceDruid = 4,\n    /**\n     * @generated from protobuf enum value: SpecFeralDruid = 5;\n     */\n    SpecFeralDruid = 5,\n    /**\n     * @generated from protobuf enum value: SpecRestorationDruid = 6;\n     */\n    SpecRestorationDruid = 6,\n    /**\n     * @generated from protobuf enum value: SpecBeastMasteryHunter = 7;\n     */\n    SpecBeastMasteryHunter = 7,\n    /**\n     * @generated from protobuf enum value: SpecMarksmanshipHunter = 8;\n     */\n    SpecMarksmanshipHunter = 8,\n    /**\n     * @generated from protobuf enum value: SpecSurvivalHunter = 9;\n     */\n    SpecSurvivalHunter = 9,\n    /**\n     * @generated from protobuf enum value: SpecArcaneMage = 10;\n     */\n    SpecArcaneMage = 10,\n    /**\n     * @generated from protobuf enum value: SpecFireMage = 11;\n     */\n    SpecFireMage = 11,\n    /**\n     * @generated from protobuf enum value: SpecFrostMage = 12;\n     */\n    SpecFrostMage = 12,\n    /**\n     * @generated from protobuf enum value: SpecHolyPaladin = 13;\n     */\n    SpecHolyPaladin = 13,\n    /**\n     * @generated from protobuf enum value: SpecProtectionPaladin = 14;\n     */\n    SpecProtectionPaladin = 14,\n    /**\n     * @generated from protobuf enum value: SpecRetributionPaladin = 15;\n     */\n    SpecRetributionPaladin = 15,\n    /**\n     * @generated from protobuf enum value: SpecDisciplinePriest = 16;\n     */\n    SpecDisciplinePriest = 16,\n    /**\n     * @generated from protobuf enum value: SpecHolyPriest = 17;\n     */\n    SpecHolyPriest = 17,\n    /**\n     * @generated from protobuf enum value: SpecShadowPriest = 18;\n     */\n    SpecShadowPriest = 18,\n    /**\n     * @generated from protobuf enum value: SpecAssassinationRogue = 19;\n     */\n    SpecAssassinationRogue = 19,\n    /**\n     * @generated from protobuf enum value: SpecCombatRogue = 20;\n     */\n    SpecCombatRogue = 20,\n    /**\n     * @generated from protobuf enum value: SpecSubtletyRogue = 21;\n     */\n    SpecSubtletyRogue = 21,\n    /**\n     * @generated from protobuf enum value: SpecElementalShaman = 22;\n     */\n    SpecElementalShaman = 22,\n    /**\n     * @generated from protobuf enum value: SpecEnhancementShaman = 23;\n     */\n    SpecEnhancementShaman = 23,\n    /**\n     * @generated from protobuf enum value: SpecRestorationShaman = 24;\n     */\n    SpecRestorationShaman = 24,\n    /**\n     * @generated from protobuf enum value: SpecAfflictionWarlock = 25;\n     */\n    SpecAfflictionWarlock = 25,\n    /**\n     * @generated from protobuf enum value: SpecDemonologyWarlock = 26;\n     */\n    SpecDemonologyWarlock = 26,\n    /**\n     * @generated from protobuf enum value: SpecDestructionWarlock = 27;\n     */\n    SpecDestructionWarlock = 27,\n    /**\n     * @generated from protobuf enum value: SpecArmsWarrior = 28;\n     */\n    SpecArmsWarrior = 28,\n    /**\n     * @generated from protobuf enum value: SpecFuryWarrior = 29;\n     */\n    SpecFuryWarrior = 29,\n    /**\n     * @generated from protobuf enum value: SpecProtectionWarrior = 30;\n     */\n    SpecProtectionWarrior = 30\n}\n/**\n * @generated from protobuf enum proto.Race\n */\nexport enum Race {\n    /**\n     * @generated from protobuf enum value: RaceUnknown = 0;\n     */\n    RaceUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RaceBloodElf = 1;\n     */\n    RaceBloodElf = 1,\n    /**\n     * @generated from protobuf enum value: RaceDraenei = 2;\n     */\n    RaceDraenei = 2,\n    /**\n     * @generated from protobuf enum value: RaceDwarf = 3;\n     */\n    RaceDwarf = 3,\n    /**\n     * @generated from protobuf enum value: RaceGnome = 4;\n     */\n    RaceGnome = 4,\n    /**\n     * @generated from protobuf enum value: RaceHuman = 5;\n     */\n    RaceHuman = 5,\n    /**\n     * @generated from protobuf enum value: RaceNightElf = 6;\n     */\n    RaceNightElf = 6,\n    /**\n     * @generated from protobuf enum value: RaceOrc = 7;\n     */\n    RaceOrc = 7,\n    /**\n     * @generated from protobuf enum value: RaceTauren = 8;\n     */\n    RaceTauren = 8,\n    /**\n     * @generated from protobuf enum value: RaceTroll = 9;\n     */\n    RaceTroll = 9,\n    /**\n     * @generated from protobuf enum value: RaceUndead = 10;\n     */\n    RaceUndead = 10,\n    /**\n     * @generated from protobuf enum value: RaceWorgen = 11;\n     */\n    RaceWorgen = 11,\n    /**\n     * @generated from protobuf enum value: RaceGoblin = 12;\n     */\n    RaceGoblin = 12\n}\n/**\n * @generated from protobuf enum proto.Faction\n */\nexport enum Faction {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Alliance = 1;\n     */\n    Alliance = 1,\n    /**\n     * @generated from protobuf enum value: Horde = 2;\n     */\n    Horde = 2\n}\n/**\n * @generated from protobuf enum proto.Class\n */\nexport enum Class {\n    /**\n     * @generated from protobuf enum value: ClassUnknown = 0;\n     */\n    ClassUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ClassDruid = 1;\n     */\n    ClassDruid = 1,\n    /**\n     * @generated from protobuf enum value: ClassHunter = 2;\n     */\n    ClassHunter = 2,\n    /**\n     * @generated from protobuf enum value: ClassMage = 3;\n     */\n    ClassMage = 3,\n    /**\n     * @generated from protobuf enum value: ClassPaladin = 4;\n     */\n    ClassPaladin = 4,\n    /**\n     * @generated from protobuf enum value: ClassPriest = 5;\n     */\n    ClassPriest = 5,\n    /**\n     * @generated from protobuf enum value: ClassRogue = 6;\n     */\n    ClassRogue = 6,\n    /**\n     * @generated from protobuf enum value: ClassShaman = 7;\n     */\n    ClassShaman = 7,\n    /**\n     * @generated from protobuf enum value: ClassWarlock = 8;\n     */\n    ClassWarlock = 8,\n    /**\n     * @generated from protobuf enum value: ClassWarrior = 9;\n     */\n    ClassWarrior = 9,\n    /**\n     * @generated from protobuf enum value: ClassDeathKnight = 10;\n     */\n    ClassDeathKnight = 10\n}\n/**\n * @generated from protobuf enum proto.Profession\n */\nexport enum Profession {\n    /**\n     * @generated from protobuf enum value: ProfessionUnknown = 0;\n     */\n    ProfessionUnknown = 0,\n    /**\n     * @generated from protobuf enum value: Alchemy = 1;\n     */\n    Alchemy = 1,\n    /**\n     * @generated from protobuf enum value: Blacksmithing = 2;\n     */\n    Blacksmithing = 2,\n    /**\n     * @generated from protobuf enum value: Enchanting = 3;\n     */\n    Enchanting = 3,\n    /**\n     * @generated from protobuf enum value: Engineering = 4;\n     */\n    Engineering = 4,\n    /**\n     * @generated from protobuf enum value: Herbalism = 5;\n     */\n    Herbalism = 5,\n    /**\n     * @generated from protobuf enum value: Inscription = 6;\n     */\n    Inscription = 6,\n    /**\n     * @generated from protobuf enum value: Jewelcrafting = 7;\n     */\n    Jewelcrafting = 7,\n    /**\n     * @generated from protobuf enum value: Leatherworking = 8;\n     */\n    Leatherworking = 8,\n    /**\n     * @generated from protobuf enum value: Mining = 9;\n     */\n    Mining = 9,\n    /**\n     * @generated from protobuf enum value: Skinning = 10;\n     */\n    Skinning = 10,\n    /**\n     * @generated from protobuf enum value: Tailoring = 11;\n     */\n    Tailoring = 11\n}\n/**\n * Keep in sync with sim/core/stats/stats.go.\n * NextIndex: 34;\n *\n * @generated from protobuf enum proto.Stat\n */\nexport enum Stat {\n    /**\n     * @generated from protobuf enum value: StatStrength = 0;\n     */\n    StatStrength = 0,\n    /**\n     * @generated from protobuf enum value: StatAgility = 1;\n     */\n    StatAgility = 1,\n    /**\n     * @generated from protobuf enum value: StatStamina = 2;\n     */\n    StatStamina = 2,\n    /**\n     * @generated from protobuf enum value: StatIntellect = 3;\n     */\n    StatIntellect = 3,\n    /**\n     * @generated from protobuf enum value: StatSpirit = 4;\n     */\n    StatSpirit = 4,\n    /**\n     * @generated from protobuf enum value: StatSpellPower = 5;\n     */\n    StatSpellPower = 5,\n    /**\n     * @generated from protobuf enum value: StatMP5 = 6;\n     */\n    StatMP5 = 6,\n    /**\n     * @generated from protobuf enum value: StatSpellHit = 7;\n     */\n    StatSpellHit = 7,\n    /**\n     * @generated from protobuf enum value: StatSpellCrit = 8;\n     */\n    StatSpellCrit = 8,\n    /**\n     * @generated from protobuf enum value: StatSpellHaste = 9;\n     */\n    StatSpellHaste = 9,\n    /**\n     * @generated from protobuf enum value: StatSpellPenetration = 10;\n     */\n    StatSpellPenetration = 10,\n    /**\n     * @generated from protobuf enum value: StatAttackPower = 11;\n     */\n    StatAttackPower = 11,\n    /**\n     * @generated from protobuf enum value: StatMeleeHit = 12;\n     */\n    StatMeleeHit = 12,\n    /**\n     * @generated from protobuf enum value: StatMeleeCrit = 13;\n     */\n    StatMeleeCrit = 13,\n    /**\n     * @generated from protobuf enum value: StatMeleeHaste = 14;\n     */\n    StatMeleeHaste = 14,\n    /**\n     * @generated from protobuf enum value: StatArmorPenetration = 15;\n     */\n    StatArmorPenetration = 15,\n    /**\n     * @generated from protobuf enum value: StatExpertise = 16;\n     */\n    StatExpertise = 16,\n    /**\n     * @generated from protobuf enum value: StatMana = 17;\n     */\n    StatMana = 17,\n    /**\n     * @generated from protobuf enum value: StatArmor = 18;\n     */\n    StatArmor = 18,\n    /**\n     * @generated from protobuf enum value: StatRangedAttackPower = 19;\n     */\n    StatRangedAttackPower = 19,\n    /**\n     * @generated from protobuf enum value: StatDefense = 20;\n     */\n    StatDefense = 20,\n    /**\n     * @generated from protobuf enum value: StatBlock = 21;\n     */\n    StatBlock = 21,\n    /**\n     * @generated from protobuf enum value: StatBlockValue = 22;\n     */\n    StatBlockValue = 22,\n    /**\n     * @generated from protobuf enum value: StatDodge = 23;\n     */\n    StatDodge = 23,\n    /**\n     * @generated from protobuf enum value: StatParry = 24;\n     */\n    StatParry = 24,\n    /**\n     * @generated from protobuf enum value: StatResilience = 25;\n     */\n    StatResilience = 25,\n    /**\n     * @generated from protobuf enum value: StatHealth = 26;\n     */\n    StatHealth = 26,\n    /**\n     * @generated from protobuf enum value: StatArcaneResistance = 27;\n     */\n    StatArcaneResistance = 27,\n    /**\n     * @generated from protobuf enum value: StatFireResistance = 28;\n     */\n    StatFireResistance = 28,\n    /**\n     * @generated from protobuf enum value: StatFrostResistance = 29;\n     */\n    StatFrostResistance = 29,\n    /**\n     * @generated from protobuf enum value: StatNatureResistance = 30;\n     */\n    StatNatureResistance = 30,\n    /**\n     * @generated from protobuf enum value: StatShadowResistance = 31;\n     */\n    StatShadowResistance = 31,\n    /**\n     * @generated from protobuf enum value: StatBonusArmor = 32;\n     */\n    StatBonusArmor = 32,\n    /**\n     * @generated from protobuf enum value: StatMastery = 33;\n     */\n    StatMastery = 33\n}\n/**\n * Not all pseudostats are included here; just the ones we want to pass\n * between the UI and backend.\n *\n * It's also OK to include things here which aren't in the PseudoStats struct.\n *\n * @generated from protobuf enum proto.PseudoStat\n */\nexport enum PseudoStat {\n    /**\n     * @generated from protobuf enum value: PseudoStatMainHandDps = 0;\n     */\n    PseudoStatMainHandDps = 0,\n    /**\n     * @generated from protobuf enum value: PseudoStatOffHandDps = 1;\n     */\n    PseudoStatOffHandDps = 1,\n    /**\n     * @generated from protobuf enum value: PseudoStatRangedDps = 2;\n     */\n    PseudoStatRangedDps = 2,\n    /**\n     * @generated from protobuf enum value: PseudoStatBlockValueMultiplier = 3;\n     */\n    PseudoStatBlockValueMultiplier = 3,\n    /**\n     * @generated from protobuf enum value: PseudoStatDodge = 4;\n     */\n    PseudoStatDodge = 4,\n    /**\n     * @generated from protobuf enum value: PseudoStatParry = 5;\n     */\n    PseudoStatParry = 5\n}\n/**\n * @generated from protobuf enum proto.ItemType\n */\nexport enum ItemType {\n    /**\n     * @generated from protobuf enum value: ItemTypeUnknown = 0;\n     */\n    ItemTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ItemTypeHead = 1;\n     */\n    ItemTypeHead = 1,\n    /**\n     * @generated from protobuf enum value: ItemTypeNeck = 2;\n     */\n    ItemTypeNeck = 2,\n    /**\n     * @generated from protobuf enum value: ItemTypeShoulder = 3;\n     */\n    ItemTypeShoulder = 3,\n    /**\n     * @generated from protobuf enum value: ItemTypeBack = 4;\n     */\n    ItemTypeBack = 4,\n    /**\n     * @generated from protobuf enum value: ItemTypeChest = 5;\n     */\n    ItemTypeChest = 5,\n    /**\n     * @generated from protobuf enum value: ItemTypeWrist = 6;\n     */\n    ItemTypeWrist = 6,\n    /**\n     * @generated from protobuf enum value: ItemTypeHands = 7;\n     */\n    ItemTypeHands = 7,\n    /**\n     * @generated from protobuf enum value: ItemTypeWaist = 8;\n     */\n    ItemTypeWaist = 8,\n    /**\n     * @generated from protobuf enum value: ItemTypeLegs = 9;\n     */\n    ItemTypeLegs = 9,\n    /**\n     * @generated from protobuf enum value: ItemTypeFeet = 10;\n     */\n    ItemTypeFeet = 10,\n    /**\n     * @generated from protobuf enum value: ItemTypeFinger = 11;\n     */\n    ItemTypeFinger = 11,\n    /**\n     * @generated from protobuf enum value: ItemTypeTrinket = 12;\n     */\n    ItemTypeTrinket = 12,\n    /**\n     * @generated from protobuf enum value: ItemTypeWeapon = 13;\n     */\n    ItemTypeWeapon = 13,\n    /**\n     * @generated from protobuf enum value: ItemTypeRanged = 14;\n     */\n    ItemTypeRanged = 14\n}\n/**\n * @generated from protobuf enum proto.ArmorType\n */\nexport enum ArmorType {\n    /**\n     * @generated from protobuf enum value: ArmorTypeUnknown = 0;\n     */\n    ArmorTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ArmorTypeCloth = 1;\n     */\n    ArmorTypeCloth = 1,\n    /**\n     * @generated from protobuf enum value: ArmorTypeLeather = 2;\n     */\n    ArmorTypeLeather = 2,\n    /**\n     * @generated from protobuf enum value: ArmorTypeMail = 3;\n     */\n    ArmorTypeMail = 3,\n    /**\n     * @generated from protobuf enum value: ArmorTypePlate = 4;\n     */\n    ArmorTypePlate = 4\n}\n/**\n * @generated from protobuf enum proto.WeaponType\n */\nexport enum WeaponType {\n    /**\n     * @generated from protobuf enum value: WeaponTypeUnknown = 0;\n     */\n    WeaponTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: WeaponTypeAxe = 1;\n     */\n    WeaponTypeAxe = 1,\n    /**\n     * @generated from protobuf enum value: WeaponTypeDagger = 2;\n     */\n    WeaponTypeDagger = 2,\n    /**\n     * @generated from protobuf enum value: WeaponTypeFist = 3;\n     */\n    WeaponTypeFist = 3,\n    /**\n     * @generated from protobuf enum value: WeaponTypeMace = 4;\n     */\n    WeaponTypeMace = 4,\n    /**\n     * @generated from protobuf enum value: WeaponTypeOffHand = 5;\n     */\n    WeaponTypeOffHand = 5,\n    /**\n     * @generated from protobuf enum value: WeaponTypePolearm = 6;\n     */\n    WeaponTypePolearm = 6,\n    /**\n     * @generated from protobuf enum value: WeaponTypeShield = 7;\n     */\n    WeaponTypeShield = 7,\n    /**\n     * @generated from protobuf enum value: WeaponTypeStaff = 8;\n     */\n    WeaponTypeStaff = 8,\n    /**\n     * @generated from protobuf enum value: WeaponTypeSword = 9;\n     */\n    WeaponTypeSword = 9\n}\n/**\n * @generated from protobuf enum proto.HandType\n */\nexport enum HandType {\n    /**\n     * @generated from protobuf enum value: HandTypeUnknown = 0;\n     */\n    HandTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: HandTypeMainHand = 1;\n     */\n    HandTypeMainHand = 1,\n    /**\n     * @generated from protobuf enum value: HandTypeOneHand = 2;\n     */\n    HandTypeOneHand = 2,\n    /**\n     * @generated from protobuf enum value: HandTypeOffHand = 3;\n     */\n    HandTypeOffHand = 3,\n    /**\n     * @generated from protobuf enum value: HandTypeTwoHand = 4;\n     */\n    HandTypeTwoHand = 4\n}\n/**\n * @generated from protobuf enum proto.RangedWeaponType\n */\nexport enum RangedWeaponType {\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeUnknown = 0;\n     */\n    RangedWeaponTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeBow = 1;\n     */\n    RangedWeaponTypeBow = 1,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeCrossbow = 2;\n     */\n    RangedWeaponTypeCrossbow = 2,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeGun = 3;\n     */\n    RangedWeaponTypeGun = 3,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeIdol = 4;\n     */\n    RangedWeaponTypeIdol = 4,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeLibram = 5;\n     */\n    RangedWeaponTypeLibram = 5,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeThrown = 6;\n     */\n    RangedWeaponTypeThrown = 6,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeTotem = 7;\n     */\n    RangedWeaponTypeTotem = 7,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeWand = 8;\n     */\n    RangedWeaponTypeWand = 8,\n    /**\n     * @generated from protobuf enum value: RangedWeaponTypeSigil = 9;\n     */\n    RangedWeaponTypeSigil = 9\n}\n/**\n * All slots on the gear menu where a single item can be worn.\n *\n * @generated from protobuf enum proto.ItemSlot\n */\nexport enum ItemSlot {\n    /**\n     * @generated from protobuf enum value: ItemSlotHead = 0;\n     */\n    ItemSlotHead = 0,\n    /**\n     * @generated from protobuf enum value: ItemSlotNeck = 1;\n     */\n    ItemSlotNeck = 1,\n    /**\n     * @generated from protobuf enum value: ItemSlotShoulder = 2;\n     */\n    ItemSlotShoulder = 2,\n    /**\n     * @generated from protobuf enum value: ItemSlotBack = 3;\n     */\n    ItemSlotBack = 3,\n    /**\n     * @generated from protobuf enum value: ItemSlotChest = 4;\n     */\n    ItemSlotChest = 4,\n    /**\n     * @generated from protobuf enum value: ItemSlotWrist = 5;\n     */\n    ItemSlotWrist = 5,\n    /**\n     * @generated from protobuf enum value: ItemSlotHands = 6;\n     */\n    ItemSlotHands = 6,\n    /**\n     * @generated from protobuf enum value: ItemSlotWaist = 7;\n     */\n    ItemSlotWaist = 7,\n    /**\n     * @generated from protobuf enum value: ItemSlotLegs = 8;\n     */\n    ItemSlotLegs = 8,\n    /**\n     * @generated from protobuf enum value: ItemSlotFeet = 9;\n     */\n    ItemSlotFeet = 9,\n    /**\n     * @generated from protobuf enum value: ItemSlotFinger1 = 10;\n     */\n    ItemSlotFinger1 = 10,\n    /**\n     * @generated from protobuf enum value: ItemSlotFinger2 = 11;\n     */\n    ItemSlotFinger2 = 11,\n    /**\n     * @generated from protobuf enum value: ItemSlotTrinket1 = 12;\n     */\n    ItemSlotTrinket1 = 12,\n    /**\n     * @generated from protobuf enum value: ItemSlotTrinket2 = 13;\n     */\n    ItemSlotTrinket2 = 13,\n    /**\n     * can be 1h or 2h\n     *\n     * @generated from protobuf enum value: ItemSlotMainHand = 14;\n     */\n    ItemSlotMainHand = 14,\n    /**\n     * @generated from protobuf enum value: ItemSlotOffHand = 15;\n     */\n    ItemSlotOffHand = 15,\n    /**\n     * @generated from protobuf enum value: ItemSlotRanged = 16;\n     */\n    ItemSlotRanged = 16\n}\n/**\n * @generated from protobuf enum proto.ItemQuality\n */\nexport enum ItemQuality {\n    /**\n     * @generated from protobuf enum value: ItemQualityJunk = 0;\n     */\n    ItemQualityJunk = 0,\n    /**\n     * @generated from protobuf enum value: ItemQualityCommon = 1;\n     */\n    ItemQualityCommon = 1,\n    /**\n     * @generated from protobuf enum value: ItemQualityUncommon = 2;\n     */\n    ItemQualityUncommon = 2,\n    /**\n     * @generated from protobuf enum value: ItemQualityRare = 3;\n     */\n    ItemQualityRare = 3,\n    /**\n     * @generated from protobuf enum value: ItemQualityEpic = 4;\n     */\n    ItemQualityEpic = 4,\n    /**\n     * @generated from protobuf enum value: ItemQualityLegendary = 5;\n     */\n    ItemQualityLegendary = 5,\n    /**\n     * @generated from protobuf enum value: ItemQualityArtifact = 6;\n     */\n    ItemQualityArtifact = 6,\n    /**\n     * @generated from protobuf enum value: ItemQualityHeirloom = 7;\n     */\n    ItemQualityHeirloom = 7\n}\n/**\n * @generated from protobuf enum proto.GemColor\n */\nexport enum GemColor {\n    /**\n     * @generated from protobuf enum value: GemColorUnknown = 0;\n     */\n    GemColorUnknown = 0,\n    /**\n     * @generated from protobuf enum value: GemColorMeta = 1;\n     */\n    GemColorMeta = 1,\n    /**\n     * @generated from protobuf enum value: GemColorRed = 2;\n     */\n    GemColorRed = 2,\n    /**\n     * @generated from protobuf enum value: GemColorBlue = 3;\n     */\n    GemColorBlue = 3,\n    /**\n     * @generated from protobuf enum value: GemColorYellow = 4;\n     */\n    GemColorYellow = 4,\n    /**\n     * @generated from protobuf enum value: GemColorGreen = 5;\n     */\n    GemColorGreen = 5,\n    /**\n     * @generated from protobuf enum value: GemColorOrange = 6;\n     */\n    GemColorOrange = 6,\n    /**\n     * @generated from protobuf enum value: GemColorPurple = 7;\n     */\n    GemColorPurple = 7,\n    /**\n     * @generated from protobuf enum value: GemColorPrismatic = 8;\n     */\n    GemColorPrismatic = 8\n}\n/**\n * @generated from protobuf enum proto.SpellSchool\n */\nexport enum SpellSchool {\n    /**\n     * @generated from protobuf enum value: SpellSchoolPhysical = 0;\n     */\n    SpellSchoolPhysical = 0,\n    /**\n     * @generated from protobuf enum value: SpellSchoolArcane = 1;\n     */\n    SpellSchoolArcane = 1,\n    /**\n     * @generated from protobuf enum value: SpellSchoolFire = 2;\n     */\n    SpellSchoolFire = 2,\n    /**\n     * @generated from protobuf enum value: SpellSchoolFrost = 3;\n     */\n    SpellSchoolFrost = 3,\n    /**\n     * @generated from protobuf enum value: SpellSchoolHoly = 4;\n     */\n    SpellSchoolHoly = 4,\n    /**\n     * @generated from protobuf enum value: SpellSchoolNature = 5;\n     */\n    SpellSchoolNature = 5,\n    /**\n     * @generated from protobuf enum value: SpellSchoolShadow = 6;\n     */\n    SpellSchoolShadow = 6\n}\n/**\n * @generated from protobuf enum proto.TristateEffect\n */\nexport enum TristateEffect {\n    /**\n     * @generated from protobuf enum value: TristateEffectMissing = 0;\n     */\n    TristateEffectMissing = 0,\n    /**\n     * @generated from protobuf enum value: TristateEffectRegular = 1;\n     */\n    TristateEffectRegular = 1,\n    /**\n     * @generated from protobuf enum value: TristateEffectImproved = 2;\n     */\n    TristateEffectImproved = 2\n}\n/**\n * @generated from protobuf enum proto.Explosive\n */\nexport enum Explosive {\n    /**\n     * @generated from protobuf enum value: ExplosiveUnknown = 0;\n     */\n    ExplosiveUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ExplosiveSaroniteBomb = 1;\n     */\n    ExplosiveSaroniteBomb = 1,\n    /**\n     * @generated from protobuf enum value: ExplosiveCobaltFragBomb = 2;\n     */\n    ExplosiveCobaltFragBomb = 2\n}\n/**\n * @generated from protobuf enum proto.Potions\n */\nexport enum Potions {\n    /**\n     * @generated from protobuf enum value: UnknownPotion = 0;\n     */\n    UnknownPotion = 0,\n    /**\n     * 58146\n     *\n     * @generated from protobuf enum value: GolembloodPotion = 1;\n     */\n    GolembloodPotion = 1,\n    /**\n     * 58145\n     *\n     * @generated from protobuf enum value: PotionOfTheTolvir = 2;\n     */\n    PotionOfTheTolvir = 2,\n    /**\n     * 57194\n     *\n     * @generated from protobuf enum value: PotionOfConcentration = 3;\n     */\n    PotionOfConcentration = 3,\n    /**\n     * 58091\n     *\n     * @generated from protobuf enum value: VolcanicPotion = 4;\n     */\n    VolcanicPotion = 4,\n    /**\n     * 58090\n     *\n     * @generated from protobuf enum value: EarthenPotion = 5;\n     */\n    EarthenPotion = 5,\n    /**\n     * 57193\n     *\n     * @generated from protobuf enum value: MightyRejuvenationPotion = 6;\n     */\n    MightyRejuvenationPotion = 6,\n    /**\n     * 57191\n     *\n     * @generated from protobuf enum value: MythicalHealingPotion = 7;\n     */\n    MythicalHealingPotion = 7,\n    /**\n     * 57192\n     *\n     * @generated from protobuf enum value: MythicalManaPotion = 8;\n     */\n    MythicalManaPotion = 8,\n    /**\n     * @generated from protobuf enum value: PotionOfSpeed = 9;\n     */\n    PotionOfSpeed = 9,\n    /**\n     * @generated from protobuf enum value: HastePotion = 10;\n     */\n    HastePotion = 10,\n    /**\n     * @generated from protobuf enum value: MightyRagePotion = 11;\n     */\n    MightyRagePotion = 11,\n    /**\n     * @generated from protobuf enum value: RunicManaInjector = 12;\n     */\n    RunicManaInjector = 12,\n    /**\n     * @generated from protobuf enum value: RunicHealingInjector = 13;\n     */\n    RunicHealingInjector = 13\n}\n/**\n * @generated from protobuf enum proto.Conjured\n */\nexport enum Conjured {\n    /**\n     * @generated from protobuf enum value: ConjuredUnknown = 0;\n     */\n    ConjuredUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ConjuredDarkRune = 1;\n     */\n    ConjuredDarkRune = 1,\n    /**\n     * @generated from protobuf enum value: ConjuredFlameCap = 2;\n     */\n    ConjuredFlameCap = 2,\n    /**\n     * @generated from protobuf enum value: ConjuredHealthstone = 5;\n     */\n    ConjuredHealthstone = 5,\n    /**\n     * @generated from protobuf enum value: ConjuredRogueThistleTea = 4;\n     */\n    ConjuredRogueThistleTea = 4\n}\n/**\n * @generated from protobuf enum proto.Flask\n */\nexport enum Flask {\n    /**\n     * @generated from protobuf enum value: FlaskUnknown = 0;\n     */\n    FlaskUnknown = 0,\n    /**\n     * @generated from protobuf enum value: FlaskOfTitanicStrength = 1;\n     */\n    FlaskOfTitanicStrength = 1,\n    /**\n     * @generated from protobuf enum value: FlaskOfTheWinds = 2;\n     */\n    FlaskOfTheWinds = 2,\n    /**\n     * @generated from protobuf enum value: FlaskOfSteelskin = 3;\n     */\n    FlaskOfSteelskin = 3,\n    /**\n     * @generated from protobuf enum value: FlaskOfFlowingWater = 4;\n     */\n    FlaskOfFlowingWater = 4,\n    /**\n     * Wotlk\n     *\n     * @generated from protobuf enum value: FlaskOfTheFrostWyrm = 5;\n     */\n    FlaskOfTheFrostWyrm = 5,\n    /**\n     * @generated from protobuf enum value: FlaskOfEndlessRage = 6;\n     */\n    FlaskOfEndlessRage = 6,\n    /**\n     * @generated from protobuf enum value: FlaskOfPureMojo = 7;\n     */\n    FlaskOfPureMojo = 7,\n    /**\n     * @generated from protobuf enum value: FlaskOfStoneblood = 8;\n     */\n    FlaskOfStoneblood = 8,\n    /**\n     * @generated from protobuf enum value: LesserFlaskOfToughness = 9;\n     */\n    LesserFlaskOfToughness = 9,\n    /**\n     * @generated from protobuf enum value: LesserFlaskOfResistance = 10;\n     */\n    LesserFlaskOfResistance = 10\n}\n/**\n * @generated from protobuf enum proto.BattleElixir\n */\nexport enum BattleElixir {\n    /**\n     * @generated from protobuf enum value: BattleElixirUnknown = 0;\n     */\n    BattleElixirUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ElixirOfTheMaster = 1;\n     */\n    ElixirOfTheMaster = 1,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightySpeed = 2;\n     */\n    ElixirOfMightySpeed = 2,\n    /**\n     * @generated from protobuf enum value: ElixirOfImpossibleAccuracy = 3;\n     */\n    ElixirOfImpossibleAccuracy = 3,\n    /**\n     * @generated from protobuf enum value: ElixirOfTheCobra = 4;\n     */\n    ElixirOfTheCobra = 4,\n    /**\n     * @generated from protobuf enum value: ElixirOfTheNaga = 5;\n     */\n    ElixirOfTheNaga = 5,\n    /**\n     * @generated from protobuf enum value: GhostElixir = 6;\n     */\n    GhostElixir = 6,\n    /**\n     * Wotlk\n     *\n     * @generated from protobuf enum value: ElixirOfAccuracy = 7;\n     */\n    ElixirOfAccuracy = 7,\n    /**\n     * @generated from protobuf enum value: ElixirOfArmorPiercing = 8;\n     */\n    ElixirOfArmorPiercing = 8,\n    /**\n     * @generated from protobuf enum value: ElixirOfDeadlyStrikes = 9;\n     */\n    ElixirOfDeadlyStrikes = 9,\n    /**\n     * @generated from protobuf enum value: ElixirOfExpertise = 10;\n     */\n    ElixirOfExpertise = 10,\n    /**\n     * @generated from protobuf enum value: ElixirOfLightningSpeed = 11;\n     */\n    ElixirOfLightningSpeed = 11,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyAgility = 12;\n     */\n    ElixirOfMightyAgility = 12,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyStrength = 13;\n     */\n    ElixirOfMightyStrength = 13,\n    /**\n     * @generated from protobuf enum value: GurusElixir = 14;\n     */\n    GurusElixir = 14,\n    /**\n     * @generated from protobuf enum value: SpellpowerElixir = 15;\n     */\n    SpellpowerElixir = 15,\n    /**\n     * @generated from protobuf enum value: WrathElixir = 16;\n     */\n    WrathElixir = 16,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: ElixirOfDemonslaying = 17;\n     */\n    ElixirOfDemonslaying = 17\n}\n/**\n * @generated from protobuf enum proto.GuardianElixir\n */\nexport enum GuardianElixir {\n    /**\n     * @generated from protobuf enum value: GuardianElixirUnknown = 0;\n     */\n    GuardianElixirUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ElixirOfDeepEarth = 1;\n     */\n    ElixirOfDeepEarth = 1,\n    /**\n     * @generated from protobuf enum value: PrismaticElixir = 2;\n     */\n    PrismaticElixir = 2,\n    /**\n     * Wotlk\n     *\n     * @generated from protobuf enum value: ElixirOfMightyDefense = 3;\n     */\n    ElixirOfMightyDefense = 3,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyFortitude = 4;\n     */\n    ElixirOfMightyFortitude = 4,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyMageblood = 5;\n     */\n    ElixirOfMightyMageblood = 5,\n    /**\n     * @generated from protobuf enum value: ElixirOfMightyThoughts = 6;\n     */\n    ElixirOfMightyThoughts = 6,\n    /**\n     * @generated from protobuf enum value: ElixirOfProtection = 7;\n     */\n    ElixirOfProtection = 7,\n    /**\n     * @generated from protobuf enum value: ElixirOfSpirit = 8;\n     */\n    ElixirOfSpirit = 8,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: GiftOfArthas = 9;\n     */\n    GiftOfArthas = 9\n}\n/**\n * @generated from protobuf enum proto.Food\n */\nexport enum Food {\n    /**\n     * @generated from protobuf enum value: FoodUnknown = 0;\n     */\n    FoodUnknown = 0,\n    /**\n     * @generated from protobuf enum value: FoodFishFeast = 1;\n     */\n    FoodFishFeast = 1,\n    /**\n     * @generated from protobuf enum value: FoodGreatFeast = 2;\n     */\n    FoodGreatFeast = 2,\n    /**\n     * @generated from protobuf enum value: FoodBlackenedDragonfin = 3;\n     */\n    FoodBlackenedDragonfin = 3,\n    /**\n     * @generated from protobuf enum value: FoodHeartyRhino = 4;\n     */\n    FoodHeartyRhino = 4,\n    /**\n     * @generated from protobuf enum value: FoodMegaMammothMeal = 5;\n     */\n    FoodMegaMammothMeal = 5,\n    /**\n     * @generated from protobuf enum value: FoodSpicedWormBurger = 6;\n     */\n    FoodSpicedWormBurger = 6,\n    /**\n     * @generated from protobuf enum value: FoodRhinoliciousWormsteak = 7;\n     */\n    FoodRhinoliciousWormsteak = 7,\n    /**\n     * @generated from protobuf enum value: FoodImperialMantaSteak = 8;\n     */\n    FoodImperialMantaSteak = 8,\n    /**\n     * @generated from protobuf enum value: FoodSnapperExtreme = 9;\n     */\n    FoodSnapperExtreme = 9,\n    /**\n     * @generated from protobuf enum value: FoodMightyRhinoDogs = 10;\n     */\n    FoodMightyRhinoDogs = 10,\n    /**\n     * @generated from protobuf enum value: FoodFirecrackerSalmon = 11;\n     */\n    FoodFirecrackerSalmon = 11,\n    /**\n     * @generated from protobuf enum value: FoodCuttlesteak = 12;\n     */\n    FoodCuttlesteak = 12,\n    /**\n     * @generated from protobuf enum value: FoodDragonfinFilet = 13;\n     */\n    FoodDragonfinFilet = 13,\n    /**\n     * TBC Foods\n     *\n     * @generated from protobuf enum value: FoodBlackenedBasilisk = 14;\n     */\n    FoodBlackenedBasilisk = 14,\n    /**\n     * @generated from protobuf enum value: FoodGrilledMudfish = 15;\n     */\n    FoodGrilledMudfish = 15,\n    /**\n     * @generated from protobuf enum value: FoodRavagerDog = 16;\n     */\n    FoodRavagerDog = 16,\n    /**\n     * @generated from protobuf enum value: FoodRoastedClefthoof = 17;\n     */\n    FoodRoastedClefthoof = 17,\n    /**\n     * @generated from protobuf enum value: FoodSkullfishSoup = 18;\n     */\n    FoodSkullfishSoup = 18,\n    /**\n     * @generated from protobuf enum value: FoodSpicyHotTalbuk = 19;\n     */\n    FoodSpicyHotTalbuk = 19,\n    /**\n     * @generated from protobuf enum value: FoodFishermansFeast = 20;\n     */\n    FoodFishermansFeast = 20\n}\n/**\n * @generated from protobuf enum proto.PetFood\n */\nexport enum PetFood {\n    /**\n     * @generated from protobuf enum value: PetFoodUnknown = 0;\n     */\n    PetFoodUnknown = 0,\n    /**\n     * @generated from protobuf enum value: PetFoodSpicedMammothTreats = 1;\n     */\n    PetFoodSpicedMammothTreats = 1,\n    /**\n     * TBC\n     *\n     * @generated from protobuf enum value: PetFoodKiblersBits = 2;\n     */\n    PetFoodKiblersBits = 2\n}\n/**\n * @generated from protobuf enum proto.MobType\n */\nexport enum MobType {\n    /**\n     * @generated from protobuf enum value: MobTypeUnknown = 0;\n     */\n    MobTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: MobTypeBeast = 1;\n     */\n    MobTypeBeast = 1,\n    /**\n     * @generated from protobuf enum value: MobTypeDemon = 2;\n     */\n    MobTypeDemon = 2,\n    /**\n     * @generated from protobuf enum value: MobTypeDragonkin = 3;\n     */\n    MobTypeDragonkin = 3,\n    /**\n     * @generated from protobuf enum value: MobTypeElemental = 4;\n     */\n    MobTypeElemental = 4,\n    /**\n     * @generated from protobuf enum value: MobTypeGiant = 5;\n     */\n    MobTypeGiant = 5,\n    /**\n     * @generated from protobuf enum value: MobTypeHumanoid = 6;\n     */\n    MobTypeHumanoid = 6,\n    /**\n     * @generated from protobuf enum value: MobTypeMechanical = 7;\n     */\n    MobTypeMechanical = 7,\n    /**\n     * @generated from protobuf enum value: MobTypeUndead = 8;\n     */\n    MobTypeUndead = 8\n}\n/**\n * @generated from protobuf enum proto.InputType\n */\nexport enum InputType {\n    /**\n     * @generated from protobuf enum value: Bool = 0;\n     */\n    Bool = 0,\n    /**\n     * @generated from protobuf enum value: Number = 1;\n     */\n    Number = 1\n}\n/**\n * Extra enum for describing which items are eligible for an enchant, when\n * ItemType alone is not enough.\n *\n * @generated from protobuf enum proto.EnchantType\n */\nexport enum EnchantType {\n    /**\n     * @generated from protobuf enum value: EnchantTypeNormal = 0;\n     */\n    EnchantTypeNormal = 0,\n    /**\n     * @generated from protobuf enum value: EnchantTypeTwoHand = 1;\n     */\n    EnchantTypeTwoHand = 1,\n    /**\n     * @generated from protobuf enum value: EnchantTypeShield = 2;\n     */\n    EnchantTypeShield = 2,\n    /**\n     * @generated from protobuf enum value: EnchantTypeKit = 3;\n     */\n    EnchantTypeKit = 3,\n    /**\n     * @generated from protobuf enum value: EnchantTypeStaff = 4;\n     */\n    EnchantTypeStaff = 4\n}\n/**\n * ID for actions that aren't spells or items.\n *\n * @generated from protobuf enum proto.OtherAction\n */\nexport enum OtherAction {\n    /**\n     * @generated from protobuf enum value: OtherActionNone = 0;\n     */\n    OtherActionNone = 0,\n    /**\n     * @generated from protobuf enum value: OtherActionWait = 1;\n     */\n    OtherActionWait = 1,\n    /**\n     * @generated from protobuf enum value: OtherActionManaRegen = 2;\n     */\n    OtherActionManaRegen = 2,\n    /**\n     * @generated from protobuf enum value: OtherActionEnergyRegen = 5;\n     */\n    OtherActionEnergyRegen = 5,\n    /**\n     * @generated from protobuf enum value: OtherActionFocusRegen = 6;\n     */\n    OtherActionFocusRegen = 6,\n    /**\n     * For threat generated from mana gains.\n     *\n     * @generated from protobuf enum value: OtherActionManaGain = 10;\n     */\n    OtherActionManaGain = 10,\n    /**\n     * For threat generated from rage gains.\n     *\n     * @generated from protobuf enum value: OtherActionRageGain = 11;\n     */\n    OtherActionRageGain = 11,\n    /**\n     * A white hit, can be main hand or off hand.\n     *\n     * @generated from protobuf enum value: OtherActionAttack = 3;\n     */\n    OtherActionAttack = 3,\n    /**\n     * Default shoot action using a wand/bow/gun.\n     *\n     * @generated from protobuf enum value: OtherActionShoot = 4;\n     */\n    OtherActionShoot = 4,\n    /**\n     * Represents a grouping of all pet actions. Only used by the UI.\n     *\n     * @generated from protobuf enum value: OtherActionPet = 7;\n     */\n    OtherActionPet = 7,\n    /**\n     * Refund of a resource like Energy or Rage, when the ability didn't land.\n     *\n     * @generated from protobuf enum value: OtherActionRefund = 8;\n     */\n    OtherActionRefund = 8,\n    /**\n     * Indicates damage taken; used for rage gen.\n     *\n     * @generated from protobuf enum value: OtherActionDamageTaken = 9;\n     */\n    OtherActionDamageTaken = 9,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionHealingModel = 12;\n     */\n    OtherActionHealingModel = 12,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionBloodRuneGain = 13;\n     */\n    OtherActionBloodRuneGain = 13,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionFrostRuneGain = 14;\n     */\n    OtherActionFrostRuneGain = 14,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionUnholyRuneGain = 15;\n     */\n    OtherActionUnholyRuneGain = 15,\n    /**\n     * Indicates healing received from healing model.\n     *\n     * @generated from protobuf enum value: OtherActionDeathRuneGain = 16;\n     */\n    OtherActionDeathRuneGain = 16,\n    /**\n     * Used by APL to generically refer to either the prepull or combat potion.\n     *\n     * @generated from protobuf enum value: OtherActionPotion = 17;\n     */\n    OtherActionPotion = 17\n}\n/**\n * @generated from protobuf enum proto.RotationType\n */\nexport enum RotationType {\n    /**\n     * @generated from protobuf enum value: UnknownType = 0;\n     */\n    UnknownType = 0,\n    /**\n     * @generated from protobuf enum value: SingleTarget = 1;\n     */\n    SingleTarget = 1,\n    /**\n     * @generated from protobuf enum value: Aoe = 3;\n     */\n    Aoe = 3,\n    /**\n     * @generated from protobuf enum value: Custom = 2;\n     */\n    Custom = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnitStats$Type extends MessageType<UnitStats> {\n    constructor() {\n        super(\"proto.UnitStats\", [\n            { no: 1, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"pseudo_stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<UnitStats>): UnitStats {\n        const message = { stats: [], pseudoStats: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnitStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitStats): UnitStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated double stats */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* repeated double pseudo_stats */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.pseudoStats.push(reader.double());\n                    else\n                        message.pseudoStats.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnitStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated double stats = 1; */\n        if (message.stats.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* repeated double pseudo_stats = 2; */\n        if (message.pseudoStats.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.pseudoStats.length; i++)\n                writer.double(message.pseudoStats[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnitStats\n */\nexport const UnitStats = new UnitStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ReforgeStat$Type extends MessageType<ReforgeStat> {\n    constructor() {\n        super(\"proto.ReforgeStat\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"fromStat\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Stat\", Stat] },\n            { no: 3, name: \"toStat\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Stat\", Stat] },\n            { no: 4, name: \"multiplier\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ReforgeStat>): ReforgeStat {\n        const message = { id: 0, fromStat: [], toStat: [], multiplier: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ReforgeStat>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReforgeStat): ReforgeStat {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* repeated proto.Stat fromStat */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.fromStat.push(reader.int32());\n                    else\n                        message.fromStat.push(reader.int32());\n                    break;\n                case /* repeated proto.Stat toStat */ 3:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.toStat.push(reader.int32());\n                    else\n                        message.toStat.push(reader.int32());\n                    break;\n                case /* double multiplier */ 4:\n                    message.multiplier = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ReforgeStat, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* repeated proto.Stat fromStat = 2; */\n        if (message.fromStat.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.fromStat.length; i++)\n                writer.int32(message.fromStat[i]);\n            writer.join();\n        }\n        /* repeated proto.Stat toStat = 3; */\n        if (message.toStat.length) {\n            writer.tag(3, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.toStat.length; i++)\n                writer.int32(message.toStat[i]);\n            writer.join();\n        }\n        /* double multiplier = 4; */\n        if (message.multiplier !== 0)\n            writer.tag(4, WireType.Bit64).double(message.multiplier);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ReforgeStat\n */\nexport const ReforgeStat = new ReforgeStat$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidBuffs$Type extends MessageType<RaidBuffs> {\n    constructor() {\n        super(\"proto.RaidBuffs\", [\n            { no: 1, name: \"gift_of_the_wild\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 2, name: \"power_word_fortitude\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 3, name: \"commanding_shout\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 4, name: \"blood_pact\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 5, name: \"horn_of_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"strength_of_earth_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 7, name: \"arcane_brilliance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"fel_intelligence\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 9, name: \"divine_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"battle_shout\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 11, name: \"trueshot_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"unleashed_rage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"abominations_might\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"leader_of_the_pack\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 15, name: \"rampage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"icy_talons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"windfury_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 18, name: \"totem_of_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"flametongue_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 44, name: \"demonic_pact_sp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"swift_retribution\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"moonkin_aura\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 23, name: \"elemental_oath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"wrath_of_air_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"ferocious_inspiration\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"sanctified_retribution\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"arcane_empowerment\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"mana_spring_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 33, name: \"shadow_protection\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 45, name: \"nature_resistance_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 46, name: \"aspect_of_the_wild\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 47, name: \"frost_resistance_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"frost_resistance_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"bloodlust\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"thorns\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 31, name: \"devotion_aura\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 42, name: \"stoneskin_totem\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 32, name: \"retribution_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"strength_of_wrynn\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"drums_of_forgotten_kings\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"drums_of_the_wild\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"scroll_of_protection\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"scroll_of_stamina\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"scroll_of_strength\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"scroll_of_agility\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 40, name: \"scroll_of_intellect\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 41, name: \"scroll_of_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RaidBuffs>): RaidBuffs {\n        const message = { giftOfTheWild: 0, powerWordFortitude: 0, commandingShout: 0, bloodPact: 0, hornOfWinter: false, strengthOfEarthTotem: 0, arcaneBrilliance: false, felIntelligence: 0, divineSpirit: false, battleShout: 0, trueshotAura: false, unleashedRage: false, abominationsMight: false, leaderOfThePack: 0, rampage: false, icyTalons: false, windfuryTotem: 0, totemOfWrath: false, flametongueTotem: false, demonicPactSp: 0, swiftRetribution: false, moonkinAura: 0, elementalOath: false, wrathOfAirTotem: false, ferociousInspiration: false, sanctifiedRetribution: false, arcaneEmpowerment: false, manaSpringTotem: 0, shadowProtection: false, natureResistanceTotem: false, aspectOfTheWild: false, frostResistanceAura: false, frostResistanceTotem: false, bloodlust: false, thorns: 0, devotionAura: 0, stoneskinTotem: 0, retributionAura: false, strengthOfWrynn: false, drumsOfForgottenKings: false, drumsOfTheWild: false, scrollOfProtection: false, scrollOfStamina: false, scrollOfStrength: false, scrollOfAgility: false, scrollOfIntellect: false, scrollOfSpirit: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidBuffs): RaidBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.TristateEffect gift_of_the_wild */ 1:\n                    message.giftOfTheWild = reader.int32();\n                    break;\n                case /* proto.TristateEffect power_word_fortitude */ 2:\n                    message.powerWordFortitude = reader.int32();\n                    break;\n                case /* proto.TristateEffect commanding_shout */ 3:\n                    message.commandingShout = reader.int32();\n                    break;\n                case /* proto.TristateEffect blood_pact */ 4:\n                    message.bloodPact = reader.int32();\n                    break;\n                case /* bool horn_of_winter */ 5:\n                    message.hornOfWinter = reader.bool();\n                    break;\n                case /* proto.TristateEffect strength_of_earth_totem */ 6:\n                    message.strengthOfEarthTotem = reader.int32();\n                    break;\n                case /* bool arcane_brilliance */ 7:\n                    message.arcaneBrilliance = reader.bool();\n                    break;\n                case /* proto.TristateEffect fel_intelligence */ 8:\n                    message.felIntelligence = reader.int32();\n                    break;\n                case /* bool divine_spirit */ 9:\n                    message.divineSpirit = reader.bool();\n                    break;\n                case /* proto.TristateEffect battle_shout */ 10:\n                    message.battleShout = reader.int32();\n                    break;\n                case /* bool trueshot_aura */ 11:\n                    message.trueshotAura = reader.bool();\n                    break;\n                case /* bool unleashed_rage */ 12:\n                    message.unleashedRage = reader.bool();\n                    break;\n                case /* bool abominations_might */ 13:\n                    message.abominationsMight = reader.bool();\n                    break;\n                case /* proto.TristateEffect leader_of_the_pack */ 14:\n                    message.leaderOfThePack = reader.int32();\n                    break;\n                case /* bool rampage */ 15:\n                    message.rampage = reader.bool();\n                    break;\n                case /* bool icy_talons */ 16:\n                    message.icyTalons = reader.bool();\n                    break;\n                case /* proto.TristateEffect windfury_totem */ 17:\n                    message.windfuryTotem = reader.int32();\n                    break;\n                case /* bool totem_of_wrath */ 18:\n                    message.totemOfWrath = reader.bool();\n                    break;\n                case /* bool flametongue_totem */ 19:\n                    message.flametongueTotem = reader.bool();\n                    break;\n                case /* int32 demonic_pact_sp */ 44:\n                    message.demonicPactSp = reader.int32();\n                    break;\n                case /* bool swift_retribution */ 21:\n                    message.swiftRetribution = reader.bool();\n                    break;\n                case /* proto.TristateEffect moonkin_aura */ 22:\n                    message.moonkinAura = reader.int32();\n                    break;\n                case /* bool elemental_oath */ 23:\n                    message.elementalOath = reader.bool();\n                    break;\n                case /* bool wrath_of_air_totem */ 24:\n                    message.wrathOfAirTotem = reader.bool();\n                    break;\n                case /* bool ferocious_inspiration */ 25:\n                    message.ferociousInspiration = reader.bool();\n                    break;\n                case /* bool sanctified_retribution */ 26:\n                    message.sanctifiedRetribution = reader.bool();\n                    break;\n                case /* bool arcane_empowerment */ 27:\n                    message.arcaneEmpowerment = reader.bool();\n                    break;\n                case /* proto.TristateEffect mana_spring_totem */ 28:\n                    message.manaSpringTotem = reader.int32();\n                    break;\n                case /* bool shadow_protection */ 33:\n                    message.shadowProtection = reader.bool();\n                    break;\n                case /* bool nature_resistance_totem */ 45:\n                    message.natureResistanceTotem = reader.bool();\n                    break;\n                case /* bool aspect_of_the_wild */ 46:\n                    message.aspectOfTheWild = reader.bool();\n                    break;\n                case /* bool frost_resistance_aura */ 47:\n                    message.frostResistanceAura = reader.bool();\n                    break;\n                case /* bool frost_resistance_totem */ 48:\n                    message.frostResistanceTotem = reader.bool();\n                    break;\n                case /* bool bloodlust */ 29:\n                    message.bloodlust = reader.bool();\n                    break;\n                case /* proto.TristateEffect thorns */ 30:\n                    message.thorns = reader.int32();\n                    break;\n                case /* proto.TristateEffect devotion_aura */ 31:\n                    message.devotionAura = reader.int32();\n                    break;\n                case /* proto.TristateEffect stoneskin_totem */ 42:\n                    message.stoneskinTotem = reader.int32();\n                    break;\n                case /* bool retribution_aura */ 32:\n                    message.retributionAura = reader.bool();\n                    break;\n                case /* bool strength_of_wrynn */ 49:\n                    message.strengthOfWrynn = reader.bool();\n                    break;\n                case /* bool drums_of_forgotten_kings */ 34:\n                    message.drumsOfForgottenKings = reader.bool();\n                    break;\n                case /* bool drums_of_the_wild */ 35:\n                    message.drumsOfTheWild = reader.bool();\n                    break;\n                case /* bool scroll_of_protection */ 36:\n                    message.scrollOfProtection = reader.bool();\n                    break;\n                case /* bool scroll_of_stamina */ 37:\n                    message.scrollOfStamina = reader.bool();\n                    break;\n                case /* bool scroll_of_strength */ 38:\n                    message.scrollOfStrength = reader.bool();\n                    break;\n                case /* bool scroll_of_agility */ 39:\n                    message.scrollOfAgility = reader.bool();\n                    break;\n                case /* bool scroll_of_intellect */ 40:\n                    message.scrollOfIntellect = reader.bool();\n                    break;\n                case /* bool scroll_of_spirit */ 41:\n                    message.scrollOfSpirit = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.TristateEffect gift_of_the_wild = 1; */\n        if (message.giftOfTheWild !== 0)\n            writer.tag(1, WireType.Varint).int32(message.giftOfTheWild);\n        /* proto.TristateEffect power_word_fortitude = 2; */\n        if (message.powerWordFortitude !== 0)\n            writer.tag(2, WireType.Varint).int32(message.powerWordFortitude);\n        /* proto.TristateEffect commanding_shout = 3; */\n        if (message.commandingShout !== 0)\n            writer.tag(3, WireType.Varint).int32(message.commandingShout);\n        /* proto.TristateEffect blood_pact = 4; */\n        if (message.bloodPact !== 0)\n            writer.tag(4, WireType.Varint).int32(message.bloodPact);\n        /* bool horn_of_winter = 5; */\n        if (message.hornOfWinter !== false)\n            writer.tag(5, WireType.Varint).bool(message.hornOfWinter);\n        /* proto.TristateEffect strength_of_earth_totem = 6; */\n        if (message.strengthOfEarthTotem !== 0)\n            writer.tag(6, WireType.Varint).int32(message.strengthOfEarthTotem);\n        /* bool arcane_brilliance = 7; */\n        if (message.arcaneBrilliance !== false)\n            writer.tag(7, WireType.Varint).bool(message.arcaneBrilliance);\n        /* proto.TristateEffect fel_intelligence = 8; */\n        if (message.felIntelligence !== 0)\n            writer.tag(8, WireType.Varint).int32(message.felIntelligence);\n        /* bool divine_spirit = 9; */\n        if (message.divineSpirit !== false)\n            writer.tag(9, WireType.Varint).bool(message.divineSpirit);\n        /* proto.TristateEffect battle_shout = 10; */\n        if (message.battleShout !== 0)\n            writer.tag(10, WireType.Varint).int32(message.battleShout);\n        /* bool trueshot_aura = 11; */\n        if (message.trueshotAura !== false)\n            writer.tag(11, WireType.Varint).bool(message.trueshotAura);\n        /* bool unleashed_rage = 12; */\n        if (message.unleashedRage !== false)\n            writer.tag(12, WireType.Varint).bool(message.unleashedRage);\n        /* bool abominations_might = 13; */\n        if (message.abominationsMight !== false)\n            writer.tag(13, WireType.Varint).bool(message.abominationsMight);\n        /* proto.TristateEffect leader_of_the_pack = 14; */\n        if (message.leaderOfThePack !== 0)\n            writer.tag(14, WireType.Varint).int32(message.leaderOfThePack);\n        /* bool rampage = 15; */\n        if (message.rampage !== false)\n            writer.tag(15, WireType.Varint).bool(message.rampage);\n        /* bool icy_talons = 16; */\n        if (message.icyTalons !== false)\n            writer.tag(16, WireType.Varint).bool(message.icyTalons);\n        /* proto.TristateEffect windfury_totem = 17; */\n        if (message.windfuryTotem !== 0)\n            writer.tag(17, WireType.Varint).int32(message.windfuryTotem);\n        /* bool totem_of_wrath = 18; */\n        if (message.totemOfWrath !== false)\n            writer.tag(18, WireType.Varint).bool(message.totemOfWrath);\n        /* bool flametongue_totem = 19; */\n        if (message.flametongueTotem !== false)\n            writer.tag(19, WireType.Varint).bool(message.flametongueTotem);\n        /* int32 demonic_pact_sp = 44; */\n        if (message.demonicPactSp !== 0)\n            writer.tag(44, WireType.Varint).int32(message.demonicPactSp);\n        /* bool swift_retribution = 21; */\n        if (message.swiftRetribution !== false)\n            writer.tag(21, WireType.Varint).bool(message.swiftRetribution);\n        /* proto.TristateEffect moonkin_aura = 22; */\n        if (message.moonkinAura !== 0)\n            writer.tag(22, WireType.Varint).int32(message.moonkinAura);\n        /* bool elemental_oath = 23; */\n        if (message.elementalOath !== false)\n            writer.tag(23, WireType.Varint).bool(message.elementalOath);\n        /* bool wrath_of_air_totem = 24; */\n        if (message.wrathOfAirTotem !== false)\n            writer.tag(24, WireType.Varint).bool(message.wrathOfAirTotem);\n        /* bool ferocious_inspiration = 25; */\n        if (message.ferociousInspiration !== false)\n            writer.tag(25, WireType.Varint).bool(message.ferociousInspiration);\n        /* bool sanctified_retribution = 26; */\n        if (message.sanctifiedRetribution !== false)\n            writer.tag(26, WireType.Varint).bool(message.sanctifiedRetribution);\n        /* bool arcane_empowerment = 27; */\n        if (message.arcaneEmpowerment !== false)\n            writer.tag(27, WireType.Varint).bool(message.arcaneEmpowerment);\n        /* proto.TristateEffect mana_spring_totem = 28; */\n        if (message.manaSpringTotem !== 0)\n            writer.tag(28, WireType.Varint).int32(message.manaSpringTotem);\n        /* bool shadow_protection = 33; */\n        if (message.shadowProtection !== false)\n            writer.tag(33, WireType.Varint).bool(message.shadowProtection);\n        /* bool nature_resistance_totem = 45; */\n        if (message.natureResistanceTotem !== false)\n            writer.tag(45, WireType.Varint).bool(message.natureResistanceTotem);\n        /* bool aspect_of_the_wild = 46; */\n        if (message.aspectOfTheWild !== false)\n            writer.tag(46, WireType.Varint).bool(message.aspectOfTheWild);\n        /* bool frost_resistance_aura = 47; */\n        if (message.frostResistanceAura !== false)\n            writer.tag(47, WireType.Varint).bool(message.frostResistanceAura);\n        /* bool frost_resistance_totem = 48; */\n        if (message.frostResistanceTotem !== false)\n            writer.tag(48, WireType.Varint).bool(message.frostResistanceTotem);\n        /* bool bloodlust = 29; */\n        if (message.bloodlust !== false)\n            writer.tag(29, WireType.Varint).bool(message.bloodlust);\n        /* proto.TristateEffect thorns = 30; */\n        if (message.thorns !== 0)\n            writer.tag(30, WireType.Varint).int32(message.thorns);\n        /* proto.TristateEffect devotion_aura = 31; */\n        if (message.devotionAura !== 0)\n            writer.tag(31, WireType.Varint).int32(message.devotionAura);\n        /* proto.TristateEffect stoneskin_totem = 42; */\n        if (message.stoneskinTotem !== 0)\n            writer.tag(42, WireType.Varint).int32(message.stoneskinTotem);\n        /* bool retribution_aura = 32; */\n        if (message.retributionAura !== false)\n            writer.tag(32, WireType.Varint).bool(message.retributionAura);\n        /* bool strength_of_wrynn = 49; */\n        if (message.strengthOfWrynn !== false)\n            writer.tag(49, WireType.Varint).bool(message.strengthOfWrynn);\n        /* bool drums_of_forgotten_kings = 34; */\n        if (message.drumsOfForgottenKings !== false)\n            writer.tag(34, WireType.Varint).bool(message.drumsOfForgottenKings);\n        /* bool drums_of_the_wild = 35; */\n        if (message.drumsOfTheWild !== false)\n            writer.tag(35, WireType.Varint).bool(message.drumsOfTheWild);\n        /* bool scroll_of_protection = 36; */\n        if (message.scrollOfProtection !== false)\n            writer.tag(36, WireType.Varint).bool(message.scrollOfProtection);\n        /* bool scroll_of_stamina = 37; */\n        if (message.scrollOfStamina !== false)\n            writer.tag(37, WireType.Varint).bool(message.scrollOfStamina);\n        /* bool scroll_of_strength = 38; */\n        if (message.scrollOfStrength !== false)\n            writer.tag(38, WireType.Varint).bool(message.scrollOfStrength);\n        /* bool scroll_of_agility = 39; */\n        if (message.scrollOfAgility !== false)\n            writer.tag(39, WireType.Varint).bool(message.scrollOfAgility);\n        /* bool scroll_of_intellect = 40; */\n        if (message.scrollOfIntellect !== false)\n            writer.tag(40, WireType.Varint).bool(message.scrollOfIntellect);\n        /* bool scroll_of_spirit = 41; */\n        if (message.scrollOfSpirit !== false)\n            writer.tag(41, WireType.Varint).bool(message.scrollOfSpirit);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidBuffs\n */\nexport const RaidBuffs = new RaidBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyBuffs$Type extends MessageType<PartyBuffs> {\n    constructor() {\n        super(\"proto.PartyBuffs\", [\n            { no: 1, name: \"atiesh_mage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"atiesh_warlock\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"braided_eternium_chain\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"eye_of_the_night\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"chain_of_the_twilight_owl\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"mana_tide_totems\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"heroic_presence\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PartyBuffs>): PartyBuffs {\n        const message = { atieshMage: 0, atieshWarlock: 0, braidedEterniumChain: false, eyeOfTheNight: false, chainOfTheTwilightOwl: false, manaTideTotems: 0, heroicPresence: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyBuffs): PartyBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 atiesh_mage */ 1:\n                    message.atieshMage = reader.int32();\n                    break;\n                case /* int32 atiesh_warlock */ 2:\n                    message.atieshWarlock = reader.int32();\n                    break;\n                case /* bool braided_eternium_chain */ 3:\n                    message.braidedEterniumChain = reader.bool();\n                    break;\n                case /* bool eye_of_the_night */ 4:\n                    message.eyeOfTheNight = reader.bool();\n                    break;\n                case /* bool chain_of_the_twilight_owl */ 5:\n                    message.chainOfTheTwilightOwl = reader.bool();\n                    break;\n                case /* int32 mana_tide_totems */ 6:\n                    message.manaTideTotems = reader.int32();\n                    break;\n                case /* bool heroic_presence */ 7:\n                    message.heroicPresence = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 atiesh_mage = 1; */\n        if (message.atieshMage !== 0)\n            writer.tag(1, WireType.Varint).int32(message.atieshMage);\n        /* int32 atiesh_warlock = 2; */\n        if (message.atieshWarlock !== 0)\n            writer.tag(2, WireType.Varint).int32(message.atieshWarlock);\n        /* bool braided_eternium_chain = 3; */\n        if (message.braidedEterniumChain !== false)\n            writer.tag(3, WireType.Varint).bool(message.braidedEterniumChain);\n        /* bool eye_of_the_night = 4; */\n        if (message.eyeOfTheNight !== false)\n            writer.tag(4, WireType.Varint).bool(message.eyeOfTheNight);\n        /* bool chain_of_the_twilight_owl = 5; */\n        if (message.chainOfTheTwilightOwl !== false)\n            writer.tag(5, WireType.Varint).bool(message.chainOfTheTwilightOwl);\n        /* int32 mana_tide_totems = 6; */\n        if (message.manaTideTotems !== 0)\n            writer.tag(6, WireType.Varint).int32(message.manaTideTotems);\n        /* bool heroic_presence = 7; */\n        if (message.heroicPresence !== false)\n            writer.tag(7, WireType.Varint).bool(message.heroicPresence);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyBuffs\n */\nexport const PartyBuffs = new PartyBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IndividualBuffs$Type extends MessageType<IndividualBuffs> {\n    constructor() {\n        super(\"proto.IndividualBuffs\", [\n            { no: 1, name: \"blessing_of_kings\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"blessing_of_wisdom\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 3, name: \"blessing_of_might\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 4, name: \"blessing_of_sanctuary\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"vigilance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"renewed_hope\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"hymn_of_hope\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"hand_of_salvation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"rapture\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"innervates\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"power_infusions\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"unholy_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"revitalize_rejuvination\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"revitalize_wild_growth\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"tricks_of_the_trades\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"divine_guardians\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"pain_suppressions\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"hand_of_sacrifices\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"guardian_spirits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"shattering_throws\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"vampiric_touch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"hunting_party\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"judgements_of_the_wise\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"improved_soul_leech\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"enduring_winter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"focus_magic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<IndividualBuffs>): IndividualBuffs {\n        const message = { blessingOfKings: false, blessingOfWisdom: 0, blessingOfMight: 0, blessingOfSanctuary: false, vigilance: false, renewedHope: false, hymnOfHope: 0, handOfSalvation: 0, rapture: 0, innervates: 0, powerInfusions: 0, unholyFrenzy: 0, revitalizeRejuvination: 0, revitalizeWildGrowth: 0, tricksOfTheTrades: 0, divineGuardians: 0, painSuppressions: 0, handOfSacrifices: 0, guardianSpirits: 0, shatteringThrows: 0, vampiricTouch: false, huntingParty: false, judgementsOfTheWise: false, improvedSoulLeech: false, enduringWinter: false, focusMagic: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<IndividualBuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndividualBuffs): IndividualBuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool blessing_of_kings */ 1:\n                    message.blessingOfKings = reader.bool();\n                    break;\n                case /* proto.TristateEffect blessing_of_wisdom */ 2:\n                    message.blessingOfWisdom = reader.int32();\n                    break;\n                case /* proto.TristateEffect blessing_of_might */ 3:\n                    message.blessingOfMight = reader.int32();\n                    break;\n                case /* bool blessing_of_sanctuary */ 4:\n                    message.blessingOfSanctuary = reader.bool();\n                    break;\n                case /* bool vigilance */ 5:\n                    message.vigilance = reader.bool();\n                    break;\n                case /* bool renewed_hope */ 6:\n                    message.renewedHope = reader.bool();\n                    break;\n                case /* int32 hymn_of_hope */ 7:\n                    message.hymnOfHope = reader.int32();\n                    break;\n                case /* int32 hand_of_salvation */ 8:\n                    message.handOfSalvation = reader.int32();\n                    break;\n                case /* int32 rapture */ 9:\n                    message.rapture = reader.int32();\n                    break;\n                case /* int32 innervates */ 10:\n                    message.innervates = reader.int32();\n                    break;\n                case /* int32 power_infusions */ 11:\n                    message.powerInfusions = reader.int32();\n                    break;\n                case /* int32 unholy_frenzy */ 12:\n                    message.unholyFrenzy = reader.int32();\n                    break;\n                case /* int32 revitalize_rejuvination */ 13:\n                    message.revitalizeRejuvination = reader.int32();\n                    break;\n                case /* int32 revitalize_wild_growth */ 21:\n                    message.revitalizeWildGrowth = reader.int32();\n                    break;\n                case /* int32 tricks_of_the_trades */ 19:\n                    message.tricksOfTheTrades = reader.int32();\n                    break;\n                case /* int32 divine_guardians */ 23:\n                    message.divineGuardians = reader.int32();\n                    break;\n                case /* int32 pain_suppressions */ 24:\n                    message.painSuppressions = reader.int32();\n                    break;\n                case /* int32 hand_of_sacrifices */ 25:\n                    message.handOfSacrifices = reader.int32();\n                    break;\n                case /* int32 guardian_spirits */ 26:\n                    message.guardianSpirits = reader.int32();\n                    break;\n                case /* int32 shattering_throws */ 20:\n                    message.shatteringThrows = reader.int32();\n                    break;\n                case /* bool vampiric_touch */ 14:\n                    message.vampiricTouch = reader.bool();\n                    break;\n                case /* bool hunting_party */ 15:\n                    message.huntingParty = reader.bool();\n                    break;\n                case /* bool judgements_of_the_wise */ 16:\n                    message.judgementsOfTheWise = reader.bool();\n                    break;\n                case /* bool improved_soul_leech */ 17:\n                    message.improvedSoulLeech = reader.bool();\n                    break;\n                case /* bool enduring_winter */ 18:\n                    message.enduringWinter = reader.bool();\n                    break;\n                case /* bool focus_magic */ 22:\n                    message.focusMagic = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: IndividualBuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool blessing_of_kings = 1; */\n        if (message.blessingOfKings !== false)\n            writer.tag(1, WireType.Varint).bool(message.blessingOfKings);\n        /* proto.TristateEffect blessing_of_wisdom = 2; */\n        if (message.blessingOfWisdom !== 0)\n            writer.tag(2, WireType.Varint).int32(message.blessingOfWisdom);\n        /* proto.TristateEffect blessing_of_might = 3; */\n        if (message.blessingOfMight !== 0)\n            writer.tag(3, WireType.Varint).int32(message.blessingOfMight);\n        /* bool blessing_of_sanctuary = 4; */\n        if (message.blessingOfSanctuary !== false)\n            writer.tag(4, WireType.Varint).bool(message.blessingOfSanctuary);\n        /* bool vigilance = 5; */\n        if (message.vigilance !== false)\n            writer.tag(5, WireType.Varint).bool(message.vigilance);\n        /* bool renewed_hope = 6; */\n        if (message.renewedHope !== false)\n            writer.tag(6, WireType.Varint).bool(message.renewedHope);\n        /* int32 hymn_of_hope = 7; */\n        if (message.hymnOfHope !== 0)\n            writer.tag(7, WireType.Varint).int32(message.hymnOfHope);\n        /* int32 hand_of_salvation = 8; */\n        if (message.handOfSalvation !== 0)\n            writer.tag(8, WireType.Varint).int32(message.handOfSalvation);\n        /* int32 rapture = 9; */\n        if (message.rapture !== 0)\n            writer.tag(9, WireType.Varint).int32(message.rapture);\n        /* int32 innervates = 10; */\n        if (message.innervates !== 0)\n            writer.tag(10, WireType.Varint).int32(message.innervates);\n        /* int32 power_infusions = 11; */\n        if (message.powerInfusions !== 0)\n            writer.tag(11, WireType.Varint).int32(message.powerInfusions);\n        /* int32 unholy_frenzy = 12; */\n        if (message.unholyFrenzy !== 0)\n            writer.tag(12, WireType.Varint).int32(message.unholyFrenzy);\n        /* int32 revitalize_rejuvination = 13; */\n        if (message.revitalizeRejuvination !== 0)\n            writer.tag(13, WireType.Varint).int32(message.revitalizeRejuvination);\n        /* int32 revitalize_wild_growth = 21; */\n        if (message.revitalizeWildGrowth !== 0)\n            writer.tag(21, WireType.Varint).int32(message.revitalizeWildGrowth);\n        /* int32 tricks_of_the_trades = 19; */\n        if (message.tricksOfTheTrades !== 0)\n            writer.tag(19, WireType.Varint).int32(message.tricksOfTheTrades);\n        /* int32 divine_guardians = 23; */\n        if (message.divineGuardians !== 0)\n            writer.tag(23, WireType.Varint).int32(message.divineGuardians);\n        /* int32 pain_suppressions = 24; */\n        if (message.painSuppressions !== 0)\n            writer.tag(24, WireType.Varint).int32(message.painSuppressions);\n        /* int32 hand_of_sacrifices = 25; */\n        if (message.handOfSacrifices !== 0)\n            writer.tag(25, WireType.Varint).int32(message.handOfSacrifices);\n        /* int32 guardian_spirits = 26; */\n        if (message.guardianSpirits !== 0)\n            writer.tag(26, WireType.Varint).int32(message.guardianSpirits);\n        /* int32 shattering_throws = 20; */\n        if (message.shatteringThrows !== 0)\n            writer.tag(20, WireType.Varint).int32(message.shatteringThrows);\n        /* bool vampiric_touch = 14; */\n        if (message.vampiricTouch !== false)\n            writer.tag(14, WireType.Varint).bool(message.vampiricTouch);\n        /* bool hunting_party = 15; */\n        if (message.huntingParty !== false)\n            writer.tag(15, WireType.Varint).bool(message.huntingParty);\n        /* bool judgements_of_the_wise = 16; */\n        if (message.judgementsOfTheWise !== false)\n            writer.tag(16, WireType.Varint).bool(message.judgementsOfTheWise);\n        /* bool improved_soul_leech = 17; */\n        if (message.improvedSoulLeech !== false)\n            writer.tag(17, WireType.Varint).bool(message.improvedSoulLeech);\n        /* bool enduring_winter = 18; */\n        if (message.enduringWinter !== false)\n            writer.tag(18, WireType.Varint).bool(message.enduringWinter);\n        /* bool focus_magic = 22; */\n        if (message.focusMagic !== false)\n            writer.tag(22, WireType.Varint).bool(message.focusMagic);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.IndividualBuffs\n */\nexport const IndividualBuffs = new IndividualBuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Consumes$Type extends MessageType<Consumes> {\n    constructor() {\n        super(\"proto.Consumes\", [\n            { no: 1, name: \"flask\", kind: \"enum\", T: () => [\"proto.Flask\", Flask] },\n            { no: 2, name: \"battle_elixir\", kind: \"enum\", T: () => [\"proto.BattleElixir\", BattleElixir] },\n            { no: 3, name: \"guardian_elixir\", kind: \"enum\", T: () => [\"proto.GuardianElixir\", GuardianElixir] },\n            { no: 6, name: \"food\", kind: \"enum\", T: () => [\"proto.Food\", Food] },\n            { no: 7, name: \"pet_food\", kind: \"enum\", T: () => [\"proto.PetFood\", PetFood] },\n            { no: 8, name: \"pet_scroll_of_agility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"pet_scroll_of_strength\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"default_potion\", kind: \"enum\", T: () => [\"proto.Potions\", Potions] },\n            { no: 11, name: \"prepop_potion\", kind: \"enum\", T: () => [\"proto.Potions\", Potions] },\n            { no: 12, name: \"default_conjured\", kind: \"enum\", T: () => [\"proto.Conjured\", Conjured] },\n            { no: 15, name: \"thermal_sapper\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"explosive_decoy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"filler_explosive\", kind: \"enum\", T: () => [\"proto.Explosive\", Explosive] }\n        ]);\n    }\n    create(value?: PartialMessage<Consumes>): Consumes {\n        const message = { flask: 0, battleElixir: 0, guardianElixir: 0, food: 0, petFood: 0, petScrollOfAgility: 0, petScrollOfStrength: 0, defaultPotion: 0, prepopPotion: 0, defaultConjured: 0, thermalSapper: false, explosiveDecoy: false, fillerExplosive: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Consumes>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Consumes): Consumes {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Flask flask */ 1:\n                    message.flask = reader.int32();\n                    break;\n                case /* proto.BattleElixir battle_elixir */ 2:\n                    message.battleElixir = reader.int32();\n                    break;\n                case /* proto.GuardianElixir guardian_elixir */ 3:\n                    message.guardianElixir = reader.int32();\n                    break;\n                case /* proto.Food food */ 6:\n                    message.food = reader.int32();\n                    break;\n                case /* proto.PetFood pet_food */ 7:\n                    message.petFood = reader.int32();\n                    break;\n                case /* int32 pet_scroll_of_agility */ 8:\n                    message.petScrollOfAgility = reader.int32();\n                    break;\n                case /* int32 pet_scroll_of_strength */ 9:\n                    message.petScrollOfStrength = reader.int32();\n                    break;\n                case /* proto.Potions default_potion */ 10:\n                    message.defaultPotion = reader.int32();\n                    break;\n                case /* proto.Potions prepop_potion */ 11:\n                    message.prepopPotion = reader.int32();\n                    break;\n                case /* proto.Conjured default_conjured */ 12:\n                    message.defaultConjured = reader.int32();\n                    break;\n                case /* bool thermal_sapper */ 15:\n                    message.thermalSapper = reader.bool();\n                    break;\n                case /* bool explosive_decoy */ 16:\n                    message.explosiveDecoy = reader.bool();\n                    break;\n                case /* proto.Explosive filler_explosive */ 17:\n                    message.fillerExplosive = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Consumes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Flask flask = 1; */\n        if (message.flask !== 0)\n            writer.tag(1, WireType.Varint).int32(message.flask);\n        /* proto.BattleElixir battle_elixir = 2; */\n        if (message.battleElixir !== 0)\n            writer.tag(2, WireType.Varint).int32(message.battleElixir);\n        /* proto.GuardianElixir guardian_elixir = 3; */\n        if (message.guardianElixir !== 0)\n            writer.tag(3, WireType.Varint).int32(message.guardianElixir);\n        /* proto.Food food = 6; */\n        if (message.food !== 0)\n            writer.tag(6, WireType.Varint).int32(message.food);\n        /* proto.PetFood pet_food = 7; */\n        if (message.petFood !== 0)\n            writer.tag(7, WireType.Varint).int32(message.petFood);\n        /* int32 pet_scroll_of_agility = 8; */\n        if (message.petScrollOfAgility !== 0)\n            writer.tag(8, WireType.Varint).int32(message.petScrollOfAgility);\n        /* int32 pet_scroll_of_strength = 9; */\n        if (message.petScrollOfStrength !== 0)\n            writer.tag(9, WireType.Varint).int32(message.petScrollOfStrength);\n        /* proto.Potions default_potion = 10; */\n        if (message.defaultPotion !== 0)\n            writer.tag(10, WireType.Varint).int32(message.defaultPotion);\n        /* proto.Potions prepop_potion = 11; */\n        if (message.prepopPotion !== 0)\n            writer.tag(11, WireType.Varint).int32(message.prepopPotion);\n        /* proto.Conjured default_conjured = 12; */\n        if (message.defaultConjured !== 0)\n            writer.tag(12, WireType.Varint).int32(message.defaultConjured);\n        /* bool thermal_sapper = 15; */\n        if (message.thermalSapper !== false)\n            writer.tag(15, WireType.Varint).bool(message.thermalSapper);\n        /* bool explosive_decoy = 16; */\n        if (message.explosiveDecoy !== false)\n            writer.tag(16, WireType.Varint).bool(message.explosiveDecoy);\n        /* proto.Explosive filler_explosive = 17; */\n        if (message.fillerExplosive !== 0)\n            writer.tag(17, WireType.Varint).int32(message.fillerExplosive);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Consumes\n */\nexport const Consumes = new Consumes$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Debuffs$Type extends MessageType<Debuffs> {\n    constructor() {\n        super(\"proto.Debuffs\", [\n            { no: 1, name: \"judgement_of_wisdom\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"judgement_of_light\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"misery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"faerie_fire\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 5, name: \"curse_of_elements\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"ebon_plaguebringer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"earth_and_moon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"heart_of_the_crusader\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"master_poisoner\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"totem_of_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"shadow_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"improved_scorch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"winters_chill\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"blood_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"savage_combat\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"gift_of_arthas\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"mangle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"trauma\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"stampede\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"expose_armor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"sunder_armor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"acid_spit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"curse_of_weakness\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 24, name: \"sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"spore_cloud\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 25, name: \"demoralizing_roar\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 26, name: \"demoralizing_shout\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 36, name: \"vindication\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"demoralizing_screech\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"thunder_clap\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 28, name: \"frost_fever\", kind: \"enum\", T: () => [\"proto.TristateEffect\", TristateEffect] },\n            { no: 29, name: \"infected_wounds\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"judgements_of_the_just\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"insect_swarm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 32, name: \"scorpid_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"shadow_embrace\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"hunters_mark\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"crystal_yield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Debuffs>): Debuffs {\n        const message = { judgementOfWisdom: false, judgementOfLight: false, misery: false, faerieFire: 0, curseOfElements: false, ebonPlaguebringer: false, earthAndMoon: false, heartOfTheCrusader: false, masterPoisoner: false, totemOfWrath: false, shadowMastery: false, improvedScorch: false, wintersChill: false, bloodFrenzy: false, savageCombat: false, giftOfArthas: false, mangle: false, trauma: false, stampede: false, exposeArmor: false, sunderArmor: false, acidSpit: false, curseOfWeakness: 0, sting: false, sporeCloud: false, demoralizingRoar: 0, demoralizingShout: 0, vindication: false, demoralizingScreech: false, thunderClap: 0, frostFever: 0, infectedWounds: false, judgementsOfTheJust: false, insectSwarm: false, scorpidSting: false, shadowEmbrace: false, huntersMark: 0, crystalYield: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Debuffs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Debuffs): Debuffs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool judgement_of_wisdom */ 1:\n                    message.judgementOfWisdom = reader.bool();\n                    break;\n                case /* bool judgement_of_light */ 2:\n                    message.judgementOfLight = reader.bool();\n                    break;\n                case /* bool misery */ 3:\n                    message.misery = reader.bool();\n                    break;\n                case /* proto.TristateEffect faerie_fire */ 4:\n                    message.faerieFire = reader.int32();\n                    break;\n                case /* bool curse_of_elements */ 5:\n                    message.curseOfElements = reader.bool();\n                    break;\n                case /* bool ebon_plaguebringer */ 6:\n                    message.ebonPlaguebringer = reader.bool();\n                    break;\n                case /* bool earth_and_moon */ 7:\n                    message.earthAndMoon = reader.bool();\n                    break;\n                case /* bool heart_of_the_crusader */ 8:\n                    message.heartOfTheCrusader = reader.bool();\n                    break;\n                case /* bool master_poisoner */ 9:\n                    message.masterPoisoner = reader.bool();\n                    break;\n                case /* bool totem_of_wrath */ 10:\n                    message.totemOfWrath = reader.bool();\n                    break;\n                case /* bool shadow_mastery */ 11:\n                    message.shadowMastery = reader.bool();\n                    break;\n                case /* bool improved_scorch */ 12:\n                    message.improvedScorch = reader.bool();\n                    break;\n                case /* bool winters_chill */ 13:\n                    message.wintersChill = reader.bool();\n                    break;\n                case /* bool blood_frenzy */ 14:\n                    message.bloodFrenzy = reader.bool();\n                    break;\n                case /* bool savage_combat */ 15:\n                    message.savageCombat = reader.bool();\n                    break;\n                case /* bool gift_of_arthas */ 16:\n                    message.giftOfArthas = reader.bool();\n                    break;\n                case /* bool mangle */ 17:\n                    message.mangle = reader.bool();\n                    break;\n                case /* bool trauma */ 18:\n                    message.trauma = reader.bool();\n                    break;\n                case /* bool stampede */ 19:\n                    message.stampede = reader.bool();\n                    break;\n                case /* bool expose_armor */ 20:\n                    message.exposeArmor = reader.bool();\n                    break;\n                case /* bool sunder_armor */ 21:\n                    message.sunderArmor = reader.bool();\n                    break;\n                case /* bool acid_spit */ 22:\n                    message.acidSpit = reader.bool();\n                    break;\n                case /* proto.TristateEffect curse_of_weakness */ 23:\n                    message.curseOfWeakness = reader.int32();\n                    break;\n                case /* bool sting */ 24:\n                    message.sting = reader.bool();\n                    break;\n                case /* bool spore_cloud */ 37:\n                    message.sporeCloud = reader.bool();\n                    break;\n                case /* proto.TristateEffect demoralizing_roar */ 25:\n                    message.demoralizingRoar = reader.int32();\n                    break;\n                case /* proto.TristateEffect demoralizing_shout */ 26:\n                    message.demoralizingShout = reader.int32();\n                    break;\n                case /* bool vindication */ 36:\n                    message.vindication = reader.bool();\n                    break;\n                case /* bool demoralizing_screech */ 34:\n                    message.demoralizingScreech = reader.bool();\n                    break;\n                case /* proto.TristateEffect thunder_clap */ 27:\n                    message.thunderClap = reader.int32();\n                    break;\n                case /* proto.TristateEffect frost_fever */ 28:\n                    message.frostFever = reader.int32();\n                    break;\n                case /* bool infected_wounds */ 29:\n                    message.infectedWounds = reader.bool();\n                    break;\n                case /* bool judgements_of_the_just */ 30:\n                    message.judgementsOfTheJust = reader.bool();\n                    break;\n                case /* bool insect_swarm */ 31:\n                    message.insectSwarm = reader.bool();\n                    break;\n                case /* bool scorpid_sting */ 32:\n                    message.scorpidSting = reader.bool();\n                    break;\n                case /* bool shadow_embrace */ 33:\n                    message.shadowEmbrace = reader.bool();\n                    break;\n                case /* int32 hunters_mark */ 35:\n                    message.huntersMark = reader.int32();\n                    break;\n                case /* bool crystal_yield */ 38:\n                    message.crystalYield = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Debuffs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool judgement_of_wisdom = 1; */\n        if (message.judgementOfWisdom !== false)\n            writer.tag(1, WireType.Varint).bool(message.judgementOfWisdom);\n        /* bool judgement_of_light = 2; */\n        if (message.judgementOfLight !== false)\n            writer.tag(2, WireType.Varint).bool(message.judgementOfLight);\n        /* bool misery = 3; */\n        if (message.misery !== false)\n            writer.tag(3, WireType.Varint).bool(message.misery);\n        /* proto.TristateEffect faerie_fire = 4; */\n        if (message.faerieFire !== 0)\n            writer.tag(4, WireType.Varint).int32(message.faerieFire);\n        /* bool curse_of_elements = 5; */\n        if (message.curseOfElements !== false)\n            writer.tag(5, WireType.Varint).bool(message.curseOfElements);\n        /* bool ebon_plaguebringer = 6; */\n        if (message.ebonPlaguebringer !== false)\n            writer.tag(6, WireType.Varint).bool(message.ebonPlaguebringer);\n        /* bool earth_and_moon = 7; */\n        if (message.earthAndMoon !== false)\n            writer.tag(7, WireType.Varint).bool(message.earthAndMoon);\n        /* bool heart_of_the_crusader = 8; */\n        if (message.heartOfTheCrusader !== false)\n            writer.tag(8, WireType.Varint).bool(message.heartOfTheCrusader);\n        /* bool master_poisoner = 9; */\n        if (message.masterPoisoner !== false)\n            writer.tag(9, WireType.Varint).bool(message.masterPoisoner);\n        /* bool totem_of_wrath = 10; */\n        if (message.totemOfWrath !== false)\n            writer.tag(10, WireType.Varint).bool(message.totemOfWrath);\n        /* bool shadow_mastery = 11; */\n        if (message.shadowMastery !== false)\n            writer.tag(11, WireType.Varint).bool(message.shadowMastery);\n        /* bool improved_scorch = 12; */\n        if (message.improvedScorch !== false)\n            writer.tag(12, WireType.Varint).bool(message.improvedScorch);\n        /* bool winters_chill = 13; */\n        if (message.wintersChill !== false)\n            writer.tag(13, WireType.Varint).bool(message.wintersChill);\n        /* bool blood_frenzy = 14; */\n        if (message.bloodFrenzy !== false)\n            writer.tag(14, WireType.Varint).bool(message.bloodFrenzy);\n        /* bool savage_combat = 15; */\n        if (message.savageCombat !== false)\n            writer.tag(15, WireType.Varint).bool(message.savageCombat);\n        /* bool gift_of_arthas = 16; */\n        if (message.giftOfArthas !== false)\n            writer.tag(16, WireType.Varint).bool(message.giftOfArthas);\n        /* bool mangle = 17; */\n        if (message.mangle !== false)\n            writer.tag(17, WireType.Varint).bool(message.mangle);\n        /* bool trauma = 18; */\n        if (message.trauma !== false)\n            writer.tag(18, WireType.Varint).bool(message.trauma);\n        /* bool stampede = 19; */\n        if (message.stampede !== false)\n            writer.tag(19, WireType.Varint).bool(message.stampede);\n        /* bool expose_armor = 20; */\n        if (message.exposeArmor !== false)\n            writer.tag(20, WireType.Varint).bool(message.exposeArmor);\n        /* bool sunder_armor = 21; */\n        if (message.sunderArmor !== false)\n            writer.tag(21, WireType.Varint).bool(message.sunderArmor);\n        /* bool acid_spit = 22; */\n        if (message.acidSpit !== false)\n            writer.tag(22, WireType.Varint).bool(message.acidSpit);\n        /* proto.TristateEffect curse_of_weakness = 23; */\n        if (message.curseOfWeakness !== 0)\n            writer.tag(23, WireType.Varint).int32(message.curseOfWeakness);\n        /* bool sting = 24; */\n        if (message.sting !== false)\n            writer.tag(24, WireType.Varint).bool(message.sting);\n        /* bool spore_cloud = 37; */\n        if (message.sporeCloud !== false)\n            writer.tag(37, WireType.Varint).bool(message.sporeCloud);\n        /* proto.TristateEffect demoralizing_roar = 25; */\n        if (message.demoralizingRoar !== 0)\n            writer.tag(25, WireType.Varint).int32(message.demoralizingRoar);\n        /* proto.TristateEffect demoralizing_shout = 26; */\n        if (message.demoralizingShout !== 0)\n            writer.tag(26, WireType.Varint).int32(message.demoralizingShout);\n        /* bool vindication = 36; */\n        if (message.vindication !== false)\n            writer.tag(36, WireType.Varint).bool(message.vindication);\n        /* bool demoralizing_screech = 34; */\n        if (message.demoralizingScreech !== false)\n            writer.tag(34, WireType.Varint).bool(message.demoralizingScreech);\n        /* proto.TristateEffect thunder_clap = 27; */\n        if (message.thunderClap !== 0)\n            writer.tag(27, WireType.Varint).int32(message.thunderClap);\n        /* proto.TristateEffect frost_fever = 28; */\n        if (message.frostFever !== 0)\n            writer.tag(28, WireType.Varint).int32(message.frostFever);\n        /* bool infected_wounds = 29; */\n        if (message.infectedWounds !== false)\n            writer.tag(29, WireType.Varint).bool(message.infectedWounds);\n        /* bool judgements_of_the_just = 30; */\n        if (message.judgementsOfTheJust !== false)\n            writer.tag(30, WireType.Varint).bool(message.judgementsOfTheJust);\n        /* bool insect_swarm = 31; */\n        if (message.insectSwarm !== false)\n            writer.tag(31, WireType.Varint).bool(message.insectSwarm);\n        /* bool scorpid_sting = 32; */\n        if (message.scorpidSting !== false)\n            writer.tag(32, WireType.Varint).bool(message.scorpidSting);\n        /* bool shadow_embrace = 33; */\n        if (message.shadowEmbrace !== false)\n            writer.tag(33, WireType.Varint).bool(message.shadowEmbrace);\n        /* int32 hunters_mark = 35; */\n        if (message.huntersMark !== 0)\n            writer.tag(35, WireType.Varint).int32(message.huntersMark);\n        /* bool crystal_yield = 38; */\n        if (message.crystalYield !== false)\n            writer.tag(38, WireType.Varint).bool(message.crystalYield);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Debuffs\n */\nexport const Debuffs = new Debuffs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TargetInput$Type extends MessageType<TargetInput> {\n    constructor() {\n        super(\"proto.TargetInput\", [\n            { no: 1, name: \"input_type\", kind: \"enum\", T: () => [\"proto.InputType\", InputType] },\n            { no: 2, name: \"label\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"tooltip\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"bool_value\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"number_value\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TargetInput>): TargetInput {\n        const message = { inputType: 0, label: \"\", tooltip: \"\", boolValue: false, numberValue: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TargetInput>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TargetInput): TargetInput {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.InputType input_type */ 1:\n                    message.inputType = reader.int32();\n                    break;\n                case /* string label */ 2:\n                    message.label = reader.string();\n                    break;\n                case /* string tooltip */ 5:\n                    message.tooltip = reader.string();\n                    break;\n                case /* bool bool_value */ 3:\n                    message.boolValue = reader.bool();\n                    break;\n                case /* double number_value */ 4:\n                    message.numberValue = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TargetInput, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.InputType input_type = 1; */\n        if (message.inputType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.inputType);\n        /* string label = 2; */\n        if (message.label !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.label);\n        /* string tooltip = 5; */\n        if (message.tooltip !== \"\")\n            writer.tag(5, WireType.LengthDelimited).string(message.tooltip);\n        /* bool bool_value = 3; */\n        if (message.boolValue !== false)\n            writer.tag(3, WireType.Varint).bool(message.boolValue);\n        /* double number_value = 4; */\n        if (message.numberValue !== 0)\n            writer.tag(4, WireType.Bit64).double(message.numberValue);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TargetInput\n */\nexport const TargetInput = new TargetInput$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Target$Type extends MessageType<Target> {\n    constructor() {\n        super(\"proto.Target\", [\n            { no: 14, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"level\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"mob_type\", kind: \"enum\", T: () => [\"proto.MobType\", MobType] },\n            { no: 5, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"min_base_damage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 19, name: \"damage_spread\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 8, name: \"swing_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"dual_wield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"dual_wield_penalty\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"parry_haste\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"suppress_dodge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"spell_school\", kind: \"enum\", T: () => [\"proto.SpellSchool\", SpellSchool] },\n            { no: 6, name: \"tank_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"target_inputs\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TargetInput }\n        ]);\n    }\n    create(value?: PartialMessage<Target>): Target {\n        const message = { id: 0, name: \"\", level: 0, mobType: 0, stats: [], minBaseDamage: 0, damageSpread: 0, swingSpeed: 0, dualWield: false, dualWieldPenalty: false, parryHaste: false, suppressDodge: false, spellSchool: 0, tankIndex: 0, targetInputs: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Target>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Target): Target {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 14:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 15:\n                    message.name = reader.string();\n                    break;\n                case /* int32 level */ 4:\n                    message.level = reader.int32();\n                    break;\n                case /* proto.MobType mob_type */ 3:\n                    message.mobType = reader.int32();\n                    break;\n                case /* repeated double stats */ 5:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* double min_base_damage */ 7:\n                    message.minBaseDamage = reader.double();\n                    break;\n                case /* double damage_spread */ 19:\n                    message.damageSpread = reader.double();\n                    break;\n                case /* double swing_speed */ 8:\n                    message.swingSpeed = reader.double();\n                    break;\n                case /* bool dual_wield */ 9:\n                    message.dualWield = reader.bool();\n                    break;\n                case /* bool dual_wield_penalty */ 10:\n                    message.dualWieldPenalty = reader.bool();\n                    break;\n                case /* bool parry_haste */ 12:\n                    message.parryHaste = reader.bool();\n                    break;\n                case /* bool suppress_dodge */ 16:\n                    message.suppressDodge = reader.bool();\n                    break;\n                case /* proto.SpellSchool spell_school */ 13:\n                    message.spellSchool = reader.int32();\n                    break;\n                case /* int32 tank_index */ 6:\n                    message.tankIndex = reader.int32();\n                    break;\n                case /* repeated proto.TargetInput target_inputs */ 18:\n                    message.targetInputs.push(TargetInput.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Target, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 14; */\n        if (message.id !== 0)\n            writer.tag(14, WireType.Varint).int32(message.id);\n        /* string name = 15; */\n        if (message.name !== \"\")\n            writer.tag(15, WireType.LengthDelimited).string(message.name);\n        /* int32 level = 4; */\n        if (message.level !== 0)\n            writer.tag(4, WireType.Varint).int32(message.level);\n        /* proto.MobType mob_type = 3; */\n        if (message.mobType !== 0)\n            writer.tag(3, WireType.Varint).int32(message.mobType);\n        /* repeated double stats = 5; */\n        if (message.stats.length) {\n            writer.tag(5, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* double min_base_damage = 7; */\n        if (message.minBaseDamage !== 0)\n            writer.tag(7, WireType.Bit64).double(message.minBaseDamage);\n        /* double damage_spread = 19; */\n        if (message.damageSpread !== 0)\n            writer.tag(19, WireType.Bit64).double(message.damageSpread);\n        /* double swing_speed = 8; */\n        if (message.swingSpeed !== 0)\n            writer.tag(8, WireType.Bit64).double(message.swingSpeed);\n        /* bool dual_wield = 9; */\n        if (message.dualWield !== false)\n            writer.tag(9, WireType.Varint).bool(message.dualWield);\n        /* bool dual_wield_penalty = 10; */\n        if (message.dualWieldPenalty !== false)\n            writer.tag(10, WireType.Varint).bool(message.dualWieldPenalty);\n        /* bool parry_haste = 12; */\n        if (message.parryHaste !== false)\n            writer.tag(12, WireType.Varint).bool(message.parryHaste);\n        /* bool suppress_dodge = 16; */\n        if (message.suppressDodge !== false)\n            writer.tag(16, WireType.Varint).bool(message.suppressDodge);\n        /* proto.SpellSchool spell_school = 13; */\n        if (message.spellSchool !== 0)\n            writer.tag(13, WireType.Varint).int32(message.spellSchool);\n        /* int32 tank_index = 6; */\n        if (message.tankIndex !== 0)\n            writer.tag(6, WireType.Varint).int32(message.tankIndex);\n        /* repeated proto.TargetInput target_inputs = 18; */\n        for (let i = 0; i < message.targetInputs.length; i++)\n            TargetInput.internalBinaryWrite(message.targetInputs[i], writer.tag(18, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Target\n */\nexport const Target = new Target$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Encounter$Type extends MessageType<Encounter> {\n    constructor() {\n        super(\"proto.Encounter\", [\n            { no: 1, name: \"duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"duration_variation\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"execute_proportion_20\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"execute_proportion_25\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"execute_proportion_35\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"use_health\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Target }\n        ]);\n    }\n    create(value?: PartialMessage<Encounter>): Encounter {\n        const message = { duration: 0, durationVariation: 0, executeProportion20: 0, executeProportion25: 0, executeProportion35: 0, useHealth: false, targets: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Encounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Encounter): Encounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double duration */ 1:\n                    message.duration = reader.double();\n                    break;\n                case /* double duration_variation */ 2:\n                    message.durationVariation = reader.double();\n                    break;\n                case /* double execute_proportion_20 */ 3:\n                    message.executeProportion20 = reader.double();\n                    break;\n                case /* double execute_proportion_25 */ 7:\n                    message.executeProportion25 = reader.double();\n                    break;\n                case /* double execute_proportion_35 */ 4:\n                    message.executeProportion35 = reader.double();\n                    break;\n                case /* bool use_health */ 5:\n                    message.useHealth = reader.bool();\n                    break;\n                case /* repeated proto.Target targets */ 6:\n                    message.targets.push(Target.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Encounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double duration = 1; */\n        if (message.duration !== 0)\n            writer.tag(1, WireType.Bit64).double(message.duration);\n        /* double duration_variation = 2; */\n        if (message.durationVariation !== 0)\n            writer.tag(2, WireType.Bit64).double(message.durationVariation);\n        /* double execute_proportion_20 = 3; */\n        if (message.executeProportion20 !== 0)\n            writer.tag(3, WireType.Bit64).double(message.executeProportion20);\n        /* double execute_proportion_25 = 7; */\n        if (message.executeProportion25 !== 0)\n            writer.tag(7, WireType.Bit64).double(message.executeProportion25);\n        /* double execute_proportion_35 = 4; */\n        if (message.executeProportion35 !== 0)\n            writer.tag(4, WireType.Bit64).double(message.executeProportion35);\n        /* bool use_health = 5; */\n        if (message.useHealth !== false)\n            writer.tag(5, WireType.Varint).bool(message.useHealth);\n        /* repeated proto.Target targets = 6; */\n        for (let i = 0; i < message.targets.length; i++)\n            Target.internalBinaryWrite(message.targets[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Encounter\n */\nexport const Encounter = new Encounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PresetTarget$Type extends MessageType<PresetTarget> {\n    constructor() {\n        super(\"proto.PresetTarget\", [\n            { no: 1, name: \"path\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"target\", kind: \"message\", T: () => Target }\n        ]);\n    }\n    create(value?: PartialMessage<PresetTarget>): PresetTarget {\n        const message = { path: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PresetTarget>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PresetTarget): PresetTarget {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string path */ 1:\n                    message.path = reader.string();\n                    break;\n                case /* proto.Target target */ 2:\n                    message.target = Target.internalBinaryRead(reader, reader.uint32(), options, message.target);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PresetTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string path = 1; */\n        if (message.path !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.path);\n        /* proto.Target target = 2; */\n        if (message.target)\n            Target.internalBinaryWrite(message.target, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PresetTarget\n */\nexport const PresetTarget = new PresetTarget$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PresetEncounter$Type extends MessageType<PresetEncounter> {\n    constructor() {\n        super(\"proto.PresetEncounter\", [\n            { no: 1, name: \"path\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PresetTarget }\n        ]);\n    }\n    create(value?: PartialMessage<PresetEncounter>): PresetEncounter {\n        const message = { path: \"\", targets: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PresetEncounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PresetEncounter): PresetEncounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string path */ 1:\n                    message.path = reader.string();\n                    break;\n                case /* repeated proto.PresetTarget targets */ 2:\n                    message.targets.push(PresetTarget.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PresetEncounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string path = 1; */\n        if (message.path !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.path);\n        /* repeated proto.PresetTarget targets = 2; */\n        for (let i = 0; i < message.targets.length; i++)\n            PresetTarget.internalBinaryWrite(message.targets[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PresetEncounter\n */\nexport const PresetEncounter = new PresetEncounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ItemRandomSuffix$Type extends MessageType<ItemRandomSuffix> {\n    constructor() {\n        super(\"proto.ItemRandomSuffix\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ItemRandomSuffix>): ItemRandomSuffix {\n        const message = { id: 0, name: \"\", stats: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ItemRandomSuffix>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemRandomSuffix): ItemRandomSuffix {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* repeated double stats */ 3:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ItemRandomSuffix, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* repeated double stats = 3; */\n        if (message.stats.length) {\n            writer.tag(3, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ItemRandomSuffix\n */\nexport const ItemRandomSuffix = new ItemRandomSuffix$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ItemSpec$Type extends MessageType<ItemSpec> {\n    constructor() {\n        super(\"proto.ItemSpec\", [\n            { no: 2, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"random_suffix\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"enchant\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"gems\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"reforging\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ItemSpec>): ItemSpec {\n        const message = { id: 0, randomSuffix: 0, enchant: 0, gems: [], reforging: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ItemSpec>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemSpec): ItemSpec {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 2:\n                    message.id = reader.int32();\n                    break;\n                case /* int32 random_suffix */ 6:\n                    message.randomSuffix = reader.int32();\n                    break;\n                case /* int32 enchant */ 3:\n                    message.enchant = reader.int32();\n                    break;\n                case /* repeated int32 gems */ 4:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gems.push(reader.int32());\n                    else\n                        message.gems.push(reader.int32());\n                    break;\n                case /* int32 reforging */ 5:\n                    message.reforging = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ItemSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 2; */\n        if (message.id !== 0)\n            writer.tag(2, WireType.Varint).int32(message.id);\n        /* int32 random_suffix = 6; */\n        if (message.randomSuffix !== 0)\n            writer.tag(6, WireType.Varint).int32(message.randomSuffix);\n        /* int32 enchant = 3; */\n        if (message.enchant !== 0)\n            writer.tag(3, WireType.Varint).int32(message.enchant);\n        /* repeated int32 gems = 4; */\n        if (message.gems.length) {\n            writer.tag(4, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gems.length; i++)\n                writer.int32(message.gems[i]);\n            writer.join();\n        }\n        /* int32 reforging = 5; */\n        if (message.reforging !== 0)\n            writer.tag(5, WireType.Varint).int32(message.reforging);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ItemSpec\n */\nexport const ItemSpec = new ItemSpec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EquipmentSpec$Type extends MessageType<EquipmentSpec> {\n    constructor() {\n        super(\"proto.EquipmentSpec\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemSpec }\n        ]);\n    }\n    create(value?: PartialMessage<EquipmentSpec>): EquipmentSpec {\n        const message = { items: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EquipmentSpec>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EquipmentSpec): EquipmentSpec {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.ItemSpec items */ 1:\n                    message.items.push(ItemSpec.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EquipmentSpec, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.ItemSpec items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            ItemSpec.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EquipmentSpec\n */\nexport const EquipmentSpec = new EquipmentSpec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimDatabase$Type extends MessageType<SimDatabase> {\n    constructor() {\n        super(\"proto.SimDatabase\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => SimItem },\n            { no: 5, name: \"random_suffixes\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemRandomSuffix },\n            { no: 2, name: \"enchants\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => SimEnchant },\n            { no: 3, name: \"gems\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => SimGem },\n            { no: 6, name: \"reforge_stats\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ReforgeStat }\n        ]);\n    }\n    create(value?: PartialMessage<SimDatabase>): SimDatabase {\n        const message = { items: [], randomSuffixes: [], enchants: [], gems: [], reforgeStats: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimDatabase>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimDatabase): SimDatabase {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.SimItem items */ 1:\n                    message.items.push(SimItem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.ItemRandomSuffix random_suffixes */ 5:\n                    message.randomSuffixes.push(ItemRandomSuffix.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.SimEnchant enchants */ 2:\n                    message.enchants.push(SimEnchant.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.SimGem gems */ 3:\n                    message.gems.push(SimGem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.ReforgeStat reforge_stats */ 6:\n                    message.reforgeStats.push(ReforgeStat.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimDatabase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.SimItem items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            SimItem.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ItemRandomSuffix random_suffixes = 5; */\n        for (let i = 0; i < message.randomSuffixes.length; i++)\n            ItemRandomSuffix.internalBinaryWrite(message.randomSuffixes[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.SimEnchant enchants = 2; */\n        for (let i = 0; i < message.enchants.length; i++)\n            SimEnchant.internalBinaryWrite(message.enchants[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.SimGem gems = 3; */\n        for (let i = 0; i < message.gems.length; i++)\n            SimGem.internalBinaryWrite(message.gems[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ReforgeStat reforge_stats = 6; */\n        for (let i = 0; i < message.reforgeStats.length; i++)\n            ReforgeStat.internalBinaryWrite(message.reforgeStats[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimDatabase\n */\nexport const SimDatabase = new SimDatabase$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimItem$Type extends MessageType<SimItem> {\n    constructor() {\n        super(\"proto.SimItem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"type\", kind: \"enum\", T: () => [\"proto.ItemType\", ItemType] },\n            { no: 4, name: \"armor_type\", kind: \"enum\", T: () => [\"proto.ArmorType\", ArmorType] },\n            { no: 5, name: \"weapon_type\", kind: \"enum\", T: () => [\"proto.WeaponType\", WeaponType] },\n            { no: 6, name: \"hand_type\", kind: \"enum\", T: () => [\"proto.HandType\", HandType] },\n            { no: 7, name: \"ranged_weapon_type\", kind: \"enum\", T: () => [\"proto.RangedWeaponType\", RangedWeaponType] },\n            { no: 8, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"gem_sockets\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.GemColor\", GemColor] },\n            { no: 10, name: \"socketBonus\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 11, name: \"weapon_damage_min\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"weapon_damage_max\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"set_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 15, name: \"rand_prop_points\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimItem>): SimItem {\n        const message = { id: 0, name: \"\", type: 0, armorType: 0, weaponType: 0, handType: 0, rangedWeaponType: 0, stats: [], gemSockets: [], socketBonus: [], weaponDamageMin: 0, weaponDamageMax: 0, weaponSpeed: 0, setName: \"\", randPropPoints: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimItem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimItem): SimItem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* proto.ItemType type */ 3:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.ArmorType armor_type */ 4:\n                    message.armorType = reader.int32();\n                    break;\n                case /* proto.WeaponType weapon_type */ 5:\n                    message.weaponType = reader.int32();\n                    break;\n                case /* proto.HandType hand_type */ 6:\n                    message.handType = reader.int32();\n                    break;\n                case /* proto.RangedWeaponType ranged_weapon_type */ 7:\n                    message.rangedWeaponType = reader.int32();\n                    break;\n                case /* repeated double stats */ 8:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* repeated proto.GemColor gem_sockets */ 9:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gemSockets.push(reader.int32());\n                    else\n                        message.gemSockets.push(reader.int32());\n                    break;\n                case /* repeated double socketBonus */ 10:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.socketBonus.push(reader.double());\n                    else\n                        message.socketBonus.push(reader.double());\n                    break;\n                case /* double weapon_damage_min */ 11:\n                    message.weaponDamageMin = reader.double();\n                    break;\n                case /* double weapon_damage_max */ 12:\n                    message.weaponDamageMax = reader.double();\n                    break;\n                case /* double weapon_speed */ 13:\n                    message.weaponSpeed = reader.double();\n                    break;\n                case /* string set_name */ 14:\n                    message.setName = reader.string();\n                    break;\n                case /* int32 rand_prop_points */ 15:\n                    message.randPropPoints = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* proto.ItemType type = 3; */\n        if (message.type !== 0)\n            writer.tag(3, WireType.Varint).int32(message.type);\n        /* proto.ArmorType armor_type = 4; */\n        if (message.armorType !== 0)\n            writer.tag(4, WireType.Varint).int32(message.armorType);\n        /* proto.WeaponType weapon_type = 5; */\n        if (message.weaponType !== 0)\n            writer.tag(5, WireType.Varint).int32(message.weaponType);\n        /* proto.HandType hand_type = 6; */\n        if (message.handType !== 0)\n            writer.tag(6, WireType.Varint).int32(message.handType);\n        /* proto.RangedWeaponType ranged_weapon_type = 7; */\n        if (message.rangedWeaponType !== 0)\n            writer.tag(7, WireType.Varint).int32(message.rangedWeaponType);\n        /* repeated double stats = 8; */\n        if (message.stats.length) {\n            writer.tag(8, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* repeated proto.GemColor gem_sockets = 9; */\n        if (message.gemSockets.length) {\n            writer.tag(9, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gemSockets.length; i++)\n                writer.int32(message.gemSockets[i]);\n            writer.join();\n        }\n        /* repeated double socketBonus = 10; */\n        if (message.socketBonus.length) {\n            writer.tag(10, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.socketBonus.length; i++)\n                writer.double(message.socketBonus[i]);\n            writer.join();\n        }\n        /* double weapon_damage_min = 11; */\n        if (message.weaponDamageMin !== 0)\n            writer.tag(11, WireType.Bit64).double(message.weaponDamageMin);\n        /* double weapon_damage_max = 12; */\n        if (message.weaponDamageMax !== 0)\n            writer.tag(12, WireType.Bit64).double(message.weaponDamageMax);\n        /* double weapon_speed = 13; */\n        if (message.weaponSpeed !== 0)\n            writer.tag(13, WireType.Bit64).double(message.weaponSpeed);\n        /* string set_name = 14; */\n        if (message.setName !== \"\")\n            writer.tag(14, WireType.LengthDelimited).string(message.setName);\n        /* int32 rand_prop_points = 15; */\n        if (message.randPropPoints !== 0)\n            writer.tag(15, WireType.Varint).int32(message.randPropPoints);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimItem\n */\nexport const SimItem = new SimItem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimEnchant$Type extends MessageType<SimEnchant> {\n    constructor() {\n        super(\"proto.SimEnchant\", [\n            { no: 1, name: \"effect_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimEnchant>): SimEnchant {\n        const message = { effectId: 0, stats: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimEnchant>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimEnchant): SimEnchant {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 effect_id */ 1:\n                    message.effectId = reader.int32();\n                    break;\n                case /* repeated double stats */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimEnchant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 effect_id = 1; */\n        if (message.effectId !== 0)\n            writer.tag(1, WireType.Varint).int32(message.effectId);\n        /* repeated double stats = 2; */\n        if (message.stats.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimEnchant\n */\nexport const SimEnchant = new SimEnchant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimGem$Type extends MessageType<SimGem> {\n    constructor() {\n        super(\"proto.SimGem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"color\", kind: \"enum\", T: () => [\"proto.GemColor\", GemColor] },\n            { no: 4, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimGem>): SimGem {\n        const message = { id: 0, name: \"\", color: 0, stats: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimGem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimGem): SimGem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* proto.GemColor color */ 3:\n                    message.color = reader.int32();\n                    break;\n                case /* repeated double stats */ 4:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimGem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* proto.GemColor color = 3; */\n        if (message.color !== 0)\n            writer.tag(3, WireType.Varint).int32(message.color);\n        /* repeated double stats = 4; */\n        if (message.stats.length) {\n            writer.tag(4, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimGem\n */\nexport const SimGem = new SimGem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnitReference$Type extends MessageType<UnitReference> {\n    constructor() {\n        super(\"proto.UnitReference\", [\n            { no: 2, name: \"type\", kind: \"enum\", T: () => [\"proto.UnitReference.Type\", UnitReference_Type] },\n            { no: 3, name: \"index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"owner\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<UnitReference>): UnitReference {\n        const message = { type: 0, index: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnitReference>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitReference): UnitReference {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference.Type type */ 2:\n                    message.type = reader.int32();\n                    break;\n                case /* int32 index */ 3:\n                    message.index = reader.int32();\n                    break;\n                case /* proto.UnitReference owner */ 4:\n                    message.owner = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.owner);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnitReference, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference.Type type = 2; */\n        if (message.type !== 0)\n            writer.tag(2, WireType.Varint).int32(message.type);\n        /* int32 index = 3; */\n        if (message.index !== 0)\n            writer.tag(3, WireType.Varint).int32(message.index);\n        /* proto.UnitReference owner = 4; */\n        if (message.owner)\n            UnitReference.internalBinaryWrite(message.owner, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnitReference\n */\nexport const UnitReference = new UnitReference$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ActionID$Type extends MessageType<ActionID> {\n    constructor() {\n        super(\"proto.ActionID\", [\n            { no: 1, name: \"spell_id\", kind: \"scalar\", oneof: \"rawId\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"item_id\", kind: \"scalar\", oneof: \"rawId\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"other_id\", kind: \"enum\", oneof: \"rawId\", T: () => [\"proto.OtherAction\", OtherAction] },\n            { no: 4, name: \"tag\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ActionID>): ActionID {\n        const message = { rawId: { oneofKind: undefined }, tag: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ActionID>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionID): ActionID {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 spell_id */ 1:\n                    message.rawId = {\n                        oneofKind: \"spellId\",\n                        spellId: reader.int32()\n                    };\n                    break;\n                case /* int32 item_id */ 2:\n                    message.rawId = {\n                        oneofKind: \"itemId\",\n                        itemId: reader.int32()\n                    };\n                    break;\n                case /* proto.OtherAction other_id */ 3:\n                    message.rawId = {\n                        oneofKind: \"otherId\",\n                        otherId: reader.int32()\n                    };\n                    break;\n                case /* int32 tag */ 4:\n                    message.tag = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ActionID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 spell_id = 1; */\n        if (message.rawId.oneofKind === \"spellId\")\n            writer.tag(1, WireType.Varint).int32(message.rawId.spellId);\n        /* int32 item_id = 2; */\n        if (message.rawId.oneofKind === \"itemId\")\n            writer.tag(2, WireType.Varint).int32(message.rawId.itemId);\n        /* proto.OtherAction other_id = 3; */\n        if (message.rawId.oneofKind === \"otherId\")\n            writer.tag(3, WireType.Varint).int32(message.rawId.otherId);\n        /* int32 tag = 4; */\n        if (message.tag !== 0)\n            writer.tag(4, WireType.Varint).int32(message.tag);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ActionID\n */\nexport const ActionID = new ActionID$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Glyphs$Type extends MessageType<Glyphs> {\n    constructor() {\n        super(\"proto.Glyphs\", [\n            { no: 1, name: \"prime1\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"prime2\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"prime3\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"major1\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"major2\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"major3\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"minor1\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"minor2\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"minor3\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Glyphs>): Glyphs {\n        const message = { prime1: 0, prime2: 0, prime3: 0, major1: 0, major2: 0, major3: 0, minor1: 0, minor2: 0, minor3: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Glyphs>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Glyphs): Glyphs {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 prime1 */ 1:\n                    message.prime1 = reader.int32();\n                    break;\n                case /* int32 prime2 */ 2:\n                    message.prime2 = reader.int32();\n                    break;\n                case /* int32 prime3 */ 3:\n                    message.prime3 = reader.int32();\n                    break;\n                case /* int32 major1 */ 4:\n                    message.major1 = reader.int32();\n                    break;\n                case /* int32 major2 */ 5:\n                    message.major2 = reader.int32();\n                    break;\n                case /* int32 major3 */ 6:\n                    message.major3 = reader.int32();\n                    break;\n                case /* int32 minor1 */ 7:\n                    message.minor1 = reader.int32();\n                    break;\n                case /* int32 minor2 */ 8:\n                    message.minor2 = reader.int32();\n                    break;\n                case /* int32 minor3 */ 9:\n                    message.minor3 = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Glyphs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 prime1 = 1; */\n        if (message.prime1 !== 0)\n            writer.tag(1, WireType.Varint).int32(message.prime1);\n        /* int32 prime2 = 2; */\n        if (message.prime2 !== 0)\n            writer.tag(2, WireType.Varint).int32(message.prime2);\n        /* int32 prime3 = 3; */\n        if (message.prime3 !== 0)\n            writer.tag(3, WireType.Varint).int32(message.prime3);\n        /* int32 major1 = 4; */\n        if (message.major1 !== 0)\n            writer.tag(4, WireType.Varint).int32(message.major1);\n        /* int32 major2 = 5; */\n        if (message.major2 !== 0)\n            writer.tag(5, WireType.Varint).int32(message.major2);\n        /* int32 major3 = 6; */\n        if (message.major3 !== 0)\n            writer.tag(6, WireType.Varint).int32(message.major3);\n        /* int32 minor1 = 7; */\n        if (message.minor1 !== 0)\n            writer.tag(7, WireType.Varint).int32(message.minor1);\n        /* int32 minor2 = 8; */\n        if (message.minor2 !== 0)\n            writer.tag(8, WireType.Varint).int32(message.minor2);\n        /* int32 minor3 = 9; */\n        if (message.minor3 !== 0)\n            writer.tag(9, WireType.Varint).int32(message.minor3);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Glyphs\n */\nexport const Glyphs = new Glyphs$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Cooldown$Type extends MessageType<Cooldown> {\n    constructor() {\n        super(\"proto.Cooldown\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"timings\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Cooldown>): Cooldown {\n        const message = { timings: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Cooldown>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cooldown): Cooldown {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* repeated double timings */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.timings.push(reader.double());\n                    else\n                        message.timings.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Cooldown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double timings = 2; */\n        if (message.timings.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.timings.length; i++)\n                writer.double(message.timings[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Cooldown\n */\nexport const Cooldown = new Cooldown$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Cooldowns$Type extends MessageType<Cooldowns> {\n    constructor() {\n        super(\"proto.Cooldowns\", [\n            { no: 1, name: \"cooldowns\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Cooldown },\n            { no: 2, name: \"hp_percent_for_defensives\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Cooldowns>): Cooldowns {\n        const message = { cooldowns: [], hpPercentForDefensives: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Cooldowns>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Cooldowns): Cooldowns {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Cooldown cooldowns */ 1:\n                    message.cooldowns.push(Cooldown.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* double hp_percent_for_defensives */ 2:\n                    message.hpPercentForDefensives = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Cooldowns, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Cooldown cooldowns = 1; */\n        for (let i = 0; i < message.cooldowns.length; i++)\n            Cooldown.internalBinaryWrite(message.cooldowns[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double hp_percent_for_defensives = 2; */\n        if (message.hpPercentForDefensives !== 0)\n            writer.tag(2, WireType.Bit64).double(message.hpPercentForDefensives);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Cooldowns\n */\nexport const Cooldowns = new Cooldowns$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealingModel$Type extends MessageType<HealingModel> {\n    constructor() {\n        super(\"proto.HealingModel\", [\n            { no: 1, name: \"hps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"cadence_seconds\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"cadence_variation\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"inspiration_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"burst_window\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HealingModel>): HealingModel {\n        const message = { hps: 0, cadenceSeconds: 0, cadenceVariation: 0, inspirationUptime: 0, burstWindow: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HealingModel>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HealingModel): HealingModel {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double hps */ 1:\n                    message.hps = reader.double();\n                    break;\n                case /* double cadence_seconds */ 2:\n                    message.cadenceSeconds = reader.double();\n                    break;\n                case /* double cadence_variation */ 5:\n                    message.cadenceVariation = reader.double();\n                    break;\n                case /* double inspiration_uptime */ 3:\n                    message.inspirationUptime = reader.double();\n                    break;\n                case /* int32 burst_window */ 4:\n                    message.burstWindow = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HealingModel, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double hps = 1; */\n        if (message.hps !== 0)\n            writer.tag(1, WireType.Bit64).double(message.hps);\n        /* double cadence_seconds = 2; */\n        if (message.cadenceSeconds !== 0)\n            writer.tag(2, WireType.Bit64).double(message.cadenceSeconds);\n        /* double cadence_variation = 5; */\n        if (message.cadenceVariation !== 0)\n            writer.tag(5, WireType.Bit64).double(message.cadenceVariation);\n        /* double inspiration_uptime = 3; */\n        if (message.inspirationUptime !== 0)\n            writer.tag(3, WireType.Bit64).double(message.inspirationUptime);\n        /* int32 burst_window = 4; */\n        if (message.burstWindow !== 0)\n            writer.tag(4, WireType.Varint).int32(message.burstWindow);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HealingModel\n */\nexport const HealingModel = new HealingModel$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CustomRotation$Type extends MessageType<CustomRotation> {\n    constructor() {\n        super(\"proto.CustomRotation\", [\n            { no: 1, name: \"spells\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => CustomSpell }\n        ]);\n    }\n    create(value?: PartialMessage<CustomRotation>): CustomRotation {\n        const message = { spells: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CustomRotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomRotation): CustomRotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.CustomSpell spells */ 1:\n                    message.spells.push(CustomSpell.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CustomRotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.CustomSpell spells = 1; */\n        for (let i = 0; i < message.spells.length; i++)\n            CustomSpell.internalBinaryWrite(message.spells[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CustomRotation\n */\nexport const CustomRotation = new CustomRotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CustomSpell$Type extends MessageType<CustomSpell> {\n    constructor() {\n        super(\"proto.CustomSpell\", [\n            { no: 1, name: \"spell\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"casts_per_minute\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<CustomSpell>): CustomSpell {\n        const message = { spell: 0, castsPerMinute: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CustomSpell>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomSpell): CustomSpell {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 spell */ 1:\n                    message.spell = reader.int32();\n                    break;\n                case /* double casts_per_minute */ 2:\n                    message.castsPerMinute = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CustomSpell, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 spell = 1; */\n        if (message.spell !== 0)\n            writer.tag(1, WireType.Varint).int32(message.spell);\n        /* double casts_per_minute = 2; */\n        if (message.castsPerMinute !== 0)\n            writer.tag(2, WireType.Bit64).double(message.castsPerMinute);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CustomSpell\n */\nexport const CustomSpell = new CustomSpell$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ItemSwap$Type extends MessageType<ItemSwap> {\n    constructor() {\n        super(\"proto.ItemSwap\", [\n            { no: 1, name: \"mh_item\", kind: \"message\", T: () => ItemSpec },\n            { no: 2, name: \"oh_item\", kind: \"message\", T: () => ItemSpec },\n            { no: 3, name: \"ranged_item\", kind: \"message\", T: () => ItemSpec }\n        ]);\n    }\n    create(value?: PartialMessage<ItemSwap>): ItemSwap {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ItemSwap>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemSwap): ItemSwap {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ItemSpec mh_item */ 1:\n                    message.mhItem = ItemSpec.internalBinaryRead(reader, reader.uint32(), options, message.mhItem);\n                    break;\n                case /* proto.ItemSpec oh_item */ 2:\n                    message.ohItem = ItemSpec.internalBinaryRead(reader, reader.uint32(), options, message.ohItem);\n                    break;\n                case /* proto.ItemSpec ranged_item */ 3:\n                    message.rangedItem = ItemSpec.internalBinaryRead(reader, reader.uint32(), options, message.rangedItem);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ItemSwap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ItemSpec mh_item = 1; */\n        if (message.mhItem)\n            ItemSpec.internalBinaryWrite(message.mhItem, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ItemSpec oh_item = 2; */\n        if (message.ohItem)\n            ItemSpec.internalBinaryWrite(message.ohItem, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ItemSpec ranged_item = 3; */\n        if (message.rangedItem)\n            ItemSpec.internalBinaryWrite(message.rangedItem, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ItemSwap\n */\nexport const ItemSwap = new ItemSwap$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Duration$Type extends MessageType<Duration> {\n    constructor() {\n        super(\"proto.Duration\", [\n            { no: 1, name: \"ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Duration>): Duration {\n        const message = { ms: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Duration>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Duration): Duration {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double ms */ 1:\n                    message.ms = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Duration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double ms = 1; */\n        if (message.ms !== 0)\n            writer.tag(1, WireType.Bit64).double(message.ms);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Duration\n */\nexport const Duration = new Duration$Type();\n","import { Spec } from \"../proto/common\";\n\nexport const CHARACTER_LEVEL = 85;\nexport const BOSS_LEVEL = CHARACTER_LEVEL + 3;\n\nexport const EXPERTISE_PER_QUARTER_PERCENT_REDUCTION = 32.79 / 4;\nexport const MELEE_CRIT_RATING_PER_CRIT_CHANCE = 179.28;\nexport const MELEE_HIT_RATING_PER_HIT_CHANCE = 120.11;\nexport const ARMOR_PEN_PER_PERCENT_ARMOR = 13.99;\n\nexport const SPELL_CRIT_RATING_PER_CRIT_CHANCE = 179.28;\nexport const SPELL_HIT_RATING_PER_HIT_CHANCE = 102.44;\n\nexport const HASTE_RATING_PER_HASTE_PERCENT = 128.06;\nexport const MASTERY_RATING_PER_MASTERY_POINT = 179.28;\n\n// Shamans, Paladins, Druids, Death Knights get more haste than everyone else, for melee.\nexport const SPECIAL_MELEE_HASTE_RATING_PER_HASTE_PERCENT = 25.22;\n\nexport const DEFENSE_RATING_PER_DEFENSE = 19.2;\nexport const MISS_DODGE_PARRY_BLOCK_CRIT_CHANCE_PER_DEFENSE = 0.04;\nexport const BLOCK_RATING_PER_BLOCK_CHANCE = 88.35;\nexport const DODGE_RATING_PER_DODGE_CHANCE = 176.71;\nexport const PARRY_RATING_PER_PARRY_CHANCE = 176.71;\nexport const RESILIENCE_RATING_PER_CRIT_REDUCTION_CHANCE = 0;\nexport const RESILIENCE_RATING_PER_CRIT_DAMAGE_REDUCTION_PERCENT = 94.27 / 2.2;\n\n// Mastery Ratings have various increments based on spec.\nexport const masteryPercentPerPoint: Map<Spec, number> = new Map([\n\t[Spec.SpecAssassinationRogue, 3.5],\n\t[Spec.SpecCombatRogue, 2.0],\n\t[Spec.SpecSubtletyRogue, 2.5],\n\t[Spec.SpecBloodDeathKnight, 6.25],\n\t[Spec.SpecFrostDeathKnight, 2.0],\n\t[Spec.SpecUnholyDeathKnight, 2.5],\n\t[Spec.SpecBalanceDruid, 2.0],\n\t[Spec.SpecFeralDruid, 0],\n\t[Spec.SpecRestorationDruid, 1.25],\n\t[Spec.SpecHolyPaladin, 1.5],\n\t[Spec.SpecProtectionPaladin, 2.25],\n\t[Spec.SpecRetributionPaladin, 2.1],\n\t[Spec.SpecElementalShaman, 2.0],\n\t[Spec.SpecEnhancementShaman, 2.5],\n\t[Spec.SpecRestorationShaman, 3.0],\n\t[Spec.SpecBeastMasteryHunter, 1.675],\n\t[Spec.SpecMarksmanshipHunter, 2.1],\n\t[Spec.SpecSurvivalHunter, 1.0],\n\t[Spec.SpecArmsWarrior, 2.2],\n\t[Spec.SpecFuryWarrior, 5.6],\n\t[Spec.SpecProtectionWarrior, 1.5],\n\t[Spec.SpecArcaneMage, 1.5],\n\t[Spec.SpecFireMage, 2.8],\n\t[Spec.SpecFrostMage, 2.5],\n\t[Spec.SpecDisciplinePriest, 2.5],\n\t[Spec.SpecHolyPriest, 1.25],\n\t[Spec.SpecShadowPriest, 1.45],\n\t[Spec.SpecAfflictionWarlock, 1.625],\n\t[Spec.SpecDemonologyWarlock, 2.3],\n\t[Spec.SpecDestructionWarlock, 1.35],\n]);\n\n// Pending split of Feral to Cat/Bear specifically\nexport const MASTERY_DRUID_BEAR_PER_POINT = 4.0;\nexport const MASTERY_DRUID_CAT_PER_POINT = 3.125;\n\n\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"shaman.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.ShamanTalents\n */\nexport interface ShamanTalents {\n    /**\n     * Elemental\n     *\n     * @generated from protobuf field: int32 acuity = 1;\n     */\n    acuity: number;\n    /**\n     * @generated from protobuf field: int32 convection = 2;\n     */\n    convection: number;\n    /**\n     * @generated from protobuf field: int32 concussion = 3;\n     */\n    concussion: number;\n    /**\n     * @generated from protobuf field: int32 call_of_flame = 4;\n     */\n    callOfFlame: number;\n    /**\n     * @generated from protobuf field: int32 elemental_warding = 5;\n     */\n    elementalWarding: number;\n    /**\n     * @generated from protobuf field: int32 reverberation = 6;\n     */\n    reverberation: number;\n    /**\n     * @generated from protobuf field: int32 elemental_precision = 7;\n     */\n    elementalPrecision: number;\n    /**\n     * @generated from protobuf field: int32 rolling_thunder = 8;\n     */\n    rollingThunder: number;\n    /**\n     * @generated from protobuf field: bool elemental_focus = 9;\n     */\n    elementalFocus: boolean;\n    /**\n     * @generated from protobuf field: int32 elemental_reach = 10;\n     */\n    elementalReach: number;\n    /**\n     * @generated from protobuf field: int32 elemental_oath = 11;\n     */\n    elementalOath: number;\n    /**\n     * @generated from protobuf field: int32 lava_flows = 12;\n     */\n    lavaFlows: number;\n    /**\n     * @generated from protobuf field: bool fulmination = 13;\n     */\n    fulmination: boolean;\n    /**\n     * @generated from protobuf field: bool elemental_mastery = 14;\n     */\n    elementalMastery: boolean;\n    /**\n     * @generated from protobuf field: int32 earths_grasp = 15;\n     */\n    earthsGrasp: number;\n    /**\n     * @generated from protobuf field: bool totemic_wrath = 16;\n     */\n    totemicWrath: boolean;\n    /**\n     * @generated from protobuf field: int32 feedback = 17;\n     */\n    feedback: number;\n    /**\n     * @generated from protobuf field: int32 lava_surge = 18;\n     */\n    lavaSurge: number;\n    /**\n     * @generated from protobuf field: bool earthquake = 19;\n     */\n    earthquake: boolean;\n    /**\n     * Enhancement\n     *\n     * @generated from protobuf field: int32 elemental_weapons = 20;\n     */\n    elementalWeapons: number;\n    /**\n     * @generated from protobuf field: int32 focused_strikes = 21;\n     */\n    focusedStrikes: number;\n    /**\n     * @generated from protobuf field: int32 improved_shields = 22;\n     */\n    improvedShields: number;\n    /**\n     * @generated from protobuf field: int32 elemental_devastation = 23;\n     */\n    elementalDevastation: number;\n    /**\n     * @generated from protobuf field: int32 flurry = 24;\n     */\n    flurry: number;\n    /**\n     * @generated from protobuf field: int32 ancestral_swiftness = 25;\n     */\n    ancestralSwiftness: number;\n    /**\n     * @generated from protobuf field: int32 totemic_reach = 26;\n     */\n    totemicReach: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 27;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: bool stormstrike = 28;\n     */\n    stormstrike: boolean;\n    /**\n     * @generated from protobuf field: int32 static_shock = 29;\n     */\n    staticShock: number;\n    /**\n     * @generated from protobuf field: int32 frozen_power = 30;\n     */\n    frozenPower: number;\n    /**\n     * @generated from protobuf field: int32 seasoned_winds = 31;\n     */\n    seasonedWinds: number;\n    /**\n     * @generated from protobuf field: int32 searing_flames = 32;\n     */\n    searingFlames: number;\n    /**\n     * @generated from protobuf field: int32 earthen_power = 33;\n     */\n    earthenPower: number;\n    /**\n     * @generated from protobuf field: bool shamanistic_rage = 34;\n     */\n    shamanisticRage: boolean;\n    /**\n     * @generated from protobuf field: int32 unleashed_rage = 35;\n     */\n    unleashedRage: number;\n    /**\n     * @generated from protobuf field: int32 maelstrom_weapon = 36;\n     */\n    maelstromWeapon: number;\n    /**\n     * @generated from protobuf field: int32 improved_lava_lash = 37;\n     */\n    improvedLavaLash: number;\n    /**\n     * @generated from protobuf field: bool feral_spirit = 38;\n     */\n    feralSpirit: boolean;\n    /**\n     * Restoration\n     *\n     * @generated from protobuf field: int32 ancestral_resolve = 39;\n     */\n    ancestralResolve: number;\n    /**\n     * @generated from protobuf field: int32 tidal_focus = 40;\n     */\n    tidalFocus: number;\n    /**\n     * @generated from protobuf field: int32 spark_of_life = 41;\n     */\n    sparkOfLife: number;\n    /**\n     * @generated from protobuf field: int32 resurgence = 42;\n     */\n    resurgence: number;\n    /**\n     * @generated from protobuf field: int32 totemic_focus = 43;\n     */\n    totemicFocus: number;\n    /**\n     * @generated from protobuf field: int32 focused_insight = 44;\n     */\n    focusedInsight: number;\n    /**\n     * @generated from protobuf field: int32 natures_guardian = 45;\n     */\n    naturesGuardian: number;\n    /**\n     * @generated from protobuf field: int32 ancestral_healing = 46;\n     */\n    ancestralHealing: number;\n    /**\n     * @generated from protobuf field: bool natures_swiftness = 47;\n     */\n    naturesSwiftness: boolean;\n    /**\n     * @generated from protobuf field: int32 natures_blessing = 48;\n     */\n    naturesBlessing: number;\n    /**\n     * @generated from protobuf field: int32 soothing_rains = 49;\n     */\n    soothingRains: number;\n    /**\n     * @generated from protobuf field: bool improved_cleanse_spirit = 50;\n     */\n    improvedCleanseSpirit: boolean;\n    /**\n     * @generated from protobuf field: int32 cleansing_waters = 51;\n     */\n    cleansingWaters: number;\n    /**\n     * @generated from protobuf field: int32 ancestral_awakening = 52;\n     */\n    ancestralAwakening: number;\n    /**\n     * @generated from protobuf field: bool mana_tide_totem = 53;\n     */\n    manaTideTotem: boolean;\n    /**\n     * @generated from protobuf field: int32 telluric_currents = 54;\n     */\n    telluricCurrents: number;\n    /**\n     * @generated from protobuf field: bool spirit_link_totem = 55;\n     */\n    spiritLinkTotem: boolean;\n    /**\n     * @generated from protobuf field: int32 tidal_waves = 56;\n     */\n    tidalWaves: number;\n    /**\n     * @generated from protobuf field: int32 blessing_of_the_eternals = 57;\n     */\n    blessingOfTheEternals: number;\n    /**\n     * @generated from protobuf field: bool riptide = 58;\n     */\n    riptide: boolean;\n}\n/**\n * @generated from protobuf message proto.ShamanTotems\n */\nexport interface ShamanTotems {\n    /**\n     * @generated from protobuf field: proto.EarthTotem earth = 1;\n     */\n    earth: EarthTotem;\n    /**\n     * @generated from protobuf field: proto.AirTotem air = 2;\n     */\n    air: AirTotem;\n    /**\n     * @generated from protobuf field: proto.FireTotem fire = 3;\n     */\n    fire: FireTotem;\n    /**\n     * @generated from protobuf field: proto.WaterTotem water = 4;\n     */\n    water: WaterTotem;\n    /**\n     * If set, will use fire elemental totem at the start and revert to regular\n     * fire totems when it expires.\n     *\n     * @generated from protobuf field: bool use_fire_elemental = 6;\n     */\n    useFireElemental: boolean;\n    /**\n     * Bonus spell power for fire elemental snapshotting.\n     *\n     * @generated from protobuf field: int32 bonus_spellpower = 10;\n     */\n    bonusSpellpower: number;\n    /**\n     * Snapshot fire elemental using Tier 10 4 set bonus.\n     *\n     * @generated from protobuf field: bool enh_tier_ten_bonus = 11;\n     */\n    enhTierTenBonus: boolean;\n}\n/**\n * Not used here, but used by APL\n *\n * @generated from protobuf enum proto.ShamanTotems.TotemType\n */\nexport enum ShamanTotems_TotemType {\n    /**\n     * @generated from protobuf enum value: TypeUnknown = 0;\n     */\n    TypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: Earth = 1;\n     */\n    Earth = 1,\n    /**\n     * @generated from protobuf enum value: Air = 2;\n     */\n    Air = 2,\n    /**\n     * @generated from protobuf enum value: Fire = 3;\n     */\n    Fire = 3,\n    /**\n     * @generated from protobuf enum value: Water = 4;\n     */\n    Water = 4\n}\n/**\n * @generated from protobuf message proto.ShamanOptions\n */\nexport interface ShamanOptions {\n    /**\n     * @generated from protobuf field: proto.ShamanShield shield = 1;\n     */\n    shield: ShamanShield;\n    /**\n     * @generated from protobuf field: proto.ShamanTotems totems = 2;\n     */\n    totems?: ShamanTotems;\n    /**\n     * @generated from protobuf field: proto.ShamanImbue imbue_mh = 3;\n     */\n    imbueMh: ShamanImbue;\n}\n/**\n * @generated from protobuf message proto.ElementalShaman\n */\nexport interface ElementalShaman {\n    /**\n     * @generated from protobuf field: proto.ElementalShaman.Options options = 3;\n     */\n    options?: ElementalShaman_Options;\n}\n/**\n * @generated from protobuf message proto.ElementalShaman.Rotation\n */\nexport interface ElementalShaman_Rotation {\n}\n/**\n * @generated from protobuf message proto.ElementalShaman.Options\n */\nexport interface ElementalShaman_Options {\n    /**\n     * @generated from protobuf field: proto.ShamanOptions class_options = 1;\n     */\n    classOptions?: ShamanOptions;\n    /**\n     * @generated from protobuf field: proto.ElementalShaman.Options.ThunderstormRange thunderstormRange = 2;\n     */\n    thunderstormRange: ElementalShaman_Options_ThunderstormRange;\n}\n/**\n * @generated from protobuf enum proto.ElementalShaman.Options.ThunderstormRange\n */\nexport enum ElementalShaman_Options_ThunderstormRange {\n    /**\n     * @generated from protobuf enum value: UnsetTSRange = 0;\n     */\n    UnsetTSRange = 0,\n    /**\n     * @generated from protobuf enum value: TSInRange = 1;\n     */\n    TSInRange = 1,\n    /**\n     * @generated from protobuf enum value: TSOutofRange = 2;\n     */\n    TSOutofRange = 2\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman\n */\nexport interface EnhancementShaman {\n    /**\n     * @generated from protobuf field: proto.EnhancementShaman.Options options = 3;\n     */\n    options?: EnhancementShaman_Options;\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman.Rotation\n */\nexport interface EnhancementShaman_Rotation {\n}\n/**\n * @generated from protobuf message proto.EnhancementShaman.Options\n */\nexport interface EnhancementShaman_Options {\n    /**\n     * @generated from protobuf field: proto.ShamanOptions class_options = 1;\n     */\n    classOptions?: ShamanOptions;\n    /**\n     * @generated from protobuf field: proto.ShamanSyncType sync_type = 2;\n     */\n    syncType: ShamanSyncType;\n    /**\n     * @generated from protobuf field: proto.ShamanImbue imbue_oh = 3;\n     */\n    imbueOh: ShamanImbue;\n}\n/**\n * @generated from protobuf message proto.RestorationShaman\n */\nexport interface RestorationShaman {\n    /**\n     * @generated from protobuf field: proto.RestorationShaman.Options options = 3;\n     */\n    options?: RestorationShaman_Options;\n}\n/**\n * @generated from protobuf message proto.RestorationShaman.Rotation\n */\nexport interface RestorationShaman_Rotation {\n}\n/**\n * @generated from protobuf message proto.RestorationShaman.Options\n */\nexport interface RestorationShaman_Options {\n    /**\n     * @generated from protobuf field: proto.ShamanOptions class_options = 1;\n     */\n    classOptions?: ShamanOptions;\n    /**\n     * @generated from protobuf field: int32 earth_shield_p_p_m = 2;\n     */\n    earthShieldPPM: number;\n}\n/**\n * @generated from protobuf enum proto.ShamanPrimeGlyph\n */\nexport enum ShamanPrimeGlyph {\n    /**\n     * @generated from protobuf enum value: ShamanPrimeGlyphNone = 0;\n     */\n    ShamanPrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfEarthShield = 45775;\n     */\n    GlyphOfEarthShield = 45775,\n    /**\n     * @generated from protobuf enum value: GlyphOfEarthlivingWeapon = 41527;\n     */\n    GlyphOfEarthlivingWeapon = 41527,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeralSpirit = 45771;\n     */\n    GlyphOfFeralSpirit = 45771,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireElementalTotem = 41529;\n     */\n    GlyphOfFireElementalTotem = 41529,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlameShock = 41531;\n     */\n    GlyphOfFlameShock = 41531,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlametongueWeapon = 41532;\n     */\n    GlyphOfFlametongueWeapon = 41532,\n    /**\n     * @generated from protobuf enum value: GlyphOfLavaBurst = 41524;\n     */\n    GlyphOfLavaBurst = 41524,\n    /**\n     * @generated from protobuf enum value: GlyphOfLavaLash = 41540;\n     */\n    GlyphOfLavaLash = 41540,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightningBolt = 41536;\n     */\n    GlyphOfLightningBolt = 41536,\n    /**\n     * @generated from protobuf enum value: GlyphOfRiptide = 45772;\n     */\n    GlyphOfRiptide = 45772,\n    /**\n     * @generated from protobuf enum value: GlyphOfShocking = 41526;\n     */\n    GlyphOfShocking = 41526,\n    /**\n     * @generated from protobuf enum value: GlyphOfStormstrike = 41539;\n     */\n    GlyphOfStormstrike = 41539,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnleashedLightning = 71155;\n     */\n    GlyphOfUnleashedLightning = 71155,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterShield = 41541;\n     */\n    GlyphOfWaterShield = 41541,\n    /**\n     * @generated from protobuf enum value: GlyphOfWindfuryWeapon = 41542;\n     */\n    GlyphOfWindfuryWeapon = 41542\n}\n/**\n * @generated from protobuf enum proto.ShamanMajorGlyph\n */\nexport enum ShamanMajorGlyph {\n    /**\n     * @generated from protobuf enum value: ShamanMajorGlyphNone = 0;\n     */\n    ShamanMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainHeal = 41517;\n     */\n    GlyphOfChainHeal = 41517,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainLightning = 41518;\n     */\n    GlyphOfChainLightning = 41518,\n    /**\n     * @generated from protobuf enum value: GlyphOfElementalMastery = 41552;\n     */\n    GlyphOfElementalMastery = 41552,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireNova = 41530;\n     */\n    GlyphOfFireNova = 41530,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostShock = 41547;\n     */\n    GlyphOfFrostShock = 41547,\n    /**\n     * @generated from protobuf enum value: GlyphOfGhostWolf = 43725;\n     */\n    GlyphOfGhostWolf = 43725,\n    /**\n     * @generated from protobuf enum value: GlyphOfGroundingTotem = 41538;\n     */\n    GlyphOfGroundingTotem = 41538,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingStreamTotem = 41533;\n     */\n    GlyphOfHealingStreamTotem = 41533,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingWave = 41534;\n     */\n    GlyphOfHealingWave = 41534,\n    /**\n     * @generated from protobuf enum value: GlyphOfHex = 45777;\n     */\n    GlyphOfHex = 45777,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightningShield = 41537;\n     */\n    GlyphOfLightningShield = 41537,\n    /**\n     * @generated from protobuf enum value: GlyphOfShamanisticRage = 45776;\n     */\n    GlyphOfShamanisticRage = 45776,\n    /**\n     * @generated from protobuf enum value: GlyphOfStoneclawTotem = 45778;\n     */\n    GlyphOfStoneclawTotem = 45778,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunder = 45770;\n     */\n    GlyphOfThunder = 45770,\n    /**\n     * @generated from protobuf enum value: GlyphOfTotemicRecall = 41535;\n     */\n    GlyphOfTotemicRecall = 41535\n}\n/**\n * @generated from protobuf enum proto.ShamanMinorGlyph\n */\nexport enum ShamanMinorGlyph {\n    /**\n     * @generated from protobuf enum value: ShamanMinorGlyphNone = 0;\n     */\n    ShamanMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAstralRecall = 43381;\n     */\n    GlyphOfAstralRecall = 43381,\n    /**\n     * @generated from protobuf enum value: GlyphOfRenewedLife = 43385;\n     */\n    GlyphOfRenewedLife = 43385,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheArcticWolf = 43386;\n     */\n    GlyphOfTheArcticWolf = 43386,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunderstorm = 44923;\n     */\n    GlyphOfThunderstorm = 44923,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterBreathing = 43344;\n     */\n    GlyphOfWaterBreathing = 43344,\n    /**\n     * @generated from protobuf enum value: GlyphOfWaterWalking = 43388;\n     */\n    GlyphOfWaterWalking = 43388\n}\n/**\n * @generated from protobuf enum proto.EarthTotem\n */\nexport enum EarthTotem {\n    /**\n     * @generated from protobuf enum value: NoEarthTotem = 0;\n     */\n    NoEarthTotem = 0,\n    /**\n     * @generated from protobuf enum value: StrengthOfEarthTotem = 1;\n     */\n    StrengthOfEarthTotem = 1,\n    /**\n     * @generated from protobuf enum value: TremorTotem = 2;\n     */\n    TremorTotem = 2,\n    /**\n     * @generated from protobuf enum value: StoneskinTotem = 3;\n     */\n    StoneskinTotem = 3\n}\n/**\n * @generated from protobuf enum proto.AirTotem\n */\nexport enum AirTotem {\n    /**\n     * @generated from protobuf enum value: NoAirTotem = 0;\n     */\n    NoAirTotem = 0,\n    /**\n     * @generated from protobuf enum value: WindfuryTotem = 2;\n     */\n    WindfuryTotem = 2,\n    /**\n     * @generated from protobuf enum value: WrathOfAirTotem = 3;\n     */\n    WrathOfAirTotem = 3\n}\n/**\n * @generated from protobuf enum proto.FireTotem\n */\nexport enum FireTotem {\n    /**\n     * @generated from protobuf enum value: NoFireTotem = 0;\n     */\n    NoFireTotem = 0,\n    /**\n     * @generated from protobuf enum value: MagmaTotem = 1;\n     */\n    MagmaTotem = 1,\n    /**\n     * @generated from protobuf enum value: SearingTotem = 2;\n     */\n    SearingTotem = 2,\n    /**\n     * @generated from protobuf enum value: TotemOfWrath = 3;\n     */\n    TotemOfWrath = 3,\n    /**\n     * @generated from protobuf enum value: FlametongueTotem = 4;\n     */\n    FlametongueTotem = 4\n}\n/**\n * @generated from protobuf enum proto.WaterTotem\n */\nexport enum WaterTotem {\n    /**\n     * @generated from protobuf enum value: NoWaterTotem = 0;\n     */\n    NoWaterTotem = 0,\n    /**\n     * @generated from protobuf enum value: ManaSpringTotem = 1;\n     */\n    ManaSpringTotem = 1,\n    /**\n     * @generated from protobuf enum value: HealingStreamTotem = 2;\n     */\n    HealingStreamTotem = 2\n}\n/**\n * @generated from protobuf enum proto.ShamanShield\n */\nexport enum ShamanShield {\n    /**\n     * @generated from protobuf enum value: NoShield = 0;\n     */\n    NoShield = 0,\n    /**\n     * @generated from protobuf enum value: WaterShield = 1;\n     */\n    WaterShield = 1,\n    /**\n     * @generated from protobuf enum value: LightningShield = 2;\n     */\n    LightningShield = 2\n}\n/**\n * @generated from protobuf enum proto.ShamanImbue\n */\nexport enum ShamanImbue {\n    /**\n     * @generated from protobuf enum value: NoImbue = 0;\n     */\n    NoImbue = 0,\n    /**\n     * @generated from protobuf enum value: WindfuryWeapon = 1;\n     */\n    WindfuryWeapon = 1,\n    /**\n     * @generated from protobuf enum value: FlametongueWeapon = 2;\n     */\n    FlametongueWeapon = 2,\n    /**\n     * @generated from protobuf enum value: FlametongueWeaponDownrank = 3;\n     */\n    FlametongueWeaponDownrank = 3,\n    /**\n     * @generated from protobuf enum value: FrostbrandWeapon = 4;\n     */\n    FrostbrandWeapon = 4\n}\n/**\n * @generated from protobuf enum proto.ShamanSyncType\n */\nexport enum ShamanSyncType {\n    /**\n     * @generated from protobuf enum value: NoSync = 0;\n     */\n    NoSync = 0,\n    /**\n     * @generated from protobuf enum value: SyncMainhandOffhandSwings = 1;\n     */\n    SyncMainhandOffhandSwings = 1,\n    /**\n     * @generated from protobuf enum value: DelayOffhandSwings = 2;\n     */\n    DelayOffhandSwings = 2,\n    /**\n     * @generated from protobuf enum value: Auto = 3;\n     */\n    Auto = 3\n}\n/**\n * @generated from protobuf enum proto.ShamanHealSpell\n */\nexport enum ShamanHealSpell {\n    /**\n     * @generated from protobuf enum value: AutoHeal = 0;\n     */\n    AutoHeal = 0,\n    /**\n     * @generated from protobuf enum value: HealingWave = 1;\n     */\n    HealingWave = 1,\n    /**\n     * @generated from protobuf enum value: LesserHealingWave = 2;\n     */\n    LesserHealingWave = 2,\n    /**\n     * @generated from protobuf enum value: ChainHeal = 3;\n     */\n    ChainHeal = 3\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShamanTalents$Type extends MessageType<ShamanTalents> {\n    constructor() {\n        super(\"proto.ShamanTalents\", [\n            { no: 1, name: \"acuity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"convection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"concussion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"call_of_flame\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"elemental_warding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"reverberation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"elemental_precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"rolling_thunder\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"elemental_focus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"elemental_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"elemental_oath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"lava_flows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"fulmination\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"elemental_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"earths_grasp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"totemic_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"feedback\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"lava_surge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"earthquake\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"elemental_weapons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"focused_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"improved_shields\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"elemental_devastation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"flurry\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"ancestral_swiftness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"totemic_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"stormstrike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"static_shock\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"frozen_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"seasoned_winds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"searing_flames\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"earthen_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"shamanistic_rage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"unleashed_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"maelstrom_weapon\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"improved_lava_lash\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"feral_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"ancestral_resolve\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"tidal_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"spark_of_life\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"resurgence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"totemic_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"focused_insight\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"natures_guardian\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"ancestral_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"natures_swiftness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"natures_blessing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"soothing_rains\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"improved_cleanse_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"cleansing_waters\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"ancestral_awakening\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"mana_tide_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 54, name: \"telluric_currents\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"spirit_link_totem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"tidal_waves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"blessing_of_the_eternals\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"riptide\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShamanTalents>): ShamanTalents {\n        const message = { acuity: 0, convection: 0, concussion: 0, callOfFlame: 0, elementalWarding: 0, reverberation: 0, elementalPrecision: 0, rollingThunder: 0, elementalFocus: false, elementalReach: 0, elementalOath: 0, lavaFlows: 0, fulmination: false, elementalMastery: false, earthsGrasp: 0, totemicWrath: false, feedback: 0, lavaSurge: 0, earthquake: false, elementalWeapons: 0, focusedStrikes: 0, improvedShields: 0, elementalDevastation: 0, flurry: 0, ancestralSwiftness: 0, totemicReach: 0, toughness: 0, stormstrike: false, staticShock: 0, frozenPower: 0, seasonedWinds: 0, searingFlames: 0, earthenPower: 0, shamanisticRage: false, unleashedRage: 0, maelstromWeapon: 0, improvedLavaLash: 0, feralSpirit: false, ancestralResolve: 0, tidalFocus: 0, sparkOfLife: 0, resurgence: 0, totemicFocus: 0, focusedInsight: 0, naturesGuardian: 0, ancestralHealing: 0, naturesSwiftness: false, naturesBlessing: 0, soothingRains: 0, improvedCleanseSpirit: false, cleansingWaters: 0, ancestralAwakening: 0, manaTideTotem: false, telluricCurrents: 0, spiritLinkTotem: false, tidalWaves: 0, blessingOfTheEternals: 0, riptide: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShamanTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShamanTalents): ShamanTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 acuity */ 1:\n                    message.acuity = reader.int32();\n                    break;\n                case /* int32 convection */ 2:\n                    message.convection = reader.int32();\n                    break;\n                case /* int32 concussion */ 3:\n                    message.concussion = reader.int32();\n                    break;\n                case /* int32 call_of_flame */ 4:\n                    message.callOfFlame = reader.int32();\n                    break;\n                case /* int32 elemental_warding */ 5:\n                    message.elementalWarding = reader.int32();\n                    break;\n                case /* int32 reverberation */ 6:\n                    message.reverberation = reader.int32();\n                    break;\n                case /* int32 elemental_precision */ 7:\n                    message.elementalPrecision = reader.int32();\n                    break;\n                case /* int32 rolling_thunder */ 8:\n                    message.rollingThunder = reader.int32();\n                    break;\n                case /* bool elemental_focus */ 9:\n                    message.elementalFocus = reader.bool();\n                    break;\n                case /* int32 elemental_reach */ 10:\n                    message.elementalReach = reader.int32();\n                    break;\n                case /* int32 elemental_oath */ 11:\n                    message.elementalOath = reader.int32();\n                    break;\n                case /* int32 lava_flows */ 12:\n                    message.lavaFlows = reader.int32();\n                    break;\n                case /* bool fulmination */ 13:\n                    message.fulmination = reader.bool();\n                    break;\n                case /* bool elemental_mastery */ 14:\n                    message.elementalMastery = reader.bool();\n                    break;\n                case /* int32 earths_grasp */ 15:\n                    message.earthsGrasp = reader.int32();\n                    break;\n                case /* bool totemic_wrath */ 16:\n                    message.totemicWrath = reader.bool();\n                    break;\n                case /* int32 feedback */ 17:\n                    message.feedback = reader.int32();\n                    break;\n                case /* int32 lava_surge */ 18:\n                    message.lavaSurge = reader.int32();\n                    break;\n                case /* bool earthquake */ 19:\n                    message.earthquake = reader.bool();\n                    break;\n                case /* int32 elemental_weapons */ 20:\n                    message.elementalWeapons = reader.int32();\n                    break;\n                case /* int32 focused_strikes */ 21:\n                    message.focusedStrikes = reader.int32();\n                    break;\n                case /* int32 improved_shields */ 22:\n                    message.improvedShields = reader.int32();\n                    break;\n                case /* int32 elemental_devastation */ 23:\n                    message.elementalDevastation = reader.int32();\n                    break;\n                case /* int32 flurry */ 24:\n                    message.flurry = reader.int32();\n                    break;\n                case /* int32 ancestral_swiftness */ 25:\n                    message.ancestralSwiftness = reader.int32();\n                    break;\n                case /* int32 totemic_reach */ 26:\n                    message.totemicReach = reader.int32();\n                    break;\n                case /* int32 toughness */ 27:\n                    message.toughness = reader.int32();\n                    break;\n                case /* bool stormstrike */ 28:\n                    message.stormstrike = reader.bool();\n                    break;\n                case /* int32 static_shock */ 29:\n                    message.staticShock = reader.int32();\n                    break;\n                case /* int32 frozen_power */ 30:\n                    message.frozenPower = reader.int32();\n                    break;\n                case /* int32 seasoned_winds */ 31:\n                    message.seasonedWinds = reader.int32();\n                    break;\n                case /* int32 searing_flames */ 32:\n                    message.searingFlames = reader.int32();\n                    break;\n                case /* int32 earthen_power */ 33:\n                    message.earthenPower = reader.int32();\n                    break;\n                case /* bool shamanistic_rage */ 34:\n                    message.shamanisticRage = reader.bool();\n                    break;\n                case /* int32 unleashed_rage */ 35:\n                    message.unleashedRage = reader.int32();\n                    break;\n                case /* int32 maelstrom_weapon */ 36:\n                    message.maelstromWeapon = reader.int32();\n                    break;\n                case /* int32 improved_lava_lash */ 37:\n                    message.improvedLavaLash = reader.int32();\n                    break;\n                case /* bool feral_spirit */ 38:\n                    message.feralSpirit = reader.bool();\n                    break;\n                case /* int32 ancestral_resolve */ 39:\n                    message.ancestralResolve = reader.int32();\n                    break;\n                case /* int32 tidal_focus */ 40:\n                    message.tidalFocus = reader.int32();\n                    break;\n                case /* int32 spark_of_life */ 41:\n                    message.sparkOfLife = reader.int32();\n                    break;\n                case /* int32 resurgence */ 42:\n                    message.resurgence = reader.int32();\n                    break;\n                case /* int32 totemic_focus */ 43:\n                    message.totemicFocus = reader.int32();\n                    break;\n                case /* int32 focused_insight */ 44:\n                    message.focusedInsight = reader.int32();\n                    break;\n                case /* int32 natures_guardian */ 45:\n                    message.naturesGuardian = reader.int32();\n                    break;\n                case /* int32 ancestral_healing */ 46:\n                    message.ancestralHealing = reader.int32();\n                    break;\n                case /* bool natures_swiftness */ 47:\n                    message.naturesSwiftness = reader.bool();\n                    break;\n                case /* int32 natures_blessing */ 48:\n                    message.naturesBlessing = reader.int32();\n                    break;\n                case /* int32 soothing_rains */ 49:\n                    message.soothingRains = reader.int32();\n                    break;\n                case /* bool improved_cleanse_spirit */ 50:\n                    message.improvedCleanseSpirit = reader.bool();\n                    break;\n                case /* int32 cleansing_waters */ 51:\n                    message.cleansingWaters = reader.int32();\n                    break;\n                case /* int32 ancestral_awakening */ 52:\n                    message.ancestralAwakening = reader.int32();\n                    break;\n                case /* bool mana_tide_totem */ 53:\n                    message.manaTideTotem = reader.bool();\n                    break;\n                case /* int32 telluric_currents */ 54:\n                    message.telluricCurrents = reader.int32();\n                    break;\n                case /* bool spirit_link_totem */ 55:\n                    message.spiritLinkTotem = reader.bool();\n                    break;\n                case /* int32 tidal_waves */ 56:\n                    message.tidalWaves = reader.int32();\n                    break;\n                case /* int32 blessing_of_the_eternals */ 57:\n                    message.blessingOfTheEternals = reader.int32();\n                    break;\n                case /* bool riptide */ 58:\n                    message.riptide = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShamanTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 acuity = 1; */\n        if (message.acuity !== 0)\n            writer.tag(1, WireType.Varint).int32(message.acuity);\n        /* int32 convection = 2; */\n        if (message.convection !== 0)\n            writer.tag(2, WireType.Varint).int32(message.convection);\n        /* int32 concussion = 3; */\n        if (message.concussion !== 0)\n            writer.tag(3, WireType.Varint).int32(message.concussion);\n        /* int32 call_of_flame = 4; */\n        if (message.callOfFlame !== 0)\n            writer.tag(4, WireType.Varint).int32(message.callOfFlame);\n        /* int32 elemental_warding = 5; */\n        if (message.elementalWarding !== 0)\n            writer.tag(5, WireType.Varint).int32(message.elementalWarding);\n        /* int32 reverberation = 6; */\n        if (message.reverberation !== 0)\n            writer.tag(6, WireType.Varint).int32(message.reverberation);\n        /* int32 elemental_precision = 7; */\n        if (message.elementalPrecision !== 0)\n            writer.tag(7, WireType.Varint).int32(message.elementalPrecision);\n        /* int32 rolling_thunder = 8; */\n        if (message.rollingThunder !== 0)\n            writer.tag(8, WireType.Varint).int32(message.rollingThunder);\n        /* bool elemental_focus = 9; */\n        if (message.elementalFocus !== false)\n            writer.tag(9, WireType.Varint).bool(message.elementalFocus);\n        /* int32 elemental_reach = 10; */\n        if (message.elementalReach !== 0)\n            writer.tag(10, WireType.Varint).int32(message.elementalReach);\n        /* int32 elemental_oath = 11; */\n        if (message.elementalOath !== 0)\n            writer.tag(11, WireType.Varint).int32(message.elementalOath);\n        /* int32 lava_flows = 12; */\n        if (message.lavaFlows !== 0)\n            writer.tag(12, WireType.Varint).int32(message.lavaFlows);\n        /* bool fulmination = 13; */\n        if (message.fulmination !== false)\n            writer.tag(13, WireType.Varint).bool(message.fulmination);\n        /* bool elemental_mastery = 14; */\n        if (message.elementalMastery !== false)\n            writer.tag(14, WireType.Varint).bool(message.elementalMastery);\n        /* int32 earths_grasp = 15; */\n        if (message.earthsGrasp !== 0)\n            writer.tag(15, WireType.Varint).int32(message.earthsGrasp);\n        /* bool totemic_wrath = 16; */\n        if (message.totemicWrath !== false)\n            writer.tag(16, WireType.Varint).bool(message.totemicWrath);\n        /* int32 feedback = 17; */\n        if (message.feedback !== 0)\n            writer.tag(17, WireType.Varint).int32(message.feedback);\n        /* int32 lava_surge = 18; */\n        if (message.lavaSurge !== 0)\n            writer.tag(18, WireType.Varint).int32(message.lavaSurge);\n        /* bool earthquake = 19; */\n        if (message.earthquake !== false)\n            writer.tag(19, WireType.Varint).bool(message.earthquake);\n        /* int32 elemental_weapons = 20; */\n        if (message.elementalWeapons !== 0)\n            writer.tag(20, WireType.Varint).int32(message.elementalWeapons);\n        /* int32 focused_strikes = 21; */\n        if (message.focusedStrikes !== 0)\n            writer.tag(21, WireType.Varint).int32(message.focusedStrikes);\n        /* int32 improved_shields = 22; */\n        if (message.improvedShields !== 0)\n            writer.tag(22, WireType.Varint).int32(message.improvedShields);\n        /* int32 elemental_devastation = 23; */\n        if (message.elementalDevastation !== 0)\n            writer.tag(23, WireType.Varint).int32(message.elementalDevastation);\n        /* int32 flurry = 24; */\n        if (message.flurry !== 0)\n            writer.tag(24, WireType.Varint).int32(message.flurry);\n        /* int32 ancestral_swiftness = 25; */\n        if (message.ancestralSwiftness !== 0)\n            writer.tag(25, WireType.Varint).int32(message.ancestralSwiftness);\n        /* int32 totemic_reach = 26; */\n        if (message.totemicReach !== 0)\n            writer.tag(26, WireType.Varint).int32(message.totemicReach);\n        /* int32 toughness = 27; */\n        if (message.toughness !== 0)\n            writer.tag(27, WireType.Varint).int32(message.toughness);\n        /* bool stormstrike = 28; */\n        if (message.stormstrike !== false)\n            writer.tag(28, WireType.Varint).bool(message.stormstrike);\n        /* int32 static_shock = 29; */\n        if (message.staticShock !== 0)\n            writer.tag(29, WireType.Varint).int32(message.staticShock);\n        /* int32 frozen_power = 30; */\n        if (message.frozenPower !== 0)\n            writer.tag(30, WireType.Varint).int32(message.frozenPower);\n        /* int32 seasoned_winds = 31; */\n        if (message.seasonedWinds !== 0)\n            writer.tag(31, WireType.Varint).int32(message.seasonedWinds);\n        /* int32 searing_flames = 32; */\n        if (message.searingFlames !== 0)\n            writer.tag(32, WireType.Varint).int32(message.searingFlames);\n        /* int32 earthen_power = 33; */\n        if (message.earthenPower !== 0)\n            writer.tag(33, WireType.Varint).int32(message.earthenPower);\n        /* bool shamanistic_rage = 34; */\n        if (message.shamanisticRage !== false)\n            writer.tag(34, WireType.Varint).bool(message.shamanisticRage);\n        /* int32 unleashed_rage = 35; */\n        if (message.unleashedRage !== 0)\n            writer.tag(35, WireType.Varint).int32(message.unleashedRage);\n        /* int32 maelstrom_weapon = 36; */\n        if (message.maelstromWeapon !== 0)\n            writer.tag(36, WireType.Varint).int32(message.maelstromWeapon);\n        /* int32 improved_lava_lash = 37; */\n        if (message.improvedLavaLash !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedLavaLash);\n        /* bool feral_spirit = 38; */\n        if (message.feralSpirit !== false)\n            writer.tag(38, WireType.Varint).bool(message.feralSpirit);\n        /* int32 ancestral_resolve = 39; */\n        if (message.ancestralResolve !== 0)\n            writer.tag(39, WireType.Varint).int32(message.ancestralResolve);\n        /* int32 tidal_focus = 40; */\n        if (message.tidalFocus !== 0)\n            writer.tag(40, WireType.Varint).int32(message.tidalFocus);\n        /* int32 spark_of_life = 41; */\n        if (message.sparkOfLife !== 0)\n            writer.tag(41, WireType.Varint).int32(message.sparkOfLife);\n        /* int32 resurgence = 42; */\n        if (message.resurgence !== 0)\n            writer.tag(42, WireType.Varint).int32(message.resurgence);\n        /* int32 totemic_focus = 43; */\n        if (message.totemicFocus !== 0)\n            writer.tag(43, WireType.Varint).int32(message.totemicFocus);\n        /* int32 focused_insight = 44; */\n        if (message.focusedInsight !== 0)\n            writer.tag(44, WireType.Varint).int32(message.focusedInsight);\n        /* int32 natures_guardian = 45; */\n        if (message.naturesGuardian !== 0)\n            writer.tag(45, WireType.Varint).int32(message.naturesGuardian);\n        /* int32 ancestral_healing = 46; */\n        if (message.ancestralHealing !== 0)\n            writer.tag(46, WireType.Varint).int32(message.ancestralHealing);\n        /* bool natures_swiftness = 47; */\n        if (message.naturesSwiftness !== false)\n            writer.tag(47, WireType.Varint).bool(message.naturesSwiftness);\n        /* int32 natures_blessing = 48; */\n        if (message.naturesBlessing !== 0)\n            writer.tag(48, WireType.Varint).int32(message.naturesBlessing);\n        /* int32 soothing_rains = 49; */\n        if (message.soothingRains !== 0)\n            writer.tag(49, WireType.Varint).int32(message.soothingRains);\n        /* bool improved_cleanse_spirit = 50; */\n        if (message.improvedCleanseSpirit !== false)\n            writer.tag(50, WireType.Varint).bool(message.improvedCleanseSpirit);\n        /* int32 cleansing_waters = 51; */\n        if (message.cleansingWaters !== 0)\n            writer.tag(51, WireType.Varint).int32(message.cleansingWaters);\n        /* int32 ancestral_awakening = 52; */\n        if (message.ancestralAwakening !== 0)\n            writer.tag(52, WireType.Varint).int32(message.ancestralAwakening);\n        /* bool mana_tide_totem = 53; */\n        if (message.manaTideTotem !== false)\n            writer.tag(53, WireType.Varint).bool(message.manaTideTotem);\n        /* int32 telluric_currents = 54; */\n        if (message.telluricCurrents !== 0)\n            writer.tag(54, WireType.Varint).int32(message.telluricCurrents);\n        /* bool spirit_link_totem = 55; */\n        if (message.spiritLinkTotem !== false)\n            writer.tag(55, WireType.Varint).bool(message.spiritLinkTotem);\n        /* int32 tidal_waves = 56; */\n        if (message.tidalWaves !== 0)\n            writer.tag(56, WireType.Varint).int32(message.tidalWaves);\n        /* int32 blessing_of_the_eternals = 57; */\n        if (message.blessingOfTheEternals !== 0)\n            writer.tag(57, WireType.Varint).int32(message.blessingOfTheEternals);\n        /* bool riptide = 58; */\n        if (message.riptide !== false)\n            writer.tag(58, WireType.Varint).bool(message.riptide);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShamanTalents\n */\nexport const ShamanTalents = new ShamanTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShamanTotems$Type extends MessageType<ShamanTotems> {\n    constructor() {\n        super(\"proto.ShamanTotems\", [\n            { no: 1, name: \"earth\", kind: \"enum\", T: () => [\"proto.EarthTotem\", EarthTotem] },\n            { no: 2, name: \"air\", kind: \"enum\", T: () => [\"proto.AirTotem\", AirTotem] },\n            { no: 3, name: \"fire\", kind: \"enum\", T: () => [\"proto.FireTotem\", FireTotem] },\n            { no: 4, name: \"water\", kind: \"enum\", T: () => [\"proto.WaterTotem\", WaterTotem] },\n            { no: 6, name: \"use_fire_elemental\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"bonus_spellpower\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"enh_tier_ten_bonus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ShamanTotems>): ShamanTotems {\n        const message = { earth: 0, air: 0, fire: 0, water: 0, useFireElemental: false, bonusSpellpower: 0, enhTierTenBonus: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShamanTotems>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShamanTotems): ShamanTotems {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EarthTotem earth */ 1:\n                    message.earth = reader.int32();\n                    break;\n                case /* proto.AirTotem air */ 2:\n                    message.air = reader.int32();\n                    break;\n                case /* proto.FireTotem fire */ 3:\n                    message.fire = reader.int32();\n                    break;\n                case /* proto.WaterTotem water */ 4:\n                    message.water = reader.int32();\n                    break;\n                case /* bool use_fire_elemental */ 6:\n                    message.useFireElemental = reader.bool();\n                    break;\n                case /* int32 bonus_spellpower */ 10:\n                    message.bonusSpellpower = reader.int32();\n                    break;\n                case /* bool enh_tier_ten_bonus */ 11:\n                    message.enhTierTenBonus = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShamanTotems, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EarthTotem earth = 1; */\n        if (message.earth !== 0)\n            writer.tag(1, WireType.Varint).int32(message.earth);\n        /* proto.AirTotem air = 2; */\n        if (message.air !== 0)\n            writer.tag(2, WireType.Varint).int32(message.air);\n        /* proto.FireTotem fire = 3; */\n        if (message.fire !== 0)\n            writer.tag(3, WireType.Varint).int32(message.fire);\n        /* proto.WaterTotem water = 4; */\n        if (message.water !== 0)\n            writer.tag(4, WireType.Varint).int32(message.water);\n        /* bool use_fire_elemental = 6; */\n        if (message.useFireElemental !== false)\n            writer.tag(6, WireType.Varint).bool(message.useFireElemental);\n        /* int32 bonus_spellpower = 10; */\n        if (message.bonusSpellpower !== 0)\n            writer.tag(10, WireType.Varint).int32(message.bonusSpellpower);\n        /* bool enh_tier_ten_bonus = 11; */\n        if (message.enhTierTenBonus !== false)\n            writer.tag(11, WireType.Varint).bool(message.enhTierTenBonus);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShamanTotems\n */\nexport const ShamanTotems = new ShamanTotems$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShamanOptions$Type extends MessageType<ShamanOptions> {\n    constructor() {\n        super(\"proto.ShamanOptions\", [\n            { no: 1, name: \"shield\", kind: \"enum\", T: () => [\"proto.ShamanShield\", ShamanShield] },\n            { no: 2, name: \"totems\", kind: \"message\", T: () => ShamanTotems },\n            { no: 3, name: \"imbue_mh\", kind: \"enum\", T: () => [\"proto.ShamanImbue\", ShamanImbue] }\n        ]);\n    }\n    create(value?: PartialMessage<ShamanOptions>): ShamanOptions {\n        const message = { shield: 0, imbueMh: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShamanOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShamanOptions): ShamanOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanShield shield */ 1:\n                    message.shield = reader.int32();\n                    break;\n                case /* proto.ShamanTotems totems */ 2:\n                    message.totems = ShamanTotems.internalBinaryRead(reader, reader.uint32(), options, message.totems);\n                    break;\n                case /* proto.ShamanImbue imbue_mh */ 3:\n                    message.imbueMh = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShamanOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanShield shield = 1; */\n        if (message.shield !== 0)\n            writer.tag(1, WireType.Varint).int32(message.shield);\n        /* proto.ShamanTotems totems = 2; */\n        if (message.totems)\n            ShamanTotems.internalBinaryWrite(message.totems, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShamanImbue imbue_mh = 3; */\n        if (message.imbueMh !== 0)\n            writer.tag(3, WireType.Varint).int32(message.imbueMh);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShamanOptions\n */\nexport const ShamanOptions = new ShamanOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman$Type extends MessageType<ElementalShaman> {\n    constructor() {\n        super(\"proto.ElementalShaman\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => ElementalShaman_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ElementalShaman>): ElementalShaman {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman): ElementalShaman {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ElementalShaman.Options options */ 3:\n                    message.options = ElementalShaman_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ElementalShaman, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ElementalShaman.Options options = 3; */\n        if (message.options)\n            ElementalShaman_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman\n */\nexport const ElementalShaman = new ElementalShaman$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman_Rotation$Type extends MessageType<ElementalShaman_Rotation> {\n    constructor() {\n        super(\"proto.ElementalShaman.Rotation\", []);\n    }\n    create(value?: PartialMessage<ElementalShaman_Rotation>): ElementalShaman_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman_Rotation): ElementalShaman_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: ElementalShaman_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman.Rotation\n */\nexport const ElementalShaman_Rotation = new ElementalShaman_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ElementalShaman_Options$Type extends MessageType<ElementalShaman_Options> {\n    constructor() {\n        super(\"proto.ElementalShaman.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => ShamanOptions },\n            { no: 2, name: \"thunderstormRange\", kind: \"enum\", T: () => [\"proto.ElementalShaman.Options.ThunderstormRange\", ElementalShaman_Options_ThunderstormRange] }\n        ]);\n    }\n    create(value?: PartialMessage<ElementalShaman_Options>): ElementalShaman_Options {\n        const message = { thunderstormRange: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ElementalShaman_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ElementalShaman_Options): ElementalShaman_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanOptions class_options */ 1:\n                    message.classOptions = ShamanOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* proto.ElementalShaman.Options.ThunderstormRange thunderstormRange */ 2:\n                    message.thunderstormRange = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ElementalShaman_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanOptions class_options = 1; */\n        if (message.classOptions)\n            ShamanOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ElementalShaman.Options.ThunderstormRange thunderstormRange = 2; */\n        if (message.thunderstormRange !== 0)\n            writer.tag(2, WireType.Varint).int32(message.thunderstormRange);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ElementalShaman.Options\n */\nexport const ElementalShaman_Options = new ElementalShaman_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman$Type extends MessageType<EnhancementShaman> {\n    constructor() {\n        super(\"proto.EnhancementShaman\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => EnhancementShaman_Options }\n        ]);\n    }\n    create(value?: PartialMessage<EnhancementShaman>): EnhancementShaman {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman): EnhancementShaman {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EnhancementShaman.Options options */ 3:\n                    message.options = EnhancementShaman_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnhancementShaman, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EnhancementShaman.Options options = 3; */\n        if (message.options)\n            EnhancementShaman_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman\n */\nexport const EnhancementShaman = new EnhancementShaman$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman_Rotation$Type extends MessageType<EnhancementShaman_Rotation> {\n    constructor() {\n        super(\"proto.EnhancementShaman.Rotation\", []);\n    }\n    create(value?: PartialMessage<EnhancementShaman_Rotation>): EnhancementShaman_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman_Rotation): EnhancementShaman_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: EnhancementShaman_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman.Rotation\n */\nexport const EnhancementShaman_Rotation = new EnhancementShaman_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EnhancementShaman_Options$Type extends MessageType<EnhancementShaman_Options> {\n    constructor() {\n        super(\"proto.EnhancementShaman.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => ShamanOptions },\n            { no: 2, name: \"sync_type\", kind: \"enum\", T: () => [\"proto.ShamanSyncType\", ShamanSyncType] },\n            { no: 3, name: \"imbue_oh\", kind: \"enum\", T: () => [\"proto.ShamanImbue\", ShamanImbue] }\n        ]);\n    }\n    create(value?: PartialMessage<EnhancementShaman_Options>): EnhancementShaman_Options {\n        const message = { syncType: 0, imbueOh: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EnhancementShaman_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnhancementShaman_Options): EnhancementShaman_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanOptions class_options */ 1:\n                    message.classOptions = ShamanOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* proto.ShamanSyncType sync_type */ 2:\n                    message.syncType = reader.int32();\n                    break;\n                case /* proto.ShamanImbue imbue_oh */ 3:\n                    message.imbueOh = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EnhancementShaman_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanOptions class_options = 1; */\n        if (message.classOptions)\n            ShamanOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShamanSyncType sync_type = 2; */\n        if (message.syncType !== 0)\n            writer.tag(2, WireType.Varint).int32(message.syncType);\n        /* proto.ShamanImbue imbue_oh = 3; */\n        if (message.imbueOh !== 0)\n            writer.tag(3, WireType.Varint).int32(message.imbueOh);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EnhancementShaman.Options\n */\nexport const EnhancementShaman_Options = new EnhancementShaman_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationShaman$Type extends MessageType<RestorationShaman> {\n    constructor() {\n        super(\"proto.RestorationShaman\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => RestorationShaman_Options }\n        ]);\n    }\n    create(value?: PartialMessage<RestorationShaman>): RestorationShaman {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationShaman>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationShaman): RestorationShaman {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RestorationShaman.Options options */ 3:\n                    message.options = RestorationShaman_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RestorationShaman, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RestorationShaman.Options options = 3; */\n        if (message.options)\n            RestorationShaman_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationShaman\n */\nexport const RestorationShaman = new RestorationShaman$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationShaman_Rotation$Type extends MessageType<RestorationShaman_Rotation> {\n    constructor() {\n        super(\"proto.RestorationShaman.Rotation\", []);\n    }\n    create(value?: PartialMessage<RestorationShaman_Rotation>): RestorationShaman_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationShaman_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationShaman_Rotation): RestorationShaman_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: RestorationShaman_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationShaman.Rotation\n */\nexport const RestorationShaman_Rotation = new RestorationShaman_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationShaman_Options$Type extends MessageType<RestorationShaman_Options> {\n    constructor() {\n        super(\"proto.RestorationShaman.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => ShamanOptions },\n            { no: 2, name: \"earth_shield_p_p_m\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RestorationShaman_Options>): RestorationShaman_Options {\n        const message = { earthShieldPPM: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationShaman_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationShaman_Options): RestorationShaman_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanOptions class_options */ 1:\n                    message.classOptions = ShamanOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* int32 earth_shield_p_p_m */ 2:\n                    message.earthShieldPPM = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RestorationShaman_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanOptions class_options = 1; */\n        if (message.classOptions)\n            ShamanOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 earth_shield_p_p_m = 2; */\n        if (message.earthShieldPPM !== 0)\n            writer.tag(2, WireType.Varint).int32(message.earthShieldPPM);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationShaman.Options\n */\nexport const RestorationShaman_Options = new RestorationShaman_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"druid.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { UnitReference } from \"./common\";\n/**\n * @generated from protobuf message proto.DruidTalents\n */\nexport interface DruidTalents {\n    /**\n     * Balance\n     *\n     * @generated from protobuf field: int32 natures_grace = 1;\n     */\n    naturesGrace: number;\n    /**\n     * @generated from protobuf field: int32 starlight_wrath = 2;\n     */\n    starlightWrath: number;\n    /**\n     * @generated from protobuf field: int32 natures_majesty = 3;\n     */\n    naturesMajesty: number;\n    /**\n     * @generated from protobuf field: int32 genesis = 4;\n     */\n    genesis: number;\n    /**\n     * @generated from protobuf field: int32 moonglow = 5;\n     */\n    moonglow: number;\n    /**\n     * @generated from protobuf field: int32 balance_of_power = 6;\n     */\n    balanceOfPower: number;\n    /**\n     * @generated from protobuf field: int32 euphoria = 7;\n     */\n    euphoria: number;\n    /**\n     * @generated from protobuf field: bool moonkin_form = 8;\n     */\n    moonkinForm: boolean;\n    /**\n     * @generated from protobuf field: bool typhoon = 9;\n     */\n    typhoon: boolean;\n    /**\n     * @generated from protobuf field: int32 shooting_stars = 10;\n     */\n    shootingStars: number;\n    /**\n     * @generated from protobuf field: int32 owlkin_frenzy = 11;\n     */\n    owlkinFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 gale_winds = 12;\n     */\n    galeWinds: number;\n    /**\n     * @generated from protobuf field: bool solar_beam = 13;\n     */\n    solarBeam: boolean;\n    /**\n     * @generated from protobuf field: int32 dreamstate = 14;\n     */\n    dreamstate: number;\n    /**\n     * @generated from protobuf field: bool force_of_nature = 15;\n     */\n    forceOfNature: boolean;\n    /**\n     * @generated from protobuf field: bool sunfire = 16;\n     */\n    sunfire: boolean;\n    /**\n     * @generated from protobuf field: bool earth_and_moon = 17;\n     */\n    earthAndMoon: boolean;\n    /**\n     * @generated from protobuf field: int32 fungal_growth = 18;\n     */\n    fungalGrowth: number;\n    /**\n     * @generated from protobuf field: int32 lunar_shower = 19;\n     */\n    lunarShower: number;\n    /**\n     * @generated from protobuf field: bool starfall = 20;\n     */\n    starfall: boolean;\n    /**\n     * Feral Combat\n     *\n     * @generated from protobuf field: int32 feral_swiftness = 21;\n     */\n    feralSwiftness: number;\n    /**\n     * @generated from protobuf field: int32 furor = 22;\n     */\n    furor: number;\n    /**\n     * @generated from protobuf field: int32 predatory_strikes = 23;\n     */\n    predatoryStrikes: number;\n    /**\n     * @generated from protobuf field: int32 infected_wounds = 24;\n     */\n    infectedWounds: number;\n    /**\n     * @generated from protobuf field: int32 fury_swipes = 25;\n     */\n    furySwipes: number;\n    /**\n     * @generated from protobuf field: int32 primal_fury = 26;\n     */\n    primalFury: number;\n    /**\n     * @generated from protobuf field: int32 feral_aggression = 27;\n     */\n    feralAggression: number;\n    /**\n     * @generated from protobuf field: int32 king_of_the_jungle = 28;\n     */\n    kingOfTheJungle: number;\n    /**\n     * @generated from protobuf field: bool feral_charge = 29;\n     */\n    feralCharge: boolean;\n    /**\n     * @generated from protobuf field: int32 stampede = 30;\n     */\n    stampede: number;\n    /**\n     * @generated from protobuf field: int32 thick_hide = 31;\n     */\n    thickHide: number;\n    /**\n     * @generated from protobuf field: bool leader_of_the_pack = 32;\n     */\n    leaderOfThePack: boolean;\n    /**\n     * @generated from protobuf field: int32 brutal_impact = 33;\n     */\n    brutalImpact: number;\n    /**\n     * @generated from protobuf field: int32 nurturing_instinct = 34;\n     */\n    nurturingInstinct: number;\n    /**\n     * @generated from protobuf field: int32 primal_madness = 35;\n     */\n    primalMadness: number;\n    /**\n     * @generated from protobuf field: bool survival_instincts = 36;\n     */\n    survivalInstincts: boolean;\n    /**\n     * @generated from protobuf field: int32 endless_carnage = 37;\n     */\n    endlessCarnage: number;\n    /**\n     * @generated from protobuf field: int32 natural_reaction = 38;\n     */\n    naturalReaction: number;\n    /**\n     * @generated from protobuf field: int32 blood_in_the_water = 39;\n     */\n    bloodInTheWater: number;\n    /**\n     * @generated from protobuf field: int32 rend_and_tear = 40;\n     */\n    rendAndTear: number;\n    /**\n     * @generated from protobuf field: bool pulverize = 41;\n     */\n    pulverize: boolean;\n    /**\n     * @generated from protobuf field: bool berserk = 42;\n     */\n    berserk: boolean;\n    /**\n     * Restoration\n     *\n     * @generated from protobuf field: int32 blessing_of_the_grove = 43;\n     */\n    blessingOfTheGrove: number;\n    /**\n     * @generated from protobuf field: int32 natural_shapeshifter = 44;\n     */\n    naturalShapeshifter: number;\n    /**\n     * @generated from protobuf field: int32 naturalist = 45;\n     */\n    naturalist: number;\n    /**\n     * @generated from protobuf field: int32 heart_of_the_wild = 46;\n     */\n    heartOfTheWild: number;\n    /**\n     * @generated from protobuf field: int32 perseverance = 47;\n     */\n    perseverance: number;\n    /**\n     * @generated from protobuf field: bool master_shapeshifter = 48;\n     */\n    masterShapeshifter: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_rejuvenation = 49;\n     */\n    improvedRejuvenation: number;\n    /**\n     * @generated from protobuf field: int32 living_seed = 50;\n     */\n    livingSeed: number;\n    /**\n     * @generated from protobuf field: int32 revitalize = 51;\n     */\n    revitalize: number;\n    /**\n     * @generated from protobuf field: bool natures_swiftness = 52;\n     */\n    naturesSwiftness: boolean;\n    /**\n     * @generated from protobuf field: int32 fury_of_stormrage = 53;\n     */\n    furyOfStormrage: number;\n    /**\n     * @generated from protobuf field: int32 natures_bounty = 54;\n     */\n    naturesBounty: number;\n    /**\n     * @generated from protobuf field: int32 empowered_touch = 55;\n     */\n    empoweredTouch: number;\n    /**\n     * @generated from protobuf field: int32 malfurions_gift = 56;\n     */\n    malfurionsGift: number;\n    /**\n     * @generated from protobuf field: int32 efflorescence = 57;\n     */\n    efflorescence: number;\n    /**\n     * @generated from protobuf field: bool wild_growth = 58;\n     */\n    wildGrowth: boolean;\n    /**\n     * @generated from protobuf field: bool natures_cure = 59;\n     */\n    naturesCure: boolean;\n    /**\n     * @generated from protobuf field: int32 natures_ward = 60;\n     */\n    naturesWard: number;\n    /**\n     * @generated from protobuf field: int32 gift_of_the_earthmother = 61;\n     */\n    giftOfTheEarthmother: number;\n    /**\n     * @generated from protobuf field: bool swift_rejuvenation = 62;\n     */\n    swiftRejuvenation: boolean;\n    /**\n     * @generated from protobuf field: bool tree_of_life = 63;\n     */\n    treeOfLife: boolean;\n}\n/**\n * @generated from protobuf message proto.DruidOptions\n */\nexport interface DruidOptions {\n    /**\n     * @generated from protobuf field: proto.UnitReference innervate_target = 1;\n     */\n    innervateTarget?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.BalanceDruid\n */\nexport interface BalanceDruid {\n    /**\n     * @generated from protobuf field: proto.BalanceDruid.Options options = 3;\n     */\n    options?: BalanceDruid_Options;\n}\n/**\n * @generated from protobuf message proto.BalanceDruid.Rotation\n */\nexport interface BalanceDruid_Rotation {\n}\n/**\n * @generated from protobuf message proto.BalanceDruid.Options\n */\nexport interface BalanceDruid_Options {\n    /**\n     * @generated from protobuf field: proto.DruidOptions class_options = 1;\n     */\n    classOptions?: DruidOptions;\n    /**\n     * @generated from protobuf field: float okf_uptime = 2;\n     */\n    okfUptime: number;\n}\n/**\n * @generated from protobuf message proto.FeralDruid\n */\nexport interface FeralDruid {\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation rotation = 1;\n     */\n    rotation?: FeralDruid_Rotation;\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Options options = 3;\n     */\n    options?: FeralDruid_Options;\n}\n/**\n * @generated from protobuf message proto.FeralDruid.Rotation\n */\nexport interface FeralDruid_Rotation {\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation.BearweaveType bear_weave_type = 1;\n     */\n    bearWeaveType: FeralDruid_Rotation_BearweaveType;\n    /**\n     * @generated from protobuf field: bool maintain_faerie_fire = 2;\n     */\n    maintainFaerieFire: boolean;\n    /**\n     * @generated from protobuf field: int32 min_combos_for_rip = 3;\n     */\n    minCombosForRip: number;\n    /**\n     * @generated from protobuf field: bool use_rake = 4;\n     */\n    useRake: boolean;\n    /**\n     * @generated from protobuf field: bool use_bite = 5;\n     */\n    useBite: boolean;\n    /**\n     * @generated from protobuf field: bool mangle_spam = 6;\n     */\n    mangleSpam: boolean;\n    /**\n     * @generated from protobuf field: float bite_time = 7;\n     */\n    biteTime: number;\n    /**\n     * @generated from protobuf field: int32 min_combos_for_bite = 8;\n     */\n    minCombosForBite: number;\n    /**\n     * @generated from protobuf field: int32 berserk_bite_thresh = 9;\n     */\n    berserkBiteThresh: number;\n    /**\n     * @generated from protobuf field: int32 berserk_ff_thresh = 18;\n     */\n    berserkFfThresh: number;\n    /**\n     * @generated from protobuf field: int32 rip_leeway = 19;\n     */\n    ripLeeway: number;\n    /**\n     * @generated from protobuf field: bool powerbear = 10;\n     */\n    powerbear: boolean;\n    /**\n     * @generated from protobuf field: float min_roar_offset = 11;\n     */\n    minRoarOffset: number;\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation.BiteModeType bite_mode_type = 12;\n     */\n    biteModeType: FeralDruid_Rotation_BiteModeType;\n    /**\n     * @generated from protobuf field: float hot_uptime = 13;\n     */\n    hotUptime: number;\n    /**\n     * @generated from protobuf field: bool snek_weave = 14;\n     */\n    snekWeave: boolean;\n    /**\n     * @generated from protobuf field: bool flower_weave = 15;\n     */\n    flowerWeave: boolean;\n    /**\n     * @generated from protobuf field: int32 raid_targets = 16;\n     */\n    raidTargets: number;\n    /**\n     * @generated from protobuf field: bool manual_params = 17;\n     */\n    manualParams: boolean;\n    /**\n     * @generated from protobuf field: float max_ff_delay = 20;\n     */\n    maxFfDelay: number;\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation.AplType rotation_type = 21;\n     */\n    rotationType: FeralDruid_Rotation_AplType;\n    /**\n     * @generated from protobuf field: bool pre_pop_berserk = 22;\n     */\n    prePopBerserk: boolean;\n    /**\n     * @generated from protobuf field: bool pre_pop_ooc = 23;\n     */\n    prePopOoc: boolean;\n}\n/**\n * @generated from protobuf enum proto.FeralDruid.Rotation.AplType\n */\nexport enum FeralDruid_Rotation_AplType {\n    /**\n     * @generated from protobuf enum value: SingleTarget = 0;\n     */\n    SingleTarget = 0,\n    /**\n     * @generated from protobuf enum value: Aoe = 1;\n     */\n    Aoe = 1\n}\n/**\n * @generated from protobuf enum proto.FeralDruid.Rotation.BearweaveType\n */\nexport enum FeralDruid_Rotation_BearweaveType {\n    /**\n     * @generated from protobuf enum value: None = 0;\n     */\n    None = 0,\n    /**\n     * @generated from protobuf enum value: Mangle = 1;\n     */\n    Mangle = 1,\n    /**\n     * @generated from protobuf enum value: Lacerate = 2;\n     */\n    Lacerate = 2\n}\n/**\n * @generated from protobuf enum proto.FeralDruid.Rotation.BiteModeType\n */\nexport enum FeralDruid_Rotation_BiteModeType {\n    /**\n     * @generated from protobuf enum value: Emperical = 0;\n     */\n    Emperical = 0,\n    /**\n     * @generated from protobuf enum value: Analytical = 1;\n     */\n    Analytical = 1\n}\n/**\n * @generated from protobuf message proto.FeralDruid.Options\n */\nexport interface FeralDruid_Options {\n    /**\n     * @generated from protobuf field: proto.DruidOptions class_options = 1;\n     */\n    classOptions?: DruidOptions;\n    /**\n     * @generated from protobuf field: int32 latency_ms = 2;\n     */\n    latencyMs: number;\n    /**\n     * @generated from protobuf field: bool assume_bleed_active = 4;\n     */\n    assumeBleedActive: boolean;\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid\n */\nexport interface FeralTankDruid {\n    /**\n     * @generated from protobuf field: proto.FeralTankDruid.Options options = 3;\n     */\n    options?: FeralTankDruid_Options;\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid.Rotation\n */\nexport interface FeralTankDruid_Rotation {\n    /**\n     * Minimum rage to queue HS or Cleave.\n     *\n     * @generated from protobuf field: int32 maul_rage_threshold = 1;\n     */\n    maulRageThreshold: number;\n    /**\n     * @generated from protobuf field: bool maintain_demoralizing_roar = 2;\n     */\n    maintainDemoralizingRoar: boolean;\n    /**\n     * @generated from protobuf field: double lacerate_time = 3;\n     */\n    lacerateTime: number;\n}\n/**\n * @generated from protobuf message proto.FeralTankDruid.Options\n */\nexport interface FeralTankDruid_Options {\n    /**\n     * @generated from protobuf field: proto.DruidOptions class_options = 1;\n     */\n    classOptions?: DruidOptions;\n    /**\n     * @generated from protobuf field: double starting_rage = 2;\n     */\n    startingRage: number;\n}\n/**\n * @generated from protobuf message proto.RestorationDruid\n */\nexport interface RestorationDruid {\n    /**\n     * @generated from protobuf field: proto.RestorationDruid.Options options = 3;\n     */\n    options?: RestorationDruid_Options;\n}\n/**\n * @generated from protobuf message proto.RestorationDruid.Rotation\n */\nexport interface RestorationDruid_Rotation {\n}\n/**\n * @generated from protobuf message proto.RestorationDruid.Options\n */\nexport interface RestorationDruid_Options {\n    /**\n     * @generated from protobuf field: proto.DruidOptions class_options = 1;\n     */\n    classOptions?: DruidOptions;\n}\n/**\n * @generated from protobuf enum proto.DruidPrimeGlyph\n */\nexport enum DruidPrimeGlyph {\n    /**\n     * @generated from protobuf enum value: DruidPrimeGlyphNone = 0;\n     */\n    DruidPrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBerserk = 45601;\n     */\n    GlyphOfBerserk = 45601,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodletting = 40901;\n     */\n    GlyphOfBloodletting = 40901,\n    /**\n     * @generated from protobuf enum value: GlyphOfInsectSwarm = 40919;\n     */\n    GlyphOfInsectSwarm = 40919,\n    /**\n     * @generated from protobuf enum value: GlyphOfLacerate = 67484;\n     */\n    GlyphOfLacerate = 67484,\n    /**\n     * @generated from protobuf enum value: GlyphOfLifebloom = 40915;\n     */\n    GlyphOfLifebloom = 40915,\n    /**\n     * @generated from protobuf enum value: GlyphOfMangle = 40900;\n     */\n    GlyphOfMangle = 40900,\n    /**\n     * @generated from protobuf enum value: GlyphOfMoonfire = 40923;\n     */\n    GlyphOfMoonfire = 40923,\n    /**\n     * @generated from protobuf enum value: GlyphOfRegrowth = 40912;\n     */\n    GlyphOfRegrowth = 40912,\n    /**\n     * @generated from protobuf enum value: GlyphOfRejuvenation = 40913;\n     */\n    GlyphOfRejuvenation = 40913,\n    /**\n     * @generated from protobuf enum value: GlyphOfRip = 40902;\n     */\n    GlyphOfRip = 40902,\n    /**\n     * @generated from protobuf enum value: GlyphOfSavageRoar = 45604;\n     */\n    GlyphOfSavageRoar = 45604,\n    /**\n     * @generated from protobuf enum value: GlyphOfStarfire = 40916;\n     */\n    GlyphOfStarfire = 40916,\n    /**\n     * @generated from protobuf enum value: GlyphOfStarsurge = 45603;\n     */\n    GlyphOfStarsurge = 45603,\n    /**\n     * @generated from protobuf enum value: GlyphOfSwiftmend = 40906;\n     */\n    GlyphOfSwiftmend = 40906,\n    /**\n     * @generated from protobuf enum value: GlyphOfTigerSFury = 67487;\n     */\n    GlyphOfTigerSFury = 67487,\n    /**\n     * @generated from protobuf enum value: GlyphOfWrath = 40922;\n     */\n    GlyphOfWrath = 40922\n}\n/**\n * @generated from protobuf enum proto.DruidMajorGlyph\n */\nexport enum DruidMajorGlyph {\n    /**\n     * @generated from protobuf enum value: DruidMajorGlyphNone = 0;\n     */\n    DruidMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBarkskin = 45623;\n     */\n    GlyphOfBarkskin = 45623,\n    /**\n     * @generated from protobuf enum value: GlyphOfEntanglingRoots = 40924;\n     */\n    GlyphOfEntanglingRoots = 40924,\n    /**\n     * @generated from protobuf enum value: GlyphOfFaerieFire = 67485;\n     */\n    GlyphOfFaerieFire = 67485,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeralCharge = 67486;\n     */\n    GlyphOfFeralCharge = 67486,\n    /**\n     * @generated from protobuf enum value: GlyphOfFerociousBite = 48720;\n     */\n    GlyphOfFerociousBite = 48720,\n    /**\n     * @generated from protobuf enum value: GlyphOfFocus = 44928;\n     */\n    GlyphOfFocus = 44928,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrenziedRegeneration = 40896;\n     */\n    GlyphOfFrenziedRegeneration = 40896,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealingTouch = 40914;\n     */\n    GlyphOfHealingTouch = 40914,\n    /**\n     * @generated from protobuf enum value: GlyphOfHurricane = 40920;\n     */\n    GlyphOfHurricane = 40920,\n    /**\n     * @generated from protobuf enum value: GlyphOfInnervate = 40908;\n     */\n    GlyphOfInnervate = 40908,\n    /**\n     * @generated from protobuf enum value: GlyphOfMaul = 40897;\n     */\n    GlyphOfMaul = 40897,\n    /**\n     * @generated from protobuf enum value: GlyphOfMonsoon = 45622;\n     */\n    GlyphOfMonsoon = 45622,\n    /**\n     * @generated from protobuf enum value: GlyphOfOmenOfClarity = 206580;\n     */\n    GlyphOfOmenOfClarity = 206580,\n    /**\n     * @generated from protobuf enum value: GlyphOfPounce = 40903;\n     */\n    GlyphOfPounce = 40903,\n    /**\n     * @generated from protobuf enum value: GlyphOfRebirth = 40909;\n     */\n    GlyphOfRebirth = 40909,\n    /**\n     * @generated from protobuf enum value: GlyphOfSolarBeam = 40899;\n     */\n    GlyphOfSolarBeam = 40899,\n    /**\n     * @generated from protobuf enum value: GlyphOfStarfall = 40921;\n     */\n    GlyphOfStarfall = 40921,\n    /**\n     * @generated from protobuf enum value: GlyphOfThorns = 43332;\n     */\n    GlyphOfThorns = 43332,\n    /**\n     * @generated from protobuf enum value: GlyphOfWildGrowth = 45602;\n     */\n    GlyphOfWildGrowth = 45602\n}\n/**\n * @generated from protobuf enum proto.DruidMinorGlyph\n */\nexport enum DruidMinorGlyph {\n    /**\n     * @generated from protobuf enum value: DruidMinorGlyphNone = 0;\n     */\n    DruidMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAquaticForm = 43316;\n     */\n    GlyphOfAquaticForm = 43316,\n    /**\n     * @generated from protobuf enum value: GlyphOfChallengingRoar = 43334;\n     */\n    GlyphOfChallengingRoar = 43334,\n    /**\n     * @generated from protobuf enum value: GlyphOfDash = 43674;\n     */\n    GlyphOfDash = 43674,\n    /**\n     * @generated from protobuf enum value: GlyphOfMarkOfTheWild = 43335;\n     */\n    GlyphOfMarkOfTheWild = 43335,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheTreant = 68039;\n     */\n    GlyphOfTheTreant = 68039,\n    /**\n     * @generated from protobuf enum value: GlyphOfTyphoon = 44922;\n     */\n    GlyphOfTyphoon = 44922,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnburdenedRebirth = 43331;\n     */\n    GlyphOfUnburdenedRebirth = 43331\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass DruidTalents$Type extends MessageType<DruidTalents> {\n    constructor() {\n        super(\"proto.DruidTalents\", [\n            { no: 1, name: \"natures_grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"starlight_wrath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"natures_majesty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"genesis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"moonglow\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"balance_of_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"euphoria\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"moonkin_form\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"typhoon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"shooting_stars\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"owlkin_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"gale_winds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"solar_beam\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"dreamstate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"force_of_nature\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"sunfire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"earth_and_moon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"fungal_growth\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"lunar_shower\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"starfall\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"feral_swiftness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"furor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"predatory_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"infected_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"fury_swipes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"primal_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"feral_aggression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"king_of_the_jungle\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"feral_charge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"stampede\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"thick_hide\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"leader_of_the_pack\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"brutal_impact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"nurturing_instinct\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"primal_madness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"survival_instincts\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"endless_carnage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"natural_reaction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"blood_in_the_water\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"rend_and_tear\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"pulverize\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 42, name: \"berserk\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"blessing_of_the_grove\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"natural_shapeshifter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"naturalist\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"heart_of_the_wild\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"perseverance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"master_shapeshifter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"improved_rejuvenation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"living_seed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"revitalize\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"natures_swiftness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"fury_of_stormrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"natures_bounty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"empowered_touch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"malfurions_gift\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"efflorescence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"wild_growth\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"natures_cure\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 60, name: \"natures_ward\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"gift_of_the_earthmother\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"swift_rejuvenation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 63, name: \"tree_of_life\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DruidTalents>): DruidTalents {\n        const message = { naturesGrace: 0, starlightWrath: 0, naturesMajesty: 0, genesis: 0, moonglow: 0, balanceOfPower: 0, euphoria: 0, moonkinForm: false, typhoon: false, shootingStars: 0, owlkinFrenzy: 0, galeWinds: 0, solarBeam: false, dreamstate: 0, forceOfNature: false, sunfire: false, earthAndMoon: false, fungalGrowth: 0, lunarShower: 0, starfall: false, feralSwiftness: 0, furor: 0, predatoryStrikes: 0, infectedWounds: 0, furySwipes: 0, primalFury: 0, feralAggression: 0, kingOfTheJungle: 0, feralCharge: false, stampede: 0, thickHide: 0, leaderOfThePack: false, brutalImpact: 0, nurturingInstinct: 0, primalMadness: 0, survivalInstincts: false, endlessCarnage: 0, naturalReaction: 0, bloodInTheWater: 0, rendAndTear: 0, pulverize: false, berserk: false, blessingOfTheGrove: 0, naturalShapeshifter: 0, naturalist: 0, heartOfTheWild: 0, perseverance: 0, masterShapeshifter: false, improvedRejuvenation: 0, livingSeed: 0, revitalize: 0, naturesSwiftness: false, furyOfStormrage: 0, naturesBounty: 0, empoweredTouch: 0, malfurionsGift: 0, efflorescence: 0, wildGrowth: false, naturesCure: false, naturesWard: 0, giftOfTheEarthmother: 0, swiftRejuvenation: false, treeOfLife: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DruidTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DruidTalents): DruidTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 natures_grace */ 1:\n                    message.naturesGrace = reader.int32();\n                    break;\n                case /* int32 starlight_wrath */ 2:\n                    message.starlightWrath = reader.int32();\n                    break;\n                case /* int32 natures_majesty */ 3:\n                    message.naturesMajesty = reader.int32();\n                    break;\n                case /* int32 genesis */ 4:\n                    message.genesis = reader.int32();\n                    break;\n                case /* int32 moonglow */ 5:\n                    message.moonglow = reader.int32();\n                    break;\n                case /* int32 balance_of_power */ 6:\n                    message.balanceOfPower = reader.int32();\n                    break;\n                case /* int32 euphoria */ 7:\n                    message.euphoria = reader.int32();\n                    break;\n                case /* bool moonkin_form */ 8:\n                    message.moonkinForm = reader.bool();\n                    break;\n                case /* bool typhoon */ 9:\n                    message.typhoon = reader.bool();\n                    break;\n                case /* int32 shooting_stars */ 10:\n                    message.shootingStars = reader.int32();\n                    break;\n                case /* int32 owlkin_frenzy */ 11:\n                    message.owlkinFrenzy = reader.int32();\n                    break;\n                case /* int32 gale_winds */ 12:\n                    message.galeWinds = reader.int32();\n                    break;\n                case /* bool solar_beam */ 13:\n                    message.solarBeam = reader.bool();\n                    break;\n                case /* int32 dreamstate */ 14:\n                    message.dreamstate = reader.int32();\n                    break;\n                case /* bool force_of_nature */ 15:\n                    message.forceOfNature = reader.bool();\n                    break;\n                case /* bool sunfire */ 16:\n                    message.sunfire = reader.bool();\n                    break;\n                case /* bool earth_and_moon */ 17:\n                    message.earthAndMoon = reader.bool();\n                    break;\n                case /* int32 fungal_growth */ 18:\n                    message.fungalGrowth = reader.int32();\n                    break;\n                case /* int32 lunar_shower */ 19:\n                    message.lunarShower = reader.int32();\n                    break;\n                case /* bool starfall */ 20:\n                    message.starfall = reader.bool();\n                    break;\n                case /* int32 feral_swiftness */ 21:\n                    message.feralSwiftness = reader.int32();\n                    break;\n                case /* int32 furor */ 22:\n                    message.furor = reader.int32();\n                    break;\n                case /* int32 predatory_strikes */ 23:\n                    message.predatoryStrikes = reader.int32();\n                    break;\n                case /* int32 infected_wounds */ 24:\n                    message.infectedWounds = reader.int32();\n                    break;\n                case /* int32 fury_swipes */ 25:\n                    message.furySwipes = reader.int32();\n                    break;\n                case /* int32 primal_fury */ 26:\n                    message.primalFury = reader.int32();\n                    break;\n                case /* int32 feral_aggression */ 27:\n                    message.feralAggression = reader.int32();\n                    break;\n                case /* int32 king_of_the_jungle */ 28:\n                    message.kingOfTheJungle = reader.int32();\n                    break;\n                case /* bool feral_charge */ 29:\n                    message.feralCharge = reader.bool();\n                    break;\n                case /* int32 stampede */ 30:\n                    message.stampede = reader.int32();\n                    break;\n                case /* int32 thick_hide */ 31:\n                    message.thickHide = reader.int32();\n                    break;\n                case /* bool leader_of_the_pack */ 32:\n                    message.leaderOfThePack = reader.bool();\n                    break;\n                case /* int32 brutal_impact */ 33:\n                    message.brutalImpact = reader.int32();\n                    break;\n                case /* int32 nurturing_instinct */ 34:\n                    message.nurturingInstinct = reader.int32();\n                    break;\n                case /* int32 primal_madness */ 35:\n                    message.primalMadness = reader.int32();\n                    break;\n                case /* bool survival_instincts */ 36:\n                    message.survivalInstincts = reader.bool();\n                    break;\n                case /* int32 endless_carnage */ 37:\n                    message.endlessCarnage = reader.int32();\n                    break;\n                case /* int32 natural_reaction */ 38:\n                    message.naturalReaction = reader.int32();\n                    break;\n                case /* int32 blood_in_the_water */ 39:\n                    message.bloodInTheWater = reader.int32();\n                    break;\n                case /* int32 rend_and_tear */ 40:\n                    message.rendAndTear = reader.int32();\n                    break;\n                case /* bool pulverize */ 41:\n                    message.pulverize = reader.bool();\n                    break;\n                case /* bool berserk */ 42:\n                    message.berserk = reader.bool();\n                    break;\n                case /* int32 blessing_of_the_grove */ 43:\n                    message.blessingOfTheGrove = reader.int32();\n                    break;\n                case /* int32 natural_shapeshifter */ 44:\n                    message.naturalShapeshifter = reader.int32();\n                    break;\n                case /* int32 naturalist */ 45:\n                    message.naturalist = reader.int32();\n                    break;\n                case /* int32 heart_of_the_wild */ 46:\n                    message.heartOfTheWild = reader.int32();\n                    break;\n                case /* int32 perseverance */ 47:\n                    message.perseverance = reader.int32();\n                    break;\n                case /* bool master_shapeshifter */ 48:\n                    message.masterShapeshifter = reader.bool();\n                    break;\n                case /* int32 improved_rejuvenation */ 49:\n                    message.improvedRejuvenation = reader.int32();\n                    break;\n                case /* int32 living_seed */ 50:\n                    message.livingSeed = reader.int32();\n                    break;\n                case /* int32 revitalize */ 51:\n                    message.revitalize = reader.int32();\n                    break;\n                case /* bool natures_swiftness */ 52:\n                    message.naturesSwiftness = reader.bool();\n                    break;\n                case /* int32 fury_of_stormrage */ 53:\n                    message.furyOfStormrage = reader.int32();\n                    break;\n                case /* int32 natures_bounty */ 54:\n                    message.naturesBounty = reader.int32();\n                    break;\n                case /* int32 empowered_touch */ 55:\n                    message.empoweredTouch = reader.int32();\n                    break;\n                case /* int32 malfurions_gift */ 56:\n                    message.malfurionsGift = reader.int32();\n                    break;\n                case /* int32 efflorescence */ 57:\n                    message.efflorescence = reader.int32();\n                    break;\n                case /* bool wild_growth */ 58:\n                    message.wildGrowth = reader.bool();\n                    break;\n                case /* bool natures_cure */ 59:\n                    message.naturesCure = reader.bool();\n                    break;\n                case /* int32 natures_ward */ 60:\n                    message.naturesWard = reader.int32();\n                    break;\n                case /* int32 gift_of_the_earthmother */ 61:\n                    message.giftOfTheEarthmother = reader.int32();\n                    break;\n                case /* bool swift_rejuvenation */ 62:\n                    message.swiftRejuvenation = reader.bool();\n                    break;\n                case /* bool tree_of_life */ 63:\n                    message.treeOfLife = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DruidTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 natures_grace = 1; */\n        if (message.naturesGrace !== 0)\n            writer.tag(1, WireType.Varint).int32(message.naturesGrace);\n        /* int32 starlight_wrath = 2; */\n        if (message.starlightWrath !== 0)\n            writer.tag(2, WireType.Varint).int32(message.starlightWrath);\n        /* int32 natures_majesty = 3; */\n        if (message.naturesMajesty !== 0)\n            writer.tag(3, WireType.Varint).int32(message.naturesMajesty);\n        /* int32 genesis = 4; */\n        if (message.genesis !== 0)\n            writer.tag(4, WireType.Varint).int32(message.genesis);\n        /* int32 moonglow = 5; */\n        if (message.moonglow !== 0)\n            writer.tag(5, WireType.Varint).int32(message.moonglow);\n        /* int32 balance_of_power = 6; */\n        if (message.balanceOfPower !== 0)\n            writer.tag(6, WireType.Varint).int32(message.balanceOfPower);\n        /* int32 euphoria = 7; */\n        if (message.euphoria !== 0)\n            writer.tag(7, WireType.Varint).int32(message.euphoria);\n        /* bool moonkin_form = 8; */\n        if (message.moonkinForm !== false)\n            writer.tag(8, WireType.Varint).bool(message.moonkinForm);\n        /* bool typhoon = 9; */\n        if (message.typhoon !== false)\n            writer.tag(9, WireType.Varint).bool(message.typhoon);\n        /* int32 shooting_stars = 10; */\n        if (message.shootingStars !== 0)\n            writer.tag(10, WireType.Varint).int32(message.shootingStars);\n        /* int32 owlkin_frenzy = 11; */\n        if (message.owlkinFrenzy !== 0)\n            writer.tag(11, WireType.Varint).int32(message.owlkinFrenzy);\n        /* int32 gale_winds = 12; */\n        if (message.galeWinds !== 0)\n            writer.tag(12, WireType.Varint).int32(message.galeWinds);\n        /* bool solar_beam = 13; */\n        if (message.solarBeam !== false)\n            writer.tag(13, WireType.Varint).bool(message.solarBeam);\n        /* int32 dreamstate = 14; */\n        if (message.dreamstate !== 0)\n            writer.tag(14, WireType.Varint).int32(message.dreamstate);\n        /* bool force_of_nature = 15; */\n        if (message.forceOfNature !== false)\n            writer.tag(15, WireType.Varint).bool(message.forceOfNature);\n        /* bool sunfire = 16; */\n        if (message.sunfire !== false)\n            writer.tag(16, WireType.Varint).bool(message.sunfire);\n        /* bool earth_and_moon = 17; */\n        if (message.earthAndMoon !== false)\n            writer.tag(17, WireType.Varint).bool(message.earthAndMoon);\n        /* int32 fungal_growth = 18; */\n        if (message.fungalGrowth !== 0)\n            writer.tag(18, WireType.Varint).int32(message.fungalGrowth);\n        /* int32 lunar_shower = 19; */\n        if (message.lunarShower !== 0)\n            writer.tag(19, WireType.Varint).int32(message.lunarShower);\n        /* bool starfall = 20; */\n        if (message.starfall !== false)\n            writer.tag(20, WireType.Varint).bool(message.starfall);\n        /* int32 feral_swiftness = 21; */\n        if (message.feralSwiftness !== 0)\n            writer.tag(21, WireType.Varint).int32(message.feralSwiftness);\n        /* int32 furor = 22; */\n        if (message.furor !== 0)\n            writer.tag(22, WireType.Varint).int32(message.furor);\n        /* int32 predatory_strikes = 23; */\n        if (message.predatoryStrikes !== 0)\n            writer.tag(23, WireType.Varint).int32(message.predatoryStrikes);\n        /* int32 infected_wounds = 24; */\n        if (message.infectedWounds !== 0)\n            writer.tag(24, WireType.Varint).int32(message.infectedWounds);\n        /* int32 fury_swipes = 25; */\n        if (message.furySwipes !== 0)\n            writer.tag(25, WireType.Varint).int32(message.furySwipes);\n        /* int32 primal_fury = 26; */\n        if (message.primalFury !== 0)\n            writer.tag(26, WireType.Varint).int32(message.primalFury);\n        /* int32 feral_aggression = 27; */\n        if (message.feralAggression !== 0)\n            writer.tag(27, WireType.Varint).int32(message.feralAggression);\n        /* int32 king_of_the_jungle = 28; */\n        if (message.kingOfTheJungle !== 0)\n            writer.tag(28, WireType.Varint).int32(message.kingOfTheJungle);\n        /* bool feral_charge = 29; */\n        if (message.feralCharge !== false)\n            writer.tag(29, WireType.Varint).bool(message.feralCharge);\n        /* int32 stampede = 30; */\n        if (message.stampede !== 0)\n            writer.tag(30, WireType.Varint).int32(message.stampede);\n        /* int32 thick_hide = 31; */\n        if (message.thickHide !== 0)\n            writer.tag(31, WireType.Varint).int32(message.thickHide);\n        /* bool leader_of_the_pack = 32; */\n        if (message.leaderOfThePack !== false)\n            writer.tag(32, WireType.Varint).bool(message.leaderOfThePack);\n        /* int32 brutal_impact = 33; */\n        if (message.brutalImpact !== 0)\n            writer.tag(33, WireType.Varint).int32(message.brutalImpact);\n        /* int32 nurturing_instinct = 34; */\n        if (message.nurturingInstinct !== 0)\n            writer.tag(34, WireType.Varint).int32(message.nurturingInstinct);\n        /* int32 primal_madness = 35; */\n        if (message.primalMadness !== 0)\n            writer.tag(35, WireType.Varint).int32(message.primalMadness);\n        /* bool survival_instincts = 36; */\n        if (message.survivalInstincts !== false)\n            writer.tag(36, WireType.Varint).bool(message.survivalInstincts);\n        /* int32 endless_carnage = 37; */\n        if (message.endlessCarnage !== 0)\n            writer.tag(37, WireType.Varint).int32(message.endlessCarnage);\n        /* int32 natural_reaction = 38; */\n        if (message.naturalReaction !== 0)\n            writer.tag(38, WireType.Varint).int32(message.naturalReaction);\n        /* int32 blood_in_the_water = 39; */\n        if (message.bloodInTheWater !== 0)\n            writer.tag(39, WireType.Varint).int32(message.bloodInTheWater);\n        /* int32 rend_and_tear = 40; */\n        if (message.rendAndTear !== 0)\n            writer.tag(40, WireType.Varint).int32(message.rendAndTear);\n        /* bool pulverize = 41; */\n        if (message.pulverize !== false)\n            writer.tag(41, WireType.Varint).bool(message.pulverize);\n        /* bool berserk = 42; */\n        if (message.berserk !== false)\n            writer.tag(42, WireType.Varint).bool(message.berserk);\n        /* int32 blessing_of_the_grove = 43; */\n        if (message.blessingOfTheGrove !== 0)\n            writer.tag(43, WireType.Varint).int32(message.blessingOfTheGrove);\n        /* int32 natural_shapeshifter = 44; */\n        if (message.naturalShapeshifter !== 0)\n            writer.tag(44, WireType.Varint).int32(message.naturalShapeshifter);\n        /* int32 naturalist = 45; */\n        if (message.naturalist !== 0)\n            writer.tag(45, WireType.Varint).int32(message.naturalist);\n        /* int32 heart_of_the_wild = 46; */\n        if (message.heartOfTheWild !== 0)\n            writer.tag(46, WireType.Varint).int32(message.heartOfTheWild);\n        /* int32 perseverance = 47; */\n        if (message.perseverance !== 0)\n            writer.tag(47, WireType.Varint).int32(message.perseverance);\n        /* bool master_shapeshifter = 48; */\n        if (message.masterShapeshifter !== false)\n            writer.tag(48, WireType.Varint).bool(message.masterShapeshifter);\n        /* int32 improved_rejuvenation = 49; */\n        if (message.improvedRejuvenation !== 0)\n            writer.tag(49, WireType.Varint).int32(message.improvedRejuvenation);\n        /* int32 living_seed = 50; */\n        if (message.livingSeed !== 0)\n            writer.tag(50, WireType.Varint).int32(message.livingSeed);\n        /* int32 revitalize = 51; */\n        if (message.revitalize !== 0)\n            writer.tag(51, WireType.Varint).int32(message.revitalize);\n        /* bool natures_swiftness = 52; */\n        if (message.naturesSwiftness !== false)\n            writer.tag(52, WireType.Varint).bool(message.naturesSwiftness);\n        /* int32 fury_of_stormrage = 53; */\n        if (message.furyOfStormrage !== 0)\n            writer.tag(53, WireType.Varint).int32(message.furyOfStormrage);\n        /* int32 natures_bounty = 54; */\n        if (message.naturesBounty !== 0)\n            writer.tag(54, WireType.Varint).int32(message.naturesBounty);\n        /* int32 empowered_touch = 55; */\n        if (message.empoweredTouch !== 0)\n            writer.tag(55, WireType.Varint).int32(message.empoweredTouch);\n        /* int32 malfurions_gift = 56; */\n        if (message.malfurionsGift !== 0)\n            writer.tag(56, WireType.Varint).int32(message.malfurionsGift);\n        /* int32 efflorescence = 57; */\n        if (message.efflorescence !== 0)\n            writer.tag(57, WireType.Varint).int32(message.efflorescence);\n        /* bool wild_growth = 58; */\n        if (message.wildGrowth !== false)\n            writer.tag(58, WireType.Varint).bool(message.wildGrowth);\n        /* bool natures_cure = 59; */\n        if (message.naturesCure !== false)\n            writer.tag(59, WireType.Varint).bool(message.naturesCure);\n        /* int32 natures_ward = 60; */\n        if (message.naturesWard !== 0)\n            writer.tag(60, WireType.Varint).int32(message.naturesWard);\n        /* int32 gift_of_the_earthmother = 61; */\n        if (message.giftOfTheEarthmother !== 0)\n            writer.tag(61, WireType.Varint).int32(message.giftOfTheEarthmother);\n        /* bool swift_rejuvenation = 62; */\n        if (message.swiftRejuvenation !== false)\n            writer.tag(62, WireType.Varint).bool(message.swiftRejuvenation);\n        /* bool tree_of_life = 63; */\n        if (message.treeOfLife !== false)\n            writer.tag(63, WireType.Varint).bool(message.treeOfLife);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DruidTalents\n */\nexport const DruidTalents = new DruidTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DruidOptions$Type extends MessageType<DruidOptions> {\n    constructor() {\n        super(\"proto.DruidOptions\", [\n            { no: 1, name: \"innervate_target\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<DruidOptions>): DruidOptions {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DruidOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DruidOptions): DruidOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference innervate_target */ 1:\n                    message.innervateTarget = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.innervateTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DruidOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference innervate_target = 1; */\n        if (message.innervateTarget)\n            UnitReference.internalBinaryWrite(message.innervateTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DruidOptions\n */\nexport const DruidOptions = new DruidOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid$Type extends MessageType<BalanceDruid> {\n    constructor() {\n        super(\"proto.BalanceDruid\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => BalanceDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<BalanceDruid>): BalanceDruid {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid): BalanceDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.BalanceDruid.Options options */ 3:\n                    message.options = BalanceDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BalanceDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.BalanceDruid.Options options = 3; */\n        if (message.options)\n            BalanceDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid\n */\nexport const BalanceDruid = new BalanceDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid_Rotation$Type extends MessageType<BalanceDruid_Rotation> {\n    constructor() {\n        super(\"proto.BalanceDruid.Rotation\", []);\n    }\n    create(value?: PartialMessage<BalanceDruid_Rotation>): BalanceDruid_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid_Rotation): BalanceDruid_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: BalanceDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid.Rotation\n */\nexport const BalanceDruid_Rotation = new BalanceDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BalanceDruid_Options$Type extends MessageType<BalanceDruid_Options> {\n    constructor() {\n        super(\"proto.BalanceDruid.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => DruidOptions },\n            { no: 2, name: \"okf_uptime\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ }\n        ]);\n    }\n    create(value?: PartialMessage<BalanceDruid_Options>): BalanceDruid_Options {\n        const message = { okfUptime: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BalanceDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalanceDruid_Options): BalanceDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DruidOptions class_options */ 1:\n                    message.classOptions = DruidOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* float okf_uptime */ 2:\n                    message.okfUptime = reader.float();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BalanceDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DruidOptions class_options = 1; */\n        if (message.classOptions)\n            DruidOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* float okf_uptime = 2; */\n        if (message.okfUptime !== 0)\n            writer.tag(2, WireType.Bit32).float(message.okfUptime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BalanceDruid.Options\n */\nexport const BalanceDruid_Options = new BalanceDruid_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid$Type extends MessageType<FeralDruid> {\n    constructor() {\n        super(\"proto.FeralDruid\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => FeralDruid_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => FeralDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid>): FeralDruid {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid): FeralDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralDruid.Rotation rotation */ 1:\n                    message.rotation = FeralDruid_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.FeralDruid.Options options */ 3:\n                    message.options = FeralDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralDruid.Rotation rotation = 1; */\n        if (message.rotation)\n            FeralDruid_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralDruid.Options options = 3; */\n        if (message.options)\n            FeralDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid\n */\nexport const FeralDruid = new FeralDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid_Rotation$Type extends MessageType<FeralDruid_Rotation> {\n    constructor() {\n        super(\"proto.FeralDruid.Rotation\", [\n            { no: 1, name: \"bear_weave_type\", kind: \"enum\", T: () => [\"proto.FeralDruid.Rotation.BearweaveType\", FeralDruid_Rotation_BearweaveType] },\n            { no: 2, name: \"maintain_faerie_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"min_combos_for_rip\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"use_rake\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"use_bite\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"mangle_spam\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"bite_time\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 8, name: \"min_combos_for_bite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"berserk_bite_thresh\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"berserk_ff_thresh\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"rip_leeway\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"powerbear\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"min_roar_offset\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 12, name: \"bite_mode_type\", kind: \"enum\", T: () => [\"proto.FeralDruid.Rotation.BiteModeType\", FeralDruid_Rotation_BiteModeType] },\n            { no: 13, name: \"hot_uptime\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 14, name: \"snek_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"flower_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"raid_targets\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"manual_params\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"max_ff_delay\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 21, name: \"rotation_type\", kind: \"enum\", T: () => [\"proto.FeralDruid.Rotation.AplType\", FeralDruid_Rotation_AplType] },\n            { no: 22, name: \"pre_pop_berserk\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"pre_pop_ooc\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid_Rotation>): FeralDruid_Rotation {\n        const message = { bearWeaveType: 0, maintainFaerieFire: false, minCombosForRip: 0, useRake: false, useBite: false, mangleSpam: false, biteTime: 0, minCombosForBite: 0, berserkBiteThresh: 0, berserkFfThresh: 0, ripLeeway: 0, powerbear: false, minRoarOffset: 0, biteModeType: 0, hotUptime: 0, snekWeave: false, flowerWeave: false, raidTargets: 0, manualParams: false, maxFfDelay: 0, rotationType: 0, prePopBerserk: false, prePopOoc: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid_Rotation): FeralDruid_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralDruid.Rotation.BearweaveType bear_weave_type */ 1:\n                    message.bearWeaveType = reader.int32();\n                    break;\n                case /* bool maintain_faerie_fire */ 2:\n                    message.maintainFaerieFire = reader.bool();\n                    break;\n                case /* int32 min_combos_for_rip */ 3:\n                    message.minCombosForRip = reader.int32();\n                    break;\n                case /* bool use_rake */ 4:\n                    message.useRake = reader.bool();\n                    break;\n                case /* bool use_bite */ 5:\n                    message.useBite = reader.bool();\n                    break;\n                case /* bool mangle_spam */ 6:\n                    message.mangleSpam = reader.bool();\n                    break;\n                case /* float bite_time */ 7:\n                    message.biteTime = reader.float();\n                    break;\n                case /* int32 min_combos_for_bite */ 8:\n                    message.minCombosForBite = reader.int32();\n                    break;\n                case /* int32 berserk_bite_thresh */ 9:\n                    message.berserkBiteThresh = reader.int32();\n                    break;\n                case /* int32 berserk_ff_thresh */ 18:\n                    message.berserkFfThresh = reader.int32();\n                    break;\n                case /* int32 rip_leeway */ 19:\n                    message.ripLeeway = reader.int32();\n                    break;\n                case /* bool powerbear */ 10:\n                    message.powerbear = reader.bool();\n                    break;\n                case /* float min_roar_offset */ 11:\n                    message.minRoarOffset = reader.float();\n                    break;\n                case /* proto.FeralDruid.Rotation.BiteModeType bite_mode_type */ 12:\n                    message.biteModeType = reader.int32();\n                    break;\n                case /* float hot_uptime */ 13:\n                    message.hotUptime = reader.float();\n                    break;\n                case /* bool snek_weave */ 14:\n                    message.snekWeave = reader.bool();\n                    break;\n                case /* bool flower_weave */ 15:\n                    message.flowerWeave = reader.bool();\n                    break;\n                case /* int32 raid_targets */ 16:\n                    message.raidTargets = reader.int32();\n                    break;\n                case /* bool manual_params */ 17:\n                    message.manualParams = reader.bool();\n                    break;\n                case /* float max_ff_delay */ 20:\n                    message.maxFfDelay = reader.float();\n                    break;\n                case /* proto.FeralDruid.Rotation.AplType rotation_type */ 21:\n                    message.rotationType = reader.int32();\n                    break;\n                case /* bool pre_pop_berserk */ 22:\n                    message.prePopBerserk = reader.bool();\n                    break;\n                case /* bool pre_pop_ooc */ 23:\n                    message.prePopOoc = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralDruid.Rotation.BearweaveType bear_weave_type = 1; */\n        if (message.bearWeaveType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.bearWeaveType);\n        /* bool maintain_faerie_fire = 2; */\n        if (message.maintainFaerieFire !== false)\n            writer.tag(2, WireType.Varint).bool(message.maintainFaerieFire);\n        /* int32 min_combos_for_rip = 3; */\n        if (message.minCombosForRip !== 0)\n            writer.tag(3, WireType.Varint).int32(message.minCombosForRip);\n        /* bool use_rake = 4; */\n        if (message.useRake !== false)\n            writer.tag(4, WireType.Varint).bool(message.useRake);\n        /* bool use_bite = 5; */\n        if (message.useBite !== false)\n            writer.tag(5, WireType.Varint).bool(message.useBite);\n        /* bool mangle_spam = 6; */\n        if (message.mangleSpam !== false)\n            writer.tag(6, WireType.Varint).bool(message.mangleSpam);\n        /* float bite_time = 7; */\n        if (message.biteTime !== 0)\n            writer.tag(7, WireType.Bit32).float(message.biteTime);\n        /* int32 min_combos_for_bite = 8; */\n        if (message.minCombosForBite !== 0)\n            writer.tag(8, WireType.Varint).int32(message.minCombosForBite);\n        /* int32 berserk_bite_thresh = 9; */\n        if (message.berserkBiteThresh !== 0)\n            writer.tag(9, WireType.Varint).int32(message.berserkBiteThresh);\n        /* int32 berserk_ff_thresh = 18; */\n        if (message.berserkFfThresh !== 0)\n            writer.tag(18, WireType.Varint).int32(message.berserkFfThresh);\n        /* int32 rip_leeway = 19; */\n        if (message.ripLeeway !== 0)\n            writer.tag(19, WireType.Varint).int32(message.ripLeeway);\n        /* bool powerbear = 10; */\n        if (message.powerbear !== false)\n            writer.tag(10, WireType.Varint).bool(message.powerbear);\n        /* float min_roar_offset = 11; */\n        if (message.minRoarOffset !== 0)\n            writer.tag(11, WireType.Bit32).float(message.minRoarOffset);\n        /* proto.FeralDruid.Rotation.BiteModeType bite_mode_type = 12; */\n        if (message.biteModeType !== 0)\n            writer.tag(12, WireType.Varint).int32(message.biteModeType);\n        /* float hot_uptime = 13; */\n        if (message.hotUptime !== 0)\n            writer.tag(13, WireType.Bit32).float(message.hotUptime);\n        /* bool snek_weave = 14; */\n        if (message.snekWeave !== false)\n            writer.tag(14, WireType.Varint).bool(message.snekWeave);\n        /* bool flower_weave = 15; */\n        if (message.flowerWeave !== false)\n            writer.tag(15, WireType.Varint).bool(message.flowerWeave);\n        /* int32 raid_targets = 16; */\n        if (message.raidTargets !== 0)\n            writer.tag(16, WireType.Varint).int32(message.raidTargets);\n        /* bool manual_params = 17; */\n        if (message.manualParams !== false)\n            writer.tag(17, WireType.Varint).bool(message.manualParams);\n        /* float max_ff_delay = 20; */\n        if (message.maxFfDelay !== 0)\n            writer.tag(20, WireType.Bit32).float(message.maxFfDelay);\n        /* proto.FeralDruid.Rotation.AplType rotation_type = 21; */\n        if (message.rotationType !== 0)\n            writer.tag(21, WireType.Varint).int32(message.rotationType);\n        /* bool pre_pop_berserk = 22; */\n        if (message.prePopBerserk !== false)\n            writer.tag(22, WireType.Varint).bool(message.prePopBerserk);\n        /* bool pre_pop_ooc = 23; */\n        if (message.prePopOoc !== false)\n            writer.tag(23, WireType.Varint).bool(message.prePopOoc);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid.Rotation\n */\nexport const FeralDruid_Rotation = new FeralDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralDruid_Options$Type extends MessageType<FeralDruid_Options> {\n    constructor() {\n        super(\"proto.FeralDruid.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => DruidOptions },\n            { no: 2, name: \"latency_ms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"assume_bleed_active\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralDruid_Options>): FeralDruid_Options {\n        const message = { latencyMs: 0, assumeBleedActive: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralDruid_Options): FeralDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DruidOptions class_options */ 1:\n                    message.classOptions = DruidOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* int32 latency_ms */ 2:\n                    message.latencyMs = reader.int32();\n                    break;\n                case /* bool assume_bleed_active */ 4:\n                    message.assumeBleedActive = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DruidOptions class_options = 1; */\n        if (message.classOptions)\n            DruidOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 latency_ms = 2; */\n        if (message.latencyMs !== 0)\n            writer.tag(2, WireType.Varint).int32(message.latencyMs);\n        /* bool assume_bleed_active = 4; */\n        if (message.assumeBleedActive !== false)\n            writer.tag(4, WireType.Varint).bool(message.assumeBleedActive);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralDruid.Options\n */\nexport const FeralDruid_Options = new FeralDruid_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid$Type extends MessageType<FeralTankDruid> {\n    constructor() {\n        super(\"proto.FeralTankDruid\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => FeralTankDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid>): FeralTankDruid {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid): FeralTankDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralTankDruid.Options options */ 3:\n                    message.options = FeralTankDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralTankDruid.Options options = 3; */\n        if (message.options)\n            FeralTankDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid\n */\nexport const FeralTankDruid = new FeralTankDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid_Rotation$Type extends MessageType<FeralTankDruid_Rotation> {\n    constructor() {\n        super(\"proto.FeralTankDruid.Rotation\", [\n            { no: 1, name: \"maul_rage_threshold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"maintain_demoralizing_roar\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"lacerate_time\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid_Rotation>): FeralTankDruid_Rotation {\n        const message = { maulRageThreshold: 0, maintainDemoralizingRoar: false, lacerateTime: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid_Rotation): FeralTankDruid_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 maul_rage_threshold */ 1:\n                    message.maulRageThreshold = reader.int32();\n                    break;\n                case /* bool maintain_demoralizing_roar */ 2:\n                    message.maintainDemoralizingRoar = reader.bool();\n                    break;\n                case /* double lacerate_time */ 3:\n                    message.lacerateTime = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 maul_rage_threshold = 1; */\n        if (message.maulRageThreshold !== 0)\n            writer.tag(1, WireType.Varint).int32(message.maulRageThreshold);\n        /* bool maintain_demoralizing_roar = 2; */\n        if (message.maintainDemoralizingRoar !== false)\n            writer.tag(2, WireType.Varint).bool(message.maintainDemoralizingRoar);\n        /* double lacerate_time = 3; */\n        if (message.lacerateTime !== 0)\n            writer.tag(3, WireType.Bit64).double(message.lacerateTime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid.Rotation\n */\nexport const FeralTankDruid_Rotation = new FeralTankDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FeralTankDruid_Options$Type extends MessageType<FeralTankDruid_Options> {\n    constructor() {\n        super(\"proto.FeralTankDruid.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => DruidOptions },\n            { no: 2, name: \"starting_rage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FeralTankDruid_Options>): FeralTankDruid_Options {\n        const message = { startingRage: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FeralTankDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FeralTankDruid_Options): FeralTankDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DruidOptions class_options */ 1:\n                    message.classOptions = DruidOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* double starting_rage */ 2:\n                    message.startingRage = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FeralTankDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DruidOptions class_options = 1; */\n        if (message.classOptions)\n            DruidOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double starting_rage = 2; */\n        if (message.startingRage !== 0)\n            writer.tag(2, WireType.Bit64).double(message.startingRage);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FeralTankDruid.Options\n */\nexport const FeralTankDruid_Options = new FeralTankDruid_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationDruid$Type extends MessageType<RestorationDruid> {\n    constructor() {\n        super(\"proto.RestorationDruid\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => RestorationDruid_Options }\n        ]);\n    }\n    create(value?: PartialMessage<RestorationDruid>): RestorationDruid {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationDruid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationDruid): RestorationDruid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RestorationDruid.Options options */ 3:\n                    message.options = RestorationDruid_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RestorationDruid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RestorationDruid.Options options = 3; */\n        if (message.options)\n            RestorationDruid_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationDruid\n */\nexport const RestorationDruid = new RestorationDruid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationDruid_Rotation$Type extends MessageType<RestorationDruid_Rotation> {\n    constructor() {\n        super(\"proto.RestorationDruid.Rotation\", []);\n    }\n    create(value?: PartialMessage<RestorationDruid_Rotation>): RestorationDruid_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationDruid_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationDruid_Rotation): RestorationDruid_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: RestorationDruid_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationDruid.Rotation\n */\nexport const RestorationDruid_Rotation = new RestorationDruid_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RestorationDruid_Options$Type extends MessageType<RestorationDruid_Options> {\n    constructor() {\n        super(\"proto.RestorationDruid.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => DruidOptions }\n        ]);\n    }\n    create(value?: PartialMessage<RestorationDruid_Options>): RestorationDruid_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RestorationDruid_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RestorationDruid_Options): RestorationDruid_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DruidOptions class_options */ 1:\n                    message.classOptions = DruidOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RestorationDruid_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DruidOptions class_options = 1; */\n        if (message.classOptions)\n            DruidOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RestorationDruid.Options\n */\nexport const RestorationDruid_Options = new RestorationDruid_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"apl.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { ShamanTotems_TotemType } from \"./shaman\";\nimport { FeralDruid_Rotation_AplType } from \"./druid\";\nimport { UnitReference } from \"./common\";\nimport { ActionID } from \"./common\";\nimport { Cooldowns } from \"./common\";\n// Rotation options are based heavily on APL. See https://github.com/simulationcraft/simc/wiki/ActionLists.\n\n/**\n * @generated from protobuf message proto.APLRotation\n */\nexport interface APLRotation {\n    /**\n     * @generated from protobuf field: proto.APLRotation.Type type = 3;\n     */\n    type: APLRotation_Type;\n    /**\n     * @generated from protobuf field: proto.SimpleRotation simple = 4;\n     */\n    simple?: SimpleRotation;\n    /**\n     * @generated from protobuf field: repeated proto.APLPrepullAction prepull_actions = 1;\n     */\n    prepullActions: APLPrepullAction[];\n    /**\n     * @generated from protobuf field: repeated proto.APLListItem priority_list = 2;\n     */\n    priorityList: APLListItem[];\n}\n/**\n * @generated from protobuf enum proto.APLRotation.Type\n */\nexport enum APLRotation_Type {\n    /**\n     * @generated from protobuf enum value: TypeUnknown = 0;\n     */\n    TypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: TypeAuto = 1;\n     */\n    TypeAuto = 1,\n    /**\n     * @generated from protobuf enum value: TypeSimple = 2;\n     */\n    TypeSimple = 2,\n    /**\n     * @generated from protobuf enum value: TypeAPL = 3;\n     */\n    TypeAPL = 3\n}\n/**\n * @generated from protobuf message proto.SimpleRotation\n */\nexport interface SimpleRotation {\n    /**\n     * @generated from protobuf field: string spec_rotation_json = 1;\n     */\n    specRotationJson: string;\n    /**\n     * @generated from protobuf field: proto.Cooldowns cooldowns = 2;\n     */\n    cooldowns?: Cooldowns;\n}\n/**\n * @generated from protobuf message proto.APLPrepullAction\n */\nexport interface APLPrepullAction {\n    /**\n     * @generated from protobuf field: proto.APLAction action = 1;\n     */\n    action?: APLAction;\n    /**\n     * @generated from protobuf field: proto.APLValue do_at_value = 4;\n     */\n    doAtValue?: APLValue; // When to perform this prepull action. Should be a negative value.\n    /**\n     * @generated from protobuf field: bool hide = 3;\n     */\n    hide: boolean; // Causes this item to be ignored.\n}\n/**\n * @generated from protobuf message proto.APLListItem\n */\nexport interface APLListItem {\n    /**\n     * @generated from protobuf field: bool hide = 1;\n     */\n    hide: boolean; // Causes this item to be ignored.\n    /**\n     * @generated from protobuf field: string notes = 2;\n     */\n    notes: string; // Comments for the reader.\n    /**\n     * @generated from protobuf field: proto.APLAction action = 3;\n     */\n    action?: APLAction; // The action to be performed.\n}\n/**\n * NextIndex: 20\n *\n * @generated from protobuf message proto.APLAction\n */\nexport interface APLAction {\n    /**\n     * @generated from protobuf field: proto.APLValue condition = 1;\n     */\n    condition?: APLValue; // If set, action will only execute if value is true or != 0.\n    /**\n     * @generated from protobuf oneof: action\n     */\n    action: {\n        oneofKind: \"castSpell\";\n        /**\n         * Casting\n         *\n         * @generated from protobuf field: proto.APLActionCastSpell cast_spell = 3;\n         */\n        castSpell: APLActionCastSpell;\n    } | {\n        oneofKind: \"channelSpell\";\n        /**\n         * @generated from protobuf field: proto.APLActionChannelSpell channel_spell = 16;\n         */\n        channelSpell: APLActionChannelSpell;\n    } | {\n        oneofKind: \"multidot\";\n        /**\n         * @generated from protobuf field: proto.APLActionMultidot multidot = 8;\n         */\n        multidot: APLActionMultidot;\n    } | {\n        oneofKind: \"multishield\";\n        /**\n         * @generated from protobuf field: proto.APLActionMultishield multishield = 12;\n         */\n        multishield: APLActionMultishield;\n    } | {\n        oneofKind: \"autocastOtherCooldowns\";\n        /**\n         * @generated from protobuf field: proto.APLActionAutocastOtherCooldowns autocast_other_cooldowns = 7;\n         */\n        autocastOtherCooldowns: APLActionAutocastOtherCooldowns;\n    } | {\n        oneofKind: \"wait\";\n        /**\n         * Timing\n         *\n         * @generated from protobuf field: proto.APLActionWait wait = 4;\n         */\n        wait: APLActionWait;\n    } | {\n        oneofKind: \"waitUntil\";\n        /**\n         * @generated from protobuf field: proto.APLActionWaitUntil wait_until = 14;\n         */\n        waitUntil: APLActionWaitUntil;\n    } | {\n        oneofKind: \"schedule\";\n        /**\n         * @generated from protobuf field: proto.APLActionSchedule schedule = 15;\n         */\n        schedule: APLActionSchedule;\n    } | {\n        oneofKind: \"sequence\";\n        /**\n         * Sequences\n         *\n         * @generated from protobuf field: proto.APLActionSequence sequence = 2;\n         */\n        sequence: APLActionSequence;\n    } | {\n        oneofKind: \"resetSequence\";\n        /**\n         * @generated from protobuf field: proto.APLActionResetSequence reset_sequence = 5;\n         */\n        resetSequence: APLActionResetSequence;\n    } | {\n        oneofKind: \"strictSequence\";\n        /**\n         * @generated from protobuf field: proto.APLActionStrictSequence strict_sequence = 6;\n         */\n        strictSequence: APLActionStrictSequence;\n    } | {\n        oneofKind: \"changeTarget\";\n        /**\n         * Misc\n         *\n         * @generated from protobuf field: proto.APLActionChangeTarget change_target = 9;\n         */\n        changeTarget: APLActionChangeTarget;\n    } | {\n        oneofKind: \"activateAura\";\n        /**\n         * @generated from protobuf field: proto.APLActionActivateAura activate_aura = 13;\n         */\n        activateAura: APLActionActivateAura;\n    } | {\n        oneofKind: \"cancelAura\";\n        /**\n         * @generated from protobuf field: proto.APLActionCancelAura cancel_aura = 10;\n         */\n        cancelAura: APLActionCancelAura;\n    } | {\n        oneofKind: \"triggerIcd\";\n        /**\n         * @generated from protobuf field: proto.APLActionTriggerICD trigger_icd = 11;\n         */\n        triggerIcd: APLActionTriggerICD;\n    } | {\n        oneofKind: \"itemSwap\";\n        /**\n         * @generated from protobuf field: proto.APLActionItemSwap item_swap = 17;\n         */\n        itemSwap: APLActionItemSwap;\n    } | {\n        oneofKind: \"catOptimalRotationAction\";\n        /**\n         * Class or Spec-specific actions\n         *\n         * @generated from protobuf field: proto.APLActionCatOptimalRotationAction cat_optimal_rotation_action = 18;\n         */\n        catOptimalRotationAction: APLActionCatOptimalRotationAction;\n    } | {\n        oneofKind: \"customRotation\";\n        /**\n         * Internal use only, not exposed in UI.\n         *\n         * @generated from protobuf field: proto.APLActionCustomRotation custom_rotation = 19;\n         */\n        customRotation: APLActionCustomRotation;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * NextIndex: 67\n *\n * @generated from protobuf message proto.APLValue\n */\nexport interface APLValue {\n    /**\n     * @generated from protobuf oneof: value\n     */\n    value: {\n        oneofKind: \"const\";\n        /**\n         * Operators\n         *\n         * @generated from protobuf field: proto.APLValueConst const = 1;\n         */\n        const: APLValueConst;\n    } | {\n        oneofKind: \"and\";\n        /**\n         * @generated from protobuf field: proto.APLValueAnd and = 2;\n         */\n        and: APLValueAnd;\n    } | {\n        oneofKind: \"or\";\n        /**\n         * @generated from protobuf field: proto.APLValueOr or = 3;\n         */\n        or: APLValueOr;\n    } | {\n        oneofKind: \"not\";\n        /**\n         * @generated from protobuf field: proto.APLValueNot not = 4;\n         */\n        not: APLValueNot;\n    } | {\n        oneofKind: \"cmp\";\n        /**\n         * @generated from protobuf field: proto.APLValueCompare cmp = 5;\n         */\n        cmp: APLValueCompare;\n    } | {\n        oneofKind: \"math\";\n        /**\n         * @generated from protobuf field: proto.APLValueMath math = 38;\n         */\n        math: APLValueMath;\n    } | {\n        oneofKind: \"max\";\n        /**\n         * @generated from protobuf field: proto.APLValueMax max = 47;\n         */\n        max: APLValueMax;\n    } | {\n        oneofKind: \"min\";\n        /**\n         * @generated from protobuf field: proto.APLValueMin min = 48;\n         */\n        min: APLValueMin;\n    } | {\n        oneofKind: \"currentTime\";\n        /**\n         * Encounter values\n         *\n         * @generated from protobuf field: proto.APLValueCurrentTime current_time = 7;\n         */\n        currentTime: APLValueCurrentTime;\n    } | {\n        oneofKind: \"currentTimePercent\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentTimePercent current_time_percent = 8;\n         */\n        currentTimePercent: APLValueCurrentTimePercent;\n    } | {\n        oneofKind: \"remainingTime\";\n        /**\n         * @generated from protobuf field: proto.APLValueRemainingTime remaining_time = 9;\n         */\n        remainingTime: APLValueRemainingTime;\n    } | {\n        oneofKind: \"remainingTimePercent\";\n        /**\n         * @generated from protobuf field: proto.APLValueRemainingTimePercent remaining_time_percent = 10;\n         */\n        remainingTimePercent: APLValueRemainingTimePercent;\n    } | {\n        oneofKind: \"isExecutePhase\";\n        /**\n         * @generated from protobuf field: proto.APLValueIsExecutePhase is_execute_phase = 41;\n         */\n        isExecutePhase: APLValueIsExecutePhase;\n    } | {\n        oneofKind: \"numberTargets\";\n        /**\n         * @generated from protobuf field: proto.APLValueNumberTargets number_targets = 28;\n         */\n        numberTargets: APLValueNumberTargets;\n    } | {\n        oneofKind: \"bossSpellTimeToReady\";\n        /**\n         * Boss values\n         *\n         * @generated from protobuf field: proto.APLValueBossSpellTimeToReady boss_spell_time_to_ready = 64;\n         */\n        bossSpellTimeToReady: APLValueBossSpellTimeToReady;\n    } | {\n        oneofKind: \"bossSpellIsCasting\";\n        /**\n         * @generated from protobuf field: proto.APLValueBossSpellIsCasting boss_spell_is_casting = 65;\n         */\n        bossSpellIsCasting: APLValueBossSpellIsCasting;\n    } | {\n        oneofKind: \"currentHealth\";\n        /**\n         * Resource values\n         *\n         * @generated from protobuf field: proto.APLValueCurrentHealth current_health = 26;\n         */\n        currentHealth: APLValueCurrentHealth;\n    } | {\n        oneofKind: \"currentHealthPercent\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentHealthPercent current_health_percent = 27;\n         */\n        currentHealthPercent: APLValueCurrentHealthPercent;\n    } | {\n        oneofKind: \"currentMana\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentMana current_mana = 11;\n         */\n        currentMana: APLValueCurrentMana;\n    } | {\n        oneofKind: \"currentManaPercent\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentManaPercent current_mana_percent = 12;\n         */\n        currentManaPercent: APLValueCurrentManaPercent;\n    } | {\n        oneofKind: \"currentRage\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentRage current_rage = 14;\n         */\n        currentRage: APLValueCurrentRage;\n    } | {\n        oneofKind: \"currentEnergy\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentEnergy current_energy = 15;\n         */\n        currentEnergy: APLValueCurrentEnergy;\n    } | {\n        oneofKind: \"currentFocus\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentFocus current_focus = 66;\n         */\n        currentFocus: APLValueCurrentFocus;\n    } | {\n        oneofKind: \"currentComboPoints\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentComboPoints current_combo_points = 16;\n         */\n        currentComboPoints: APLValueCurrentComboPoints;\n    } | {\n        oneofKind: \"currentRunicPower\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentRunicPower current_runic_power = 25;\n         */\n        currentRunicPower: APLValueCurrentRunicPower;\n    } | {\n        oneofKind: \"currentRuneCount\";\n        /**\n         * Rune Resource values\n         *\n         * @generated from protobuf field: proto.APLValueCurrentRuneCount current_rune_count = 29;\n         */\n        currentRuneCount: APLValueCurrentRuneCount;\n    } | {\n        oneofKind: \"currentNonDeathRuneCount\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentNonDeathRuneCount current_non_death_rune_count = 34;\n         */\n        currentNonDeathRuneCount: APLValueCurrentNonDeathRuneCount;\n    } | {\n        oneofKind: \"currentRuneDeath\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentRuneDeath current_rune_death = 30;\n         */\n        currentRuneDeath: APLValueCurrentRuneDeath;\n    } | {\n        oneofKind: \"currentRuneActive\";\n        /**\n         * @generated from protobuf field: proto.APLValueCurrentRuneActive current_rune_active = 31;\n         */\n        currentRuneActive: APLValueCurrentRuneActive;\n    } | {\n        oneofKind: \"runeCooldown\";\n        /**\n         * @generated from protobuf field: proto.APLValueRuneCooldown rune_cooldown = 32;\n         */\n        runeCooldown: APLValueRuneCooldown;\n    } | {\n        oneofKind: \"nextRuneCooldown\";\n        /**\n         * @generated from protobuf field: proto.APLValueNextRuneCooldown next_rune_cooldown = 33;\n         */\n        nextRuneCooldown: APLValueNextRuneCooldown;\n    } | {\n        oneofKind: \"runeSlotCooldown\";\n        /**\n         * @generated from protobuf field: proto.APLValueRuneSlotCooldown rune_slot_cooldown = 53;\n         */\n        runeSlotCooldown: APLValueRuneSlotCooldown;\n    } | {\n        oneofKind: \"runeGrace\";\n        /**\n         * @generated from protobuf field: proto.APLValueRuneGrace rune_grace = 54;\n         */\n        runeGrace: APLValueRuneGrace;\n    } | {\n        oneofKind: \"runeSlotGrace\";\n        /**\n         * @generated from protobuf field: proto.APLValueRuneSlotGrace rune_slot_grace = 55;\n         */\n        runeSlotGrace: APLValueRuneSlotGrace;\n    } | {\n        oneofKind: \"gcdIsReady\";\n        /**\n         * GCD values\n         *\n         * @generated from protobuf field: proto.APLValueGCDIsReady gcd_is_ready = 17;\n         */\n        gcdIsReady: APLValueGCDIsReady;\n    } | {\n        oneofKind: \"gcdTimeToReady\";\n        /**\n         * @generated from protobuf field: proto.APLValueGCDTimeToReady gcd_time_to_ready = 18;\n         */\n        gcdTimeToReady: APLValueGCDTimeToReady;\n    } | {\n        oneofKind: \"autoTimeToNext\";\n        /**\n         * Autoattack values\n         *\n         * @generated from protobuf field: proto.APLValueAutoTimeToNext auto_time_to_next = 40;\n         */\n        autoTimeToNext: APLValueAutoTimeToNext;\n    } | {\n        oneofKind: \"spellCanCast\";\n        /**\n         * Spell values\n         *\n         * @generated from protobuf field: proto.APLValueSpellCanCast spell_can_cast = 19;\n         */\n        spellCanCast: APLValueSpellCanCast;\n    } | {\n        oneofKind: \"spellIsReady\";\n        /**\n         * @generated from protobuf field: proto.APLValueSpellIsReady spell_is_ready = 20;\n         */\n        spellIsReady: APLValueSpellIsReady;\n    } | {\n        oneofKind: \"spellTimeToReady\";\n        /**\n         * @generated from protobuf field: proto.APLValueSpellTimeToReady spell_time_to_ready = 21;\n         */\n        spellTimeToReady: APLValueSpellTimeToReady;\n    } | {\n        oneofKind: \"spellCastTime\";\n        /**\n         * @generated from protobuf field: proto.APLValueSpellCastTime spell_cast_time = 35;\n         */\n        spellCastTime: APLValueSpellCastTime;\n    } | {\n        oneofKind: \"spellTravelTime\";\n        /**\n         * @generated from protobuf field: proto.APLValueSpellTravelTime spell_travel_time = 37;\n         */\n        spellTravelTime: APLValueSpellTravelTime;\n    } | {\n        oneofKind: \"spellCpm\";\n        /**\n         * @generated from protobuf field: proto.APLValueSpellCPM spell_cpm = 42;\n         */\n        spellCpm: APLValueSpellCPM;\n    } | {\n        oneofKind: \"spellIsChanneling\";\n        /**\n         * @generated from protobuf field: proto.APLValueSpellIsChanneling spell_is_channeling = 56;\n         */\n        spellIsChanneling: APLValueSpellIsChanneling;\n    } | {\n        oneofKind: \"spellChanneledTicks\";\n        /**\n         * @generated from protobuf field: proto.APLValueSpellChanneledTicks spell_channeled_ticks = 57;\n         */\n        spellChanneledTicks: APLValueSpellChanneledTicks;\n    } | {\n        oneofKind: \"spellCurrentCost\";\n        /**\n         * @generated from protobuf field: proto.APLValueSpellCurrentCost spell_current_cost = 62;\n         */\n        spellCurrentCost: APLValueSpellCurrentCost;\n    } | {\n        oneofKind: \"auraIsActive\";\n        /**\n         * Aura values\n         *\n         * @generated from protobuf field: proto.APLValueAuraIsActive aura_is_active = 22;\n         */\n        auraIsActive: APLValueAuraIsActive;\n    } | {\n        oneofKind: \"auraIsActiveWithReactionTime\";\n        /**\n         * @generated from protobuf field: proto.APLValueAuraIsActiveWithReactionTime aura_is_active_with_reaction_time = 50;\n         */\n        auraIsActiveWithReactionTime: APLValueAuraIsActiveWithReactionTime;\n    } | {\n        oneofKind: \"auraRemainingTime\";\n        /**\n         * @generated from protobuf field: proto.APLValueAuraRemainingTime aura_remaining_time = 23;\n         */\n        auraRemainingTime: APLValueAuraRemainingTime;\n    } | {\n        oneofKind: \"auraNumStacks\";\n        /**\n         * @generated from protobuf field: proto.APLValueAuraNumStacks aura_num_stacks = 24;\n         */\n        auraNumStacks: APLValueAuraNumStacks;\n    } | {\n        oneofKind: \"auraInternalCooldown\";\n        /**\n         * @generated from protobuf field: proto.APLValueAuraInternalCooldown aura_internal_cooldown = 39;\n         */\n        auraInternalCooldown: APLValueAuraInternalCooldown;\n    } | {\n        oneofKind: \"auraIcdIsReadyWithReactionTime\";\n        /**\n         * @generated from protobuf field: proto.APLValueAuraICDIsReadyWithReactionTime aura_icd_is_ready_with_reaction_time = 51;\n         */\n        auraIcdIsReadyWithReactionTime: APLValueAuraICDIsReadyWithReactionTime;\n    } | {\n        oneofKind: \"auraShouldRefresh\";\n        /**\n         * @generated from protobuf field: proto.APLValueAuraShouldRefresh aura_should_refresh = 43;\n         */\n        auraShouldRefresh: APLValueAuraShouldRefresh;\n    } | {\n        oneofKind: \"dotIsActive\";\n        /**\n         * Dot values\n         *\n         * @generated from protobuf field: proto.APLValueDotIsActive dot_is_active = 6;\n         */\n        dotIsActive: APLValueDotIsActive;\n    } | {\n        oneofKind: \"dotRemainingTime\";\n        /**\n         * @generated from protobuf field: proto.APLValueDotRemainingTime dot_remaining_time = 13;\n         */\n        dotRemainingTime: APLValueDotRemainingTime;\n    } | {\n        oneofKind: \"sequenceIsComplete\";\n        /**\n         * Sequence values\n         *\n         * @generated from protobuf field: proto.APLValueSequenceIsComplete sequence_is_complete = 44;\n         */\n        sequenceIsComplete: APLValueSequenceIsComplete;\n    } | {\n        oneofKind: \"sequenceIsReady\";\n        /**\n         * @generated from protobuf field: proto.APLValueSequenceIsReady sequence_is_ready = 45;\n         */\n        sequenceIsReady: APLValueSequenceIsReady;\n    } | {\n        oneofKind: \"sequenceTimeToReady\";\n        /**\n         * @generated from protobuf field: proto.APLValueSequenceTimeToReady sequence_time_to_ready = 46;\n         */\n        sequenceTimeToReady: APLValueSequenceTimeToReady;\n    } | {\n        oneofKind: \"channelClipDelay\";\n        /**\n         * Properties\n         *\n         * @generated from protobuf field: proto.APLValueChannelClipDelay channel_clip_delay = 58;\n         */\n        channelClipDelay: APLValueChannelClipDelay;\n    } | {\n        oneofKind: \"frontOfTarget\";\n        /**\n         * @generated from protobuf field: proto.APLValueFrontOfTarget front_of_target = 63;\n         */\n        frontOfTarget: APLValueFrontOfTarget;\n    } | {\n        oneofKind: \"totemRemainingTime\";\n        /**\n         * Class or Spec-specific values\n         *\n         * @generated from protobuf field: proto.APLValueTotemRemainingTime totem_remaining_time = 49;\n         */\n        totemRemainingTime: APLValueTotemRemainingTime;\n    } | {\n        oneofKind: \"catExcessEnergy\";\n        /**\n         * @generated from protobuf field: proto.APLValueCatExcessEnergy cat_excess_energy = 52;\n         */\n        catExcessEnergy: APLValueCatExcessEnergy;\n    } | {\n        oneofKind: \"catNewSavageRoarDuration\";\n        /**\n         * @generated from protobuf field: proto.APLValueCatNewSavageRoarDuration cat_new_savage_roar_duration = 61;\n         */\n        catNewSavageRoarDuration: APLValueCatNewSavageRoarDuration;\n    } | {\n        oneofKind: \"warlockShouldRecastDrainSoul\";\n        /**\n         * @generated from protobuf field: proto.APLValueWarlockShouldRecastDrainSoul warlock_should_recast_drain_soul = 59;\n         */\n        warlockShouldRecastDrainSoul: APLValueWarlockShouldRecastDrainSoul;\n    } | {\n        oneofKind: \"warlockShouldRefreshCorruption\";\n        /**\n         * @generated from protobuf field: proto.APLValueWarlockShouldRefreshCorruption warlock_should_refresh_corruption = 60;\n         */\n        warlockShouldRefreshCorruption: APLValueWarlockShouldRefreshCorruption;\n    } | {\n        oneofKind: undefined;\n    };\n}\n// /////////////////////////////////////////////////////////////////////////\n//                                 ACTIONS\n// /////////////////////////////////////////////////////////////////////////\n\n/**\n * @generated from protobuf message proto.APLActionCastSpell\n */\nexport interface APLActionCastSpell {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n    /**\n     * @generated from protobuf field: proto.UnitReference target = 2;\n     */\n    target?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.APLActionChannelSpell\n */\nexport interface APLActionChannelSpell {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n    /**\n     * @generated from protobuf field: proto.UnitReference target = 2;\n     */\n    target?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.APLValue interrupt_if = 3;\n     */\n    interruptIf?: APLValue;\n    /**\n     * @generated from protobuf field: bool allow_recast = 5;\n     */\n    allowRecast: boolean;\n}\n/**\n * @generated from protobuf message proto.APLActionMultidot\n */\nexport interface APLActionMultidot {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n    /**\n     * @generated from protobuf field: int32 max_dots = 2;\n     */\n    maxDots: number;\n    /**\n     * @generated from protobuf field: proto.APLValue max_overlap = 3;\n     */\n    maxOverlap?: APLValue;\n}\n/**\n * @generated from protobuf message proto.APLActionMultishield\n */\nexport interface APLActionMultishield {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n    /**\n     * @generated from protobuf field: int32 max_shields = 2;\n     */\n    maxShields: number;\n    /**\n     * @generated from protobuf field: proto.APLValue max_overlap = 3;\n     */\n    maxOverlap?: APLValue;\n}\n/**\n * @generated from protobuf message proto.APLActionAutocastOtherCooldowns\n */\nexport interface APLActionAutocastOtherCooldowns {\n}\n/**\n * @generated from protobuf message proto.APLActionWait\n */\nexport interface APLActionWait {\n    /**\n     * @generated from protobuf field: proto.APLValue duration = 1;\n     */\n    duration?: APLValue;\n}\n/**\n * @generated from protobuf message proto.APLActionWaitUntil\n */\nexport interface APLActionWaitUntil {\n    /**\n     * @generated from protobuf field: proto.APLValue condition = 1;\n     */\n    condition?: APLValue;\n}\n/**\n * @generated from protobuf message proto.APLActionSchedule\n */\nexport interface APLActionSchedule {\n    /**\n     * Comma-separated list of times, e.g. '0s, 30s, 60s'\n     *\n     * @generated from protobuf field: string schedule = 1;\n     */\n    schedule: string;\n    /**\n     * @generated from protobuf field: proto.APLAction inner_action = 2;\n     */\n    innerAction?: APLAction;\n}\n/**\n * @generated from protobuf message proto.APLActionSequence\n */\nexport interface APLActionSequence {\n    /**\n     * @generated from protobuf field: string name = 1;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: repeated proto.APLAction actions = 2;\n     */\n    actions: APLAction[];\n}\n/**\n * @generated from protobuf message proto.APLActionResetSequence\n */\nexport interface APLActionResetSequence {\n    /**\n     * @generated from protobuf field: string sequence_name = 1;\n     */\n    sequenceName: string;\n}\n/**\n * @generated from protobuf message proto.APLActionStrictSequence\n */\nexport interface APLActionStrictSequence {\n    /**\n     * @generated from protobuf field: repeated proto.APLAction actions = 1;\n     */\n    actions: APLAction[];\n}\n/**\n * @generated from protobuf message proto.APLActionChangeTarget\n */\nexport interface APLActionChangeTarget {\n    /**\n     * @generated from protobuf field: proto.UnitReference new_target = 1;\n     */\n    newTarget?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.APLActionCancelAura\n */\nexport interface APLActionCancelAura {\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLActionActivateAura\n */\nexport interface APLActionActivateAura {\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLActionTriggerICD\n */\nexport interface APLActionTriggerICD {\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLActionItemSwap\n */\nexport interface APLActionItemSwap {\n    /**\n     * The set to swap to.\n     *\n     * @generated from protobuf field: proto.APLActionItemSwap.SwapSet swap_set = 1;\n     */\n    swapSet: APLActionItemSwap_SwapSet;\n}\n/**\n * @generated from protobuf enum proto.APLActionItemSwap.SwapSet\n */\nexport enum APLActionItemSwap_SwapSet {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: Main = 1;\n     */\n    Main = 1,\n    /**\n     * @generated from protobuf enum value: Swap1 = 2;\n     */\n    Swap1 = 2\n}\n/**\n * @generated from protobuf message proto.APLActionCatOptimalRotationAction\n */\nexport interface APLActionCatOptimalRotationAction {\n    /**\n     * @generated from protobuf field: proto.FeralDruid.Rotation.AplType rotation_type = 1;\n     */\n    rotationType: FeralDruid_Rotation_AplType;\n    /**\n     * @generated from protobuf field: bool manual_params = 2;\n     */\n    manualParams: boolean;\n    /**\n     * @generated from protobuf field: float max_ff_delay = 3;\n     */\n    maxFfDelay: number;\n    /**\n     * @generated from protobuf field: float min_roar_offset = 4;\n     */\n    minRoarOffset: number;\n    /**\n     * @generated from protobuf field: int32 rip_leeway = 5;\n     */\n    ripLeeway: number;\n    /**\n     * @generated from protobuf field: bool use_rake = 6;\n     */\n    useRake: boolean;\n    /**\n     * @generated from protobuf field: bool use_bite = 7;\n     */\n    useBite: boolean;\n    /**\n     * @generated from protobuf field: float bite_time = 8;\n     */\n    biteTime: number;\n    /**\n     * @generated from protobuf field: bool flower_weave = 9;\n     */\n    flowerWeave: boolean;\n}\n/**\n * @generated from protobuf message proto.APLActionCustomRotation\n */\nexport interface APLActionCustomRotation {\n}\n/**\n * @generated from protobuf message proto.APLValueConst\n */\nexport interface APLValueConst {\n    /**\n     * @generated from protobuf field: string val = 1;\n     */\n    val: string;\n}\n/**\n * @generated from protobuf message proto.APLValueAnd\n */\nexport interface APLValueAnd {\n    /**\n     * @generated from protobuf field: repeated proto.APLValue vals = 1;\n     */\n    vals: APLValue[];\n}\n/**\n * @generated from protobuf message proto.APLValueOr\n */\nexport interface APLValueOr {\n    /**\n     * @generated from protobuf field: repeated proto.APLValue vals = 1;\n     */\n    vals: APLValue[];\n}\n/**\n * @generated from protobuf message proto.APLValueNot\n */\nexport interface APLValueNot {\n    /**\n     * @generated from protobuf field: proto.APLValue val = 1;\n     */\n    val?: APLValue;\n}\n/**\n * @generated from protobuf message proto.APLValueCompare\n */\nexport interface APLValueCompare {\n    /**\n     * @generated from protobuf field: proto.APLValueCompare.ComparisonOperator op = 1;\n     */\n    op: APLValueCompare_ComparisonOperator;\n    /**\n     * @generated from protobuf field: proto.APLValue lhs = 2;\n     */\n    lhs?: APLValue;\n    /**\n     * @generated from protobuf field: proto.APLValue rhs = 3;\n     */\n    rhs?: APLValue;\n}\n/**\n * @generated from protobuf enum proto.APLValueCompare.ComparisonOperator\n */\nexport enum APLValueCompare_ComparisonOperator {\n    /**\n     * @generated from protobuf enum value: OpUnknown = 0;\n     */\n    OpUnknown = 0,\n    /**\n     * Equals\n     *\n     * @generated from protobuf enum value: OpEq = 1;\n     */\n    OpEq = 1,\n    /**\n     * Not equals\n     *\n     * @generated from protobuf enum value: OpNe = 2;\n     */\n    OpNe = 2,\n    /**\n     * Less than\n     *\n     * @generated from protobuf enum value: OpLt = 3;\n     */\n    OpLt = 3,\n    /**\n     * Less than or equal\n     *\n     * @generated from protobuf enum value: OpLe = 4;\n     */\n    OpLe = 4,\n    /**\n     * Greater than\n     *\n     * @generated from protobuf enum value: OpGt = 5;\n     */\n    OpGt = 5,\n    /**\n     * Greater than or equal\n     *\n     * @generated from protobuf enum value: OpGe = 6;\n     */\n    OpGe = 6\n}\n/**\n * @generated from protobuf message proto.APLValueMath\n */\nexport interface APLValueMath {\n    /**\n     * @generated from protobuf field: proto.APLValueMath.MathOperator op = 1;\n     */\n    op: APLValueMath_MathOperator;\n    /**\n     * @generated from protobuf field: proto.APLValue lhs = 2;\n     */\n    lhs?: APLValue;\n    /**\n     * @generated from protobuf field: proto.APLValue rhs = 3;\n     */\n    rhs?: APLValue;\n}\n/**\n * @generated from protobuf enum proto.APLValueMath.MathOperator\n */\nexport enum APLValueMath_MathOperator {\n    /**\n     * @generated from protobuf enum value: OpUnknown = 0;\n     */\n    OpUnknown = 0,\n    /**\n     * Add\n     *\n     * @generated from protobuf enum value: OpAdd = 1;\n     */\n    OpAdd = 1,\n    /**\n     * Subtract\n     *\n     * @generated from protobuf enum value: OpSub = 2;\n     */\n    OpSub = 2,\n    /**\n     * Multiply\n     *\n     * @generated from protobuf enum value: OpMul = 3;\n     */\n    OpMul = 3,\n    /**\n     * Divide\n     *\n     * @generated from protobuf enum value: OpDiv = 4;\n     */\n    OpDiv = 4\n}\n/**\n * @generated from protobuf message proto.APLValueMax\n */\nexport interface APLValueMax {\n    /**\n     * @generated from protobuf field: repeated proto.APLValue vals = 1;\n     */\n    vals: APLValue[];\n}\n/**\n * @generated from protobuf message proto.APLValueMin\n */\nexport interface APLValueMin {\n    /**\n     * @generated from protobuf field: repeated proto.APLValue vals = 1;\n     */\n    vals: APLValue[];\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentTime\n */\nexport interface APLValueCurrentTime {\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentTimePercent\n */\nexport interface APLValueCurrentTimePercent {\n}\n/**\n * @generated from protobuf message proto.APLValueRemainingTime\n */\nexport interface APLValueRemainingTime {\n}\n/**\n * @generated from protobuf message proto.APLValueRemainingTimePercent\n */\nexport interface APLValueRemainingTimePercent {\n}\n/**\n * @generated from protobuf message proto.APLValueNumberTargets\n */\nexport interface APLValueNumberTargets {\n}\n/**\n * @generated from protobuf message proto.APLValueIsExecutePhase\n */\nexport interface APLValueIsExecutePhase {\n    /**\n     * @generated from protobuf field: proto.APLValueIsExecutePhase.ExecutePhaseThreshold threshold = 1;\n     */\n    threshold: APLValueIsExecutePhase_ExecutePhaseThreshold;\n}\n/**\n * @generated from protobuf enum proto.APLValueIsExecutePhase.ExecutePhaseThreshold\n */\nexport enum APLValueIsExecutePhase_ExecutePhaseThreshold {\n    /**\n     * @generated from protobuf enum value: Unknown = 0;\n     */\n    Unknown = 0,\n    /**\n     * @generated from protobuf enum value: E20 = 1;\n     */\n    E20 = 1,\n    /**\n     * @generated from protobuf enum value: E25 = 2;\n     */\n    E25 = 2,\n    /**\n     * @generated from protobuf enum value: E35 = 3;\n     */\n    E35 = 3\n}\n/**\n * @generated from protobuf message proto.APLValueBossSpellTimeToReady\n */\nexport interface APLValueBossSpellTimeToReady {\n    /**\n     * @generated from protobuf field: proto.UnitReference target_unit = 1;\n     */\n    targetUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 2;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueBossSpellIsCasting\n */\nexport interface APLValueBossSpellIsCasting {\n    /**\n     * @generated from protobuf field: proto.UnitReference target_unit = 1;\n     */\n    targetUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 2;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentHealth\n */\nexport interface APLValueCurrentHealth {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 1;\n     */\n    sourceUnit?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentHealthPercent\n */\nexport interface APLValueCurrentHealthPercent {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 1;\n     */\n    sourceUnit?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentMana\n */\nexport interface APLValueCurrentMana {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 1;\n     */\n    sourceUnit?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentManaPercent\n */\nexport interface APLValueCurrentManaPercent {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 1;\n     */\n    sourceUnit?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentRage\n */\nexport interface APLValueCurrentRage {\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentEnergy\n */\nexport interface APLValueCurrentEnergy {\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentFocus\n */\nexport interface APLValueCurrentFocus {\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentComboPoints\n */\nexport interface APLValueCurrentComboPoints {\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentRunicPower\n */\nexport interface APLValueCurrentRunicPower {\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentRuneCount\n */\nexport interface APLValueCurrentRuneCount {\n    /**\n     * @generated from protobuf field: proto.APLValueRuneType rune_type = 1;\n     */\n    runeType: APLValueRuneType;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentNonDeathRuneCount\n */\nexport interface APLValueCurrentNonDeathRuneCount {\n    /**\n     * @generated from protobuf field: proto.APLValueRuneType rune_type = 1;\n     */\n    runeType: APLValueRuneType;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentRuneDeath\n */\nexport interface APLValueCurrentRuneDeath {\n    /**\n     * @generated from protobuf field: proto.APLValueRuneSlot rune_slot = 1;\n     */\n    runeSlot: APLValueRuneSlot;\n}\n/**\n * @generated from protobuf message proto.APLValueCurrentRuneActive\n */\nexport interface APLValueCurrentRuneActive {\n    /**\n     * @generated from protobuf field: proto.APLValueRuneSlot rune_slot = 1;\n     */\n    runeSlot: APLValueRuneSlot;\n}\n/**\n * @generated from protobuf message proto.APLValueRuneCooldown\n */\nexport interface APLValueRuneCooldown {\n    /**\n     * @generated from protobuf field: proto.APLValueRuneType rune_type = 1;\n     */\n    runeType: APLValueRuneType;\n}\n/**\n * @generated from protobuf message proto.APLValueNextRuneCooldown\n */\nexport interface APLValueNextRuneCooldown {\n    /**\n     * @generated from protobuf field: proto.APLValueRuneType rune_type = 1;\n     */\n    runeType: APLValueRuneType;\n}\n/**\n * @generated from protobuf message proto.APLValueRuneSlotCooldown\n */\nexport interface APLValueRuneSlotCooldown {\n    /**\n     * @generated from protobuf field: proto.APLValueRuneSlot rune_slot = 1;\n     */\n    runeSlot: APLValueRuneSlot;\n}\n/**\n * @generated from protobuf message proto.APLValueRuneGrace\n */\nexport interface APLValueRuneGrace {\n    /**\n     * @generated from protobuf field: proto.APLValueRuneType rune_type = 1;\n     */\n    runeType: APLValueRuneType;\n}\n/**\n * @generated from protobuf message proto.APLValueRuneSlotGrace\n */\nexport interface APLValueRuneSlotGrace {\n    /**\n     * @generated from protobuf field: proto.APLValueRuneType rune_slot = 1;\n     */\n    runeSlot: APLValueRuneType;\n}\n/**\n * @generated from protobuf message proto.APLValueGCDIsReady\n */\nexport interface APLValueGCDIsReady {\n}\n/**\n * @generated from protobuf message proto.APLValueGCDTimeToReady\n */\nexport interface APLValueGCDTimeToReady {\n}\n/**\n * @generated from protobuf message proto.APLValueAutoTimeToNext\n */\nexport interface APLValueAutoTimeToNext {\n}\n/**\n * @generated from protobuf message proto.APLValueSpellCanCast\n */\nexport interface APLValueSpellCanCast {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueSpellIsReady\n */\nexport interface APLValueSpellIsReady {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueSpellTimeToReady\n */\nexport interface APLValueSpellTimeToReady {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueSpellCastTime\n */\nexport interface APLValueSpellCastTime {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueChannelClipDelay\n */\nexport interface APLValueChannelClipDelay {\n}\n/**\n * @generated from protobuf message proto.APLValueFrontOfTarget\n */\nexport interface APLValueFrontOfTarget {\n}\n/**\n * @generated from protobuf message proto.APLValueSpellTravelTime\n */\nexport interface APLValueSpellTravelTime {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueSpellCPM\n */\nexport interface APLValueSpellCPM {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueSpellIsChanneling\n */\nexport interface APLValueSpellIsChanneling {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueSpellChanneledTicks\n */\nexport interface APLValueSpellChanneledTicks {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueSpellCurrentCost\n */\nexport interface APLValueSpellCurrentCost {\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueAuraIsActive\n */\nexport interface APLValueAuraIsActive {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 2;\n     */\n    sourceUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueAuraIsActiveWithReactionTime\n */\nexport interface APLValueAuraIsActiveWithReactionTime {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 2;\n     */\n    sourceUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueAuraRemainingTime\n */\nexport interface APLValueAuraRemainingTime {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 2;\n     */\n    sourceUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueAuraNumStacks\n */\nexport interface APLValueAuraNumStacks {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 2;\n     */\n    sourceUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueAuraInternalCooldown\n */\nexport interface APLValueAuraInternalCooldown {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 2;\n     */\n    sourceUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueAuraICDIsReadyWithReactionTime\n */\nexport interface APLValueAuraICDIsReadyWithReactionTime {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 2;\n     */\n    sourceUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueAuraShouldRefresh\n */\nexport interface APLValueAuraShouldRefresh {\n    /**\n     * @generated from protobuf field: proto.UnitReference source_unit = 2;\n     */\n    sourceUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID aura_id = 1;\n     */\n    auraId?: ActionID;\n    /**\n     * @generated from protobuf field: proto.APLValue max_overlap = 3;\n     */\n    maxOverlap?: APLValue;\n}\n/**\n * @generated from protobuf message proto.APLValueDotIsActive\n */\nexport interface APLValueDotIsActive {\n    /**\n     * @generated from protobuf field: proto.UnitReference target_unit = 2;\n     */\n    targetUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueDotRemainingTime\n */\nexport interface APLValueDotRemainingTime {\n    /**\n     * @generated from protobuf field: proto.UnitReference target_unit = 2;\n     */\n    targetUnit?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.ActionID spell_id = 1;\n     */\n    spellId?: ActionID;\n}\n/**\n * @generated from protobuf message proto.APLValueSequenceIsComplete\n */\nexport interface APLValueSequenceIsComplete {\n    /**\n     * @generated from protobuf field: string sequence_name = 1;\n     */\n    sequenceName: string;\n}\n/**\n * @generated from protobuf message proto.APLValueSequenceIsReady\n */\nexport interface APLValueSequenceIsReady {\n    /**\n     * @generated from protobuf field: string sequence_name = 1;\n     */\n    sequenceName: string;\n}\n/**\n * @generated from protobuf message proto.APLValueSequenceTimeToReady\n */\nexport interface APLValueSequenceTimeToReady {\n    /**\n     * @generated from protobuf field: string sequence_name = 1;\n     */\n    sequenceName: string;\n}\n/**\n * @generated from protobuf message proto.APLValueTotemRemainingTime\n */\nexport interface APLValueTotemRemainingTime {\n    /**\n     * @generated from protobuf field: proto.ShamanTotems.TotemType totem_type = 1;\n     */\n    totemType: ShamanTotems_TotemType;\n}\n/**\n * @generated from protobuf message proto.APLValueCatExcessEnergy\n */\nexport interface APLValueCatExcessEnergy {\n}\n/**\n * @generated from protobuf message proto.APLValueCatNewSavageRoarDuration\n */\nexport interface APLValueCatNewSavageRoarDuration {\n}\n/**\n * @generated from protobuf message proto.APLValueWarlockShouldRecastDrainSoul\n */\nexport interface APLValueWarlockShouldRecastDrainSoul {\n}\n/**\n * @generated from protobuf message proto.APLValueWarlockShouldRefreshCorruption\n */\nexport interface APLValueWarlockShouldRefreshCorruption {\n    /**\n     * @generated from protobuf field: proto.UnitReference target_unit = 1;\n     */\n    targetUnit?: UnitReference;\n}\n// /////////////////////////////////////////////////////////////////////////\n//                                  VALUES\n// /////////////////////////////////////////////////////////////////////////\n\n/**\n * @generated from protobuf enum proto.APLValueType\n */\nexport enum APLValueType {\n    /**\n     * @generated from protobuf enum value: ValueTypeUnknown = 0;\n     */\n    ValueTypeUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ValueTypeBool = 1;\n     */\n    ValueTypeBool = 1,\n    /**\n     * @generated from protobuf enum value: ValueTypeInt = 2;\n     */\n    ValueTypeInt = 2,\n    /**\n     * @generated from protobuf enum value: ValueTypeFloat = 3;\n     */\n    ValueTypeFloat = 3,\n    /**\n     * @generated from protobuf enum value: ValueTypeDuration = 4;\n     */\n    ValueTypeDuration = 4,\n    /**\n     * @generated from protobuf enum value: ValueTypeString = 5;\n     */\n    ValueTypeString = 5\n}\n/**\n * @generated from protobuf enum proto.APLValueRuneType\n */\nexport enum APLValueRuneType {\n    /**\n     * @generated from protobuf enum value: RuneUnknown = 0;\n     */\n    RuneUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RuneBlood = 1;\n     */\n    RuneBlood = 1,\n    /**\n     * @generated from protobuf enum value: RuneFrost = 2;\n     */\n    RuneFrost = 2,\n    /**\n     * @generated from protobuf enum value: RuneUnholy = 3;\n     */\n    RuneUnholy = 3,\n    /**\n     * @generated from protobuf enum value: RuneDeath = 4;\n     */\n    RuneDeath = 4\n}\n/**\n * @generated from protobuf enum proto.APLValueRuneSlot\n */\nexport enum APLValueRuneSlot {\n    /**\n     * @generated from protobuf enum value: SlotUnknown = 0;\n     */\n    SlotUnknown = 0,\n    /**\n     * @generated from protobuf enum value: SlotLeftBlood = 1;\n     */\n    SlotLeftBlood = 1,\n    /**\n     * @generated from protobuf enum value: SlotRightBlood = 2;\n     */\n    SlotRightBlood = 2,\n    /**\n     * @generated from protobuf enum value: SlotLeftFrost = 3;\n     */\n    SlotLeftFrost = 3,\n    /**\n     * @generated from protobuf enum value: SlotRightFrost = 4;\n     */\n    SlotRightFrost = 4,\n    /**\n     * @generated from protobuf enum value: SlotLeftUnholy = 5;\n     */\n    SlotLeftUnholy = 5,\n    /**\n     * @generated from protobuf enum value: SlotRightUnholy = 6;\n     */\n    SlotRightUnholy = 6\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLRotation$Type extends MessageType<APLRotation> {\n    constructor() {\n        super(\"proto.APLRotation\", [\n            { no: 3, name: \"type\", kind: \"enum\", T: () => [\"proto.APLRotation.Type\", APLRotation_Type] },\n            { no: 4, name: \"simple\", kind: \"message\", T: () => SimpleRotation },\n            { no: 1, name: \"prepull_actions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLPrepullAction },\n            { no: 2, name: \"priority_list\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLListItem }\n        ]);\n    }\n    create(value?: PartialMessage<APLRotation>): APLRotation {\n        const message = { type: 0, prepullActions: [], priorityList: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLRotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLRotation): APLRotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLRotation.Type type */ 3:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.SimpleRotation simple */ 4:\n                    message.simple = SimpleRotation.internalBinaryRead(reader, reader.uint32(), options, message.simple);\n                    break;\n                case /* repeated proto.APLPrepullAction prepull_actions */ 1:\n                    message.prepullActions.push(APLPrepullAction.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.APLListItem priority_list */ 2:\n                    message.priorityList.push(APLListItem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLRotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLRotation.Type type = 3; */\n        if (message.type !== 0)\n            writer.tag(3, WireType.Varint).int32(message.type);\n        /* proto.SimpleRotation simple = 4; */\n        if (message.simple)\n            SimpleRotation.internalBinaryWrite(message.simple, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.APLPrepullAction prepull_actions = 1; */\n        for (let i = 0; i < message.prepullActions.length; i++)\n            APLPrepullAction.internalBinaryWrite(message.prepullActions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.APLListItem priority_list = 2; */\n        for (let i = 0; i < message.priorityList.length; i++)\n            APLListItem.internalBinaryWrite(message.priorityList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLRotation\n */\nexport const APLRotation = new APLRotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimpleRotation$Type extends MessageType<SimpleRotation> {\n    constructor() {\n        super(\"proto.SimpleRotation\", [\n            { no: 1, name: \"spec_rotation_json\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"cooldowns\", kind: \"message\", T: () => Cooldowns }\n        ]);\n    }\n    create(value?: PartialMessage<SimpleRotation>): SimpleRotation {\n        const message = { specRotationJson: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimpleRotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimpleRotation): SimpleRotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string spec_rotation_json */ 1:\n                    message.specRotationJson = reader.string();\n                    break;\n                case /* proto.Cooldowns cooldowns */ 2:\n                    message.cooldowns = Cooldowns.internalBinaryRead(reader, reader.uint32(), options, message.cooldowns);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimpleRotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string spec_rotation_json = 1; */\n        if (message.specRotationJson !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.specRotationJson);\n        /* proto.Cooldowns cooldowns = 2; */\n        if (message.cooldowns)\n            Cooldowns.internalBinaryWrite(message.cooldowns, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimpleRotation\n */\nexport const SimpleRotation = new SimpleRotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLPrepullAction$Type extends MessageType<APLPrepullAction> {\n    constructor() {\n        super(\"proto.APLPrepullAction\", [\n            { no: 1, name: \"action\", kind: \"message\", T: () => APLAction },\n            { no: 4, name: \"do_at_value\", kind: \"message\", T: () => APLValue },\n            { no: 3, name: \"hide\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLPrepullAction>): APLPrepullAction {\n        const message = { hide: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLPrepullAction>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLPrepullAction): APLPrepullAction {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLAction action */ 1:\n                    message.action = APLAction.internalBinaryRead(reader, reader.uint32(), options, message.action);\n                    break;\n                case /* proto.APLValue do_at_value */ 4:\n                    message.doAtValue = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.doAtValue);\n                    break;\n                case /* bool hide */ 3:\n                    message.hide = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLPrepullAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLAction action = 1; */\n        if (message.action)\n            APLAction.internalBinaryWrite(message.action, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValue do_at_value = 4; */\n        if (message.doAtValue)\n            APLValue.internalBinaryWrite(message.doAtValue, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* bool hide = 3; */\n        if (message.hide !== false)\n            writer.tag(3, WireType.Varint).bool(message.hide);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLPrepullAction\n */\nexport const APLPrepullAction = new APLPrepullAction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLListItem$Type extends MessageType<APLListItem> {\n    constructor() {\n        super(\"proto.APLListItem\", [\n            { no: 1, name: \"hide\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 2, name: \"notes\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"action\", kind: \"message\", T: () => APLAction }\n        ]);\n    }\n    create(value?: PartialMessage<APLListItem>): APLListItem {\n        const message = { hide: false, notes: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLListItem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLListItem): APLListItem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool hide */ 1:\n                    message.hide = reader.bool();\n                    break;\n                case /* string notes */ 2:\n                    message.notes = reader.string();\n                    break;\n                case /* proto.APLAction action */ 3:\n                    message.action = APLAction.internalBinaryRead(reader, reader.uint32(), options, message.action);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLListItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool hide = 1; */\n        if (message.hide !== false)\n            writer.tag(1, WireType.Varint).bool(message.hide);\n        /* string notes = 2; */\n        if (message.notes !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.notes);\n        /* proto.APLAction action = 3; */\n        if (message.action)\n            APLAction.internalBinaryWrite(message.action, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLListItem\n */\nexport const APLListItem = new APLListItem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLAction$Type extends MessageType<APLAction> {\n    constructor() {\n        super(\"proto.APLAction\", [\n            { no: 1, name: \"condition\", kind: \"message\", T: () => APLValue },\n            { no: 3, name: \"cast_spell\", kind: \"message\", oneof: \"action\", T: () => APLActionCastSpell },\n            { no: 16, name: \"channel_spell\", kind: \"message\", oneof: \"action\", T: () => APLActionChannelSpell },\n            { no: 8, name: \"multidot\", kind: \"message\", oneof: \"action\", T: () => APLActionMultidot },\n            { no: 12, name: \"multishield\", kind: \"message\", oneof: \"action\", T: () => APLActionMultishield },\n            { no: 7, name: \"autocast_other_cooldowns\", kind: \"message\", oneof: \"action\", T: () => APLActionAutocastOtherCooldowns },\n            { no: 4, name: \"wait\", kind: \"message\", oneof: \"action\", T: () => APLActionWait },\n            { no: 14, name: \"wait_until\", kind: \"message\", oneof: \"action\", T: () => APLActionWaitUntil },\n            { no: 15, name: \"schedule\", kind: \"message\", oneof: \"action\", T: () => APLActionSchedule },\n            { no: 2, name: \"sequence\", kind: \"message\", oneof: \"action\", T: () => APLActionSequence },\n            { no: 5, name: \"reset_sequence\", kind: \"message\", oneof: \"action\", T: () => APLActionResetSequence },\n            { no: 6, name: \"strict_sequence\", kind: \"message\", oneof: \"action\", T: () => APLActionStrictSequence },\n            { no: 9, name: \"change_target\", kind: \"message\", oneof: \"action\", T: () => APLActionChangeTarget },\n            { no: 13, name: \"activate_aura\", kind: \"message\", oneof: \"action\", T: () => APLActionActivateAura },\n            { no: 10, name: \"cancel_aura\", kind: \"message\", oneof: \"action\", T: () => APLActionCancelAura },\n            { no: 11, name: \"trigger_icd\", kind: \"message\", oneof: \"action\", T: () => APLActionTriggerICD },\n            { no: 17, name: \"item_swap\", kind: \"message\", oneof: \"action\", T: () => APLActionItemSwap },\n            { no: 18, name: \"cat_optimal_rotation_action\", kind: \"message\", oneof: \"action\", T: () => APLActionCatOptimalRotationAction },\n            { no: 19, name: \"custom_rotation\", kind: \"message\", oneof: \"action\", T: () => APLActionCustomRotation }\n        ]);\n    }\n    create(value?: PartialMessage<APLAction>): APLAction {\n        const message = { action: { oneofKind: undefined } };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLAction>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLAction): APLAction {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValue condition */ 1:\n                    message.condition = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.condition);\n                    break;\n                case /* proto.APLActionCastSpell cast_spell */ 3:\n                    message.action = {\n                        oneofKind: \"castSpell\",\n                        castSpell: APLActionCastSpell.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).castSpell)\n                    };\n                    break;\n                case /* proto.APLActionChannelSpell channel_spell */ 16:\n                    message.action = {\n                        oneofKind: \"channelSpell\",\n                        channelSpell: APLActionChannelSpell.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).channelSpell)\n                    };\n                    break;\n                case /* proto.APLActionMultidot multidot */ 8:\n                    message.action = {\n                        oneofKind: \"multidot\",\n                        multidot: APLActionMultidot.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).multidot)\n                    };\n                    break;\n                case /* proto.APLActionMultishield multishield */ 12:\n                    message.action = {\n                        oneofKind: \"multishield\",\n                        multishield: APLActionMultishield.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).multishield)\n                    };\n                    break;\n                case /* proto.APLActionAutocastOtherCooldowns autocast_other_cooldowns */ 7:\n                    message.action = {\n                        oneofKind: \"autocastOtherCooldowns\",\n                        autocastOtherCooldowns: APLActionAutocastOtherCooldowns.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).autocastOtherCooldowns)\n                    };\n                    break;\n                case /* proto.APLActionWait wait */ 4:\n                    message.action = {\n                        oneofKind: \"wait\",\n                        wait: APLActionWait.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).wait)\n                    };\n                    break;\n                case /* proto.APLActionWaitUntil wait_until */ 14:\n                    message.action = {\n                        oneofKind: \"waitUntil\",\n                        waitUntil: APLActionWaitUntil.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).waitUntil)\n                    };\n                    break;\n                case /* proto.APLActionSchedule schedule */ 15:\n                    message.action = {\n                        oneofKind: \"schedule\",\n                        schedule: APLActionSchedule.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).schedule)\n                    };\n                    break;\n                case /* proto.APLActionSequence sequence */ 2:\n                    message.action = {\n                        oneofKind: \"sequence\",\n                        sequence: APLActionSequence.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).sequence)\n                    };\n                    break;\n                case /* proto.APLActionResetSequence reset_sequence */ 5:\n                    message.action = {\n                        oneofKind: \"resetSequence\",\n                        resetSequence: APLActionResetSequence.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).resetSequence)\n                    };\n                    break;\n                case /* proto.APLActionStrictSequence strict_sequence */ 6:\n                    message.action = {\n                        oneofKind: \"strictSequence\",\n                        strictSequence: APLActionStrictSequence.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).strictSequence)\n                    };\n                    break;\n                case /* proto.APLActionChangeTarget change_target */ 9:\n                    message.action = {\n                        oneofKind: \"changeTarget\",\n                        changeTarget: APLActionChangeTarget.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).changeTarget)\n                    };\n                    break;\n                case /* proto.APLActionActivateAura activate_aura */ 13:\n                    message.action = {\n                        oneofKind: \"activateAura\",\n                        activateAura: APLActionActivateAura.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).activateAura)\n                    };\n                    break;\n                case /* proto.APLActionCancelAura cancel_aura */ 10:\n                    message.action = {\n                        oneofKind: \"cancelAura\",\n                        cancelAura: APLActionCancelAura.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).cancelAura)\n                    };\n                    break;\n                case /* proto.APLActionTriggerICD trigger_icd */ 11:\n                    message.action = {\n                        oneofKind: \"triggerIcd\",\n                        triggerIcd: APLActionTriggerICD.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).triggerIcd)\n                    };\n                    break;\n                case /* proto.APLActionItemSwap item_swap */ 17:\n                    message.action = {\n                        oneofKind: \"itemSwap\",\n                        itemSwap: APLActionItemSwap.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).itemSwap)\n                    };\n                    break;\n                case /* proto.APLActionCatOptimalRotationAction cat_optimal_rotation_action */ 18:\n                    message.action = {\n                        oneofKind: \"catOptimalRotationAction\",\n                        catOptimalRotationAction: APLActionCatOptimalRotationAction.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).catOptimalRotationAction)\n                    };\n                    break;\n                case /* proto.APLActionCustomRotation custom_rotation */ 19:\n                    message.action = {\n                        oneofKind: \"customRotation\",\n                        customRotation: APLActionCustomRotation.internalBinaryRead(reader, reader.uint32(), options, (message.action as any).customRotation)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValue condition = 1; */\n        if (message.condition)\n            APLValue.internalBinaryWrite(message.condition, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionCastSpell cast_spell = 3; */\n        if (message.action.oneofKind === \"castSpell\")\n            APLActionCastSpell.internalBinaryWrite(message.action.castSpell, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionChannelSpell channel_spell = 16; */\n        if (message.action.oneofKind === \"channelSpell\")\n            APLActionChannelSpell.internalBinaryWrite(message.action.channelSpell, writer.tag(16, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionMultidot multidot = 8; */\n        if (message.action.oneofKind === \"multidot\")\n            APLActionMultidot.internalBinaryWrite(message.action.multidot, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionMultishield multishield = 12; */\n        if (message.action.oneofKind === \"multishield\")\n            APLActionMultishield.internalBinaryWrite(message.action.multishield, writer.tag(12, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionAutocastOtherCooldowns autocast_other_cooldowns = 7; */\n        if (message.action.oneofKind === \"autocastOtherCooldowns\")\n            APLActionAutocastOtherCooldowns.internalBinaryWrite(message.action.autocastOtherCooldowns, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionWait wait = 4; */\n        if (message.action.oneofKind === \"wait\")\n            APLActionWait.internalBinaryWrite(message.action.wait, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionWaitUntil wait_until = 14; */\n        if (message.action.oneofKind === \"waitUntil\")\n            APLActionWaitUntil.internalBinaryWrite(message.action.waitUntil, writer.tag(14, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionSchedule schedule = 15; */\n        if (message.action.oneofKind === \"schedule\")\n            APLActionSchedule.internalBinaryWrite(message.action.schedule, writer.tag(15, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionSequence sequence = 2; */\n        if (message.action.oneofKind === \"sequence\")\n            APLActionSequence.internalBinaryWrite(message.action.sequence, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionResetSequence reset_sequence = 5; */\n        if (message.action.oneofKind === \"resetSequence\")\n            APLActionResetSequence.internalBinaryWrite(message.action.resetSequence, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionStrictSequence strict_sequence = 6; */\n        if (message.action.oneofKind === \"strictSequence\")\n            APLActionStrictSequence.internalBinaryWrite(message.action.strictSequence, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionChangeTarget change_target = 9; */\n        if (message.action.oneofKind === \"changeTarget\")\n            APLActionChangeTarget.internalBinaryWrite(message.action.changeTarget, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionActivateAura activate_aura = 13; */\n        if (message.action.oneofKind === \"activateAura\")\n            APLActionActivateAura.internalBinaryWrite(message.action.activateAura, writer.tag(13, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionCancelAura cancel_aura = 10; */\n        if (message.action.oneofKind === \"cancelAura\")\n            APLActionCancelAura.internalBinaryWrite(message.action.cancelAura, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionTriggerICD trigger_icd = 11; */\n        if (message.action.oneofKind === \"triggerIcd\")\n            APLActionTriggerICD.internalBinaryWrite(message.action.triggerIcd, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionItemSwap item_swap = 17; */\n        if (message.action.oneofKind === \"itemSwap\")\n            APLActionItemSwap.internalBinaryWrite(message.action.itemSwap, writer.tag(17, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionCatOptimalRotationAction cat_optimal_rotation_action = 18; */\n        if (message.action.oneofKind === \"catOptimalRotationAction\")\n            APLActionCatOptimalRotationAction.internalBinaryWrite(message.action.catOptimalRotationAction, writer.tag(18, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLActionCustomRotation custom_rotation = 19; */\n        if (message.action.oneofKind === \"customRotation\")\n            APLActionCustomRotation.internalBinaryWrite(message.action.customRotation, writer.tag(19, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLAction\n */\nexport const APLAction = new APLAction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValue$Type extends MessageType<APLValue> {\n    constructor() {\n        super(\"proto.APLValue\", [\n            { no: 1, name: \"const\", kind: \"message\", oneof: \"value\", T: () => APLValueConst },\n            { no: 2, name: \"and\", kind: \"message\", oneof: \"value\", T: () => APLValueAnd },\n            { no: 3, name: \"or\", kind: \"message\", oneof: \"value\", T: () => APLValueOr },\n            { no: 4, name: \"not\", kind: \"message\", oneof: \"value\", T: () => APLValueNot },\n            { no: 5, name: \"cmp\", kind: \"message\", oneof: \"value\", T: () => APLValueCompare },\n            { no: 38, name: \"math\", kind: \"message\", oneof: \"value\", T: () => APLValueMath },\n            { no: 47, name: \"max\", kind: \"message\", oneof: \"value\", T: () => APLValueMax },\n            { no: 48, name: \"min\", kind: \"message\", oneof: \"value\", T: () => APLValueMin },\n            { no: 7, name: \"current_time\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentTime },\n            { no: 8, name: \"current_time_percent\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentTimePercent },\n            { no: 9, name: \"remaining_time\", kind: \"message\", oneof: \"value\", T: () => APLValueRemainingTime },\n            { no: 10, name: \"remaining_time_percent\", kind: \"message\", oneof: \"value\", T: () => APLValueRemainingTimePercent },\n            { no: 41, name: \"is_execute_phase\", kind: \"message\", oneof: \"value\", T: () => APLValueIsExecutePhase },\n            { no: 28, name: \"number_targets\", kind: \"message\", oneof: \"value\", T: () => APLValueNumberTargets },\n            { no: 64, name: \"boss_spell_time_to_ready\", kind: \"message\", oneof: \"value\", T: () => APLValueBossSpellTimeToReady },\n            { no: 65, name: \"boss_spell_is_casting\", kind: \"message\", oneof: \"value\", T: () => APLValueBossSpellIsCasting },\n            { no: 26, name: \"current_health\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentHealth },\n            { no: 27, name: \"current_health_percent\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentHealthPercent },\n            { no: 11, name: \"current_mana\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentMana },\n            { no: 12, name: \"current_mana_percent\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentManaPercent },\n            { no: 14, name: \"current_rage\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentRage },\n            { no: 15, name: \"current_energy\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentEnergy },\n            { no: 66, name: \"current_focus\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentFocus },\n            { no: 16, name: \"current_combo_points\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentComboPoints },\n            { no: 25, name: \"current_runic_power\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentRunicPower },\n            { no: 29, name: \"current_rune_count\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentRuneCount },\n            { no: 34, name: \"current_non_death_rune_count\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentNonDeathRuneCount },\n            { no: 30, name: \"current_rune_death\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentRuneDeath },\n            { no: 31, name: \"current_rune_active\", kind: \"message\", oneof: \"value\", T: () => APLValueCurrentRuneActive },\n            { no: 32, name: \"rune_cooldown\", kind: \"message\", oneof: \"value\", T: () => APLValueRuneCooldown },\n            { no: 33, name: \"next_rune_cooldown\", kind: \"message\", oneof: \"value\", T: () => APLValueNextRuneCooldown },\n            { no: 53, name: \"rune_slot_cooldown\", kind: \"message\", oneof: \"value\", T: () => APLValueRuneSlotCooldown },\n            { no: 54, name: \"rune_grace\", kind: \"message\", oneof: \"value\", T: () => APLValueRuneGrace },\n            { no: 55, name: \"rune_slot_grace\", kind: \"message\", oneof: \"value\", T: () => APLValueRuneSlotGrace },\n            { no: 17, name: \"gcd_is_ready\", kind: \"message\", oneof: \"value\", T: () => APLValueGCDIsReady },\n            { no: 18, name: \"gcd_time_to_ready\", kind: \"message\", oneof: \"value\", T: () => APLValueGCDTimeToReady },\n            { no: 40, name: \"auto_time_to_next\", kind: \"message\", oneof: \"value\", T: () => APLValueAutoTimeToNext },\n            { no: 19, name: \"spell_can_cast\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellCanCast },\n            { no: 20, name: \"spell_is_ready\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellIsReady },\n            { no: 21, name: \"spell_time_to_ready\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellTimeToReady },\n            { no: 35, name: \"spell_cast_time\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellCastTime },\n            { no: 37, name: \"spell_travel_time\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellTravelTime },\n            { no: 42, name: \"spell_cpm\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellCPM },\n            { no: 56, name: \"spell_is_channeling\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellIsChanneling },\n            { no: 57, name: \"spell_channeled_ticks\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellChanneledTicks },\n            { no: 62, name: \"spell_current_cost\", kind: \"message\", oneof: \"value\", T: () => APLValueSpellCurrentCost },\n            { no: 22, name: \"aura_is_active\", kind: \"message\", oneof: \"value\", T: () => APLValueAuraIsActive },\n            { no: 50, name: \"aura_is_active_with_reaction_time\", kind: \"message\", oneof: \"value\", T: () => APLValueAuraIsActiveWithReactionTime },\n            { no: 23, name: \"aura_remaining_time\", kind: \"message\", oneof: \"value\", T: () => APLValueAuraRemainingTime },\n            { no: 24, name: \"aura_num_stacks\", kind: \"message\", oneof: \"value\", T: () => APLValueAuraNumStacks },\n            { no: 39, name: \"aura_internal_cooldown\", kind: \"message\", oneof: \"value\", T: () => APLValueAuraInternalCooldown },\n            { no: 51, name: \"aura_icd_is_ready_with_reaction_time\", kind: \"message\", oneof: \"value\", T: () => APLValueAuraICDIsReadyWithReactionTime },\n            { no: 43, name: \"aura_should_refresh\", kind: \"message\", oneof: \"value\", T: () => APLValueAuraShouldRefresh },\n            { no: 6, name: \"dot_is_active\", kind: \"message\", oneof: \"value\", T: () => APLValueDotIsActive },\n            { no: 13, name: \"dot_remaining_time\", kind: \"message\", oneof: \"value\", T: () => APLValueDotRemainingTime },\n            { no: 44, name: \"sequence_is_complete\", kind: \"message\", oneof: \"value\", T: () => APLValueSequenceIsComplete },\n            { no: 45, name: \"sequence_is_ready\", kind: \"message\", oneof: \"value\", T: () => APLValueSequenceIsReady },\n            { no: 46, name: \"sequence_time_to_ready\", kind: \"message\", oneof: \"value\", T: () => APLValueSequenceTimeToReady },\n            { no: 58, name: \"channel_clip_delay\", kind: \"message\", oneof: \"value\", T: () => APLValueChannelClipDelay },\n            { no: 63, name: \"front_of_target\", kind: \"message\", oneof: \"value\", T: () => APLValueFrontOfTarget },\n            { no: 49, name: \"totem_remaining_time\", kind: \"message\", oneof: \"value\", T: () => APLValueTotemRemainingTime },\n            { no: 52, name: \"cat_excess_energy\", kind: \"message\", oneof: \"value\", T: () => APLValueCatExcessEnergy },\n            { no: 61, name: \"cat_new_savage_roar_duration\", kind: \"message\", oneof: \"value\", T: () => APLValueCatNewSavageRoarDuration },\n            { no: 59, name: \"warlock_should_recast_drain_soul\", kind: \"message\", oneof: \"value\", T: () => APLValueWarlockShouldRecastDrainSoul },\n            { no: 60, name: \"warlock_should_refresh_corruption\", kind: \"message\", oneof: \"value\", T: () => APLValueWarlockShouldRefreshCorruption }\n        ]);\n    }\n    create(value?: PartialMessage<APLValue>): APLValue {\n        const message = { value: { oneofKind: undefined } };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValue>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValue): APLValue {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueConst const */ 1:\n                    message.value = {\n                        oneofKind: \"const\",\n                        const: APLValueConst.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).const)\n                    };\n                    break;\n                case /* proto.APLValueAnd and */ 2:\n                    message.value = {\n                        oneofKind: \"and\",\n                        and: APLValueAnd.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).and)\n                    };\n                    break;\n                case /* proto.APLValueOr or */ 3:\n                    message.value = {\n                        oneofKind: \"or\",\n                        or: APLValueOr.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).or)\n                    };\n                    break;\n                case /* proto.APLValueNot not */ 4:\n                    message.value = {\n                        oneofKind: \"not\",\n                        not: APLValueNot.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).not)\n                    };\n                    break;\n                case /* proto.APLValueCompare cmp */ 5:\n                    message.value = {\n                        oneofKind: \"cmp\",\n                        cmp: APLValueCompare.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).cmp)\n                    };\n                    break;\n                case /* proto.APLValueMath math */ 38:\n                    message.value = {\n                        oneofKind: \"math\",\n                        math: APLValueMath.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).math)\n                    };\n                    break;\n                case /* proto.APLValueMax max */ 47:\n                    message.value = {\n                        oneofKind: \"max\",\n                        max: APLValueMax.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).max)\n                    };\n                    break;\n                case /* proto.APLValueMin min */ 48:\n                    message.value = {\n                        oneofKind: \"min\",\n                        min: APLValueMin.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).min)\n                    };\n                    break;\n                case /* proto.APLValueCurrentTime current_time */ 7:\n                    message.value = {\n                        oneofKind: \"currentTime\",\n                        currentTime: APLValueCurrentTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentTime)\n                    };\n                    break;\n                case /* proto.APLValueCurrentTimePercent current_time_percent */ 8:\n                    message.value = {\n                        oneofKind: \"currentTimePercent\",\n                        currentTimePercent: APLValueCurrentTimePercent.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentTimePercent)\n                    };\n                    break;\n                case /* proto.APLValueRemainingTime remaining_time */ 9:\n                    message.value = {\n                        oneofKind: \"remainingTime\",\n                        remainingTime: APLValueRemainingTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).remainingTime)\n                    };\n                    break;\n                case /* proto.APLValueRemainingTimePercent remaining_time_percent */ 10:\n                    message.value = {\n                        oneofKind: \"remainingTimePercent\",\n                        remainingTimePercent: APLValueRemainingTimePercent.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).remainingTimePercent)\n                    };\n                    break;\n                case /* proto.APLValueIsExecutePhase is_execute_phase */ 41:\n                    message.value = {\n                        oneofKind: \"isExecutePhase\",\n                        isExecutePhase: APLValueIsExecutePhase.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).isExecutePhase)\n                    };\n                    break;\n                case /* proto.APLValueNumberTargets number_targets */ 28:\n                    message.value = {\n                        oneofKind: \"numberTargets\",\n                        numberTargets: APLValueNumberTargets.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).numberTargets)\n                    };\n                    break;\n                case /* proto.APLValueBossSpellTimeToReady boss_spell_time_to_ready */ 64:\n                    message.value = {\n                        oneofKind: \"bossSpellTimeToReady\",\n                        bossSpellTimeToReady: APLValueBossSpellTimeToReady.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).bossSpellTimeToReady)\n                    };\n                    break;\n                case /* proto.APLValueBossSpellIsCasting boss_spell_is_casting */ 65:\n                    message.value = {\n                        oneofKind: \"bossSpellIsCasting\",\n                        bossSpellIsCasting: APLValueBossSpellIsCasting.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).bossSpellIsCasting)\n                    };\n                    break;\n                case /* proto.APLValueCurrentHealth current_health */ 26:\n                    message.value = {\n                        oneofKind: \"currentHealth\",\n                        currentHealth: APLValueCurrentHealth.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentHealth)\n                    };\n                    break;\n                case /* proto.APLValueCurrentHealthPercent current_health_percent */ 27:\n                    message.value = {\n                        oneofKind: \"currentHealthPercent\",\n                        currentHealthPercent: APLValueCurrentHealthPercent.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentHealthPercent)\n                    };\n                    break;\n                case /* proto.APLValueCurrentMana current_mana */ 11:\n                    message.value = {\n                        oneofKind: \"currentMana\",\n                        currentMana: APLValueCurrentMana.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentMana)\n                    };\n                    break;\n                case /* proto.APLValueCurrentManaPercent current_mana_percent */ 12:\n                    message.value = {\n                        oneofKind: \"currentManaPercent\",\n                        currentManaPercent: APLValueCurrentManaPercent.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentManaPercent)\n                    };\n                    break;\n                case /* proto.APLValueCurrentRage current_rage */ 14:\n                    message.value = {\n                        oneofKind: \"currentRage\",\n                        currentRage: APLValueCurrentRage.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentRage)\n                    };\n                    break;\n                case /* proto.APLValueCurrentEnergy current_energy */ 15:\n                    message.value = {\n                        oneofKind: \"currentEnergy\",\n                        currentEnergy: APLValueCurrentEnergy.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentEnergy)\n                    };\n                    break;\n                case /* proto.APLValueCurrentFocus current_focus */ 66:\n                    message.value = {\n                        oneofKind: \"currentFocus\",\n                        currentFocus: APLValueCurrentFocus.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentFocus)\n                    };\n                    break;\n                case /* proto.APLValueCurrentComboPoints current_combo_points */ 16:\n                    message.value = {\n                        oneofKind: \"currentComboPoints\",\n                        currentComboPoints: APLValueCurrentComboPoints.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentComboPoints)\n                    };\n                    break;\n                case /* proto.APLValueCurrentRunicPower current_runic_power */ 25:\n                    message.value = {\n                        oneofKind: \"currentRunicPower\",\n                        currentRunicPower: APLValueCurrentRunicPower.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentRunicPower)\n                    };\n                    break;\n                case /* proto.APLValueCurrentRuneCount current_rune_count */ 29:\n                    message.value = {\n                        oneofKind: \"currentRuneCount\",\n                        currentRuneCount: APLValueCurrentRuneCount.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentRuneCount)\n                    };\n                    break;\n                case /* proto.APLValueCurrentNonDeathRuneCount current_non_death_rune_count */ 34:\n                    message.value = {\n                        oneofKind: \"currentNonDeathRuneCount\",\n                        currentNonDeathRuneCount: APLValueCurrentNonDeathRuneCount.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentNonDeathRuneCount)\n                    };\n                    break;\n                case /* proto.APLValueCurrentRuneDeath current_rune_death */ 30:\n                    message.value = {\n                        oneofKind: \"currentRuneDeath\",\n                        currentRuneDeath: APLValueCurrentRuneDeath.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentRuneDeath)\n                    };\n                    break;\n                case /* proto.APLValueCurrentRuneActive current_rune_active */ 31:\n                    message.value = {\n                        oneofKind: \"currentRuneActive\",\n                        currentRuneActive: APLValueCurrentRuneActive.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).currentRuneActive)\n                    };\n                    break;\n                case /* proto.APLValueRuneCooldown rune_cooldown */ 32:\n                    message.value = {\n                        oneofKind: \"runeCooldown\",\n                        runeCooldown: APLValueRuneCooldown.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).runeCooldown)\n                    };\n                    break;\n                case /* proto.APLValueNextRuneCooldown next_rune_cooldown */ 33:\n                    message.value = {\n                        oneofKind: \"nextRuneCooldown\",\n                        nextRuneCooldown: APLValueNextRuneCooldown.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).nextRuneCooldown)\n                    };\n                    break;\n                case /* proto.APLValueRuneSlotCooldown rune_slot_cooldown */ 53:\n                    message.value = {\n                        oneofKind: \"runeSlotCooldown\",\n                        runeSlotCooldown: APLValueRuneSlotCooldown.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).runeSlotCooldown)\n                    };\n                    break;\n                case /* proto.APLValueRuneGrace rune_grace */ 54:\n                    message.value = {\n                        oneofKind: \"runeGrace\",\n                        runeGrace: APLValueRuneGrace.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).runeGrace)\n                    };\n                    break;\n                case /* proto.APLValueRuneSlotGrace rune_slot_grace */ 55:\n                    message.value = {\n                        oneofKind: \"runeSlotGrace\",\n                        runeSlotGrace: APLValueRuneSlotGrace.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).runeSlotGrace)\n                    };\n                    break;\n                case /* proto.APLValueGCDIsReady gcd_is_ready */ 17:\n                    message.value = {\n                        oneofKind: \"gcdIsReady\",\n                        gcdIsReady: APLValueGCDIsReady.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).gcdIsReady)\n                    };\n                    break;\n                case /* proto.APLValueGCDTimeToReady gcd_time_to_ready */ 18:\n                    message.value = {\n                        oneofKind: \"gcdTimeToReady\",\n                        gcdTimeToReady: APLValueGCDTimeToReady.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).gcdTimeToReady)\n                    };\n                    break;\n                case /* proto.APLValueAutoTimeToNext auto_time_to_next */ 40:\n                    message.value = {\n                        oneofKind: \"autoTimeToNext\",\n                        autoTimeToNext: APLValueAutoTimeToNext.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).autoTimeToNext)\n                    };\n                    break;\n                case /* proto.APLValueSpellCanCast spell_can_cast */ 19:\n                    message.value = {\n                        oneofKind: \"spellCanCast\",\n                        spellCanCast: APLValueSpellCanCast.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellCanCast)\n                    };\n                    break;\n                case /* proto.APLValueSpellIsReady spell_is_ready */ 20:\n                    message.value = {\n                        oneofKind: \"spellIsReady\",\n                        spellIsReady: APLValueSpellIsReady.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellIsReady)\n                    };\n                    break;\n                case /* proto.APLValueSpellTimeToReady spell_time_to_ready */ 21:\n                    message.value = {\n                        oneofKind: \"spellTimeToReady\",\n                        spellTimeToReady: APLValueSpellTimeToReady.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellTimeToReady)\n                    };\n                    break;\n                case /* proto.APLValueSpellCastTime spell_cast_time */ 35:\n                    message.value = {\n                        oneofKind: \"spellCastTime\",\n                        spellCastTime: APLValueSpellCastTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellCastTime)\n                    };\n                    break;\n                case /* proto.APLValueSpellTravelTime spell_travel_time */ 37:\n                    message.value = {\n                        oneofKind: \"spellTravelTime\",\n                        spellTravelTime: APLValueSpellTravelTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellTravelTime)\n                    };\n                    break;\n                case /* proto.APLValueSpellCPM spell_cpm */ 42:\n                    message.value = {\n                        oneofKind: \"spellCpm\",\n                        spellCpm: APLValueSpellCPM.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellCpm)\n                    };\n                    break;\n                case /* proto.APLValueSpellIsChanneling spell_is_channeling */ 56:\n                    message.value = {\n                        oneofKind: \"spellIsChanneling\",\n                        spellIsChanneling: APLValueSpellIsChanneling.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellIsChanneling)\n                    };\n                    break;\n                case /* proto.APLValueSpellChanneledTicks spell_channeled_ticks */ 57:\n                    message.value = {\n                        oneofKind: \"spellChanneledTicks\",\n                        spellChanneledTicks: APLValueSpellChanneledTicks.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellChanneledTicks)\n                    };\n                    break;\n                case /* proto.APLValueSpellCurrentCost spell_current_cost */ 62:\n                    message.value = {\n                        oneofKind: \"spellCurrentCost\",\n                        spellCurrentCost: APLValueSpellCurrentCost.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).spellCurrentCost)\n                    };\n                    break;\n                case /* proto.APLValueAuraIsActive aura_is_active */ 22:\n                    message.value = {\n                        oneofKind: \"auraIsActive\",\n                        auraIsActive: APLValueAuraIsActive.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).auraIsActive)\n                    };\n                    break;\n                case /* proto.APLValueAuraIsActiveWithReactionTime aura_is_active_with_reaction_time */ 50:\n                    message.value = {\n                        oneofKind: \"auraIsActiveWithReactionTime\",\n                        auraIsActiveWithReactionTime: APLValueAuraIsActiveWithReactionTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).auraIsActiveWithReactionTime)\n                    };\n                    break;\n                case /* proto.APLValueAuraRemainingTime aura_remaining_time */ 23:\n                    message.value = {\n                        oneofKind: \"auraRemainingTime\",\n                        auraRemainingTime: APLValueAuraRemainingTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).auraRemainingTime)\n                    };\n                    break;\n                case /* proto.APLValueAuraNumStacks aura_num_stacks */ 24:\n                    message.value = {\n                        oneofKind: \"auraNumStacks\",\n                        auraNumStacks: APLValueAuraNumStacks.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).auraNumStacks)\n                    };\n                    break;\n                case /* proto.APLValueAuraInternalCooldown aura_internal_cooldown */ 39:\n                    message.value = {\n                        oneofKind: \"auraInternalCooldown\",\n                        auraInternalCooldown: APLValueAuraInternalCooldown.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).auraInternalCooldown)\n                    };\n                    break;\n                case /* proto.APLValueAuraICDIsReadyWithReactionTime aura_icd_is_ready_with_reaction_time */ 51:\n                    message.value = {\n                        oneofKind: \"auraIcdIsReadyWithReactionTime\",\n                        auraIcdIsReadyWithReactionTime: APLValueAuraICDIsReadyWithReactionTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).auraIcdIsReadyWithReactionTime)\n                    };\n                    break;\n                case /* proto.APLValueAuraShouldRefresh aura_should_refresh */ 43:\n                    message.value = {\n                        oneofKind: \"auraShouldRefresh\",\n                        auraShouldRefresh: APLValueAuraShouldRefresh.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).auraShouldRefresh)\n                    };\n                    break;\n                case /* proto.APLValueDotIsActive dot_is_active */ 6:\n                    message.value = {\n                        oneofKind: \"dotIsActive\",\n                        dotIsActive: APLValueDotIsActive.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).dotIsActive)\n                    };\n                    break;\n                case /* proto.APLValueDotRemainingTime dot_remaining_time */ 13:\n                    message.value = {\n                        oneofKind: \"dotRemainingTime\",\n                        dotRemainingTime: APLValueDotRemainingTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).dotRemainingTime)\n                    };\n                    break;\n                case /* proto.APLValueSequenceIsComplete sequence_is_complete */ 44:\n                    message.value = {\n                        oneofKind: \"sequenceIsComplete\",\n                        sequenceIsComplete: APLValueSequenceIsComplete.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).sequenceIsComplete)\n                    };\n                    break;\n                case /* proto.APLValueSequenceIsReady sequence_is_ready */ 45:\n                    message.value = {\n                        oneofKind: \"sequenceIsReady\",\n                        sequenceIsReady: APLValueSequenceIsReady.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).sequenceIsReady)\n                    };\n                    break;\n                case /* proto.APLValueSequenceTimeToReady sequence_time_to_ready */ 46:\n                    message.value = {\n                        oneofKind: \"sequenceTimeToReady\",\n                        sequenceTimeToReady: APLValueSequenceTimeToReady.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).sequenceTimeToReady)\n                    };\n                    break;\n                case /* proto.APLValueChannelClipDelay channel_clip_delay */ 58:\n                    message.value = {\n                        oneofKind: \"channelClipDelay\",\n                        channelClipDelay: APLValueChannelClipDelay.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).channelClipDelay)\n                    };\n                    break;\n                case /* proto.APLValueFrontOfTarget front_of_target */ 63:\n                    message.value = {\n                        oneofKind: \"frontOfTarget\",\n                        frontOfTarget: APLValueFrontOfTarget.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).frontOfTarget)\n                    };\n                    break;\n                case /* proto.APLValueTotemRemainingTime totem_remaining_time */ 49:\n                    message.value = {\n                        oneofKind: \"totemRemainingTime\",\n                        totemRemainingTime: APLValueTotemRemainingTime.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).totemRemainingTime)\n                    };\n                    break;\n                case /* proto.APLValueCatExcessEnergy cat_excess_energy */ 52:\n                    message.value = {\n                        oneofKind: \"catExcessEnergy\",\n                        catExcessEnergy: APLValueCatExcessEnergy.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).catExcessEnergy)\n                    };\n                    break;\n                case /* proto.APLValueCatNewSavageRoarDuration cat_new_savage_roar_duration */ 61:\n                    message.value = {\n                        oneofKind: \"catNewSavageRoarDuration\",\n                        catNewSavageRoarDuration: APLValueCatNewSavageRoarDuration.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).catNewSavageRoarDuration)\n                    };\n                    break;\n                case /* proto.APLValueWarlockShouldRecastDrainSoul warlock_should_recast_drain_soul */ 59:\n                    message.value = {\n                        oneofKind: \"warlockShouldRecastDrainSoul\",\n                        warlockShouldRecastDrainSoul: APLValueWarlockShouldRecastDrainSoul.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).warlockShouldRecastDrainSoul)\n                    };\n                    break;\n                case /* proto.APLValueWarlockShouldRefreshCorruption warlock_should_refresh_corruption */ 60:\n                    message.value = {\n                        oneofKind: \"warlockShouldRefreshCorruption\",\n                        warlockShouldRefreshCorruption: APLValueWarlockShouldRefreshCorruption.internalBinaryRead(reader, reader.uint32(), options, (message.value as any).warlockShouldRefreshCorruption)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueConst const = 1; */\n        if (message.value.oneofKind === \"const\")\n            APLValueConst.internalBinaryWrite(message.value.const, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAnd and = 2; */\n        if (message.value.oneofKind === \"and\")\n            APLValueAnd.internalBinaryWrite(message.value.and, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueOr or = 3; */\n        if (message.value.oneofKind === \"or\")\n            APLValueOr.internalBinaryWrite(message.value.or, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueNot not = 4; */\n        if (message.value.oneofKind === \"not\")\n            APLValueNot.internalBinaryWrite(message.value.not, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCompare cmp = 5; */\n        if (message.value.oneofKind === \"cmp\")\n            APLValueCompare.internalBinaryWrite(message.value.cmp, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueMath math = 38; */\n        if (message.value.oneofKind === \"math\")\n            APLValueMath.internalBinaryWrite(message.value.math, writer.tag(38, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueMax max = 47; */\n        if (message.value.oneofKind === \"max\")\n            APLValueMax.internalBinaryWrite(message.value.max, writer.tag(47, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueMin min = 48; */\n        if (message.value.oneofKind === \"min\")\n            APLValueMin.internalBinaryWrite(message.value.min, writer.tag(48, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentTime current_time = 7; */\n        if (message.value.oneofKind === \"currentTime\")\n            APLValueCurrentTime.internalBinaryWrite(message.value.currentTime, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentTimePercent current_time_percent = 8; */\n        if (message.value.oneofKind === \"currentTimePercent\")\n            APLValueCurrentTimePercent.internalBinaryWrite(message.value.currentTimePercent, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueRemainingTime remaining_time = 9; */\n        if (message.value.oneofKind === \"remainingTime\")\n            APLValueRemainingTime.internalBinaryWrite(message.value.remainingTime, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueRemainingTimePercent remaining_time_percent = 10; */\n        if (message.value.oneofKind === \"remainingTimePercent\")\n            APLValueRemainingTimePercent.internalBinaryWrite(message.value.remainingTimePercent, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueIsExecutePhase is_execute_phase = 41; */\n        if (message.value.oneofKind === \"isExecutePhase\")\n            APLValueIsExecutePhase.internalBinaryWrite(message.value.isExecutePhase, writer.tag(41, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueNumberTargets number_targets = 28; */\n        if (message.value.oneofKind === \"numberTargets\")\n            APLValueNumberTargets.internalBinaryWrite(message.value.numberTargets, writer.tag(28, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueBossSpellTimeToReady boss_spell_time_to_ready = 64; */\n        if (message.value.oneofKind === \"bossSpellTimeToReady\")\n            APLValueBossSpellTimeToReady.internalBinaryWrite(message.value.bossSpellTimeToReady, writer.tag(64, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueBossSpellIsCasting boss_spell_is_casting = 65; */\n        if (message.value.oneofKind === \"bossSpellIsCasting\")\n            APLValueBossSpellIsCasting.internalBinaryWrite(message.value.bossSpellIsCasting, writer.tag(65, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentHealth current_health = 26; */\n        if (message.value.oneofKind === \"currentHealth\")\n            APLValueCurrentHealth.internalBinaryWrite(message.value.currentHealth, writer.tag(26, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentHealthPercent current_health_percent = 27; */\n        if (message.value.oneofKind === \"currentHealthPercent\")\n            APLValueCurrentHealthPercent.internalBinaryWrite(message.value.currentHealthPercent, writer.tag(27, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentMana current_mana = 11; */\n        if (message.value.oneofKind === \"currentMana\")\n            APLValueCurrentMana.internalBinaryWrite(message.value.currentMana, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentManaPercent current_mana_percent = 12; */\n        if (message.value.oneofKind === \"currentManaPercent\")\n            APLValueCurrentManaPercent.internalBinaryWrite(message.value.currentManaPercent, writer.tag(12, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentRage current_rage = 14; */\n        if (message.value.oneofKind === \"currentRage\")\n            APLValueCurrentRage.internalBinaryWrite(message.value.currentRage, writer.tag(14, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentEnergy current_energy = 15; */\n        if (message.value.oneofKind === \"currentEnergy\")\n            APLValueCurrentEnergy.internalBinaryWrite(message.value.currentEnergy, writer.tag(15, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentFocus current_focus = 66; */\n        if (message.value.oneofKind === \"currentFocus\")\n            APLValueCurrentFocus.internalBinaryWrite(message.value.currentFocus, writer.tag(66, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentComboPoints current_combo_points = 16; */\n        if (message.value.oneofKind === \"currentComboPoints\")\n            APLValueCurrentComboPoints.internalBinaryWrite(message.value.currentComboPoints, writer.tag(16, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentRunicPower current_runic_power = 25; */\n        if (message.value.oneofKind === \"currentRunicPower\")\n            APLValueCurrentRunicPower.internalBinaryWrite(message.value.currentRunicPower, writer.tag(25, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentRuneCount current_rune_count = 29; */\n        if (message.value.oneofKind === \"currentRuneCount\")\n            APLValueCurrentRuneCount.internalBinaryWrite(message.value.currentRuneCount, writer.tag(29, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentNonDeathRuneCount current_non_death_rune_count = 34; */\n        if (message.value.oneofKind === \"currentNonDeathRuneCount\")\n            APLValueCurrentNonDeathRuneCount.internalBinaryWrite(message.value.currentNonDeathRuneCount, writer.tag(34, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentRuneDeath current_rune_death = 30; */\n        if (message.value.oneofKind === \"currentRuneDeath\")\n            APLValueCurrentRuneDeath.internalBinaryWrite(message.value.currentRuneDeath, writer.tag(30, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCurrentRuneActive current_rune_active = 31; */\n        if (message.value.oneofKind === \"currentRuneActive\")\n            APLValueCurrentRuneActive.internalBinaryWrite(message.value.currentRuneActive, writer.tag(31, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueRuneCooldown rune_cooldown = 32; */\n        if (message.value.oneofKind === \"runeCooldown\")\n            APLValueRuneCooldown.internalBinaryWrite(message.value.runeCooldown, writer.tag(32, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueNextRuneCooldown next_rune_cooldown = 33; */\n        if (message.value.oneofKind === \"nextRuneCooldown\")\n            APLValueNextRuneCooldown.internalBinaryWrite(message.value.nextRuneCooldown, writer.tag(33, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueRuneSlotCooldown rune_slot_cooldown = 53; */\n        if (message.value.oneofKind === \"runeSlotCooldown\")\n            APLValueRuneSlotCooldown.internalBinaryWrite(message.value.runeSlotCooldown, writer.tag(53, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueRuneGrace rune_grace = 54; */\n        if (message.value.oneofKind === \"runeGrace\")\n            APLValueRuneGrace.internalBinaryWrite(message.value.runeGrace, writer.tag(54, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueRuneSlotGrace rune_slot_grace = 55; */\n        if (message.value.oneofKind === \"runeSlotGrace\")\n            APLValueRuneSlotGrace.internalBinaryWrite(message.value.runeSlotGrace, writer.tag(55, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueGCDIsReady gcd_is_ready = 17; */\n        if (message.value.oneofKind === \"gcdIsReady\")\n            APLValueGCDIsReady.internalBinaryWrite(message.value.gcdIsReady, writer.tag(17, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueGCDTimeToReady gcd_time_to_ready = 18; */\n        if (message.value.oneofKind === \"gcdTimeToReady\")\n            APLValueGCDTimeToReady.internalBinaryWrite(message.value.gcdTimeToReady, writer.tag(18, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAutoTimeToNext auto_time_to_next = 40; */\n        if (message.value.oneofKind === \"autoTimeToNext\")\n            APLValueAutoTimeToNext.internalBinaryWrite(message.value.autoTimeToNext, writer.tag(40, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellCanCast spell_can_cast = 19; */\n        if (message.value.oneofKind === \"spellCanCast\")\n            APLValueSpellCanCast.internalBinaryWrite(message.value.spellCanCast, writer.tag(19, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellIsReady spell_is_ready = 20; */\n        if (message.value.oneofKind === \"spellIsReady\")\n            APLValueSpellIsReady.internalBinaryWrite(message.value.spellIsReady, writer.tag(20, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellTimeToReady spell_time_to_ready = 21; */\n        if (message.value.oneofKind === \"spellTimeToReady\")\n            APLValueSpellTimeToReady.internalBinaryWrite(message.value.spellTimeToReady, writer.tag(21, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellCastTime spell_cast_time = 35; */\n        if (message.value.oneofKind === \"spellCastTime\")\n            APLValueSpellCastTime.internalBinaryWrite(message.value.spellCastTime, writer.tag(35, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellTravelTime spell_travel_time = 37; */\n        if (message.value.oneofKind === \"spellTravelTime\")\n            APLValueSpellTravelTime.internalBinaryWrite(message.value.spellTravelTime, writer.tag(37, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellCPM spell_cpm = 42; */\n        if (message.value.oneofKind === \"spellCpm\")\n            APLValueSpellCPM.internalBinaryWrite(message.value.spellCpm, writer.tag(42, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellIsChanneling spell_is_channeling = 56; */\n        if (message.value.oneofKind === \"spellIsChanneling\")\n            APLValueSpellIsChanneling.internalBinaryWrite(message.value.spellIsChanneling, writer.tag(56, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellChanneledTicks spell_channeled_ticks = 57; */\n        if (message.value.oneofKind === \"spellChanneledTicks\")\n            APLValueSpellChanneledTicks.internalBinaryWrite(message.value.spellChanneledTicks, writer.tag(57, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSpellCurrentCost spell_current_cost = 62; */\n        if (message.value.oneofKind === \"spellCurrentCost\")\n            APLValueSpellCurrentCost.internalBinaryWrite(message.value.spellCurrentCost, writer.tag(62, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAuraIsActive aura_is_active = 22; */\n        if (message.value.oneofKind === \"auraIsActive\")\n            APLValueAuraIsActive.internalBinaryWrite(message.value.auraIsActive, writer.tag(22, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAuraIsActiveWithReactionTime aura_is_active_with_reaction_time = 50; */\n        if (message.value.oneofKind === \"auraIsActiveWithReactionTime\")\n            APLValueAuraIsActiveWithReactionTime.internalBinaryWrite(message.value.auraIsActiveWithReactionTime, writer.tag(50, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAuraRemainingTime aura_remaining_time = 23; */\n        if (message.value.oneofKind === \"auraRemainingTime\")\n            APLValueAuraRemainingTime.internalBinaryWrite(message.value.auraRemainingTime, writer.tag(23, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAuraNumStacks aura_num_stacks = 24; */\n        if (message.value.oneofKind === \"auraNumStacks\")\n            APLValueAuraNumStacks.internalBinaryWrite(message.value.auraNumStacks, writer.tag(24, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAuraInternalCooldown aura_internal_cooldown = 39; */\n        if (message.value.oneofKind === \"auraInternalCooldown\")\n            APLValueAuraInternalCooldown.internalBinaryWrite(message.value.auraInternalCooldown, writer.tag(39, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAuraICDIsReadyWithReactionTime aura_icd_is_ready_with_reaction_time = 51; */\n        if (message.value.oneofKind === \"auraIcdIsReadyWithReactionTime\")\n            APLValueAuraICDIsReadyWithReactionTime.internalBinaryWrite(message.value.auraIcdIsReadyWithReactionTime, writer.tag(51, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueAuraShouldRefresh aura_should_refresh = 43; */\n        if (message.value.oneofKind === \"auraShouldRefresh\")\n            APLValueAuraShouldRefresh.internalBinaryWrite(message.value.auraShouldRefresh, writer.tag(43, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueDotIsActive dot_is_active = 6; */\n        if (message.value.oneofKind === \"dotIsActive\")\n            APLValueDotIsActive.internalBinaryWrite(message.value.dotIsActive, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueDotRemainingTime dot_remaining_time = 13; */\n        if (message.value.oneofKind === \"dotRemainingTime\")\n            APLValueDotRemainingTime.internalBinaryWrite(message.value.dotRemainingTime, writer.tag(13, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSequenceIsComplete sequence_is_complete = 44; */\n        if (message.value.oneofKind === \"sequenceIsComplete\")\n            APLValueSequenceIsComplete.internalBinaryWrite(message.value.sequenceIsComplete, writer.tag(44, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSequenceIsReady sequence_is_ready = 45; */\n        if (message.value.oneofKind === \"sequenceIsReady\")\n            APLValueSequenceIsReady.internalBinaryWrite(message.value.sequenceIsReady, writer.tag(45, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueSequenceTimeToReady sequence_time_to_ready = 46; */\n        if (message.value.oneofKind === \"sequenceTimeToReady\")\n            APLValueSequenceTimeToReady.internalBinaryWrite(message.value.sequenceTimeToReady, writer.tag(46, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueChannelClipDelay channel_clip_delay = 58; */\n        if (message.value.oneofKind === \"channelClipDelay\")\n            APLValueChannelClipDelay.internalBinaryWrite(message.value.channelClipDelay, writer.tag(58, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueFrontOfTarget front_of_target = 63; */\n        if (message.value.oneofKind === \"frontOfTarget\")\n            APLValueFrontOfTarget.internalBinaryWrite(message.value.frontOfTarget, writer.tag(63, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueTotemRemainingTime totem_remaining_time = 49; */\n        if (message.value.oneofKind === \"totemRemainingTime\")\n            APLValueTotemRemainingTime.internalBinaryWrite(message.value.totemRemainingTime, writer.tag(49, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCatExcessEnergy cat_excess_energy = 52; */\n        if (message.value.oneofKind === \"catExcessEnergy\")\n            APLValueCatExcessEnergy.internalBinaryWrite(message.value.catExcessEnergy, writer.tag(52, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueCatNewSavageRoarDuration cat_new_savage_roar_duration = 61; */\n        if (message.value.oneofKind === \"catNewSavageRoarDuration\")\n            APLValueCatNewSavageRoarDuration.internalBinaryWrite(message.value.catNewSavageRoarDuration, writer.tag(61, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueWarlockShouldRecastDrainSoul warlock_should_recast_drain_soul = 59; */\n        if (message.value.oneofKind === \"warlockShouldRecastDrainSoul\")\n            APLValueWarlockShouldRecastDrainSoul.internalBinaryWrite(message.value.warlockShouldRecastDrainSoul, writer.tag(59, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValueWarlockShouldRefreshCorruption warlock_should_refresh_corruption = 60; */\n        if (message.value.oneofKind === \"warlockShouldRefreshCorruption\")\n            APLValueWarlockShouldRefreshCorruption.internalBinaryWrite(message.value.warlockShouldRefreshCorruption, writer.tag(60, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValue\n */\nexport const APLValue = new APLValue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionCastSpell$Type extends MessageType<APLActionCastSpell> {\n    constructor() {\n        super(\"proto.APLActionCastSpell\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"target\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionCastSpell>): APLActionCastSpell {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionCastSpell>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionCastSpell): APLActionCastSpell {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                case /* proto.UnitReference target */ 2:\n                    message.target = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.target);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionCastSpell, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitReference target = 2; */\n        if (message.target)\n            UnitReference.internalBinaryWrite(message.target, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionCastSpell\n */\nexport const APLActionCastSpell = new APLActionCastSpell$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionChannelSpell$Type extends MessageType<APLActionChannelSpell> {\n    constructor() {\n        super(\"proto.APLActionChannelSpell\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"target\", kind: \"message\", T: () => UnitReference },\n            { no: 3, name: \"interrupt_if\", kind: \"message\", T: () => APLValue },\n            { no: 5, name: \"allow_recast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionChannelSpell>): APLActionChannelSpell {\n        const message = { allowRecast: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionChannelSpell>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionChannelSpell): APLActionChannelSpell {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                case /* proto.UnitReference target */ 2:\n                    message.target = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.target);\n                    break;\n                case /* proto.APLValue interrupt_if */ 3:\n                    message.interruptIf = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.interruptIf);\n                    break;\n                case /* bool allow_recast */ 5:\n                    message.allowRecast = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionChannelSpell, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitReference target = 2; */\n        if (message.target)\n            UnitReference.internalBinaryWrite(message.target, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValue interrupt_if = 3; */\n        if (message.interruptIf)\n            APLValue.internalBinaryWrite(message.interruptIf, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* bool allow_recast = 5; */\n        if (message.allowRecast !== false)\n            writer.tag(5, WireType.Varint).bool(message.allowRecast);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionChannelSpell\n */\nexport const APLActionChannelSpell = new APLActionChannelSpell$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionMultidot$Type extends MessageType<APLActionMultidot> {\n    constructor() {\n        super(\"proto.APLActionMultidot\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"max_dots\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"max_overlap\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionMultidot>): APLActionMultidot {\n        const message = { maxDots: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionMultidot>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionMultidot): APLActionMultidot {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                case /* int32 max_dots */ 2:\n                    message.maxDots = reader.int32();\n                    break;\n                case /* proto.APLValue max_overlap */ 3:\n                    message.maxOverlap = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.maxOverlap);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionMultidot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 max_dots = 2; */\n        if (message.maxDots !== 0)\n            writer.tag(2, WireType.Varint).int32(message.maxDots);\n        /* proto.APLValue max_overlap = 3; */\n        if (message.maxOverlap)\n            APLValue.internalBinaryWrite(message.maxOverlap, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionMultidot\n */\nexport const APLActionMultidot = new APLActionMultidot$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionMultishield$Type extends MessageType<APLActionMultishield> {\n    constructor() {\n        super(\"proto.APLActionMultishield\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"max_shields\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"max_overlap\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionMultishield>): APLActionMultishield {\n        const message = { maxShields: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionMultishield>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionMultishield): APLActionMultishield {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                case /* int32 max_shields */ 2:\n                    message.maxShields = reader.int32();\n                    break;\n                case /* proto.APLValue max_overlap */ 3:\n                    message.maxOverlap = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.maxOverlap);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionMultishield, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 max_shields = 2; */\n        if (message.maxShields !== 0)\n            writer.tag(2, WireType.Varint).int32(message.maxShields);\n        /* proto.APLValue max_overlap = 3; */\n        if (message.maxOverlap)\n            APLValue.internalBinaryWrite(message.maxOverlap, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionMultishield\n */\nexport const APLActionMultishield = new APLActionMultishield$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionAutocastOtherCooldowns$Type extends MessageType<APLActionAutocastOtherCooldowns> {\n    constructor() {\n        super(\"proto.APLActionAutocastOtherCooldowns\", []);\n    }\n    create(value?: PartialMessage<APLActionAutocastOtherCooldowns>): APLActionAutocastOtherCooldowns {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionAutocastOtherCooldowns>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionAutocastOtherCooldowns): APLActionAutocastOtherCooldowns {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLActionAutocastOtherCooldowns, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionAutocastOtherCooldowns\n */\nexport const APLActionAutocastOtherCooldowns = new APLActionAutocastOtherCooldowns$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionWait$Type extends MessageType<APLActionWait> {\n    constructor() {\n        super(\"proto.APLActionWait\", [\n            { no: 1, name: \"duration\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionWait>): APLActionWait {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionWait>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionWait): APLActionWait {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValue duration */ 1:\n                    message.duration = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.duration);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionWait, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValue duration = 1; */\n        if (message.duration)\n            APLValue.internalBinaryWrite(message.duration, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionWait\n */\nexport const APLActionWait = new APLActionWait$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionWaitUntil$Type extends MessageType<APLActionWaitUntil> {\n    constructor() {\n        super(\"proto.APLActionWaitUntil\", [\n            { no: 1, name: \"condition\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionWaitUntil>): APLActionWaitUntil {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionWaitUntil>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionWaitUntil): APLActionWaitUntil {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValue condition */ 1:\n                    message.condition = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.condition);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionWaitUntil, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValue condition = 1; */\n        if (message.condition)\n            APLValue.internalBinaryWrite(message.condition, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionWaitUntil\n */\nexport const APLActionWaitUntil = new APLActionWaitUntil$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionSchedule$Type extends MessageType<APLActionSchedule> {\n    constructor() {\n        super(\"proto.APLActionSchedule\", [\n            { no: 1, name: \"schedule\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"inner_action\", kind: \"message\", T: () => APLAction }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionSchedule>): APLActionSchedule {\n        const message = { schedule: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionSchedule>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionSchedule): APLActionSchedule {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string schedule */ 1:\n                    message.schedule = reader.string();\n                    break;\n                case /* proto.APLAction inner_action */ 2:\n                    message.innerAction = APLAction.internalBinaryRead(reader, reader.uint32(), options, message.innerAction);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionSchedule, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string schedule = 1; */\n        if (message.schedule !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.schedule);\n        /* proto.APLAction inner_action = 2; */\n        if (message.innerAction)\n            APLAction.internalBinaryWrite(message.innerAction, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionSchedule\n */\nexport const APLActionSchedule = new APLActionSchedule$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionSequence$Type extends MessageType<APLActionSequence> {\n    constructor() {\n        super(\"proto.APLActionSequence\", [\n            { no: 1, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"actions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLAction }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionSequence>): APLActionSequence {\n        const message = { name: \"\", actions: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionSequence>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionSequence): APLActionSequence {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 1:\n                    message.name = reader.string();\n                    break;\n                case /* repeated proto.APLAction actions */ 2:\n                    message.actions.push(APLAction.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionSequence, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 1; */\n        if (message.name !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.name);\n        /* repeated proto.APLAction actions = 2; */\n        for (let i = 0; i < message.actions.length; i++)\n            APLAction.internalBinaryWrite(message.actions[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionSequence\n */\nexport const APLActionSequence = new APLActionSequence$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionResetSequence$Type extends MessageType<APLActionResetSequence> {\n    constructor() {\n        super(\"proto.APLActionResetSequence\", [\n            { no: 1, name: \"sequence_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionResetSequence>): APLActionResetSequence {\n        const message = { sequenceName: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionResetSequence>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionResetSequence): APLActionResetSequence {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string sequence_name */ 1:\n                    message.sequenceName = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionResetSequence, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string sequence_name = 1; */\n        if (message.sequenceName !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.sequenceName);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionResetSequence\n */\nexport const APLActionResetSequence = new APLActionResetSequence$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionStrictSequence$Type extends MessageType<APLActionStrictSequence> {\n    constructor() {\n        super(\"proto.APLActionStrictSequence\", [\n            { no: 1, name: \"actions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLAction }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionStrictSequence>): APLActionStrictSequence {\n        const message = { actions: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionStrictSequence>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionStrictSequence): APLActionStrictSequence {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.APLAction actions */ 1:\n                    message.actions.push(APLAction.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionStrictSequence, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.APLAction actions = 1; */\n        for (let i = 0; i < message.actions.length; i++)\n            APLAction.internalBinaryWrite(message.actions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionStrictSequence\n */\nexport const APLActionStrictSequence = new APLActionStrictSequence$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionChangeTarget$Type extends MessageType<APLActionChangeTarget> {\n    constructor() {\n        super(\"proto.APLActionChangeTarget\", [\n            { no: 1, name: \"new_target\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionChangeTarget>): APLActionChangeTarget {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionChangeTarget>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionChangeTarget): APLActionChangeTarget {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference new_target */ 1:\n                    message.newTarget = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.newTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionChangeTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference new_target = 1; */\n        if (message.newTarget)\n            UnitReference.internalBinaryWrite(message.newTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionChangeTarget\n */\nexport const APLActionChangeTarget = new APLActionChangeTarget$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionCancelAura$Type extends MessageType<APLActionCancelAura> {\n    constructor() {\n        super(\"proto.APLActionCancelAura\", [\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionCancelAura>): APLActionCancelAura {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionCancelAura>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionCancelAura): APLActionCancelAura {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionCancelAura, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionCancelAura\n */\nexport const APLActionCancelAura = new APLActionCancelAura$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionActivateAura$Type extends MessageType<APLActionActivateAura> {\n    constructor() {\n        super(\"proto.APLActionActivateAura\", [\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionActivateAura>): APLActionActivateAura {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionActivateAura>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionActivateAura): APLActionActivateAura {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionActivateAura, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionActivateAura\n */\nexport const APLActionActivateAura = new APLActionActivateAura$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionTriggerICD$Type extends MessageType<APLActionTriggerICD> {\n    constructor() {\n        super(\"proto.APLActionTriggerICD\", [\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionTriggerICD>): APLActionTriggerICD {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionTriggerICD>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionTriggerICD): APLActionTriggerICD {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionTriggerICD, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionTriggerICD\n */\nexport const APLActionTriggerICD = new APLActionTriggerICD$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionItemSwap$Type extends MessageType<APLActionItemSwap> {\n    constructor() {\n        super(\"proto.APLActionItemSwap\", [\n            { no: 1, name: \"swap_set\", kind: \"enum\", T: () => [\"proto.APLActionItemSwap.SwapSet\", APLActionItemSwap_SwapSet] }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionItemSwap>): APLActionItemSwap {\n        const message = { swapSet: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionItemSwap>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionItemSwap): APLActionItemSwap {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLActionItemSwap.SwapSet swap_set */ 1:\n                    message.swapSet = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionItemSwap, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLActionItemSwap.SwapSet swap_set = 1; */\n        if (message.swapSet !== 0)\n            writer.tag(1, WireType.Varint).int32(message.swapSet);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionItemSwap\n */\nexport const APLActionItemSwap = new APLActionItemSwap$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionCatOptimalRotationAction$Type extends MessageType<APLActionCatOptimalRotationAction> {\n    constructor() {\n        super(\"proto.APLActionCatOptimalRotationAction\", [\n            { no: 1, name: \"rotation_type\", kind: \"enum\", T: () => [\"proto.FeralDruid.Rotation.AplType\", FeralDruid_Rotation_AplType] },\n            { no: 2, name: \"manual_params\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"max_ff_delay\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 4, name: \"min_roar_offset\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 5, name: \"rip_leeway\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"use_rake\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"use_bite\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"bite_time\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ },\n            { no: 9, name: \"flower_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionCatOptimalRotationAction>): APLActionCatOptimalRotationAction {\n        const message = { rotationType: 0, manualParams: false, maxFfDelay: 0, minRoarOffset: 0, ripLeeway: 0, useRake: false, useBite: false, biteTime: 0, flowerWeave: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionCatOptimalRotationAction>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionCatOptimalRotationAction): APLActionCatOptimalRotationAction {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FeralDruid.Rotation.AplType rotation_type */ 1:\n                    message.rotationType = reader.int32();\n                    break;\n                case /* bool manual_params */ 2:\n                    message.manualParams = reader.bool();\n                    break;\n                case /* float max_ff_delay */ 3:\n                    message.maxFfDelay = reader.float();\n                    break;\n                case /* float min_roar_offset */ 4:\n                    message.minRoarOffset = reader.float();\n                    break;\n                case /* int32 rip_leeway */ 5:\n                    message.ripLeeway = reader.int32();\n                    break;\n                case /* bool use_rake */ 6:\n                    message.useRake = reader.bool();\n                    break;\n                case /* bool use_bite */ 7:\n                    message.useBite = reader.bool();\n                    break;\n                case /* float bite_time */ 8:\n                    message.biteTime = reader.float();\n                    break;\n                case /* bool flower_weave */ 9:\n                    message.flowerWeave = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionCatOptimalRotationAction, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FeralDruid.Rotation.AplType rotation_type = 1; */\n        if (message.rotationType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.rotationType);\n        /* bool manual_params = 2; */\n        if (message.manualParams !== false)\n            writer.tag(2, WireType.Varint).bool(message.manualParams);\n        /* float max_ff_delay = 3; */\n        if (message.maxFfDelay !== 0)\n            writer.tag(3, WireType.Bit32).float(message.maxFfDelay);\n        /* float min_roar_offset = 4; */\n        if (message.minRoarOffset !== 0)\n            writer.tag(4, WireType.Bit32).float(message.minRoarOffset);\n        /* int32 rip_leeway = 5; */\n        if (message.ripLeeway !== 0)\n            writer.tag(5, WireType.Varint).int32(message.ripLeeway);\n        /* bool use_rake = 6; */\n        if (message.useRake !== false)\n            writer.tag(6, WireType.Varint).bool(message.useRake);\n        /* bool use_bite = 7; */\n        if (message.useBite !== false)\n            writer.tag(7, WireType.Varint).bool(message.useBite);\n        /* float bite_time = 8; */\n        if (message.biteTime !== 0)\n            writer.tag(8, WireType.Bit32).float(message.biteTime);\n        /* bool flower_weave = 9; */\n        if (message.flowerWeave !== false)\n            writer.tag(9, WireType.Varint).bool(message.flowerWeave);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionCatOptimalRotationAction\n */\nexport const APLActionCatOptimalRotationAction = new APLActionCatOptimalRotationAction$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionCustomRotation$Type extends MessageType<APLActionCustomRotation> {\n    constructor() {\n        super(\"proto.APLActionCustomRotation\", []);\n    }\n    create(value?: PartialMessage<APLActionCustomRotation>): APLActionCustomRotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionCustomRotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionCustomRotation): APLActionCustomRotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLActionCustomRotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionCustomRotation\n */\nexport const APLActionCustomRotation = new APLActionCustomRotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueConst$Type extends MessageType<APLValueConst> {\n    constructor() {\n        super(\"proto.APLValueConst\", [\n            { no: 1, name: \"val\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueConst>): APLValueConst {\n        const message = { val: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueConst>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueConst): APLValueConst {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string val */ 1:\n                    message.val = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueConst, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string val = 1; */\n        if (message.val !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.val);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueConst\n */\nexport const APLValueConst = new APLValueConst$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAnd$Type extends MessageType<APLValueAnd> {\n    constructor() {\n        super(\"proto.APLValueAnd\", [\n            { no: 1, name: \"vals\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAnd>): APLValueAnd {\n        const message = { vals: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAnd>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAnd): APLValueAnd {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.APLValue vals */ 1:\n                    message.vals.push(APLValue.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAnd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.APLValue vals = 1; */\n        for (let i = 0; i < message.vals.length; i++)\n            APLValue.internalBinaryWrite(message.vals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAnd\n */\nexport const APLValueAnd = new APLValueAnd$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueOr$Type extends MessageType<APLValueOr> {\n    constructor() {\n        super(\"proto.APLValueOr\", [\n            { no: 1, name: \"vals\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueOr>): APLValueOr {\n        const message = { vals: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueOr>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueOr): APLValueOr {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.APLValue vals */ 1:\n                    message.vals.push(APLValue.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueOr, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.APLValue vals = 1; */\n        for (let i = 0; i < message.vals.length; i++)\n            APLValue.internalBinaryWrite(message.vals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueOr\n */\nexport const APLValueOr = new APLValueOr$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueNot$Type extends MessageType<APLValueNot> {\n    constructor() {\n        super(\"proto.APLValueNot\", [\n            { no: 1, name: \"val\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueNot>): APLValueNot {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueNot>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueNot): APLValueNot {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValue val */ 1:\n                    message.val = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.val);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueNot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValue val = 1; */\n        if (message.val)\n            APLValue.internalBinaryWrite(message.val, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueNot\n */\nexport const APLValueNot = new APLValueNot$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCompare$Type extends MessageType<APLValueCompare> {\n    constructor() {\n        super(\"proto.APLValueCompare\", [\n            { no: 1, name: \"op\", kind: \"enum\", T: () => [\"proto.APLValueCompare.ComparisonOperator\", APLValueCompare_ComparisonOperator] },\n            { no: 2, name: \"lhs\", kind: \"message\", T: () => APLValue },\n            { no: 3, name: \"rhs\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCompare>): APLValueCompare {\n        const message = { op: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCompare>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCompare): APLValueCompare {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueCompare.ComparisonOperator op */ 1:\n                    message.op = reader.int32();\n                    break;\n                case /* proto.APLValue lhs */ 2:\n                    message.lhs = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.lhs);\n                    break;\n                case /* proto.APLValue rhs */ 3:\n                    message.rhs = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.rhs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCompare, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueCompare.ComparisonOperator op = 1; */\n        if (message.op !== 0)\n            writer.tag(1, WireType.Varint).int32(message.op);\n        /* proto.APLValue lhs = 2; */\n        if (message.lhs)\n            APLValue.internalBinaryWrite(message.lhs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValue rhs = 3; */\n        if (message.rhs)\n            APLValue.internalBinaryWrite(message.rhs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCompare\n */\nexport const APLValueCompare = new APLValueCompare$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueMath$Type extends MessageType<APLValueMath> {\n    constructor() {\n        super(\"proto.APLValueMath\", [\n            { no: 1, name: \"op\", kind: \"enum\", T: () => [\"proto.APLValueMath.MathOperator\", APLValueMath_MathOperator] },\n            { no: 2, name: \"lhs\", kind: \"message\", T: () => APLValue },\n            { no: 3, name: \"rhs\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueMath>): APLValueMath {\n        const message = { op: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueMath>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueMath): APLValueMath {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueMath.MathOperator op */ 1:\n                    message.op = reader.int32();\n                    break;\n                case /* proto.APLValue lhs */ 2:\n                    message.lhs = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.lhs);\n                    break;\n                case /* proto.APLValue rhs */ 3:\n                    message.rhs = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.rhs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueMath, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueMath.MathOperator op = 1; */\n        if (message.op !== 0)\n            writer.tag(1, WireType.Varint).int32(message.op);\n        /* proto.APLValue lhs = 2; */\n        if (message.lhs)\n            APLValue.internalBinaryWrite(message.lhs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValue rhs = 3; */\n        if (message.rhs)\n            APLValue.internalBinaryWrite(message.rhs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueMath\n */\nexport const APLValueMath = new APLValueMath$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueMax$Type extends MessageType<APLValueMax> {\n    constructor() {\n        super(\"proto.APLValueMax\", [\n            { no: 1, name: \"vals\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueMax>): APLValueMax {\n        const message = { vals: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueMax>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueMax): APLValueMax {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.APLValue vals */ 1:\n                    message.vals.push(APLValue.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueMax, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.APLValue vals = 1; */\n        for (let i = 0; i < message.vals.length; i++)\n            APLValue.internalBinaryWrite(message.vals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueMax\n */\nexport const APLValueMax = new APLValueMax$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueMin$Type extends MessageType<APLValueMin> {\n    constructor() {\n        super(\"proto.APLValueMin\", [\n            { no: 1, name: \"vals\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueMin>): APLValueMin {\n        const message = { vals: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueMin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueMin): APLValueMin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.APLValue vals */ 1:\n                    message.vals.push(APLValue.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueMin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.APLValue vals = 1; */\n        for (let i = 0; i < message.vals.length; i++)\n            APLValue.internalBinaryWrite(message.vals[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueMin\n */\nexport const APLValueMin = new APLValueMin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentTime$Type extends MessageType<APLValueCurrentTime> {\n    constructor() {\n        super(\"proto.APLValueCurrentTime\", []);\n    }\n    create(value?: PartialMessage<APLValueCurrentTime>): APLValueCurrentTime {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentTime): APLValueCurrentTime {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCurrentTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentTime\n */\nexport const APLValueCurrentTime = new APLValueCurrentTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentTimePercent$Type extends MessageType<APLValueCurrentTimePercent> {\n    constructor() {\n        super(\"proto.APLValueCurrentTimePercent\", []);\n    }\n    create(value?: PartialMessage<APLValueCurrentTimePercent>): APLValueCurrentTimePercent {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentTimePercent>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentTimePercent): APLValueCurrentTimePercent {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCurrentTimePercent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentTimePercent\n */\nexport const APLValueCurrentTimePercent = new APLValueCurrentTimePercent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueRemainingTime$Type extends MessageType<APLValueRemainingTime> {\n    constructor() {\n        super(\"proto.APLValueRemainingTime\", []);\n    }\n    create(value?: PartialMessage<APLValueRemainingTime>): APLValueRemainingTime {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueRemainingTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueRemainingTime): APLValueRemainingTime {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueRemainingTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueRemainingTime\n */\nexport const APLValueRemainingTime = new APLValueRemainingTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueRemainingTimePercent$Type extends MessageType<APLValueRemainingTimePercent> {\n    constructor() {\n        super(\"proto.APLValueRemainingTimePercent\", []);\n    }\n    create(value?: PartialMessage<APLValueRemainingTimePercent>): APLValueRemainingTimePercent {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueRemainingTimePercent>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueRemainingTimePercent): APLValueRemainingTimePercent {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueRemainingTimePercent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueRemainingTimePercent\n */\nexport const APLValueRemainingTimePercent = new APLValueRemainingTimePercent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueNumberTargets$Type extends MessageType<APLValueNumberTargets> {\n    constructor() {\n        super(\"proto.APLValueNumberTargets\", []);\n    }\n    create(value?: PartialMessage<APLValueNumberTargets>): APLValueNumberTargets {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueNumberTargets>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueNumberTargets): APLValueNumberTargets {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueNumberTargets, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueNumberTargets\n */\nexport const APLValueNumberTargets = new APLValueNumberTargets$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueIsExecutePhase$Type extends MessageType<APLValueIsExecutePhase> {\n    constructor() {\n        super(\"proto.APLValueIsExecutePhase\", [\n            { no: 1, name: \"threshold\", kind: \"enum\", T: () => [\"proto.APLValueIsExecutePhase.ExecutePhaseThreshold\", APLValueIsExecutePhase_ExecutePhaseThreshold] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueIsExecutePhase>): APLValueIsExecutePhase {\n        const message = { threshold: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueIsExecutePhase>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueIsExecutePhase): APLValueIsExecutePhase {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueIsExecutePhase.ExecutePhaseThreshold threshold */ 1:\n                    message.threshold = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueIsExecutePhase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueIsExecutePhase.ExecutePhaseThreshold threshold = 1; */\n        if (message.threshold !== 0)\n            writer.tag(1, WireType.Varint).int32(message.threshold);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueIsExecutePhase\n */\nexport const APLValueIsExecutePhase = new APLValueIsExecutePhase$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueBossSpellTimeToReady$Type extends MessageType<APLValueBossSpellTimeToReady> {\n    constructor() {\n        super(\"proto.APLValueBossSpellTimeToReady\", [\n            { no: 1, name: \"target_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 2, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueBossSpellTimeToReady>): APLValueBossSpellTimeToReady {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueBossSpellTimeToReady>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueBossSpellTimeToReady): APLValueBossSpellTimeToReady {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference target_unit */ 1:\n                    message.targetUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.targetUnit);\n                    break;\n                case /* proto.ActionID spell_id */ 2:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueBossSpellTimeToReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference target_unit = 1; */\n        if (message.targetUnit)\n            UnitReference.internalBinaryWrite(message.targetUnit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID spell_id = 2; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueBossSpellTimeToReady\n */\nexport const APLValueBossSpellTimeToReady = new APLValueBossSpellTimeToReady$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueBossSpellIsCasting$Type extends MessageType<APLValueBossSpellIsCasting> {\n    constructor() {\n        super(\"proto.APLValueBossSpellIsCasting\", [\n            { no: 1, name: \"target_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 2, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueBossSpellIsCasting>): APLValueBossSpellIsCasting {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueBossSpellIsCasting>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueBossSpellIsCasting): APLValueBossSpellIsCasting {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference target_unit */ 1:\n                    message.targetUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.targetUnit);\n                    break;\n                case /* proto.ActionID spell_id */ 2:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueBossSpellIsCasting, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference target_unit = 1; */\n        if (message.targetUnit)\n            UnitReference.internalBinaryWrite(message.targetUnit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID spell_id = 2; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueBossSpellIsCasting\n */\nexport const APLValueBossSpellIsCasting = new APLValueBossSpellIsCasting$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentHealth$Type extends MessageType<APLValueCurrentHealth> {\n    constructor() {\n        super(\"proto.APLValueCurrentHealth\", [\n            { no: 1, name: \"source_unit\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentHealth>): APLValueCurrentHealth {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentHealth>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentHealth): APLValueCurrentHealth {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 1:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentHealth, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 1; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentHealth\n */\nexport const APLValueCurrentHealth = new APLValueCurrentHealth$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentHealthPercent$Type extends MessageType<APLValueCurrentHealthPercent> {\n    constructor() {\n        super(\"proto.APLValueCurrentHealthPercent\", [\n            { no: 1, name: \"source_unit\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentHealthPercent>): APLValueCurrentHealthPercent {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentHealthPercent>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentHealthPercent): APLValueCurrentHealthPercent {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 1:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentHealthPercent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 1; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentHealthPercent\n */\nexport const APLValueCurrentHealthPercent = new APLValueCurrentHealthPercent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentMana$Type extends MessageType<APLValueCurrentMana> {\n    constructor() {\n        super(\"proto.APLValueCurrentMana\", [\n            { no: 1, name: \"source_unit\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentMana>): APLValueCurrentMana {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentMana>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentMana): APLValueCurrentMana {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 1:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentMana, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 1; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentMana\n */\nexport const APLValueCurrentMana = new APLValueCurrentMana$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentManaPercent$Type extends MessageType<APLValueCurrentManaPercent> {\n    constructor() {\n        super(\"proto.APLValueCurrentManaPercent\", [\n            { no: 1, name: \"source_unit\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentManaPercent>): APLValueCurrentManaPercent {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentManaPercent>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentManaPercent): APLValueCurrentManaPercent {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 1:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentManaPercent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 1; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentManaPercent\n */\nexport const APLValueCurrentManaPercent = new APLValueCurrentManaPercent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentRage$Type extends MessageType<APLValueCurrentRage> {\n    constructor() {\n        super(\"proto.APLValueCurrentRage\", []);\n    }\n    create(value?: PartialMessage<APLValueCurrentRage>): APLValueCurrentRage {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentRage>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentRage): APLValueCurrentRage {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCurrentRage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentRage\n */\nexport const APLValueCurrentRage = new APLValueCurrentRage$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentEnergy$Type extends MessageType<APLValueCurrentEnergy> {\n    constructor() {\n        super(\"proto.APLValueCurrentEnergy\", []);\n    }\n    create(value?: PartialMessage<APLValueCurrentEnergy>): APLValueCurrentEnergy {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentEnergy>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentEnergy): APLValueCurrentEnergy {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCurrentEnergy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentEnergy\n */\nexport const APLValueCurrentEnergy = new APLValueCurrentEnergy$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentFocus$Type extends MessageType<APLValueCurrentFocus> {\n    constructor() {\n        super(\"proto.APLValueCurrentFocus\", []);\n    }\n    create(value?: PartialMessage<APLValueCurrentFocus>): APLValueCurrentFocus {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentFocus>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentFocus): APLValueCurrentFocus {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCurrentFocus, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentFocus\n */\nexport const APLValueCurrentFocus = new APLValueCurrentFocus$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentComboPoints$Type extends MessageType<APLValueCurrentComboPoints> {\n    constructor() {\n        super(\"proto.APLValueCurrentComboPoints\", []);\n    }\n    create(value?: PartialMessage<APLValueCurrentComboPoints>): APLValueCurrentComboPoints {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentComboPoints>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentComboPoints): APLValueCurrentComboPoints {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCurrentComboPoints, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentComboPoints\n */\nexport const APLValueCurrentComboPoints = new APLValueCurrentComboPoints$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentRunicPower$Type extends MessageType<APLValueCurrentRunicPower> {\n    constructor() {\n        super(\"proto.APLValueCurrentRunicPower\", []);\n    }\n    create(value?: PartialMessage<APLValueCurrentRunicPower>): APLValueCurrentRunicPower {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentRunicPower>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentRunicPower): APLValueCurrentRunicPower {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCurrentRunicPower, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentRunicPower\n */\nexport const APLValueCurrentRunicPower = new APLValueCurrentRunicPower$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentRuneCount$Type extends MessageType<APLValueCurrentRuneCount> {\n    constructor() {\n        super(\"proto.APLValueCurrentRuneCount\", [\n            { no: 1, name: \"rune_type\", kind: \"enum\", T: () => [\"proto.APLValueRuneType\", APLValueRuneType] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentRuneCount>): APLValueCurrentRuneCount {\n        const message = { runeType: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentRuneCount>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentRuneCount): APLValueCurrentRuneCount {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueRuneType rune_type */ 1:\n                    message.runeType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentRuneCount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueRuneType rune_type = 1; */\n        if (message.runeType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.runeType);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentRuneCount\n */\nexport const APLValueCurrentRuneCount = new APLValueCurrentRuneCount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentNonDeathRuneCount$Type extends MessageType<APLValueCurrentNonDeathRuneCount> {\n    constructor() {\n        super(\"proto.APLValueCurrentNonDeathRuneCount\", [\n            { no: 1, name: \"rune_type\", kind: \"enum\", T: () => [\"proto.APLValueRuneType\", APLValueRuneType] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentNonDeathRuneCount>): APLValueCurrentNonDeathRuneCount {\n        const message = { runeType: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentNonDeathRuneCount>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentNonDeathRuneCount): APLValueCurrentNonDeathRuneCount {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueRuneType rune_type */ 1:\n                    message.runeType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentNonDeathRuneCount, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueRuneType rune_type = 1; */\n        if (message.runeType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.runeType);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentNonDeathRuneCount\n */\nexport const APLValueCurrentNonDeathRuneCount = new APLValueCurrentNonDeathRuneCount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentRuneDeath$Type extends MessageType<APLValueCurrentRuneDeath> {\n    constructor() {\n        super(\"proto.APLValueCurrentRuneDeath\", [\n            { no: 1, name: \"rune_slot\", kind: \"enum\", T: () => [\"proto.APLValueRuneSlot\", APLValueRuneSlot] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentRuneDeath>): APLValueCurrentRuneDeath {\n        const message = { runeSlot: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentRuneDeath>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentRuneDeath): APLValueCurrentRuneDeath {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueRuneSlot rune_slot */ 1:\n                    message.runeSlot = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentRuneDeath, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueRuneSlot rune_slot = 1; */\n        if (message.runeSlot !== 0)\n            writer.tag(1, WireType.Varint).int32(message.runeSlot);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentRuneDeath\n */\nexport const APLValueCurrentRuneDeath = new APLValueCurrentRuneDeath$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCurrentRuneActive$Type extends MessageType<APLValueCurrentRuneActive> {\n    constructor() {\n        super(\"proto.APLValueCurrentRuneActive\", [\n            { no: 1, name: \"rune_slot\", kind: \"enum\", T: () => [\"proto.APLValueRuneSlot\", APLValueRuneSlot] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueCurrentRuneActive>): APLValueCurrentRuneActive {\n        const message = { runeSlot: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCurrentRuneActive>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCurrentRuneActive): APLValueCurrentRuneActive {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueRuneSlot rune_slot */ 1:\n                    message.runeSlot = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueCurrentRuneActive, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueRuneSlot rune_slot = 1; */\n        if (message.runeSlot !== 0)\n            writer.tag(1, WireType.Varint).int32(message.runeSlot);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCurrentRuneActive\n */\nexport const APLValueCurrentRuneActive = new APLValueCurrentRuneActive$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueRuneCooldown$Type extends MessageType<APLValueRuneCooldown> {\n    constructor() {\n        super(\"proto.APLValueRuneCooldown\", [\n            { no: 1, name: \"rune_type\", kind: \"enum\", T: () => [\"proto.APLValueRuneType\", APLValueRuneType] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueRuneCooldown>): APLValueRuneCooldown {\n        const message = { runeType: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueRuneCooldown>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueRuneCooldown): APLValueRuneCooldown {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueRuneType rune_type */ 1:\n                    message.runeType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueRuneCooldown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueRuneType rune_type = 1; */\n        if (message.runeType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.runeType);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueRuneCooldown\n */\nexport const APLValueRuneCooldown = new APLValueRuneCooldown$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueNextRuneCooldown$Type extends MessageType<APLValueNextRuneCooldown> {\n    constructor() {\n        super(\"proto.APLValueNextRuneCooldown\", [\n            { no: 1, name: \"rune_type\", kind: \"enum\", T: () => [\"proto.APLValueRuneType\", APLValueRuneType] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueNextRuneCooldown>): APLValueNextRuneCooldown {\n        const message = { runeType: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueNextRuneCooldown>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueNextRuneCooldown): APLValueNextRuneCooldown {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueRuneType rune_type */ 1:\n                    message.runeType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueNextRuneCooldown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueRuneType rune_type = 1; */\n        if (message.runeType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.runeType);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueNextRuneCooldown\n */\nexport const APLValueNextRuneCooldown = new APLValueNextRuneCooldown$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueRuneSlotCooldown$Type extends MessageType<APLValueRuneSlotCooldown> {\n    constructor() {\n        super(\"proto.APLValueRuneSlotCooldown\", [\n            { no: 1, name: \"rune_slot\", kind: \"enum\", T: () => [\"proto.APLValueRuneSlot\", APLValueRuneSlot] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueRuneSlotCooldown>): APLValueRuneSlotCooldown {\n        const message = { runeSlot: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueRuneSlotCooldown>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueRuneSlotCooldown): APLValueRuneSlotCooldown {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueRuneSlot rune_slot */ 1:\n                    message.runeSlot = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueRuneSlotCooldown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueRuneSlot rune_slot = 1; */\n        if (message.runeSlot !== 0)\n            writer.tag(1, WireType.Varint).int32(message.runeSlot);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueRuneSlotCooldown\n */\nexport const APLValueRuneSlotCooldown = new APLValueRuneSlotCooldown$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueRuneGrace$Type extends MessageType<APLValueRuneGrace> {\n    constructor() {\n        super(\"proto.APLValueRuneGrace\", [\n            { no: 1, name: \"rune_type\", kind: \"enum\", T: () => [\"proto.APLValueRuneType\", APLValueRuneType] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueRuneGrace>): APLValueRuneGrace {\n        const message = { runeType: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueRuneGrace>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueRuneGrace): APLValueRuneGrace {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueRuneType rune_type */ 1:\n                    message.runeType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueRuneGrace, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueRuneType rune_type = 1; */\n        if (message.runeType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.runeType);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueRuneGrace\n */\nexport const APLValueRuneGrace = new APLValueRuneGrace$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueRuneSlotGrace$Type extends MessageType<APLValueRuneSlotGrace> {\n    constructor() {\n        super(\"proto.APLValueRuneSlotGrace\", [\n            { no: 1, name: \"rune_slot\", kind: \"enum\", T: () => [\"proto.APLValueRuneType\", APLValueRuneType] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueRuneSlotGrace>): APLValueRuneSlotGrace {\n        const message = { runeSlot: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueRuneSlotGrace>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueRuneSlotGrace): APLValueRuneSlotGrace {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLValueRuneType rune_slot */ 1:\n                    message.runeSlot = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueRuneSlotGrace, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLValueRuneType rune_slot = 1; */\n        if (message.runeSlot !== 0)\n            writer.tag(1, WireType.Varint).int32(message.runeSlot);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueRuneSlotGrace\n */\nexport const APLValueRuneSlotGrace = new APLValueRuneSlotGrace$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueGCDIsReady$Type extends MessageType<APLValueGCDIsReady> {\n    constructor() {\n        super(\"proto.APLValueGCDIsReady\", []);\n    }\n    create(value?: PartialMessage<APLValueGCDIsReady>): APLValueGCDIsReady {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueGCDIsReady>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueGCDIsReady): APLValueGCDIsReady {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueGCDIsReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueGCDIsReady\n */\nexport const APLValueGCDIsReady = new APLValueGCDIsReady$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueGCDTimeToReady$Type extends MessageType<APLValueGCDTimeToReady> {\n    constructor() {\n        super(\"proto.APLValueGCDTimeToReady\", []);\n    }\n    create(value?: PartialMessage<APLValueGCDTimeToReady>): APLValueGCDTimeToReady {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueGCDTimeToReady>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueGCDTimeToReady): APLValueGCDTimeToReady {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueGCDTimeToReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueGCDTimeToReady\n */\nexport const APLValueGCDTimeToReady = new APLValueGCDTimeToReady$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAutoTimeToNext$Type extends MessageType<APLValueAutoTimeToNext> {\n    constructor() {\n        super(\"proto.APLValueAutoTimeToNext\", []);\n    }\n    create(value?: PartialMessage<APLValueAutoTimeToNext>): APLValueAutoTimeToNext {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAutoTimeToNext>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAutoTimeToNext): APLValueAutoTimeToNext {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueAutoTimeToNext, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAutoTimeToNext\n */\nexport const APLValueAutoTimeToNext = new APLValueAutoTimeToNext$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellCanCast$Type extends MessageType<APLValueSpellCanCast> {\n    constructor() {\n        super(\"proto.APLValueSpellCanCast\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellCanCast>): APLValueSpellCanCast {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellCanCast>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellCanCast): APLValueSpellCanCast {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellCanCast, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellCanCast\n */\nexport const APLValueSpellCanCast = new APLValueSpellCanCast$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellIsReady$Type extends MessageType<APLValueSpellIsReady> {\n    constructor() {\n        super(\"proto.APLValueSpellIsReady\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellIsReady>): APLValueSpellIsReady {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellIsReady>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellIsReady): APLValueSpellIsReady {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellIsReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellIsReady\n */\nexport const APLValueSpellIsReady = new APLValueSpellIsReady$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellTimeToReady$Type extends MessageType<APLValueSpellTimeToReady> {\n    constructor() {\n        super(\"proto.APLValueSpellTimeToReady\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellTimeToReady>): APLValueSpellTimeToReady {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellTimeToReady>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellTimeToReady): APLValueSpellTimeToReady {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellTimeToReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellTimeToReady\n */\nexport const APLValueSpellTimeToReady = new APLValueSpellTimeToReady$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellCastTime$Type extends MessageType<APLValueSpellCastTime> {\n    constructor() {\n        super(\"proto.APLValueSpellCastTime\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellCastTime>): APLValueSpellCastTime {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellCastTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellCastTime): APLValueSpellCastTime {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellCastTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellCastTime\n */\nexport const APLValueSpellCastTime = new APLValueSpellCastTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueChannelClipDelay$Type extends MessageType<APLValueChannelClipDelay> {\n    constructor() {\n        super(\"proto.APLValueChannelClipDelay\", []);\n    }\n    create(value?: PartialMessage<APLValueChannelClipDelay>): APLValueChannelClipDelay {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueChannelClipDelay>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueChannelClipDelay): APLValueChannelClipDelay {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueChannelClipDelay, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueChannelClipDelay\n */\nexport const APLValueChannelClipDelay = new APLValueChannelClipDelay$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueFrontOfTarget$Type extends MessageType<APLValueFrontOfTarget> {\n    constructor() {\n        super(\"proto.APLValueFrontOfTarget\", []);\n    }\n    create(value?: PartialMessage<APLValueFrontOfTarget>): APLValueFrontOfTarget {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueFrontOfTarget>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueFrontOfTarget): APLValueFrontOfTarget {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueFrontOfTarget, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueFrontOfTarget\n */\nexport const APLValueFrontOfTarget = new APLValueFrontOfTarget$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellTravelTime$Type extends MessageType<APLValueSpellTravelTime> {\n    constructor() {\n        super(\"proto.APLValueSpellTravelTime\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellTravelTime>): APLValueSpellTravelTime {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellTravelTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellTravelTime): APLValueSpellTravelTime {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellTravelTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellTravelTime\n */\nexport const APLValueSpellTravelTime = new APLValueSpellTravelTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellCPM$Type extends MessageType<APLValueSpellCPM> {\n    constructor() {\n        super(\"proto.APLValueSpellCPM\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellCPM>): APLValueSpellCPM {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellCPM>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellCPM): APLValueSpellCPM {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellCPM, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellCPM\n */\nexport const APLValueSpellCPM = new APLValueSpellCPM$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellIsChanneling$Type extends MessageType<APLValueSpellIsChanneling> {\n    constructor() {\n        super(\"proto.APLValueSpellIsChanneling\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellIsChanneling>): APLValueSpellIsChanneling {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellIsChanneling>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellIsChanneling): APLValueSpellIsChanneling {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellIsChanneling, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellIsChanneling\n */\nexport const APLValueSpellIsChanneling = new APLValueSpellIsChanneling$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellChanneledTicks$Type extends MessageType<APLValueSpellChanneledTicks> {\n    constructor() {\n        super(\"proto.APLValueSpellChanneledTicks\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellChanneledTicks>): APLValueSpellChanneledTicks {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellChanneledTicks>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellChanneledTicks): APLValueSpellChanneledTicks {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellChanneledTicks, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellChanneledTicks\n */\nexport const APLValueSpellChanneledTicks = new APLValueSpellChanneledTicks$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSpellCurrentCost$Type extends MessageType<APLValueSpellCurrentCost> {\n    constructor() {\n        super(\"proto.APLValueSpellCurrentCost\", [\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSpellCurrentCost>): APLValueSpellCurrentCost {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSpellCurrentCost>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSpellCurrentCost): APLValueSpellCurrentCost {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSpellCurrentCost, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSpellCurrentCost\n */\nexport const APLValueSpellCurrentCost = new APLValueSpellCurrentCost$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAuraIsActive$Type extends MessageType<APLValueAuraIsActive> {\n    constructor() {\n        super(\"proto.APLValueAuraIsActive\", [\n            { no: 2, name: \"source_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAuraIsActive>): APLValueAuraIsActive {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAuraIsActive>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAuraIsActive): APLValueAuraIsActive {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 2:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAuraIsActive, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 2; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAuraIsActive\n */\nexport const APLValueAuraIsActive = new APLValueAuraIsActive$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAuraIsActiveWithReactionTime$Type extends MessageType<APLValueAuraIsActiveWithReactionTime> {\n    constructor() {\n        super(\"proto.APLValueAuraIsActiveWithReactionTime\", [\n            { no: 2, name: \"source_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAuraIsActiveWithReactionTime>): APLValueAuraIsActiveWithReactionTime {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAuraIsActiveWithReactionTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAuraIsActiveWithReactionTime): APLValueAuraIsActiveWithReactionTime {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 2:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAuraIsActiveWithReactionTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 2; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAuraIsActiveWithReactionTime\n */\nexport const APLValueAuraIsActiveWithReactionTime = new APLValueAuraIsActiveWithReactionTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAuraRemainingTime$Type extends MessageType<APLValueAuraRemainingTime> {\n    constructor() {\n        super(\"proto.APLValueAuraRemainingTime\", [\n            { no: 2, name: \"source_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAuraRemainingTime>): APLValueAuraRemainingTime {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAuraRemainingTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAuraRemainingTime): APLValueAuraRemainingTime {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 2:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAuraRemainingTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 2; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAuraRemainingTime\n */\nexport const APLValueAuraRemainingTime = new APLValueAuraRemainingTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAuraNumStacks$Type extends MessageType<APLValueAuraNumStacks> {\n    constructor() {\n        super(\"proto.APLValueAuraNumStacks\", [\n            { no: 2, name: \"source_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAuraNumStacks>): APLValueAuraNumStacks {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAuraNumStacks>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAuraNumStacks): APLValueAuraNumStacks {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 2:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAuraNumStacks, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 2; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAuraNumStacks\n */\nexport const APLValueAuraNumStacks = new APLValueAuraNumStacks$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAuraInternalCooldown$Type extends MessageType<APLValueAuraInternalCooldown> {\n    constructor() {\n        super(\"proto.APLValueAuraInternalCooldown\", [\n            { no: 2, name: \"source_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAuraInternalCooldown>): APLValueAuraInternalCooldown {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAuraInternalCooldown>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAuraInternalCooldown): APLValueAuraInternalCooldown {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 2:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAuraInternalCooldown, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 2; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAuraInternalCooldown\n */\nexport const APLValueAuraInternalCooldown = new APLValueAuraInternalCooldown$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAuraICDIsReadyWithReactionTime$Type extends MessageType<APLValueAuraICDIsReadyWithReactionTime> {\n    constructor() {\n        super(\"proto.APLValueAuraICDIsReadyWithReactionTime\", [\n            { no: 2, name: \"source_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAuraICDIsReadyWithReactionTime>): APLValueAuraICDIsReadyWithReactionTime {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAuraICDIsReadyWithReactionTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAuraICDIsReadyWithReactionTime): APLValueAuraICDIsReadyWithReactionTime {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 2:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAuraICDIsReadyWithReactionTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 2; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAuraICDIsReadyWithReactionTime\n */\nexport const APLValueAuraICDIsReadyWithReactionTime = new APLValueAuraICDIsReadyWithReactionTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueAuraShouldRefresh$Type extends MessageType<APLValueAuraShouldRefresh> {\n    constructor() {\n        super(\"proto.APLValueAuraShouldRefresh\", [\n            { no: 2, name: \"source_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"aura_id\", kind: \"message\", T: () => ActionID },\n            { no: 3, name: \"max_overlap\", kind: \"message\", T: () => APLValue }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueAuraShouldRefresh>): APLValueAuraShouldRefresh {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueAuraShouldRefresh>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueAuraShouldRefresh): APLValueAuraShouldRefresh {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference source_unit */ 2:\n                    message.sourceUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.sourceUnit);\n                    break;\n                case /* proto.ActionID aura_id */ 1:\n                    message.auraId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.auraId);\n                    break;\n                case /* proto.APLValue max_overlap */ 3:\n                    message.maxOverlap = APLValue.internalBinaryRead(reader, reader.uint32(), options, message.maxOverlap);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueAuraShouldRefresh, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference source_unit = 2; */\n        if (message.sourceUnit)\n            UnitReference.internalBinaryWrite(message.sourceUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID aura_id = 1; */\n        if (message.auraId)\n            ActionID.internalBinaryWrite(message.auraId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLValue max_overlap = 3; */\n        if (message.maxOverlap)\n            APLValue.internalBinaryWrite(message.maxOverlap, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueAuraShouldRefresh\n */\nexport const APLValueAuraShouldRefresh = new APLValueAuraShouldRefresh$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueDotIsActive$Type extends MessageType<APLValueDotIsActive> {\n    constructor() {\n        super(\"proto.APLValueDotIsActive\", [\n            { no: 2, name: \"target_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueDotIsActive>): APLValueDotIsActive {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueDotIsActive>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueDotIsActive): APLValueDotIsActive {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference target_unit */ 2:\n                    message.targetUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.targetUnit);\n                    break;\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueDotIsActive, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference target_unit = 2; */\n        if (message.targetUnit)\n            UnitReference.internalBinaryWrite(message.targetUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueDotIsActive\n */\nexport const APLValueDotIsActive = new APLValueDotIsActive$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueDotRemainingTime$Type extends MessageType<APLValueDotRemainingTime> {\n    constructor() {\n        super(\"proto.APLValueDotRemainingTime\", [\n            { no: 2, name: \"target_unit\", kind: \"message\", T: () => UnitReference },\n            { no: 1, name: \"spell_id\", kind: \"message\", T: () => ActionID }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueDotRemainingTime>): APLValueDotRemainingTime {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueDotRemainingTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueDotRemainingTime): APLValueDotRemainingTime {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference target_unit */ 2:\n                    message.targetUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.targetUnit);\n                    break;\n                case /* proto.ActionID spell_id */ 1:\n                    message.spellId = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.spellId);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueDotRemainingTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference target_unit = 2; */\n        if (message.targetUnit)\n            UnitReference.internalBinaryWrite(message.targetUnit, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ActionID spell_id = 1; */\n        if (message.spellId)\n            ActionID.internalBinaryWrite(message.spellId, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueDotRemainingTime\n */\nexport const APLValueDotRemainingTime = new APLValueDotRemainingTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSequenceIsComplete$Type extends MessageType<APLValueSequenceIsComplete> {\n    constructor() {\n        super(\"proto.APLValueSequenceIsComplete\", [\n            { no: 1, name: \"sequence_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSequenceIsComplete>): APLValueSequenceIsComplete {\n        const message = { sequenceName: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSequenceIsComplete>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSequenceIsComplete): APLValueSequenceIsComplete {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string sequence_name */ 1:\n                    message.sequenceName = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSequenceIsComplete, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string sequence_name = 1; */\n        if (message.sequenceName !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.sequenceName);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSequenceIsComplete\n */\nexport const APLValueSequenceIsComplete = new APLValueSequenceIsComplete$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSequenceIsReady$Type extends MessageType<APLValueSequenceIsReady> {\n    constructor() {\n        super(\"proto.APLValueSequenceIsReady\", [\n            { no: 1, name: \"sequence_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSequenceIsReady>): APLValueSequenceIsReady {\n        const message = { sequenceName: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSequenceIsReady>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSequenceIsReady): APLValueSequenceIsReady {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string sequence_name */ 1:\n                    message.sequenceName = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSequenceIsReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string sequence_name = 1; */\n        if (message.sequenceName !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.sequenceName);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSequenceIsReady\n */\nexport const APLValueSequenceIsReady = new APLValueSequenceIsReady$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueSequenceTimeToReady$Type extends MessageType<APLValueSequenceTimeToReady> {\n    constructor() {\n        super(\"proto.APLValueSequenceTimeToReady\", [\n            { no: 1, name: \"sequence_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueSequenceTimeToReady>): APLValueSequenceTimeToReady {\n        const message = { sequenceName: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueSequenceTimeToReady>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueSequenceTimeToReady): APLValueSequenceTimeToReady {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string sequence_name */ 1:\n                    message.sequenceName = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueSequenceTimeToReady, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string sequence_name = 1; */\n        if (message.sequenceName !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.sequenceName);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueSequenceTimeToReady\n */\nexport const APLValueSequenceTimeToReady = new APLValueSequenceTimeToReady$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueTotemRemainingTime$Type extends MessageType<APLValueTotemRemainingTime> {\n    constructor() {\n        super(\"proto.APLValueTotemRemainingTime\", [\n            { no: 1, name: \"totem_type\", kind: \"enum\", T: () => [\"proto.ShamanTotems.TotemType\", ShamanTotems_TotemType] }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueTotemRemainingTime>): APLValueTotemRemainingTime {\n        const message = { totemType: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueTotemRemainingTime>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueTotemRemainingTime): APLValueTotemRemainingTime {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShamanTotems.TotemType totem_type */ 1:\n                    message.totemType = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueTotemRemainingTime, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShamanTotems.TotemType totem_type = 1; */\n        if (message.totemType !== 0)\n            writer.tag(1, WireType.Varint).int32(message.totemType);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueTotemRemainingTime\n */\nexport const APLValueTotemRemainingTime = new APLValueTotemRemainingTime$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCatExcessEnergy$Type extends MessageType<APLValueCatExcessEnergy> {\n    constructor() {\n        super(\"proto.APLValueCatExcessEnergy\", []);\n    }\n    create(value?: PartialMessage<APLValueCatExcessEnergy>): APLValueCatExcessEnergy {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCatExcessEnergy>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCatExcessEnergy): APLValueCatExcessEnergy {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCatExcessEnergy, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCatExcessEnergy\n */\nexport const APLValueCatExcessEnergy = new APLValueCatExcessEnergy$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueCatNewSavageRoarDuration$Type extends MessageType<APLValueCatNewSavageRoarDuration> {\n    constructor() {\n        super(\"proto.APLValueCatNewSavageRoarDuration\", []);\n    }\n    create(value?: PartialMessage<APLValueCatNewSavageRoarDuration>): APLValueCatNewSavageRoarDuration {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueCatNewSavageRoarDuration>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueCatNewSavageRoarDuration): APLValueCatNewSavageRoarDuration {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueCatNewSavageRoarDuration, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueCatNewSavageRoarDuration\n */\nexport const APLValueCatNewSavageRoarDuration = new APLValueCatNewSavageRoarDuration$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueWarlockShouldRecastDrainSoul$Type extends MessageType<APLValueWarlockShouldRecastDrainSoul> {\n    constructor() {\n        super(\"proto.APLValueWarlockShouldRecastDrainSoul\", []);\n    }\n    create(value?: PartialMessage<APLValueWarlockShouldRecastDrainSoul>): APLValueWarlockShouldRecastDrainSoul {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueWarlockShouldRecastDrainSoul>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueWarlockShouldRecastDrainSoul): APLValueWarlockShouldRecastDrainSoul {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: APLValueWarlockShouldRecastDrainSoul, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueWarlockShouldRecastDrainSoul\n */\nexport const APLValueWarlockShouldRecastDrainSoul = new APLValueWarlockShouldRecastDrainSoul$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLValueWarlockShouldRefreshCorruption$Type extends MessageType<APLValueWarlockShouldRefreshCorruption> {\n    constructor() {\n        super(\"proto.APLValueWarlockShouldRefreshCorruption\", [\n            { no: 1, name: \"target_unit\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<APLValueWarlockShouldRefreshCorruption>): APLValueWarlockShouldRefreshCorruption {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLValueWarlockShouldRefreshCorruption>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLValueWarlockShouldRefreshCorruption): APLValueWarlockShouldRefreshCorruption {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference target_unit */ 1:\n                    message.targetUnit = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.targetUnit);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLValueWarlockShouldRefreshCorruption, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference target_unit = 1; */\n        if (message.targetUnit)\n            UnitReference.internalBinaryWrite(message.targetUnit, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLValueWarlockShouldRefreshCorruption\n */\nexport const APLValueWarlockShouldRefreshCorruption = new APLValueWarlockShouldRefreshCorruption$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"warrior.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.WarriorTalents\n */\nexport interface WarriorTalents {\n    /**\n     * Arms\n     *\n     * @generated from protobuf field: int32 war_academy = 1;\n     */\n    warAcademy: number;\n    /**\n     * @generated from protobuf field: int32 field_dressing = 2;\n     */\n    fieldDressing: number;\n    /**\n     * @generated from protobuf field: int32 blitz = 3;\n     */\n    blitz: number;\n    /**\n     * @generated from protobuf field: int32 tactical_mastery = 4;\n     */\n    tacticalMastery: number;\n    /**\n     * @generated from protobuf field: int32 second_wind = 5;\n     */\n    secondWind: number;\n    /**\n     * @generated from protobuf field: int32 deep_wounds = 6;\n     */\n    deepWounds: number;\n    /**\n     * @generated from protobuf field: int32 drums_of_war = 7;\n     */\n    drumsOfWar: number;\n    /**\n     * @generated from protobuf field: int32 taste_for_blood = 8;\n     */\n    tasteForBlood: number;\n    /**\n     * @generated from protobuf field: bool sweeping_strikes = 9;\n     */\n    sweepingStrikes: boolean;\n    /**\n     * @generated from protobuf field: int32 impale = 10;\n     */\n    impale: number;\n    /**\n     * @generated from protobuf field: int32 improved_hamstring = 11;\n     */\n    improvedHamstring: number;\n    /**\n     * @generated from protobuf field: int32 improved_slam = 12;\n     */\n    improvedSlam: number;\n    /**\n     * @generated from protobuf field: bool deadly_calm = 13;\n     */\n    deadlyCalm: boolean;\n    /**\n     * @generated from protobuf field: int32 blood_frenzy = 14;\n     */\n    bloodFrenzy: number;\n    /**\n     * @generated from protobuf field: int32 lambs_to_the_slaughter = 15;\n     */\n    lambsToTheSlaughter: number;\n    /**\n     * @generated from protobuf field: bool juggernaut = 16;\n     */\n    juggernaut: boolean;\n    /**\n     * @generated from protobuf field: int32 sudden_death = 17;\n     */\n    suddenDeath: number;\n    /**\n     * @generated from protobuf field: int32 wrecking_crew = 18;\n     */\n    wreckingCrew: number;\n    /**\n     * @generated from protobuf field: bool throwdown = 19;\n     */\n    throwdown: boolean;\n    /**\n     * @generated from protobuf field: bool bladestorm = 20;\n     */\n    bladestorm: boolean;\n    /**\n     * Fury\n     *\n     * @generated from protobuf field: int32 blood_craze = 21;\n     */\n    bloodCraze: number;\n    /**\n     * @generated from protobuf field: int32 battle_trance = 22;\n     */\n    battleTrance: number;\n    /**\n     * @generated from protobuf field: int32 cruelty = 23;\n     */\n    cruelty: number;\n    /**\n     * @generated from protobuf field: int32 executioner = 24;\n     */\n    executioner: number;\n    /**\n     * @generated from protobuf field: int32 booming_voice = 25;\n     */\n    boomingVoice: number;\n    /**\n     * @generated from protobuf field: int32 rude_interruption = 26;\n     */\n    rudeInterruption: number;\n    /**\n     * @generated from protobuf field: bool piercing_howl = 27;\n     */\n    piercingHowl: boolean;\n    /**\n     * @generated from protobuf field: int32 flurry = 28;\n     */\n    flurry: number;\n    /**\n     * @generated from protobuf field: bool death_wish = 29;\n     */\n    deathWish: boolean;\n    /**\n     * @generated from protobuf field: int32 enrage = 30;\n     */\n    enrage: number;\n    /**\n     * @generated from protobuf field: int32 die_by_the_sword = 31;\n     */\n    dieByTheSword: number;\n    /**\n     * @generated from protobuf field: bool raging_blow = 32;\n     */\n    ragingBlow: boolean;\n    /**\n     * @generated from protobuf field: bool rampage = 33;\n     */\n    rampage: boolean;\n    /**\n     * @generated from protobuf field: bool heroic_fury = 34;\n     */\n    heroicFury: boolean;\n    /**\n     * @generated from protobuf field: bool furious_attacks = 35;\n     */\n    furiousAttacks: boolean;\n    /**\n     * @generated from protobuf field: int32 meat_cleaver = 36;\n     */\n    meatCleaver: number;\n    /**\n     * @generated from protobuf field: int32 intensify_rage = 37;\n     */\n    intensifyRage: number;\n    /**\n     * @generated from protobuf field: int32 bloodsurge = 38;\n     */\n    bloodsurge: number;\n    /**\n     * @generated from protobuf field: int32 skirmisher = 39;\n     */\n    skirmisher: number;\n    /**\n     * @generated from protobuf field: bool titans_grip = 40;\n     */\n    titansGrip: boolean;\n    /**\n     * @generated from protobuf field: bool single_minded_fury = 41;\n     */\n    singleMindedFury: boolean;\n    /**\n     * Protection\n     *\n     * @generated from protobuf field: int32 incite = 42;\n     */\n    incite: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 43;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 blood_and_thunder = 44;\n     */\n    bloodAndThunder: number;\n    /**\n     * @generated from protobuf field: int32 shield_specialization = 45;\n     */\n    shieldSpecialization: number;\n    /**\n     * @generated from protobuf field: int32 shield_mastery = 46;\n     */\n    shieldMastery: number;\n    /**\n     * @generated from protobuf field: int32 hold_the_line = 47;\n     */\n    holdTheLine: number;\n    /**\n     * @generated from protobuf field: int32 gag_order = 48;\n     */\n    gagOrder: number;\n    /**\n     * @generated from protobuf field: bool last_stand = 49;\n     */\n    lastStand: boolean;\n    /**\n     * @generated from protobuf field: bool concussion_blow = 50;\n     */\n    concussionBlow: boolean;\n    /**\n     * @generated from protobuf field: int32 bastion_of_defense = 51;\n     */\n    bastionOfDefense: number;\n    /**\n     * @generated from protobuf field: bool warbringer = 52;\n     */\n    warbringer: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_revenge = 53;\n     */\n    improvedRevenge: number;\n    /**\n     * @generated from protobuf field: bool devastate = 54;\n     */\n    devastate: boolean;\n    /**\n     * @generated from protobuf field: int32 impending_victory = 55;\n     */\n    impendingVictory: number;\n    /**\n     * @generated from protobuf field: int32 thunderstruck = 56;\n     */\n    thunderstruck: number;\n    /**\n     * @generated from protobuf field: bool vigilance = 57;\n     */\n    vigilance: boolean;\n    /**\n     * @generated from protobuf field: int32 heavy_repercussions = 58;\n     */\n    heavyRepercussions: number;\n    /**\n     * @generated from protobuf field: int32 safeguard = 59;\n     */\n    safeguard: number;\n    /**\n     * @generated from protobuf field: int32 sword_and_board = 60;\n     */\n    swordAndBoard: number;\n    /**\n     * @generated from protobuf field: bool shockwave = 61;\n     */\n    shockwave: boolean;\n}\n/**\n * @generated from protobuf message proto.WarriorOptions\n */\nexport interface WarriorOptions {\n    /**\n     * @generated from protobuf field: double starting_rage = 1;\n     */\n    startingRage: number;\n    /**\n     * @generated from protobuf field: proto.WarriorShout shout = 2;\n     */\n    shout: WarriorShout;\n    /**\n     * @generated from protobuf field: bool use_shattering_throw = 3;\n     */\n    useShatteringThrow: boolean;\n}\n/**\n * @generated from protobuf message proto.ArmsWarrior\n */\nexport interface ArmsWarrior {\n    /**\n     * @generated from protobuf field: proto.ArmsWarrior.Options options = 1;\n     */\n    options?: ArmsWarrior_Options;\n}\n/**\n * @generated from protobuf message proto.ArmsWarrior.Rotation\n */\nexport interface ArmsWarrior_Rotation {\n}\n/**\n * @generated from protobuf message proto.ArmsWarrior.Options\n */\nexport interface ArmsWarrior_Options {\n    /**\n     * @generated from protobuf field: proto.WarriorOptions class_options = 1;\n     */\n    classOptions?: WarriorOptions;\n    /**\n     * @generated from protobuf field: bool use_recklessness = 2;\n     */\n    useRecklessness: boolean;\n    /**\n     * @generated from protobuf field: bool stance_snapshot = 3;\n     */\n    stanceSnapshot: boolean;\n    /**\n     * @generated from protobuf field: bool disable_expertise_gemming = 4;\n     */\n    disableExpertiseGemming: boolean;\n}\n/**\n * @generated from protobuf message proto.FuryWarrior\n */\nexport interface FuryWarrior {\n    /**\n     * @generated from protobuf field: proto.FuryWarrior.Options options = 1;\n     */\n    options?: FuryWarrior_Options;\n}\n/**\n * @generated from protobuf message proto.FuryWarrior.Rotation\n */\nexport interface FuryWarrior_Rotation {\n}\n/**\n * @generated from protobuf message proto.FuryWarrior.Options\n */\nexport interface FuryWarrior_Options {\n    /**\n     * @generated from protobuf field: proto.WarriorOptions class_options = 1;\n     */\n    classOptions?: WarriorOptions;\n    /**\n     * @generated from protobuf field: bool use_recklessness = 2;\n     */\n    useRecklessness: boolean;\n    /**\n     * @generated from protobuf field: bool stance_snapshot = 3;\n     */\n    stanceSnapshot: boolean;\n    /**\n     * @generated from protobuf field: bool disable_expertise_gemming = 4;\n     */\n    disableExpertiseGemming: boolean;\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior\n */\nexport interface ProtectionWarrior {\n    /**\n     * @generated from protobuf field: proto.ProtectionWarrior.Options options = 1;\n     */\n    options?: ProtectionWarrior_Options;\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior.Rotation\n */\nexport interface ProtectionWarrior_Rotation {\n}\n/**\n * @generated from protobuf message proto.ProtectionWarrior.Options\n */\nexport interface ProtectionWarrior_Options {\n    /**\n     * @generated from protobuf field: proto.WarriorOptions class_options = 1;\n     */\n    classOptions?: WarriorOptions;\n}\n/**\n * @generated from protobuf enum proto.WarriorPrimeGlyph\n */\nexport enum WarriorPrimeGlyph {\n    /**\n     * @generated from protobuf enum value: WarriorPrimeGlyphNone = 0;\n     */\n    WarriorPrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBladestorm = 45790;\n     */\n    GlyphOfBladestorm = 45790,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodthirst = 43416;\n     */\n    GlyphOfBloodthirst = 43416,\n    /**\n     * @generated from protobuf enum value: GlyphOfDevastate = 43415;\n     */\n    GlyphOfDevastate = 43415,\n    /**\n     * @generated from protobuf enum value: GlyphOfMortalStrike = 43421;\n     */\n    GlyphOfMortalStrike = 43421,\n    /**\n     * @generated from protobuf enum value: GlyphOfOverpower = 43422;\n     */\n    GlyphOfOverpower = 43422,\n    /**\n     * @generated from protobuf enum value: GlyphOfRagingBlow = 43432;\n     */\n    GlyphOfRagingBlow = 43432,\n    /**\n     * @generated from protobuf enum value: GlyphOfRevenge = 43424;\n     */\n    GlyphOfRevenge = 43424,\n    /**\n     * @generated from protobuf enum value: GlyphOfShieldSlam = 43425;\n     */\n    GlyphOfShieldSlam = 43425,\n    /**\n     * @generated from protobuf enum value: GlyphOfSlam = 43423;\n     */\n    GlyphOfSlam = 43423\n}\n/**\n * @generated from protobuf enum proto.WarriorMajorGlyph\n */\nexport enum WarriorMajorGlyph {\n    /**\n     * @generated from protobuf enum value: WarriorMajorGlyphNone = 0;\n     */\n    WarriorMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfCleaving = 43414;\n     */\n    GlyphOfCleaving = 43414,\n    /**\n     * @generated from protobuf enum value: GlyphOfColossusSmash = 63481;\n     */\n    GlyphOfColossusSmash = 63481,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathWish = 67483;\n     */\n    GlyphOfDeathWish = 67483,\n    /**\n     * @generated from protobuf enum value: GlyphOfHeroicThrow = 43418;\n     */\n    GlyphOfHeroicThrow = 43418,\n    /**\n     * @generated from protobuf enum value: GlyphOfIntercept = 67482;\n     */\n    GlyphOfIntercept = 67482,\n    /**\n     * @generated from protobuf enum value: GlyphOfIntervene = 43419;\n     */\n    GlyphOfIntervene = 43419,\n    /**\n     * @generated from protobuf enum value: GlyphOfLongCharge = 43397;\n     */\n    GlyphOfLongCharge = 43397,\n    /**\n     * @generated from protobuf enum value: GlyphOfPiercingHowl = 43417;\n     */\n    GlyphOfPiercingHowl = 43417,\n    /**\n     * @generated from protobuf enum value: GlyphOfRapidCharge = 43413;\n     */\n    GlyphOfRapidCharge = 43413,\n    /**\n     * @generated from protobuf enum value: GlyphOfResonatingPower = 43430;\n     */\n    GlyphOfResonatingPower = 43430,\n    /**\n     * @generated from protobuf enum value: GlyphOfShieldWall = 45797;\n     */\n    GlyphOfShieldWall = 45797,\n    /**\n     * @generated from protobuf enum value: GlyphOfShockwave = 45792;\n     */\n    GlyphOfShockwave = 45792,\n    /**\n     * @generated from protobuf enum value: GlyphOfSpellReflection = 45795;\n     */\n    GlyphOfSpellReflection = 45795,\n    /**\n     * @generated from protobuf enum value: GlyphOfSunderArmor = 43427;\n     */\n    GlyphOfSunderArmor = 43427,\n    /**\n     * @generated from protobuf enum value: GlyphOfSweepingStrikes = 43428;\n     */\n    GlyphOfSweepingStrikes = 43428,\n    /**\n     * @generated from protobuf enum value: GlyphOfThunderClap = 43399;\n     */\n    GlyphOfThunderClap = 43399,\n    /**\n     * @generated from protobuf enum value: GlyphOfVictoryRush = 43431;\n     */\n    GlyphOfVictoryRush = 43431\n}\n/**\n * @generated from protobuf enum proto.WarriorMinorGlyph\n */\nexport enum WarriorMinorGlyph {\n    /**\n     * @generated from protobuf enum value: WarriorMinorGlyphNone = 0;\n     */\n    WarriorMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBattle = 43395;\n     */\n    GlyphOfBattle = 43395,\n    /**\n     * @generated from protobuf enum value: GlyphOfBerserkerRage = 43396;\n     */\n    GlyphOfBerserkerRage = 43396,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodyHealing = 43412;\n     */\n    GlyphOfBloodyHealing = 43412,\n    /**\n     * @generated from protobuf enum value: GlyphOfCommand = 49084;\n     */\n    GlyphOfCommand = 49084,\n    /**\n     * @generated from protobuf enum value: GlyphOfDemoralizingShout = 43398;\n     */\n    GlyphOfDemoralizingShout = 43398,\n    /**\n     * @generated from protobuf enum value: GlyphOfEnduringVictory = 43400;\n     */\n    GlyphOfEnduringVictory = 43400,\n    /**\n     * @generated from protobuf enum value: GlyphOfFuriousSundering = 45793;\n     */\n    GlyphOfFuriousSundering = 45793,\n    /**\n     * @generated from protobuf enum value: GlyphOfIntimidatingShout = 45794;\n     */\n    GlyphOfIntimidatingShout = 45794,\n    /**\n     * @generated from protobuf enum value: GlyphOfShatteringThrow = 206953;\n     */\n    GlyphOfShatteringThrow = 206953\n}\n/**\n * @generated from protobuf enum proto.WarriorShout\n */\nexport enum WarriorShout {\n    /**\n     * @generated from protobuf enum value: WarriorShoutNone = 0;\n     */\n    WarriorShoutNone = 0,\n    /**\n     * @generated from protobuf enum value: WarriorShoutBattle = 1;\n     */\n    WarriorShoutBattle = 1,\n    /**\n     * @generated from protobuf enum value: WarriorShoutCommanding = 2;\n     */\n    WarriorShoutCommanding = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass WarriorTalents$Type extends MessageType<WarriorTalents> {\n    constructor() {\n        super(\"proto.WarriorTalents\", [\n            { no: 1, name: \"war_academy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"field_dressing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"blitz\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"tactical_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"second_wind\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"deep_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"drums_of_war\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"taste_for_blood\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"sweeping_strikes\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"impale\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"improved_hamstring\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"improved_slam\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"deadly_calm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"blood_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"lambs_to_the_slaughter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"juggernaut\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"sudden_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"wrecking_crew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"throwdown\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"bladestorm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"blood_craze\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"battle_trance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"cruelty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"executioner\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"booming_voice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"rude_interruption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"piercing_howl\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"flurry\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"death_wish\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"enrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"die_by_the_sword\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"raging_blow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"rampage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"heroic_fury\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"furious_attacks\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"meat_cleaver\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"intensify_rage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"bloodsurge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"skirmisher\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"titans_grip\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 41, name: \"single_minded_fury\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 42, name: \"incite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"blood_and_thunder\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"shield_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"shield_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"hold_the_line\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"gag_order\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"last_stand\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 50, name: \"concussion_blow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"bastion_of_defense\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"warbringer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"improved_revenge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"devastate\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"impending_victory\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"thunderstruck\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"vigilance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 58, name: \"heavy_repercussions\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"safeguard\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"sword_and_board\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"shockwave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<WarriorTalents>): WarriorTalents {\n        const message = { warAcademy: 0, fieldDressing: 0, blitz: 0, tacticalMastery: 0, secondWind: 0, deepWounds: 0, drumsOfWar: 0, tasteForBlood: 0, sweepingStrikes: false, impale: 0, improvedHamstring: 0, improvedSlam: 0, deadlyCalm: false, bloodFrenzy: 0, lambsToTheSlaughter: 0, juggernaut: false, suddenDeath: 0, wreckingCrew: 0, throwdown: false, bladestorm: false, bloodCraze: 0, battleTrance: 0, cruelty: 0, executioner: 0, boomingVoice: 0, rudeInterruption: 0, piercingHowl: false, flurry: 0, deathWish: false, enrage: 0, dieByTheSword: 0, ragingBlow: false, rampage: false, heroicFury: false, furiousAttacks: false, meatCleaver: 0, intensifyRage: 0, bloodsurge: 0, skirmisher: 0, titansGrip: false, singleMindedFury: false, incite: 0, toughness: 0, bloodAndThunder: 0, shieldSpecialization: 0, shieldMastery: 0, holdTheLine: 0, gagOrder: 0, lastStand: false, concussionBlow: false, bastionOfDefense: 0, warbringer: false, improvedRevenge: 0, devastate: false, impendingVictory: 0, thunderstruck: 0, vigilance: false, heavyRepercussions: 0, safeguard: 0, swordAndBoard: 0, shockwave: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<WarriorTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarriorTalents): WarriorTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 war_academy */ 1:\n                    message.warAcademy = reader.int32();\n                    break;\n                case /* int32 field_dressing */ 2:\n                    message.fieldDressing = reader.int32();\n                    break;\n                case /* int32 blitz */ 3:\n                    message.blitz = reader.int32();\n                    break;\n                case /* int32 tactical_mastery */ 4:\n                    message.tacticalMastery = reader.int32();\n                    break;\n                case /* int32 second_wind */ 5:\n                    message.secondWind = reader.int32();\n                    break;\n                case /* int32 deep_wounds */ 6:\n                    message.deepWounds = reader.int32();\n                    break;\n                case /* int32 drums_of_war */ 7:\n                    message.drumsOfWar = reader.int32();\n                    break;\n                case /* int32 taste_for_blood */ 8:\n                    message.tasteForBlood = reader.int32();\n                    break;\n                case /* bool sweeping_strikes */ 9:\n                    message.sweepingStrikes = reader.bool();\n                    break;\n                case /* int32 impale */ 10:\n                    message.impale = reader.int32();\n                    break;\n                case /* int32 improved_hamstring */ 11:\n                    message.improvedHamstring = reader.int32();\n                    break;\n                case /* int32 improved_slam */ 12:\n                    message.improvedSlam = reader.int32();\n                    break;\n                case /* bool deadly_calm */ 13:\n                    message.deadlyCalm = reader.bool();\n                    break;\n                case /* int32 blood_frenzy */ 14:\n                    message.bloodFrenzy = reader.int32();\n                    break;\n                case /* int32 lambs_to_the_slaughter */ 15:\n                    message.lambsToTheSlaughter = reader.int32();\n                    break;\n                case /* bool juggernaut */ 16:\n                    message.juggernaut = reader.bool();\n                    break;\n                case /* int32 sudden_death */ 17:\n                    message.suddenDeath = reader.int32();\n                    break;\n                case /* int32 wrecking_crew */ 18:\n                    message.wreckingCrew = reader.int32();\n                    break;\n                case /* bool throwdown */ 19:\n                    message.throwdown = reader.bool();\n                    break;\n                case /* bool bladestorm */ 20:\n                    message.bladestorm = reader.bool();\n                    break;\n                case /* int32 blood_craze */ 21:\n                    message.bloodCraze = reader.int32();\n                    break;\n                case /* int32 battle_trance */ 22:\n                    message.battleTrance = reader.int32();\n                    break;\n                case /* int32 cruelty */ 23:\n                    message.cruelty = reader.int32();\n                    break;\n                case /* int32 executioner */ 24:\n                    message.executioner = reader.int32();\n                    break;\n                case /* int32 booming_voice */ 25:\n                    message.boomingVoice = reader.int32();\n                    break;\n                case /* int32 rude_interruption */ 26:\n                    message.rudeInterruption = reader.int32();\n                    break;\n                case /* bool piercing_howl */ 27:\n                    message.piercingHowl = reader.bool();\n                    break;\n                case /* int32 flurry */ 28:\n                    message.flurry = reader.int32();\n                    break;\n                case /* bool death_wish */ 29:\n                    message.deathWish = reader.bool();\n                    break;\n                case /* int32 enrage */ 30:\n                    message.enrage = reader.int32();\n                    break;\n                case /* int32 die_by_the_sword */ 31:\n                    message.dieByTheSword = reader.int32();\n                    break;\n                case /* bool raging_blow */ 32:\n                    message.ragingBlow = reader.bool();\n                    break;\n                case /* bool rampage */ 33:\n                    message.rampage = reader.bool();\n                    break;\n                case /* bool heroic_fury */ 34:\n                    message.heroicFury = reader.bool();\n                    break;\n                case /* bool furious_attacks */ 35:\n                    message.furiousAttacks = reader.bool();\n                    break;\n                case /* int32 meat_cleaver */ 36:\n                    message.meatCleaver = reader.int32();\n                    break;\n                case /* int32 intensify_rage */ 37:\n                    message.intensifyRage = reader.int32();\n                    break;\n                case /* int32 bloodsurge */ 38:\n                    message.bloodsurge = reader.int32();\n                    break;\n                case /* int32 skirmisher */ 39:\n                    message.skirmisher = reader.int32();\n                    break;\n                case /* bool titans_grip */ 40:\n                    message.titansGrip = reader.bool();\n                    break;\n                case /* bool single_minded_fury */ 41:\n                    message.singleMindedFury = reader.bool();\n                    break;\n                case /* int32 incite */ 42:\n                    message.incite = reader.int32();\n                    break;\n                case /* int32 toughness */ 43:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 blood_and_thunder */ 44:\n                    message.bloodAndThunder = reader.int32();\n                    break;\n                case /* int32 shield_specialization */ 45:\n                    message.shieldSpecialization = reader.int32();\n                    break;\n                case /* int32 shield_mastery */ 46:\n                    message.shieldMastery = reader.int32();\n                    break;\n                case /* int32 hold_the_line */ 47:\n                    message.holdTheLine = reader.int32();\n                    break;\n                case /* int32 gag_order */ 48:\n                    message.gagOrder = reader.int32();\n                    break;\n                case /* bool last_stand */ 49:\n                    message.lastStand = reader.bool();\n                    break;\n                case /* bool concussion_blow */ 50:\n                    message.concussionBlow = reader.bool();\n                    break;\n                case /* int32 bastion_of_defense */ 51:\n                    message.bastionOfDefense = reader.int32();\n                    break;\n                case /* bool warbringer */ 52:\n                    message.warbringer = reader.bool();\n                    break;\n                case /* int32 improved_revenge */ 53:\n                    message.improvedRevenge = reader.int32();\n                    break;\n                case /* bool devastate */ 54:\n                    message.devastate = reader.bool();\n                    break;\n                case /* int32 impending_victory */ 55:\n                    message.impendingVictory = reader.int32();\n                    break;\n                case /* int32 thunderstruck */ 56:\n                    message.thunderstruck = reader.int32();\n                    break;\n                case /* bool vigilance */ 57:\n                    message.vigilance = reader.bool();\n                    break;\n                case /* int32 heavy_repercussions */ 58:\n                    message.heavyRepercussions = reader.int32();\n                    break;\n                case /* int32 safeguard */ 59:\n                    message.safeguard = reader.int32();\n                    break;\n                case /* int32 sword_and_board */ 60:\n                    message.swordAndBoard = reader.int32();\n                    break;\n                case /* bool shockwave */ 61:\n                    message.shockwave = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WarriorTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 war_academy = 1; */\n        if (message.warAcademy !== 0)\n            writer.tag(1, WireType.Varint).int32(message.warAcademy);\n        /* int32 field_dressing = 2; */\n        if (message.fieldDressing !== 0)\n            writer.tag(2, WireType.Varint).int32(message.fieldDressing);\n        /* int32 blitz = 3; */\n        if (message.blitz !== 0)\n            writer.tag(3, WireType.Varint).int32(message.blitz);\n        /* int32 tactical_mastery = 4; */\n        if (message.tacticalMastery !== 0)\n            writer.tag(4, WireType.Varint).int32(message.tacticalMastery);\n        /* int32 second_wind = 5; */\n        if (message.secondWind !== 0)\n            writer.tag(5, WireType.Varint).int32(message.secondWind);\n        /* int32 deep_wounds = 6; */\n        if (message.deepWounds !== 0)\n            writer.tag(6, WireType.Varint).int32(message.deepWounds);\n        /* int32 drums_of_war = 7; */\n        if (message.drumsOfWar !== 0)\n            writer.tag(7, WireType.Varint).int32(message.drumsOfWar);\n        /* int32 taste_for_blood = 8; */\n        if (message.tasteForBlood !== 0)\n            writer.tag(8, WireType.Varint).int32(message.tasteForBlood);\n        /* bool sweeping_strikes = 9; */\n        if (message.sweepingStrikes !== false)\n            writer.tag(9, WireType.Varint).bool(message.sweepingStrikes);\n        /* int32 impale = 10; */\n        if (message.impale !== 0)\n            writer.tag(10, WireType.Varint).int32(message.impale);\n        /* int32 improved_hamstring = 11; */\n        if (message.improvedHamstring !== 0)\n            writer.tag(11, WireType.Varint).int32(message.improvedHamstring);\n        /* int32 improved_slam = 12; */\n        if (message.improvedSlam !== 0)\n            writer.tag(12, WireType.Varint).int32(message.improvedSlam);\n        /* bool deadly_calm = 13; */\n        if (message.deadlyCalm !== false)\n            writer.tag(13, WireType.Varint).bool(message.deadlyCalm);\n        /* int32 blood_frenzy = 14; */\n        if (message.bloodFrenzy !== 0)\n            writer.tag(14, WireType.Varint).int32(message.bloodFrenzy);\n        /* int32 lambs_to_the_slaughter = 15; */\n        if (message.lambsToTheSlaughter !== 0)\n            writer.tag(15, WireType.Varint).int32(message.lambsToTheSlaughter);\n        /* bool juggernaut = 16; */\n        if (message.juggernaut !== false)\n            writer.tag(16, WireType.Varint).bool(message.juggernaut);\n        /* int32 sudden_death = 17; */\n        if (message.suddenDeath !== 0)\n            writer.tag(17, WireType.Varint).int32(message.suddenDeath);\n        /* int32 wrecking_crew = 18; */\n        if (message.wreckingCrew !== 0)\n            writer.tag(18, WireType.Varint).int32(message.wreckingCrew);\n        /* bool throwdown = 19; */\n        if (message.throwdown !== false)\n            writer.tag(19, WireType.Varint).bool(message.throwdown);\n        /* bool bladestorm = 20; */\n        if (message.bladestorm !== false)\n            writer.tag(20, WireType.Varint).bool(message.bladestorm);\n        /* int32 blood_craze = 21; */\n        if (message.bloodCraze !== 0)\n            writer.tag(21, WireType.Varint).int32(message.bloodCraze);\n        /* int32 battle_trance = 22; */\n        if (message.battleTrance !== 0)\n            writer.tag(22, WireType.Varint).int32(message.battleTrance);\n        /* int32 cruelty = 23; */\n        if (message.cruelty !== 0)\n            writer.tag(23, WireType.Varint).int32(message.cruelty);\n        /* int32 executioner = 24; */\n        if (message.executioner !== 0)\n            writer.tag(24, WireType.Varint).int32(message.executioner);\n        /* int32 booming_voice = 25; */\n        if (message.boomingVoice !== 0)\n            writer.tag(25, WireType.Varint).int32(message.boomingVoice);\n        /* int32 rude_interruption = 26; */\n        if (message.rudeInterruption !== 0)\n            writer.tag(26, WireType.Varint).int32(message.rudeInterruption);\n        /* bool piercing_howl = 27; */\n        if (message.piercingHowl !== false)\n            writer.tag(27, WireType.Varint).bool(message.piercingHowl);\n        /* int32 flurry = 28; */\n        if (message.flurry !== 0)\n            writer.tag(28, WireType.Varint).int32(message.flurry);\n        /* bool death_wish = 29; */\n        if (message.deathWish !== false)\n            writer.tag(29, WireType.Varint).bool(message.deathWish);\n        /* int32 enrage = 30; */\n        if (message.enrage !== 0)\n            writer.tag(30, WireType.Varint).int32(message.enrage);\n        /* int32 die_by_the_sword = 31; */\n        if (message.dieByTheSword !== 0)\n            writer.tag(31, WireType.Varint).int32(message.dieByTheSword);\n        /* bool raging_blow = 32; */\n        if (message.ragingBlow !== false)\n            writer.tag(32, WireType.Varint).bool(message.ragingBlow);\n        /* bool rampage = 33; */\n        if (message.rampage !== false)\n            writer.tag(33, WireType.Varint).bool(message.rampage);\n        /* bool heroic_fury = 34; */\n        if (message.heroicFury !== false)\n            writer.tag(34, WireType.Varint).bool(message.heroicFury);\n        /* bool furious_attacks = 35; */\n        if (message.furiousAttacks !== false)\n            writer.tag(35, WireType.Varint).bool(message.furiousAttacks);\n        /* int32 meat_cleaver = 36; */\n        if (message.meatCleaver !== 0)\n            writer.tag(36, WireType.Varint).int32(message.meatCleaver);\n        /* int32 intensify_rage = 37; */\n        if (message.intensifyRage !== 0)\n            writer.tag(37, WireType.Varint).int32(message.intensifyRage);\n        /* int32 bloodsurge = 38; */\n        if (message.bloodsurge !== 0)\n            writer.tag(38, WireType.Varint).int32(message.bloodsurge);\n        /* int32 skirmisher = 39; */\n        if (message.skirmisher !== 0)\n            writer.tag(39, WireType.Varint).int32(message.skirmisher);\n        /* bool titans_grip = 40; */\n        if (message.titansGrip !== false)\n            writer.tag(40, WireType.Varint).bool(message.titansGrip);\n        /* bool single_minded_fury = 41; */\n        if (message.singleMindedFury !== false)\n            writer.tag(41, WireType.Varint).bool(message.singleMindedFury);\n        /* int32 incite = 42; */\n        if (message.incite !== 0)\n            writer.tag(42, WireType.Varint).int32(message.incite);\n        /* int32 toughness = 43; */\n        if (message.toughness !== 0)\n            writer.tag(43, WireType.Varint).int32(message.toughness);\n        /* int32 blood_and_thunder = 44; */\n        if (message.bloodAndThunder !== 0)\n            writer.tag(44, WireType.Varint).int32(message.bloodAndThunder);\n        /* int32 shield_specialization = 45; */\n        if (message.shieldSpecialization !== 0)\n            writer.tag(45, WireType.Varint).int32(message.shieldSpecialization);\n        /* int32 shield_mastery = 46; */\n        if (message.shieldMastery !== 0)\n            writer.tag(46, WireType.Varint).int32(message.shieldMastery);\n        /* int32 hold_the_line = 47; */\n        if (message.holdTheLine !== 0)\n            writer.tag(47, WireType.Varint).int32(message.holdTheLine);\n        /* int32 gag_order = 48; */\n        if (message.gagOrder !== 0)\n            writer.tag(48, WireType.Varint).int32(message.gagOrder);\n        /* bool last_stand = 49; */\n        if (message.lastStand !== false)\n            writer.tag(49, WireType.Varint).bool(message.lastStand);\n        /* bool concussion_blow = 50; */\n        if (message.concussionBlow !== false)\n            writer.tag(50, WireType.Varint).bool(message.concussionBlow);\n        /* int32 bastion_of_defense = 51; */\n        if (message.bastionOfDefense !== 0)\n            writer.tag(51, WireType.Varint).int32(message.bastionOfDefense);\n        /* bool warbringer = 52; */\n        if (message.warbringer !== false)\n            writer.tag(52, WireType.Varint).bool(message.warbringer);\n        /* int32 improved_revenge = 53; */\n        if (message.improvedRevenge !== 0)\n            writer.tag(53, WireType.Varint).int32(message.improvedRevenge);\n        /* bool devastate = 54; */\n        if (message.devastate !== false)\n            writer.tag(54, WireType.Varint).bool(message.devastate);\n        /* int32 impending_victory = 55; */\n        if (message.impendingVictory !== 0)\n            writer.tag(55, WireType.Varint).int32(message.impendingVictory);\n        /* int32 thunderstruck = 56; */\n        if (message.thunderstruck !== 0)\n            writer.tag(56, WireType.Varint).int32(message.thunderstruck);\n        /* bool vigilance = 57; */\n        if (message.vigilance !== false)\n            writer.tag(57, WireType.Varint).bool(message.vigilance);\n        /* int32 heavy_repercussions = 58; */\n        if (message.heavyRepercussions !== 0)\n            writer.tag(58, WireType.Varint).int32(message.heavyRepercussions);\n        /* int32 safeguard = 59; */\n        if (message.safeguard !== 0)\n            writer.tag(59, WireType.Varint).int32(message.safeguard);\n        /* int32 sword_and_board = 60; */\n        if (message.swordAndBoard !== 0)\n            writer.tag(60, WireType.Varint).int32(message.swordAndBoard);\n        /* bool shockwave = 61; */\n        if (message.shockwave !== false)\n            writer.tag(61, WireType.Varint).bool(message.shockwave);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.WarriorTalents\n */\nexport const WarriorTalents = new WarriorTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass WarriorOptions$Type extends MessageType<WarriorOptions> {\n    constructor() {\n        super(\"proto.WarriorOptions\", [\n            { no: 1, name: \"starting_rage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"shout\", kind: \"enum\", T: () => [\"proto.WarriorShout\", WarriorShout] },\n            { no: 3, name: \"use_shattering_throw\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<WarriorOptions>): WarriorOptions {\n        const message = { startingRage: 0, shout: 0, useShatteringThrow: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<WarriorOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarriorOptions): WarriorOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_rage */ 1:\n                    message.startingRage = reader.double();\n                    break;\n                case /* proto.WarriorShout shout */ 2:\n                    message.shout = reader.int32();\n                    break;\n                case /* bool use_shattering_throw */ 3:\n                    message.useShatteringThrow = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WarriorOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_rage = 1; */\n        if (message.startingRage !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRage);\n        /* proto.WarriorShout shout = 2; */\n        if (message.shout !== 0)\n            writer.tag(2, WireType.Varint).int32(message.shout);\n        /* bool use_shattering_throw = 3; */\n        if (message.useShatteringThrow !== false)\n            writer.tag(3, WireType.Varint).bool(message.useShatteringThrow);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.WarriorOptions\n */\nexport const WarriorOptions = new WarriorOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArmsWarrior$Type extends MessageType<ArmsWarrior> {\n    constructor() {\n        super(\"proto.ArmsWarrior\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => ArmsWarrior_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ArmsWarrior>): ArmsWarrior {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ArmsWarrior>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArmsWarrior): ArmsWarrior {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ArmsWarrior.Options options */ 1:\n                    message.options = ArmsWarrior_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ArmsWarrior, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ArmsWarrior.Options options = 1; */\n        if (message.options)\n            ArmsWarrior_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ArmsWarrior\n */\nexport const ArmsWarrior = new ArmsWarrior$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArmsWarrior_Rotation$Type extends MessageType<ArmsWarrior_Rotation> {\n    constructor() {\n        super(\"proto.ArmsWarrior.Rotation\", []);\n    }\n    create(value?: PartialMessage<ArmsWarrior_Rotation>): ArmsWarrior_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ArmsWarrior_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArmsWarrior_Rotation): ArmsWarrior_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: ArmsWarrior_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ArmsWarrior.Rotation\n */\nexport const ArmsWarrior_Rotation = new ArmsWarrior_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArmsWarrior_Options$Type extends MessageType<ArmsWarrior_Options> {\n    constructor() {\n        super(\"proto.ArmsWarrior.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => WarriorOptions },\n            { no: 2, name: \"use_recklessness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"stance_snapshot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"disable_expertise_gemming\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ArmsWarrior_Options>): ArmsWarrior_Options {\n        const message = { useRecklessness: false, stanceSnapshot: false, disableExpertiseGemming: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ArmsWarrior_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArmsWarrior_Options): ArmsWarrior_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.WarriorOptions class_options */ 1:\n                    message.classOptions = WarriorOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* bool use_recklessness */ 2:\n                    message.useRecklessness = reader.bool();\n                    break;\n                case /* bool stance_snapshot */ 3:\n                    message.stanceSnapshot = reader.bool();\n                    break;\n                case /* bool disable_expertise_gemming */ 4:\n                    message.disableExpertiseGemming = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ArmsWarrior_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.WarriorOptions class_options = 1; */\n        if (message.classOptions)\n            WarriorOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool use_recklessness = 2; */\n        if (message.useRecklessness !== false)\n            writer.tag(2, WireType.Varint).bool(message.useRecklessness);\n        /* bool stance_snapshot = 3; */\n        if (message.stanceSnapshot !== false)\n            writer.tag(3, WireType.Varint).bool(message.stanceSnapshot);\n        /* bool disable_expertise_gemming = 4; */\n        if (message.disableExpertiseGemming !== false)\n            writer.tag(4, WireType.Varint).bool(message.disableExpertiseGemming);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ArmsWarrior.Options\n */\nexport const ArmsWarrior_Options = new ArmsWarrior_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FuryWarrior$Type extends MessageType<FuryWarrior> {\n    constructor() {\n        super(\"proto.FuryWarrior\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => FuryWarrior_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FuryWarrior>): FuryWarrior {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FuryWarrior>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FuryWarrior): FuryWarrior {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FuryWarrior.Options options */ 1:\n                    message.options = FuryWarrior_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FuryWarrior, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FuryWarrior.Options options = 1; */\n        if (message.options)\n            FuryWarrior_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FuryWarrior\n */\nexport const FuryWarrior = new FuryWarrior$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FuryWarrior_Rotation$Type extends MessageType<FuryWarrior_Rotation> {\n    constructor() {\n        super(\"proto.FuryWarrior.Rotation\", []);\n    }\n    create(value?: PartialMessage<FuryWarrior_Rotation>): FuryWarrior_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FuryWarrior_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FuryWarrior_Rotation): FuryWarrior_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: FuryWarrior_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FuryWarrior.Rotation\n */\nexport const FuryWarrior_Rotation = new FuryWarrior_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FuryWarrior_Options$Type extends MessageType<FuryWarrior_Options> {\n    constructor() {\n        super(\"proto.FuryWarrior.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => WarriorOptions },\n            { no: 2, name: \"use_recklessness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"stance_snapshot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"disable_expertise_gemming\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FuryWarrior_Options>): FuryWarrior_Options {\n        const message = { useRecklessness: false, stanceSnapshot: false, disableExpertiseGemming: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FuryWarrior_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FuryWarrior_Options): FuryWarrior_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.WarriorOptions class_options */ 1:\n                    message.classOptions = WarriorOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* bool use_recklessness */ 2:\n                    message.useRecklessness = reader.bool();\n                    break;\n                case /* bool stance_snapshot */ 3:\n                    message.stanceSnapshot = reader.bool();\n                    break;\n                case /* bool disable_expertise_gemming */ 4:\n                    message.disableExpertiseGemming = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FuryWarrior_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.WarriorOptions class_options = 1; */\n        if (message.classOptions)\n            WarriorOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool use_recklessness = 2; */\n        if (message.useRecklessness !== false)\n            writer.tag(2, WireType.Varint).bool(message.useRecklessness);\n        /* bool stance_snapshot = 3; */\n        if (message.stanceSnapshot !== false)\n            writer.tag(3, WireType.Varint).bool(message.stanceSnapshot);\n        /* bool disable_expertise_gemming = 4; */\n        if (message.disableExpertiseGemming !== false)\n            writer.tag(4, WireType.Varint).bool(message.disableExpertiseGemming);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FuryWarrior.Options\n */\nexport const FuryWarrior_Options = new FuryWarrior_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior$Type extends MessageType<ProtectionWarrior> {\n    constructor() {\n        super(\"proto.ProtectionWarrior\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => ProtectionWarrior_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionWarrior>): ProtectionWarrior {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior): ProtectionWarrior {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ProtectionWarrior.Options options */ 1:\n                    message.options = ProtectionWarrior_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionWarrior, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ProtectionWarrior.Options options = 1; */\n        if (message.options)\n            ProtectionWarrior_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior\n */\nexport const ProtectionWarrior = new ProtectionWarrior$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior_Rotation$Type extends MessageType<ProtectionWarrior_Rotation> {\n    constructor() {\n        super(\"proto.ProtectionWarrior.Rotation\", []);\n    }\n    create(value?: PartialMessage<ProtectionWarrior_Rotation>): ProtectionWarrior_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior_Rotation): ProtectionWarrior_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: ProtectionWarrior_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior.Rotation\n */\nexport const ProtectionWarrior_Rotation = new ProtectionWarrior_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionWarrior_Options$Type extends MessageType<ProtectionWarrior_Options> {\n    constructor() {\n        super(\"proto.ProtectionWarrior.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => WarriorOptions }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionWarrior_Options>): ProtectionWarrior_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionWarrior_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionWarrior_Options): ProtectionWarrior_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.WarriorOptions class_options */ 1:\n                    message.classOptions = WarriorOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionWarrior_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.WarriorOptions class_options = 1; */\n        if (message.classOptions)\n            WarriorOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionWarrior.Options\n */\nexport const ProtectionWarrior_Options = new ProtectionWarrior_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"warlock.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.WarlockTalents\n */\nexport interface WarlockTalents {\n    /**\n     * Affliction\n     *\n     * @generated from protobuf field: int32 doom_and_gloom = 1;\n     */\n    doomAndGloom: number;\n    /**\n     * @generated from protobuf field: int32 improved_life_tap = 2;\n     */\n    improvedLifeTap: number;\n    /**\n     * @generated from protobuf field: int32 improved_corruption = 3;\n     */\n    improvedCorruption: number;\n    /**\n     * @generated from protobuf field: int32 jinx = 4;\n     */\n    jinx: number;\n    /**\n     * @generated from protobuf field: int32 soul_siphon = 5;\n     */\n    soulSiphon: number;\n    /**\n     * @generated from protobuf field: int32 siphon_life = 6;\n     */\n    siphonLife: number;\n    /**\n     * @generated from protobuf field: bool curse_of_exhaustion = 7;\n     */\n    curseOfExhaustion: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_fear = 8;\n     */\n    improvedFear: number;\n    /**\n     * @generated from protobuf field: int32 eradication = 9;\n     */\n    eradication: number;\n    /**\n     * @generated from protobuf field: int32 improved_howl_of_terror = 10;\n     */\n    improvedHowlOfTerror: number;\n    /**\n     * @generated from protobuf field: bool soul_swap = 11;\n     */\n    soulSwap: boolean;\n    /**\n     * @generated from protobuf field: int32 shadow_embrace = 12;\n     */\n    shadowEmbrace: number;\n    /**\n     * @generated from protobuf field: int32 deaths_embrace = 13;\n     */\n    deathsEmbrace: number;\n    /**\n     * @generated from protobuf field: int32 nightfall = 14;\n     */\n    nightfall: number;\n    /**\n     * @generated from protobuf field: bool soulburn_seed_of_corruption = 15;\n     */\n    soulburnSeedOfCorruption: boolean;\n    /**\n     * @generated from protobuf field: int32 everlasting_affliction = 16;\n     */\n    everlastingAffliction: number;\n    /**\n     * @generated from protobuf field: int32 pandemic = 17;\n     */\n    pandemic: number;\n    /**\n     * @generated from protobuf field: bool haunt = 18;\n     */\n    haunt: boolean;\n    /**\n     * Demonology\n     *\n     * @generated from protobuf field: int32 demonic_embrace = 19;\n     */\n    demonicEmbrace: number;\n    /**\n     * @generated from protobuf field: int32 dark_arts = 20;\n     */\n    darkArts: number;\n    /**\n     * @generated from protobuf field: int32 fel_synergy = 21;\n     */\n    felSynergy: number;\n    /**\n     * @generated from protobuf field: int32 demonic_rebirth = 22;\n     */\n    demonicRebirth: number;\n    /**\n     * @generated from protobuf field: int32 mana_feed = 23;\n     */\n    manaFeed: number;\n    /**\n     * @generated from protobuf field: int32 demonic_aegis = 24;\n     */\n    demonicAegis: number;\n    /**\n     * @generated from protobuf field: int32 master_summoner = 25;\n     */\n    masterSummoner: number;\n    /**\n     * @generated from protobuf field: int32 impending_doom = 26;\n     */\n    impendingDoom: number;\n    /**\n     * @generated from protobuf field: bool demonic_empowerment = 27;\n     */\n    demonicEmpowerment: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_health_funnel = 28;\n     */\n    improvedHealthFunnel: number;\n    /**\n     * @generated from protobuf field: int32 molten_core = 29;\n     */\n    moltenCore: number;\n    /**\n     * @generated from protobuf field: bool hand_of_guldan = 30;\n     */\n    handOfGuldan: boolean;\n    /**\n     * @generated from protobuf field: int32 aura_of_foreboding = 31;\n     */\n    auraOfForeboding: number;\n    /**\n     * @generated from protobuf field: int32 ancient_grimoire = 32;\n     */\n    ancientGrimoire: number;\n    /**\n     * @generated from protobuf field: bool inferno = 33;\n     */\n    inferno: boolean;\n    /**\n     * @generated from protobuf field: int32 decimation = 34;\n     */\n    decimation: number;\n    /**\n     * @generated from protobuf field: int32 cremation = 35;\n     */\n    cremation: number;\n    /**\n     * @generated from protobuf field: bool demonic_pact = 36;\n     */\n    demonicPact: boolean;\n    /**\n     * @generated from protobuf field: bool metamorphosis = 37;\n     */\n    metamorphosis: boolean;\n    /**\n     * Destruction\n     *\n     * @generated from protobuf field: int32 bane = 38;\n     */\n    bane: number;\n    /**\n     * @generated from protobuf field: int32 shadow_and_flame = 39;\n     */\n    shadowAndFlame: number;\n    /**\n     * @generated from protobuf field: int32 improved_immolate = 40;\n     */\n    improvedImmolate: number;\n    /**\n     * @generated from protobuf field: int32 aftermath = 41;\n     */\n    aftermath: number;\n    /**\n     * @generated from protobuf field: int32 emberstorm = 42;\n     */\n    emberstorm: number;\n    /**\n     * @generated from protobuf field: int32 improved_searing_pain = 43;\n     */\n    improvedSearingPain: number;\n    /**\n     * @generated from protobuf field: int32 improved_soul_fire = 44;\n     */\n    improvedSoulFire: number;\n    /**\n     * @generated from protobuf field: int32 backdraft = 45;\n     */\n    backdraft: number;\n    /**\n     * @generated from protobuf field: bool shadowburn = 46;\n     */\n    shadowburn: boolean;\n    /**\n     * @generated from protobuf field: int32 burning_embers = 47;\n     */\n    burningEmbers: number;\n    /**\n     * @generated from protobuf field: int32 soul_leech = 48;\n     */\n    soulLeech: number;\n    /**\n     * @generated from protobuf field: int32 backlash = 49;\n     */\n    backlash: number;\n    /**\n     * @generated from protobuf field: bool nether_ward = 50;\n     */\n    netherWard: boolean;\n    /**\n     * @generated from protobuf field: int32 fire_and_brimstone = 51;\n     */\n    fireAndBrimstone: number;\n    /**\n     * @generated from protobuf field: bool shadowfury = 52;\n     */\n    shadowfury: boolean;\n    /**\n     * @generated from protobuf field: int32 nether_protection = 53;\n     */\n    netherProtection: number;\n    /**\n     * @generated from protobuf field: int32 empowered_imp = 54;\n     */\n    empoweredImp: number;\n    /**\n     * @generated from protobuf field: bool bane_of_havoc = 55;\n     */\n    baneOfHavoc: boolean;\n    /**\n     * @generated from protobuf field: bool chaos_bolt = 56;\n     */\n    chaosBolt: boolean;\n}\n/**\n * @generated from protobuf message proto.WarlockOptions\n */\nexport interface WarlockOptions {\n    /**\n     * @generated from protobuf field: proto.WarlockOptions.Armor armor = 1;\n     */\n    armor: WarlockOptions_Armor;\n    /**\n     * @generated from protobuf field: proto.WarlockOptions.Summon summon = 2;\n     */\n    summon: WarlockOptions_Summon;\n    /**\n     * @generated from protobuf field: proto.WarlockOptions.WeaponImbue weaponImbue = 3;\n     */\n    weaponImbue: WarlockOptions_WeaponImbue;\n    /**\n     * @generated from protobuf field: bool detonate_seed = 5;\n     */\n    detonateSeed: boolean;\n}\n/**\n * @generated from protobuf enum proto.WarlockOptions.Summon\n */\nexport enum WarlockOptions_Summon {\n    /**\n     * @generated from protobuf enum value: NoSummon = 0;\n     */\n    NoSummon = 0,\n    /**\n     * @generated from protobuf enum value: Imp = 1;\n     */\n    Imp = 1,\n    /**\n     * @generated from protobuf enum value: Voidwalker = 2;\n     */\n    Voidwalker = 2,\n    /**\n     * @generated from protobuf enum value: Succubus = 3;\n     */\n    Succubus = 3,\n    /**\n     * @generated from protobuf enum value: Felhunter = 4;\n     */\n    Felhunter = 4,\n    /**\n     * @generated from protobuf enum value: Felguard = 5;\n     */\n    Felguard = 5\n}\n/**\n * @generated from protobuf enum proto.WarlockOptions.Armor\n */\nexport enum WarlockOptions_Armor {\n    /**\n     * @generated from protobuf enum value: NoArmor = 0;\n     */\n    NoArmor = 0,\n    /**\n     * @generated from protobuf enum value: FelArmor = 1;\n     */\n    FelArmor = 1,\n    /**\n     * @generated from protobuf enum value: DemonArmor = 2;\n     */\n    DemonArmor = 2\n}\n/**\n * @generated from protobuf enum proto.WarlockOptions.WeaponImbue\n */\nexport enum WarlockOptions_WeaponImbue {\n    /**\n     * @generated from protobuf enum value: NoWeaponImbue = 0;\n     */\n    NoWeaponImbue = 0,\n    /**\n     * @generated from protobuf enum value: GrandSpellstone = 1;\n     */\n    GrandSpellstone = 1,\n    /**\n     * @generated from protobuf enum value: GrandFirestone = 2;\n     */\n    GrandFirestone = 2\n}\n/**\n * @generated from protobuf message proto.AfflictionWarlock\n */\nexport interface AfflictionWarlock {\n    /**\n     * @generated from protobuf field: proto.AfflictionWarlock.Options options = 1;\n     */\n    options?: AfflictionWarlock_Options;\n}\n/**\n * @generated from protobuf message proto.AfflictionWarlock.Rotation\n */\nexport interface AfflictionWarlock_Rotation {\n}\n/**\n * @generated from protobuf message proto.AfflictionWarlock.Options\n */\nexport interface AfflictionWarlock_Options {\n    /**\n     * @generated from protobuf field: proto.WarlockOptions class_options = 1;\n     */\n    classOptions?: WarlockOptions;\n}\n/**\n * @generated from protobuf message proto.DemonologyWarlock\n */\nexport interface DemonologyWarlock {\n    /**\n     * @generated from protobuf field: proto.DemonologyWarlock.Options options = 1;\n     */\n    options?: DemonologyWarlock_Options;\n}\n/**\n * @generated from protobuf message proto.DemonologyWarlock.Rotation\n */\nexport interface DemonologyWarlock_Rotation {\n}\n/**\n * @generated from protobuf message proto.DemonologyWarlock.Options\n */\nexport interface DemonologyWarlock_Options {\n    /**\n     * @generated from protobuf field: proto.WarlockOptions class_options = 1;\n     */\n    classOptions?: WarlockOptions;\n}\n/**\n * @generated from protobuf message proto.DestructionWarlock\n */\nexport interface DestructionWarlock {\n    /**\n     * @generated from protobuf field: proto.DestructionWarlock.Options options = 1;\n     */\n    options?: DestructionWarlock_Options;\n}\n/**\n * @generated from protobuf message proto.DestructionWarlock.Rotation\n */\nexport interface DestructionWarlock_Rotation {\n}\n/**\n * @generated from protobuf message proto.DestructionWarlock.Options\n */\nexport interface DestructionWarlock_Options {\n    /**\n     * @generated from protobuf field: proto.WarlockOptions class_options = 1;\n     */\n    classOptions?: WarlockOptions;\n}\n/**\n * @generated from protobuf enum proto.WarlockPrimeGlyph\n */\nexport enum WarlockPrimeGlyph {\n    /**\n     * @generated from protobuf enum value: WarlockPrimeGlyphNone = 0;\n     */\n    WarlockPrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBaneOfAgony = 42456;\n     */\n    GlyphOfBaneOfAgony = 42456,\n    /**\n     * @generated from protobuf enum value: GlyphOfChaosBolt = 45781;\n     */\n    GlyphOfChaosBolt = 45781,\n    /**\n     * @generated from protobuf enum value: GlyphOfConflagrate = 42454;\n     */\n    GlyphOfConflagrate = 42454,\n    /**\n     * @generated from protobuf enum value: GlyphOfCorruption = 42455;\n     */\n    GlyphOfCorruption = 42455,\n    /**\n     * @generated from protobuf enum value: GlyphOfFelguard = 42459;\n     */\n    GlyphOfFelguard = 42459,\n    /**\n     * @generated from protobuf enum value: GlyphOfHaunt = 45779;\n     */\n    GlyphOfHaunt = 45779,\n    /**\n     * @generated from protobuf enum value: GlyphOfImmolate = 42464;\n     */\n    GlyphOfImmolate = 42464,\n    /**\n     * @generated from protobuf enum value: GlyphOfImp = 42465;\n     */\n    GlyphOfImp = 42465,\n    /**\n     * @generated from protobuf enum value: GlyphOfIncinerate = 42453;\n     */\n    GlyphOfIncinerate = 42453,\n    /**\n     * @generated from protobuf enum value: GlyphOfLashOfPain = 50077;\n     */\n    GlyphOfLashOfPain = 50077,\n    /**\n     * @generated from protobuf enum value: GlyphOfMetamorphosis = 45780;\n     */\n    GlyphOfMetamorphosis = 45780,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowburn = 42468;\n     */\n    GlyphOfShadowburn = 42468,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnstableAffliction = 42472;\n     */\n    GlyphOfUnstableAffliction = 42472\n}\n/**\n * @generated from protobuf enum proto.WarlockMajorGlyph\n */\nexport enum WarlockMajorGlyph {\n    /**\n     * @generated from protobuf enum value: WarlockMajorGlyphNone = 0;\n     */\n    WarlockMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathCoilWl = 42457;\n     */\n    GlyphOfDeathCoilWl = 42457,\n    /**\n     * @generated from protobuf enum value: GlyphOfDemonicCircle = 45782;\n     */\n    GlyphOfDemonicCircle = 45782,\n    /**\n     * @generated from protobuf enum value: GlyphOfFear = 42458;\n     */\n    GlyphOfFear = 42458,\n    /**\n     * @generated from protobuf enum value: GlyphOfFelhunter = 42460;\n     */\n    GlyphOfFelhunter = 42460,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealthstone = 42462;\n     */\n    GlyphOfHealthstone = 42462,\n    /**\n     * @generated from protobuf enum value: GlyphOfHowlOfTerror = 42463;\n     */\n    GlyphOfHowlOfTerror = 42463,\n    /**\n     * @generated from protobuf enum value: GlyphOfLifeTap = 45785;\n     */\n    GlyphOfLifeTap = 45785,\n    /**\n     * @generated from protobuf enum value: GlyphOfSeduction = 42471;\n     */\n    GlyphOfSeduction = 42471,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowBolt = 42467;\n     */\n    GlyphOfShadowBolt = 42467,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowflame = 45783;\n     */\n    GlyphOfShadowflame = 45783,\n    /**\n     * @generated from protobuf enum value: GlyphOfSoulLink = 45789;\n     */\n    GlyphOfSoulLink = 45789,\n    /**\n     * @generated from protobuf enum value: GlyphOfSoulSwap = 42466;\n     */\n    GlyphOfSoulSwap = 42466,\n    /**\n     * @generated from protobuf enum value: GlyphOfSoulstone = 42470;\n     */\n    GlyphOfSoulstone = 42470,\n    /**\n     * @generated from protobuf enum value: GlyphOfVoidwalker = 42473;\n     */\n    GlyphOfVoidwalker = 42473\n}\n/**\n * @generated from protobuf enum proto.WarlockMinorGlyph\n */\nexport enum WarlockMinorGlyph {\n    /**\n     * @generated from protobuf enum value: WarlockMinorGlyphNone = 0;\n     */\n    WarlockMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfCurseOfExhaustion = 43392;\n     */\n    GlyphOfCurseOfExhaustion = 43392,\n    /**\n     * @generated from protobuf enum value: GlyphOfDrainSoul = 43390;\n     */\n    GlyphOfDrainSoul = 43390,\n    /**\n     * @generated from protobuf enum value: GlyphOfEyeOfKilrogg = 43391;\n     */\n    GlyphOfEyeOfKilrogg = 43391,\n    /**\n     * @generated from protobuf enum value: GlyphOfHealthFunnel = 42461;\n     */\n    GlyphOfHealthFunnel = 42461,\n    /**\n     * @generated from protobuf enum value: GlyphOfRitualOfSouls = 43394;\n     */\n    GlyphOfRitualOfSouls = 43394,\n    /**\n     * @generated from protobuf enum value: GlyphOfSubjugateDemon = 43393;\n     */\n    GlyphOfSubjugateDemon = 43393,\n    /**\n     * @generated from protobuf enum value: GlyphOfUnendingBreath = 43389;\n     */\n    GlyphOfUnendingBreath = 43389\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass WarlockTalents$Type extends MessageType<WarlockTalents> {\n    constructor() {\n        super(\"proto.WarlockTalents\", [\n            { no: 1, name: \"doom_and_gloom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"improved_life_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"improved_corruption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"jinx\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"soul_siphon\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"siphon_life\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"curse_of_exhaustion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"improved_fear\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"eradication\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"improved_howl_of_terror\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"soul_swap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"shadow_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"deaths_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"nightfall\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"soulburn_seed_of_corruption\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"everlasting_affliction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"pandemic\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"haunt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"demonic_embrace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"dark_arts\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"fel_synergy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"demonic_rebirth\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"mana_feed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"demonic_aegis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"master_summoner\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"impending_doom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"demonic_empowerment\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"improved_health_funnel\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"molten_core\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"hand_of_guldan\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"aura_of_foreboding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"ancient_grimoire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"inferno\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"decimation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"cremation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"demonic_pact\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"metamorphosis\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"bane\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"shadow_and_flame\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"improved_immolate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"aftermath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"emberstorm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"improved_searing_pain\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"improved_soul_fire\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"backdraft\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"shadowburn\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 47, name: \"burning_embers\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"soul_leech\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"backlash\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"nether_ward\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"fire_and_brimstone\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"shadowfury\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"nether_protection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"empowered_imp\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"bane_of_havoc\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"chaos_bolt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<WarlockTalents>): WarlockTalents {\n        const message = { doomAndGloom: 0, improvedLifeTap: 0, improvedCorruption: 0, jinx: 0, soulSiphon: 0, siphonLife: 0, curseOfExhaustion: false, improvedFear: 0, eradication: 0, improvedHowlOfTerror: 0, soulSwap: false, shadowEmbrace: 0, deathsEmbrace: 0, nightfall: 0, soulburnSeedOfCorruption: false, everlastingAffliction: 0, pandemic: 0, haunt: false, demonicEmbrace: 0, darkArts: 0, felSynergy: 0, demonicRebirth: 0, manaFeed: 0, demonicAegis: 0, masterSummoner: 0, impendingDoom: 0, demonicEmpowerment: false, improvedHealthFunnel: 0, moltenCore: 0, handOfGuldan: false, auraOfForeboding: 0, ancientGrimoire: 0, inferno: false, decimation: 0, cremation: 0, demonicPact: false, metamorphosis: false, bane: 0, shadowAndFlame: 0, improvedImmolate: 0, aftermath: 0, emberstorm: 0, improvedSearingPain: 0, improvedSoulFire: 0, backdraft: 0, shadowburn: false, burningEmbers: 0, soulLeech: 0, backlash: 0, netherWard: false, fireAndBrimstone: 0, shadowfury: false, netherProtection: 0, empoweredImp: 0, baneOfHavoc: false, chaosBolt: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<WarlockTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarlockTalents): WarlockTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 doom_and_gloom */ 1:\n                    message.doomAndGloom = reader.int32();\n                    break;\n                case /* int32 improved_life_tap */ 2:\n                    message.improvedLifeTap = reader.int32();\n                    break;\n                case /* int32 improved_corruption */ 3:\n                    message.improvedCorruption = reader.int32();\n                    break;\n                case /* int32 jinx */ 4:\n                    message.jinx = reader.int32();\n                    break;\n                case /* int32 soul_siphon */ 5:\n                    message.soulSiphon = reader.int32();\n                    break;\n                case /* int32 siphon_life */ 6:\n                    message.siphonLife = reader.int32();\n                    break;\n                case /* bool curse_of_exhaustion */ 7:\n                    message.curseOfExhaustion = reader.bool();\n                    break;\n                case /* int32 improved_fear */ 8:\n                    message.improvedFear = reader.int32();\n                    break;\n                case /* int32 eradication */ 9:\n                    message.eradication = reader.int32();\n                    break;\n                case /* int32 improved_howl_of_terror */ 10:\n                    message.improvedHowlOfTerror = reader.int32();\n                    break;\n                case /* bool soul_swap */ 11:\n                    message.soulSwap = reader.bool();\n                    break;\n                case /* int32 shadow_embrace */ 12:\n                    message.shadowEmbrace = reader.int32();\n                    break;\n                case /* int32 deaths_embrace */ 13:\n                    message.deathsEmbrace = reader.int32();\n                    break;\n                case /* int32 nightfall */ 14:\n                    message.nightfall = reader.int32();\n                    break;\n                case /* bool soulburn_seed_of_corruption */ 15:\n                    message.soulburnSeedOfCorruption = reader.bool();\n                    break;\n                case /* int32 everlasting_affliction */ 16:\n                    message.everlastingAffliction = reader.int32();\n                    break;\n                case /* int32 pandemic */ 17:\n                    message.pandemic = reader.int32();\n                    break;\n                case /* bool haunt */ 18:\n                    message.haunt = reader.bool();\n                    break;\n                case /* int32 demonic_embrace */ 19:\n                    message.demonicEmbrace = reader.int32();\n                    break;\n                case /* int32 dark_arts */ 20:\n                    message.darkArts = reader.int32();\n                    break;\n                case /* int32 fel_synergy */ 21:\n                    message.felSynergy = reader.int32();\n                    break;\n                case /* int32 demonic_rebirth */ 22:\n                    message.demonicRebirth = reader.int32();\n                    break;\n                case /* int32 mana_feed */ 23:\n                    message.manaFeed = reader.int32();\n                    break;\n                case /* int32 demonic_aegis */ 24:\n                    message.demonicAegis = reader.int32();\n                    break;\n                case /* int32 master_summoner */ 25:\n                    message.masterSummoner = reader.int32();\n                    break;\n                case /* int32 impending_doom */ 26:\n                    message.impendingDoom = reader.int32();\n                    break;\n                case /* bool demonic_empowerment */ 27:\n                    message.demonicEmpowerment = reader.bool();\n                    break;\n                case /* int32 improved_health_funnel */ 28:\n                    message.improvedHealthFunnel = reader.int32();\n                    break;\n                case /* int32 molten_core */ 29:\n                    message.moltenCore = reader.int32();\n                    break;\n                case /* bool hand_of_guldan */ 30:\n                    message.handOfGuldan = reader.bool();\n                    break;\n                case /* int32 aura_of_foreboding */ 31:\n                    message.auraOfForeboding = reader.int32();\n                    break;\n                case /* int32 ancient_grimoire */ 32:\n                    message.ancientGrimoire = reader.int32();\n                    break;\n                case /* bool inferno */ 33:\n                    message.inferno = reader.bool();\n                    break;\n                case /* int32 decimation */ 34:\n                    message.decimation = reader.int32();\n                    break;\n                case /* int32 cremation */ 35:\n                    message.cremation = reader.int32();\n                    break;\n                case /* bool demonic_pact */ 36:\n                    message.demonicPact = reader.bool();\n                    break;\n                case /* bool metamorphosis */ 37:\n                    message.metamorphosis = reader.bool();\n                    break;\n                case /* int32 bane */ 38:\n                    message.bane = reader.int32();\n                    break;\n                case /* int32 shadow_and_flame */ 39:\n                    message.shadowAndFlame = reader.int32();\n                    break;\n                case /* int32 improved_immolate */ 40:\n                    message.improvedImmolate = reader.int32();\n                    break;\n                case /* int32 aftermath */ 41:\n                    message.aftermath = reader.int32();\n                    break;\n                case /* int32 emberstorm */ 42:\n                    message.emberstorm = reader.int32();\n                    break;\n                case /* int32 improved_searing_pain */ 43:\n                    message.improvedSearingPain = reader.int32();\n                    break;\n                case /* int32 improved_soul_fire */ 44:\n                    message.improvedSoulFire = reader.int32();\n                    break;\n                case /* int32 backdraft */ 45:\n                    message.backdraft = reader.int32();\n                    break;\n                case /* bool shadowburn */ 46:\n                    message.shadowburn = reader.bool();\n                    break;\n                case /* int32 burning_embers */ 47:\n                    message.burningEmbers = reader.int32();\n                    break;\n                case /* int32 soul_leech */ 48:\n                    message.soulLeech = reader.int32();\n                    break;\n                case /* int32 backlash */ 49:\n                    message.backlash = reader.int32();\n                    break;\n                case /* bool nether_ward */ 50:\n                    message.netherWard = reader.bool();\n                    break;\n                case /* int32 fire_and_brimstone */ 51:\n                    message.fireAndBrimstone = reader.int32();\n                    break;\n                case /* bool shadowfury */ 52:\n                    message.shadowfury = reader.bool();\n                    break;\n                case /* int32 nether_protection */ 53:\n                    message.netherProtection = reader.int32();\n                    break;\n                case /* int32 empowered_imp */ 54:\n                    message.empoweredImp = reader.int32();\n                    break;\n                case /* bool bane_of_havoc */ 55:\n                    message.baneOfHavoc = reader.bool();\n                    break;\n                case /* bool chaos_bolt */ 56:\n                    message.chaosBolt = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WarlockTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 doom_and_gloom = 1; */\n        if (message.doomAndGloom !== 0)\n            writer.tag(1, WireType.Varint).int32(message.doomAndGloom);\n        /* int32 improved_life_tap = 2; */\n        if (message.improvedLifeTap !== 0)\n            writer.tag(2, WireType.Varint).int32(message.improvedLifeTap);\n        /* int32 improved_corruption = 3; */\n        if (message.improvedCorruption !== 0)\n            writer.tag(3, WireType.Varint).int32(message.improvedCorruption);\n        /* int32 jinx = 4; */\n        if (message.jinx !== 0)\n            writer.tag(4, WireType.Varint).int32(message.jinx);\n        /* int32 soul_siphon = 5; */\n        if (message.soulSiphon !== 0)\n            writer.tag(5, WireType.Varint).int32(message.soulSiphon);\n        /* int32 siphon_life = 6; */\n        if (message.siphonLife !== 0)\n            writer.tag(6, WireType.Varint).int32(message.siphonLife);\n        /* bool curse_of_exhaustion = 7; */\n        if (message.curseOfExhaustion !== false)\n            writer.tag(7, WireType.Varint).bool(message.curseOfExhaustion);\n        /* int32 improved_fear = 8; */\n        if (message.improvedFear !== 0)\n            writer.tag(8, WireType.Varint).int32(message.improvedFear);\n        /* int32 eradication = 9; */\n        if (message.eradication !== 0)\n            writer.tag(9, WireType.Varint).int32(message.eradication);\n        /* int32 improved_howl_of_terror = 10; */\n        if (message.improvedHowlOfTerror !== 0)\n            writer.tag(10, WireType.Varint).int32(message.improvedHowlOfTerror);\n        /* bool soul_swap = 11; */\n        if (message.soulSwap !== false)\n            writer.tag(11, WireType.Varint).bool(message.soulSwap);\n        /* int32 shadow_embrace = 12; */\n        if (message.shadowEmbrace !== 0)\n            writer.tag(12, WireType.Varint).int32(message.shadowEmbrace);\n        /* int32 deaths_embrace = 13; */\n        if (message.deathsEmbrace !== 0)\n            writer.tag(13, WireType.Varint).int32(message.deathsEmbrace);\n        /* int32 nightfall = 14; */\n        if (message.nightfall !== 0)\n            writer.tag(14, WireType.Varint).int32(message.nightfall);\n        /* bool soulburn_seed_of_corruption = 15; */\n        if (message.soulburnSeedOfCorruption !== false)\n            writer.tag(15, WireType.Varint).bool(message.soulburnSeedOfCorruption);\n        /* int32 everlasting_affliction = 16; */\n        if (message.everlastingAffliction !== 0)\n            writer.tag(16, WireType.Varint).int32(message.everlastingAffliction);\n        /* int32 pandemic = 17; */\n        if (message.pandemic !== 0)\n            writer.tag(17, WireType.Varint).int32(message.pandemic);\n        /* bool haunt = 18; */\n        if (message.haunt !== false)\n            writer.tag(18, WireType.Varint).bool(message.haunt);\n        /* int32 demonic_embrace = 19; */\n        if (message.demonicEmbrace !== 0)\n            writer.tag(19, WireType.Varint).int32(message.demonicEmbrace);\n        /* int32 dark_arts = 20; */\n        if (message.darkArts !== 0)\n            writer.tag(20, WireType.Varint).int32(message.darkArts);\n        /* int32 fel_synergy = 21; */\n        if (message.felSynergy !== 0)\n            writer.tag(21, WireType.Varint).int32(message.felSynergy);\n        /* int32 demonic_rebirth = 22; */\n        if (message.demonicRebirth !== 0)\n            writer.tag(22, WireType.Varint).int32(message.demonicRebirth);\n        /* int32 mana_feed = 23; */\n        if (message.manaFeed !== 0)\n            writer.tag(23, WireType.Varint).int32(message.manaFeed);\n        /* int32 demonic_aegis = 24; */\n        if (message.demonicAegis !== 0)\n            writer.tag(24, WireType.Varint).int32(message.demonicAegis);\n        /* int32 master_summoner = 25; */\n        if (message.masterSummoner !== 0)\n            writer.tag(25, WireType.Varint).int32(message.masterSummoner);\n        /* int32 impending_doom = 26; */\n        if (message.impendingDoom !== 0)\n            writer.tag(26, WireType.Varint).int32(message.impendingDoom);\n        /* bool demonic_empowerment = 27; */\n        if (message.demonicEmpowerment !== false)\n            writer.tag(27, WireType.Varint).bool(message.demonicEmpowerment);\n        /* int32 improved_health_funnel = 28; */\n        if (message.improvedHealthFunnel !== 0)\n            writer.tag(28, WireType.Varint).int32(message.improvedHealthFunnel);\n        /* int32 molten_core = 29; */\n        if (message.moltenCore !== 0)\n            writer.tag(29, WireType.Varint).int32(message.moltenCore);\n        /* bool hand_of_guldan = 30; */\n        if (message.handOfGuldan !== false)\n            writer.tag(30, WireType.Varint).bool(message.handOfGuldan);\n        /* int32 aura_of_foreboding = 31; */\n        if (message.auraOfForeboding !== 0)\n            writer.tag(31, WireType.Varint).int32(message.auraOfForeboding);\n        /* int32 ancient_grimoire = 32; */\n        if (message.ancientGrimoire !== 0)\n            writer.tag(32, WireType.Varint).int32(message.ancientGrimoire);\n        /* bool inferno = 33; */\n        if (message.inferno !== false)\n            writer.tag(33, WireType.Varint).bool(message.inferno);\n        /* int32 decimation = 34; */\n        if (message.decimation !== 0)\n            writer.tag(34, WireType.Varint).int32(message.decimation);\n        /* int32 cremation = 35; */\n        if (message.cremation !== 0)\n            writer.tag(35, WireType.Varint).int32(message.cremation);\n        /* bool demonic_pact = 36; */\n        if (message.demonicPact !== false)\n            writer.tag(36, WireType.Varint).bool(message.demonicPact);\n        /* bool metamorphosis = 37; */\n        if (message.metamorphosis !== false)\n            writer.tag(37, WireType.Varint).bool(message.metamorphosis);\n        /* int32 bane = 38; */\n        if (message.bane !== 0)\n            writer.tag(38, WireType.Varint).int32(message.bane);\n        /* int32 shadow_and_flame = 39; */\n        if (message.shadowAndFlame !== 0)\n            writer.tag(39, WireType.Varint).int32(message.shadowAndFlame);\n        /* int32 improved_immolate = 40; */\n        if (message.improvedImmolate !== 0)\n            writer.tag(40, WireType.Varint).int32(message.improvedImmolate);\n        /* int32 aftermath = 41; */\n        if (message.aftermath !== 0)\n            writer.tag(41, WireType.Varint).int32(message.aftermath);\n        /* int32 emberstorm = 42; */\n        if (message.emberstorm !== 0)\n            writer.tag(42, WireType.Varint).int32(message.emberstorm);\n        /* int32 improved_searing_pain = 43; */\n        if (message.improvedSearingPain !== 0)\n            writer.tag(43, WireType.Varint).int32(message.improvedSearingPain);\n        /* int32 improved_soul_fire = 44; */\n        if (message.improvedSoulFire !== 0)\n            writer.tag(44, WireType.Varint).int32(message.improvedSoulFire);\n        /* int32 backdraft = 45; */\n        if (message.backdraft !== 0)\n            writer.tag(45, WireType.Varint).int32(message.backdraft);\n        /* bool shadowburn = 46; */\n        if (message.shadowburn !== false)\n            writer.tag(46, WireType.Varint).bool(message.shadowburn);\n        /* int32 burning_embers = 47; */\n        if (message.burningEmbers !== 0)\n            writer.tag(47, WireType.Varint).int32(message.burningEmbers);\n        /* int32 soul_leech = 48; */\n        if (message.soulLeech !== 0)\n            writer.tag(48, WireType.Varint).int32(message.soulLeech);\n        /* int32 backlash = 49; */\n        if (message.backlash !== 0)\n            writer.tag(49, WireType.Varint).int32(message.backlash);\n        /* bool nether_ward = 50; */\n        if (message.netherWard !== false)\n            writer.tag(50, WireType.Varint).bool(message.netherWard);\n        /* int32 fire_and_brimstone = 51; */\n        if (message.fireAndBrimstone !== 0)\n            writer.tag(51, WireType.Varint).int32(message.fireAndBrimstone);\n        /* bool shadowfury = 52; */\n        if (message.shadowfury !== false)\n            writer.tag(52, WireType.Varint).bool(message.shadowfury);\n        /* int32 nether_protection = 53; */\n        if (message.netherProtection !== 0)\n            writer.tag(53, WireType.Varint).int32(message.netherProtection);\n        /* int32 empowered_imp = 54; */\n        if (message.empoweredImp !== 0)\n            writer.tag(54, WireType.Varint).int32(message.empoweredImp);\n        /* bool bane_of_havoc = 55; */\n        if (message.baneOfHavoc !== false)\n            writer.tag(55, WireType.Varint).bool(message.baneOfHavoc);\n        /* bool chaos_bolt = 56; */\n        if (message.chaosBolt !== false)\n            writer.tag(56, WireType.Varint).bool(message.chaosBolt);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.WarlockTalents\n */\nexport const WarlockTalents = new WarlockTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass WarlockOptions$Type extends MessageType<WarlockOptions> {\n    constructor() {\n        super(\"proto.WarlockOptions\", [\n            { no: 1, name: \"armor\", kind: \"enum\", T: () => [\"proto.WarlockOptions.Armor\", WarlockOptions_Armor] },\n            { no: 2, name: \"summon\", kind: \"enum\", T: () => [\"proto.WarlockOptions.Summon\", WarlockOptions_Summon] },\n            { no: 3, name: \"weaponImbue\", kind: \"enum\", T: () => [\"proto.WarlockOptions.WeaponImbue\", WarlockOptions_WeaponImbue] },\n            { no: 5, name: \"detonate_seed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<WarlockOptions>): WarlockOptions {\n        const message = { armor: 0, summon: 0, weaponImbue: 0, detonateSeed: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<WarlockOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WarlockOptions): WarlockOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.WarlockOptions.Armor armor */ 1:\n                    message.armor = reader.int32();\n                    break;\n                case /* proto.WarlockOptions.Summon summon */ 2:\n                    message.summon = reader.int32();\n                    break;\n                case /* proto.WarlockOptions.WeaponImbue weaponImbue */ 3:\n                    message.weaponImbue = reader.int32();\n                    break;\n                case /* bool detonate_seed */ 5:\n                    message.detonateSeed = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: WarlockOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.WarlockOptions.Armor armor = 1; */\n        if (message.armor !== 0)\n            writer.tag(1, WireType.Varint).int32(message.armor);\n        /* proto.WarlockOptions.Summon summon = 2; */\n        if (message.summon !== 0)\n            writer.tag(2, WireType.Varint).int32(message.summon);\n        /* proto.WarlockOptions.WeaponImbue weaponImbue = 3; */\n        if (message.weaponImbue !== 0)\n            writer.tag(3, WireType.Varint).int32(message.weaponImbue);\n        /* bool detonate_seed = 5; */\n        if (message.detonateSeed !== false)\n            writer.tag(5, WireType.Varint).bool(message.detonateSeed);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.WarlockOptions\n */\nexport const WarlockOptions = new WarlockOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AfflictionWarlock$Type extends MessageType<AfflictionWarlock> {\n    constructor() {\n        super(\"proto.AfflictionWarlock\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => AfflictionWarlock_Options }\n        ]);\n    }\n    create(value?: PartialMessage<AfflictionWarlock>): AfflictionWarlock {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AfflictionWarlock>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AfflictionWarlock): AfflictionWarlock {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.AfflictionWarlock.Options options */ 1:\n                    message.options = AfflictionWarlock_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AfflictionWarlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.AfflictionWarlock.Options options = 1; */\n        if (message.options)\n            AfflictionWarlock_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AfflictionWarlock\n */\nexport const AfflictionWarlock = new AfflictionWarlock$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AfflictionWarlock_Rotation$Type extends MessageType<AfflictionWarlock_Rotation> {\n    constructor() {\n        super(\"proto.AfflictionWarlock.Rotation\", []);\n    }\n    create(value?: PartialMessage<AfflictionWarlock_Rotation>): AfflictionWarlock_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AfflictionWarlock_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AfflictionWarlock_Rotation): AfflictionWarlock_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: AfflictionWarlock_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AfflictionWarlock.Rotation\n */\nexport const AfflictionWarlock_Rotation = new AfflictionWarlock_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AfflictionWarlock_Options$Type extends MessageType<AfflictionWarlock_Options> {\n    constructor() {\n        super(\"proto.AfflictionWarlock.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => WarlockOptions }\n        ]);\n    }\n    create(value?: PartialMessage<AfflictionWarlock_Options>): AfflictionWarlock_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AfflictionWarlock_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AfflictionWarlock_Options): AfflictionWarlock_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.WarlockOptions class_options */ 1:\n                    message.classOptions = WarlockOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AfflictionWarlock_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.WarlockOptions class_options = 1; */\n        if (message.classOptions)\n            WarlockOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AfflictionWarlock.Options\n */\nexport const AfflictionWarlock_Options = new AfflictionWarlock_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DemonologyWarlock$Type extends MessageType<DemonologyWarlock> {\n    constructor() {\n        super(\"proto.DemonologyWarlock\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => DemonologyWarlock_Options }\n        ]);\n    }\n    create(value?: PartialMessage<DemonologyWarlock>): DemonologyWarlock {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DemonologyWarlock>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DemonologyWarlock): DemonologyWarlock {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DemonologyWarlock.Options options */ 1:\n                    message.options = DemonologyWarlock_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DemonologyWarlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DemonologyWarlock.Options options = 1; */\n        if (message.options)\n            DemonologyWarlock_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DemonologyWarlock\n */\nexport const DemonologyWarlock = new DemonologyWarlock$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DemonologyWarlock_Rotation$Type extends MessageType<DemonologyWarlock_Rotation> {\n    constructor() {\n        super(\"proto.DemonologyWarlock.Rotation\", []);\n    }\n    create(value?: PartialMessage<DemonologyWarlock_Rotation>): DemonologyWarlock_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DemonologyWarlock_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DemonologyWarlock_Rotation): DemonologyWarlock_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: DemonologyWarlock_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DemonologyWarlock.Rotation\n */\nexport const DemonologyWarlock_Rotation = new DemonologyWarlock_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DemonologyWarlock_Options$Type extends MessageType<DemonologyWarlock_Options> {\n    constructor() {\n        super(\"proto.DemonologyWarlock.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => WarlockOptions }\n        ]);\n    }\n    create(value?: PartialMessage<DemonologyWarlock_Options>): DemonologyWarlock_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DemonologyWarlock_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DemonologyWarlock_Options): DemonologyWarlock_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.WarlockOptions class_options */ 1:\n                    message.classOptions = WarlockOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DemonologyWarlock_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.WarlockOptions class_options = 1; */\n        if (message.classOptions)\n            WarlockOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DemonologyWarlock.Options\n */\nexport const DemonologyWarlock_Options = new DemonologyWarlock_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DestructionWarlock$Type extends MessageType<DestructionWarlock> {\n    constructor() {\n        super(\"proto.DestructionWarlock\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => DestructionWarlock_Options }\n        ]);\n    }\n    create(value?: PartialMessage<DestructionWarlock>): DestructionWarlock {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DestructionWarlock>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DestructionWarlock): DestructionWarlock {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DestructionWarlock.Options options */ 1:\n                    message.options = DestructionWarlock_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DestructionWarlock, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DestructionWarlock.Options options = 1; */\n        if (message.options)\n            DestructionWarlock_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DestructionWarlock\n */\nexport const DestructionWarlock = new DestructionWarlock$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DestructionWarlock_Rotation$Type extends MessageType<DestructionWarlock_Rotation> {\n    constructor() {\n        super(\"proto.DestructionWarlock.Rotation\", []);\n    }\n    create(value?: PartialMessage<DestructionWarlock_Rotation>): DestructionWarlock_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DestructionWarlock_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DestructionWarlock_Rotation): DestructionWarlock_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: DestructionWarlock_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DestructionWarlock.Rotation\n */\nexport const DestructionWarlock_Rotation = new DestructionWarlock_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DestructionWarlock_Options$Type extends MessageType<DestructionWarlock_Options> {\n    constructor() {\n        super(\"proto.DestructionWarlock.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => WarlockOptions }\n        ]);\n    }\n    create(value?: PartialMessage<DestructionWarlock_Options>): DestructionWarlock_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DestructionWarlock_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DestructionWarlock_Options): DestructionWarlock_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.WarlockOptions class_options */ 1:\n                    message.classOptions = WarlockOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DestructionWarlock_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.WarlockOptions class_options = 1; */\n        if (message.classOptions)\n            WarlockOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DestructionWarlock.Options\n */\nexport const DestructionWarlock_Options = new DestructionWarlock_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"rogue.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { UnitReference } from \"./common\";\n/**\n * @generated from protobuf message proto.RogueTalents\n */\nexport interface RogueTalents {\n    /**\n     * Assassination\n     *\n     * @generated from protobuf field: int32 deadly_momentum = 1;\n     */\n    deadlyMomentum: number;\n    /**\n     * @generated from protobuf field: int32 coup_de_grace = 2;\n     */\n    coupDeGrace: number;\n    /**\n     * @generated from protobuf field: int32 lethality = 3;\n     */\n    lethality: number;\n    /**\n     * @generated from protobuf field: int32 ruthlessness = 4;\n     */\n    ruthlessness: number;\n    /**\n     * @generated from protobuf field: int32 quickening = 5;\n     */\n    quickening: number;\n    /**\n     * @generated from protobuf field: int32 puncturing_wounds = 6;\n     */\n    puncturingWounds: number;\n    /**\n     * @generated from protobuf field: int32 blackjack = 7;\n     */\n    blackjack: number;\n    /**\n     * @generated from protobuf field: int32 deadly_brew = 8;\n     */\n    deadlyBrew: number;\n    /**\n     * @generated from protobuf field: bool cold_blood = 9;\n     */\n    coldBlood: boolean;\n    /**\n     * @generated from protobuf field: int32 vile_poisons = 10;\n     */\n    vilePoisons: number;\n    /**\n     * @generated from protobuf field: int32 deadened_nerves = 11;\n     */\n    deadenedNerves: number;\n    /**\n     * @generated from protobuf field: int32 seal_fate = 12;\n     */\n    sealFate: number;\n    /**\n     * @generated from protobuf field: int32 murderous_intent = 13;\n     */\n    murderousIntent: number;\n    /**\n     * @generated from protobuf field: bool overkill = 14;\n     */\n    overkill: boolean;\n    /**\n     * @generated from protobuf field: bool master_poisoner = 15;\n     */\n    masterPoisoner: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_expose_armor = 16;\n     */\n    improvedExposeArmor: number;\n    /**\n     * @generated from protobuf field: int32 cut_to_the_chase = 17;\n     */\n    cutToTheChase: number;\n    /**\n     * @generated from protobuf field: int32 venomous_wounds = 18;\n     */\n    venomousWounds: number;\n    /**\n     * @generated from protobuf field: bool vendetta = 19;\n     */\n    vendetta: boolean;\n    /**\n     * Combat\n     *\n     * @generated from protobuf field: int32 improved_recuperate = 20;\n     */\n    improvedRecuperate: number;\n    /**\n     * @generated from protobuf field: int32 improved_sinister_strike = 21;\n     */\n    improvedSinisterStrike: number;\n    /**\n     * @generated from protobuf field: int32 precision = 22;\n     */\n    precision: number;\n    /**\n     * @generated from protobuf field: int32 improved_slice_and_dice = 23;\n     */\n    improvedSliceAndDice: number;\n    /**\n     * @generated from protobuf field: int32 improved_sprint = 24;\n     */\n    improvedSprint: number;\n    /**\n     * @generated from protobuf field: int32 aggression = 25;\n     */\n    aggression: number;\n    /**\n     * @generated from protobuf field: int32 improved_kick = 26;\n     */\n    improvedKick: number;\n    /**\n     * @generated from protobuf field: int32 lightning_reflexes = 27;\n     */\n    lightningReflexes: number;\n    /**\n     * @generated from protobuf field: bool revealing_strike = 28;\n     */\n    revealingStrike: boolean;\n    /**\n     * @generated from protobuf field: int32 reinforced_leather = 29;\n     */\n    reinforcedLeather: number;\n    /**\n     * @generated from protobuf field: int32 improved_gouge = 30;\n     */\n    improvedGouge: number;\n    /**\n     * @generated from protobuf field: int32 combat_potency = 31;\n     */\n    combatPotency: number;\n    /**\n     * @generated from protobuf field: int32 blade_twisting = 32;\n     */\n    bladeTwisting: number;\n    /**\n     * @generated from protobuf field: int32 throwing_specialization = 33;\n     */\n    throwingSpecialization: number;\n    /**\n     * @generated from protobuf field: bool adrenaline_rush = 34;\n     */\n    adrenalineRush: boolean;\n    /**\n     * @generated from protobuf field: int32 savage_combat = 35;\n     */\n    savageCombat: number;\n    /**\n     * @generated from protobuf field: int32 bandits_guile = 36;\n     */\n    banditsGuile: number;\n    /**\n     * @generated from protobuf field: int32 restless_blades = 37;\n     */\n    restlessBlades: number;\n    /**\n     * @generated from protobuf field: bool killing_spree = 38;\n     */\n    killingSpree: boolean;\n    /**\n     * Subtlety\n     *\n     * @generated from protobuf field: int32 nightstalker = 39;\n     */\n    nightstalker: number;\n    /**\n     * @generated from protobuf field: int32 improved_ambush = 40;\n     */\n    improvedAmbush: number;\n    /**\n     * @generated from protobuf field: int32 relentless_strikes = 41;\n     */\n    relentlessStrikes: number;\n    /**\n     * @generated from protobuf field: int32 elusiveness = 42;\n     */\n    elusiveness: number;\n    /**\n     * @generated from protobuf field: int32 waylay = 43;\n     */\n    waylay: number;\n    /**\n     * @generated from protobuf field: int32 opportunity = 44;\n     */\n    opportunity: number;\n    /**\n     * @generated from protobuf field: int32 initiative = 45;\n     */\n    initiative: number;\n    /**\n     * @generated from protobuf field: int32 energetic_recovery = 46;\n     */\n    energeticRecovery: number;\n    /**\n     * @generated from protobuf field: int32 find_weakness = 47;\n     */\n    findWeakness: number;\n    /**\n     * @generated from protobuf field: bool hemorrhage = 48;\n     */\n    hemorrhage: boolean;\n    /**\n     * @generated from protobuf field: int32 honor_among_thieves = 49;\n     */\n    honorAmongThieves: number;\n    /**\n     * @generated from protobuf field: bool premeditation = 50;\n     */\n    premeditation: boolean;\n    /**\n     * @generated from protobuf field: int32 enveloping_shadows = 51;\n     */\n    envelopingShadows: number;\n    /**\n     * @generated from protobuf field: int32 cheat_death = 52;\n     */\n    cheatDeath: number;\n    /**\n     * @generated from protobuf field: bool preparation = 53;\n     */\n    preparation: boolean;\n    /**\n     * @generated from protobuf field: int32 sanguinary_vein = 54;\n     */\n    sanguinaryVein: number;\n    /**\n     * @generated from protobuf field: int32 slaughter_from_the_shadows = 55;\n     */\n    slaughterFromTheShadows: number;\n    /**\n     * @generated from protobuf field: int32 serrated_blades = 56;\n     */\n    serratedBlades: number;\n    /**\n     * @generated from protobuf field: bool shadow_dance = 57;\n     */\n    shadowDance: boolean;\n}\n/**\n * @generated from protobuf message proto.RogueOptions\n */\nexport interface RogueOptions {\n    /**\n     * @generated from protobuf field: proto.UnitReference tricks_of_the_trade_target = 1;\n     */\n    tricksOfTheTradeTarget?: UnitReference;\n    /**\n     * @generated from protobuf field: proto.RogueOptions.PoisonImbue mh_imbue = 2;\n     */\n    mhImbue: RogueOptions_PoisonImbue;\n    /**\n     * @generated from protobuf field: proto.RogueOptions.PoisonImbue oh_imbue = 3;\n     */\n    ohImbue: RogueOptions_PoisonImbue;\n    /**\n     * @generated from protobuf field: proto.RogueOptions.PoisonImbue th_imbue = 4;\n     */\n    thImbue: RogueOptions_PoisonImbue;\n    /**\n     * @generated from protobuf field: int32 starting_overkill_duration = 5;\n     */\n    startingOverkillDuration: number;\n    /**\n     * @generated from protobuf field: bool apply_poisons_manually = 6;\n     */\n    applyPoisonsManually: boolean;\n    /**\n     * @generated from protobuf field: bool assume_bleed_active = 7;\n     */\n    assumeBleedActive: boolean;\n    /**\n     * @generated from protobuf field: float vanish_break_time = 8;\n     */\n    vanishBreakTime: number;\n}\n/**\n * @generated from protobuf enum proto.RogueOptions.PoisonImbue\n */\nexport enum RogueOptions_PoisonImbue {\n    /**\n     * @generated from protobuf enum value: NoPoison = 0;\n     */\n    NoPoison = 0,\n    /**\n     * @generated from protobuf enum value: InstantPoison = 1;\n     */\n    InstantPoison = 1,\n    /**\n     * @generated from protobuf enum value: DeadlyPoison = 2;\n     */\n    DeadlyPoison = 2,\n    /**\n     * @generated from protobuf enum value: WoundPoison = 3;\n     */\n    WoundPoison = 3\n}\n/**\n * @generated from protobuf message proto.AssassinationRogue\n */\nexport interface AssassinationRogue {\n    /**\n     * @generated from protobuf field: proto.AssassinationRogue.Options options = 1;\n     */\n    options?: AssassinationRogue_Options;\n}\n/**\n * @generated from protobuf message proto.AssassinationRogue.Rotation\n */\nexport interface AssassinationRogue_Rotation {\n}\n/**\n * @generated from protobuf message proto.AssassinationRogue.Options\n */\nexport interface AssassinationRogue_Options {\n    /**\n     * @generated from protobuf field: proto.RogueOptions class_options = 1;\n     */\n    classOptions?: RogueOptions;\n}\n/**\n * @generated from protobuf message proto.CombatRogue\n */\nexport interface CombatRogue {\n    /**\n     * @generated from protobuf field: proto.CombatRogue.Options options = 1;\n     */\n    options?: CombatRogue_Options;\n}\n/**\n * @generated from protobuf message proto.CombatRogue.Rotation\n */\nexport interface CombatRogue_Rotation {\n}\n/**\n * @generated from protobuf message proto.CombatRogue.Options\n */\nexport interface CombatRogue_Options {\n    /**\n     * @generated from protobuf field: proto.RogueOptions class_options = 1;\n     */\n    classOptions?: RogueOptions;\n}\n/**\n * @generated from protobuf message proto.SubtletyRogue\n */\nexport interface SubtletyRogue {\n    /**\n     * @generated from protobuf field: proto.SubtletyRogue.Options options = 1;\n     */\n    options?: SubtletyRogue_Options;\n}\n/**\n * @generated from protobuf message proto.SubtletyRogue.Rotation\n */\nexport interface SubtletyRogue_Rotation {\n}\n/**\n * @generated from protobuf message proto.SubtletyRogue.Options\n */\nexport interface SubtletyRogue_Options {\n    /**\n     * @generated from protobuf field: proto.RogueOptions class_options = 1;\n     */\n    classOptions?: RogueOptions;\n    /**\n     * @generated from protobuf field: int32 honor_among_thieves_crit_rate = 6;\n     */\n    honorAmongThievesCritRate: number;\n}\n/**\n * @generated from protobuf enum proto.RoguePrimeGlyph\n */\nexport enum RoguePrimeGlyph {\n    /**\n     * @generated from protobuf enum value: RoguePrimeGlyphNone = 0;\n     */\n    RoguePrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAdrenalineRush = 42954;\n     */\n    GlyphOfAdrenalineRush = 42954,\n    /**\n     * @generated from protobuf enum value: GlyphOfBackstab = 42956;\n     */\n    GlyphOfBackstab = 42956,\n    /**\n     * @generated from protobuf enum value: GlyphOfEviscerate = 42961;\n     */\n    GlyphOfEviscerate = 42961,\n    /**\n     * @generated from protobuf enum value: GlyphOfHemorrhage = 42967;\n     */\n    GlyphOfHemorrhage = 42967,\n    /**\n     * @generated from protobuf enum value: GlyphOfKillingSpree = 45762;\n     */\n    GlyphOfKillingSpree = 45762,\n    /**\n     * @generated from protobuf enum value: GlyphOfMutilate = 45768;\n     */\n    GlyphOfMutilate = 45768,\n    /**\n     * @generated from protobuf enum value: GlyphOfRevealingStrike = 42965;\n     */\n    GlyphOfRevealingStrike = 42965,\n    /**\n     * @generated from protobuf enum value: GlyphOfRupture = 42969;\n     */\n    GlyphOfRupture = 42969,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowDance = 45764;\n     */\n    GlyphOfShadowDance = 45764,\n    /**\n     * @generated from protobuf enum value: GlyphOfSinisterStrike = 42972;\n     */\n    GlyphOfSinisterStrike = 42972,\n    /**\n     * @generated from protobuf enum value: GlyphOfSliceAndDice = 42973;\n     */\n    GlyphOfSliceAndDice = 42973,\n    /**\n     * @generated from protobuf enum value: GlyphOfVendetta = 45761;\n     */\n    GlyphOfVendetta = 45761\n}\n/**\n * @generated from protobuf enum proto.RogueMajorGlyph\n */\nexport enum RogueMajorGlyph {\n    /**\n     * @generated from protobuf enum value: RogueMajorGlyphNone = 0;\n     */\n    RogueMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAmbush = 42955;\n     */\n    GlyphOfAmbush = 42955,\n    /**\n     * @generated from protobuf enum value: GlyphOfBladeFlurry = 42957;\n     */\n    GlyphOfBladeFlurry = 42957,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlind = 64493;\n     */\n    GlyphOfBlind = 64493,\n    /**\n     * @generated from protobuf enum value: GlyphOfCloakOfShadows = 45769;\n     */\n    GlyphOfCloakOfShadows = 45769,\n    /**\n     * @generated from protobuf enum value: GlyphOfCripplingPoison = 42958;\n     */\n    GlyphOfCripplingPoison = 42958,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeadlyThrow = 42959;\n     */\n    GlyphOfDeadlyThrow = 42959,\n    /**\n     * @generated from protobuf enum value: GlyphOfEvasion = 42960;\n     */\n    GlyphOfEvasion = 42960,\n    /**\n     * @generated from protobuf enum value: GlyphOfExposeArmor = 42962;\n     */\n    GlyphOfExposeArmor = 42962,\n    /**\n     * @generated from protobuf enum value: GlyphOfFanOfKnives = 45766;\n     */\n    GlyphOfFanOfKnives = 45766,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeint = 42963;\n     */\n    GlyphOfFeint = 42963,\n    /**\n     * @generated from protobuf enum value: GlyphOfGarrote = 42964;\n     */\n    GlyphOfGarrote = 42964,\n    /**\n     * @generated from protobuf enum value: GlyphOfGouge = 42966;\n     */\n    GlyphOfGouge = 42966,\n    /**\n     * @generated from protobuf enum value: GlyphOfKick = 42971;\n     */\n    GlyphOfKick = 42971,\n    /**\n     * @generated from protobuf enum value: GlyphOfPreparation = 42968;\n     */\n    GlyphOfPreparation = 42968,\n    /**\n     * @generated from protobuf enum value: GlyphOfSap = 42970;\n     */\n    GlyphOfSap = 42970,\n    /**\n     * @generated from protobuf enum value: GlyphOfSprint = 42974;\n     */\n    GlyphOfSprint = 42974,\n    /**\n     * @generated from protobuf enum value: GlyphOfTricksOfTheTrade = 45767;\n     */\n    GlyphOfTricksOfTheTrade = 45767,\n    /**\n     * @generated from protobuf enum value: GlyphOfVanish = 63420;\n     */\n    GlyphOfVanish = 63420\n}\n/**\n * @generated from protobuf enum proto.RogueMinorGlyph\n */\nexport enum RogueMinorGlyph {\n    /**\n     * @generated from protobuf enum value: RogueMinorGlyphNone = 0;\n     */\n    RogueMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlurredSpeed = 43379;\n     */\n    GlyphOfBlurredSpeed = 43379,\n    /**\n     * @generated from protobuf enum value: GlyphOfDistract = 43376;\n     */\n    GlyphOfDistract = 43376,\n    /**\n     * @generated from protobuf enum value: GlyphOfPickLock = 43377;\n     */\n    GlyphOfPickLock = 43377,\n    /**\n     * @generated from protobuf enum value: GlyphOfPickPocket = 43343;\n     */\n    GlyphOfPickPocket = 43343,\n    /**\n     * @generated from protobuf enum value: GlyphOfPoisons = 43380;\n     */\n    GlyphOfPoisons = 43380,\n    /**\n     * @generated from protobuf enum value: GlyphOfSafeFall = 43378;\n     */\n    GlyphOfSafeFall = 43378\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass RogueTalents$Type extends MessageType<RogueTalents> {\n    constructor() {\n        super(\"proto.RogueTalents\", [\n            { no: 1, name: \"deadly_momentum\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"coup_de_grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"lethality\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"ruthlessness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"quickening\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"puncturing_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"blackjack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"deadly_brew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"cold_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"vile_poisons\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"deadened_nerves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"seal_fate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"murderous_intent\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"overkill\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"master_poisoner\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"improved_expose_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"cut_to_the_chase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"venomous_wounds\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"vendetta\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"improved_recuperate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"improved_sinister_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"precision\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"improved_slice_and_dice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"improved_sprint\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"aggression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"improved_kick\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"lightning_reflexes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"revealing_strike\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"reinforced_leather\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"improved_gouge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"combat_potency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"blade_twisting\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"throwing_specialization\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"adrenaline_rush\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"savage_combat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"bandits_guile\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"restless_blades\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"killing_spree\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"nightstalker\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"improved_ambush\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"relentless_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"elusiveness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"waylay\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"opportunity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"initiative\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"energetic_recovery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"find_weakness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"hemorrhage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"honor_among_thieves\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"premeditation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"enveloping_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"cheat_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"preparation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 54, name: \"sanguinary_vein\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"slaughter_from_the_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"serrated_blades\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"shadow_dance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RogueTalents>): RogueTalents {\n        const message = { deadlyMomentum: 0, coupDeGrace: 0, lethality: 0, ruthlessness: 0, quickening: 0, puncturingWounds: 0, blackjack: 0, deadlyBrew: 0, coldBlood: false, vilePoisons: 0, deadenedNerves: 0, sealFate: 0, murderousIntent: 0, overkill: false, masterPoisoner: false, improvedExposeArmor: 0, cutToTheChase: 0, venomousWounds: 0, vendetta: false, improvedRecuperate: 0, improvedSinisterStrike: 0, precision: 0, improvedSliceAndDice: 0, improvedSprint: 0, aggression: 0, improvedKick: 0, lightningReflexes: 0, revealingStrike: false, reinforcedLeather: 0, improvedGouge: 0, combatPotency: 0, bladeTwisting: 0, throwingSpecialization: 0, adrenalineRush: false, savageCombat: 0, banditsGuile: 0, restlessBlades: 0, killingSpree: false, nightstalker: 0, improvedAmbush: 0, relentlessStrikes: 0, elusiveness: 0, waylay: 0, opportunity: 0, initiative: 0, energeticRecovery: 0, findWeakness: 0, hemorrhage: false, honorAmongThieves: 0, premeditation: false, envelopingShadows: 0, cheatDeath: 0, preparation: false, sanguinaryVein: 0, slaughterFromTheShadows: 0, serratedBlades: 0, shadowDance: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RogueTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueTalents): RogueTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 deadly_momentum */ 1:\n                    message.deadlyMomentum = reader.int32();\n                    break;\n                case /* int32 coup_de_grace */ 2:\n                    message.coupDeGrace = reader.int32();\n                    break;\n                case /* int32 lethality */ 3:\n                    message.lethality = reader.int32();\n                    break;\n                case /* int32 ruthlessness */ 4:\n                    message.ruthlessness = reader.int32();\n                    break;\n                case /* int32 quickening */ 5:\n                    message.quickening = reader.int32();\n                    break;\n                case /* int32 puncturing_wounds */ 6:\n                    message.puncturingWounds = reader.int32();\n                    break;\n                case /* int32 blackjack */ 7:\n                    message.blackjack = reader.int32();\n                    break;\n                case /* int32 deadly_brew */ 8:\n                    message.deadlyBrew = reader.int32();\n                    break;\n                case /* bool cold_blood */ 9:\n                    message.coldBlood = reader.bool();\n                    break;\n                case /* int32 vile_poisons */ 10:\n                    message.vilePoisons = reader.int32();\n                    break;\n                case /* int32 deadened_nerves */ 11:\n                    message.deadenedNerves = reader.int32();\n                    break;\n                case /* int32 seal_fate */ 12:\n                    message.sealFate = reader.int32();\n                    break;\n                case /* int32 murderous_intent */ 13:\n                    message.murderousIntent = reader.int32();\n                    break;\n                case /* bool overkill */ 14:\n                    message.overkill = reader.bool();\n                    break;\n                case /* bool master_poisoner */ 15:\n                    message.masterPoisoner = reader.bool();\n                    break;\n                case /* int32 improved_expose_armor */ 16:\n                    message.improvedExposeArmor = reader.int32();\n                    break;\n                case /* int32 cut_to_the_chase */ 17:\n                    message.cutToTheChase = reader.int32();\n                    break;\n                case /* int32 venomous_wounds */ 18:\n                    message.venomousWounds = reader.int32();\n                    break;\n                case /* bool vendetta */ 19:\n                    message.vendetta = reader.bool();\n                    break;\n                case /* int32 improved_recuperate */ 20:\n                    message.improvedRecuperate = reader.int32();\n                    break;\n                case /* int32 improved_sinister_strike */ 21:\n                    message.improvedSinisterStrike = reader.int32();\n                    break;\n                case /* int32 precision */ 22:\n                    message.precision = reader.int32();\n                    break;\n                case /* int32 improved_slice_and_dice */ 23:\n                    message.improvedSliceAndDice = reader.int32();\n                    break;\n                case /* int32 improved_sprint */ 24:\n                    message.improvedSprint = reader.int32();\n                    break;\n                case /* int32 aggression */ 25:\n                    message.aggression = reader.int32();\n                    break;\n                case /* int32 improved_kick */ 26:\n                    message.improvedKick = reader.int32();\n                    break;\n                case /* int32 lightning_reflexes */ 27:\n                    message.lightningReflexes = reader.int32();\n                    break;\n                case /* bool revealing_strike */ 28:\n                    message.revealingStrike = reader.bool();\n                    break;\n                case /* int32 reinforced_leather */ 29:\n                    message.reinforcedLeather = reader.int32();\n                    break;\n                case /* int32 improved_gouge */ 30:\n                    message.improvedGouge = reader.int32();\n                    break;\n                case /* int32 combat_potency */ 31:\n                    message.combatPotency = reader.int32();\n                    break;\n                case /* int32 blade_twisting */ 32:\n                    message.bladeTwisting = reader.int32();\n                    break;\n                case /* int32 throwing_specialization */ 33:\n                    message.throwingSpecialization = reader.int32();\n                    break;\n                case /* bool adrenaline_rush */ 34:\n                    message.adrenalineRush = reader.bool();\n                    break;\n                case /* int32 savage_combat */ 35:\n                    message.savageCombat = reader.int32();\n                    break;\n                case /* int32 bandits_guile */ 36:\n                    message.banditsGuile = reader.int32();\n                    break;\n                case /* int32 restless_blades */ 37:\n                    message.restlessBlades = reader.int32();\n                    break;\n                case /* bool killing_spree */ 38:\n                    message.killingSpree = reader.bool();\n                    break;\n                case /* int32 nightstalker */ 39:\n                    message.nightstalker = reader.int32();\n                    break;\n                case /* int32 improved_ambush */ 40:\n                    message.improvedAmbush = reader.int32();\n                    break;\n                case /* int32 relentless_strikes */ 41:\n                    message.relentlessStrikes = reader.int32();\n                    break;\n                case /* int32 elusiveness */ 42:\n                    message.elusiveness = reader.int32();\n                    break;\n                case /* int32 waylay */ 43:\n                    message.waylay = reader.int32();\n                    break;\n                case /* int32 opportunity */ 44:\n                    message.opportunity = reader.int32();\n                    break;\n                case /* int32 initiative */ 45:\n                    message.initiative = reader.int32();\n                    break;\n                case /* int32 energetic_recovery */ 46:\n                    message.energeticRecovery = reader.int32();\n                    break;\n                case /* int32 find_weakness */ 47:\n                    message.findWeakness = reader.int32();\n                    break;\n                case /* bool hemorrhage */ 48:\n                    message.hemorrhage = reader.bool();\n                    break;\n                case /* int32 honor_among_thieves */ 49:\n                    message.honorAmongThieves = reader.int32();\n                    break;\n                case /* bool premeditation */ 50:\n                    message.premeditation = reader.bool();\n                    break;\n                case /* int32 enveloping_shadows */ 51:\n                    message.envelopingShadows = reader.int32();\n                    break;\n                case /* int32 cheat_death */ 52:\n                    message.cheatDeath = reader.int32();\n                    break;\n                case /* bool preparation */ 53:\n                    message.preparation = reader.bool();\n                    break;\n                case /* int32 sanguinary_vein */ 54:\n                    message.sanguinaryVein = reader.int32();\n                    break;\n                case /* int32 slaughter_from_the_shadows */ 55:\n                    message.slaughterFromTheShadows = reader.int32();\n                    break;\n                case /* int32 serrated_blades */ 56:\n                    message.serratedBlades = reader.int32();\n                    break;\n                case /* bool shadow_dance */ 57:\n                    message.shadowDance = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RogueTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 deadly_momentum = 1; */\n        if (message.deadlyMomentum !== 0)\n            writer.tag(1, WireType.Varint).int32(message.deadlyMomentum);\n        /* int32 coup_de_grace = 2; */\n        if (message.coupDeGrace !== 0)\n            writer.tag(2, WireType.Varint).int32(message.coupDeGrace);\n        /* int32 lethality = 3; */\n        if (message.lethality !== 0)\n            writer.tag(3, WireType.Varint).int32(message.lethality);\n        /* int32 ruthlessness = 4; */\n        if (message.ruthlessness !== 0)\n            writer.tag(4, WireType.Varint).int32(message.ruthlessness);\n        /* int32 quickening = 5; */\n        if (message.quickening !== 0)\n            writer.tag(5, WireType.Varint).int32(message.quickening);\n        /* int32 puncturing_wounds = 6; */\n        if (message.puncturingWounds !== 0)\n            writer.tag(6, WireType.Varint).int32(message.puncturingWounds);\n        /* int32 blackjack = 7; */\n        if (message.blackjack !== 0)\n            writer.tag(7, WireType.Varint).int32(message.blackjack);\n        /* int32 deadly_brew = 8; */\n        if (message.deadlyBrew !== 0)\n            writer.tag(8, WireType.Varint).int32(message.deadlyBrew);\n        /* bool cold_blood = 9; */\n        if (message.coldBlood !== false)\n            writer.tag(9, WireType.Varint).bool(message.coldBlood);\n        /* int32 vile_poisons = 10; */\n        if (message.vilePoisons !== 0)\n            writer.tag(10, WireType.Varint).int32(message.vilePoisons);\n        /* int32 deadened_nerves = 11; */\n        if (message.deadenedNerves !== 0)\n            writer.tag(11, WireType.Varint).int32(message.deadenedNerves);\n        /* int32 seal_fate = 12; */\n        if (message.sealFate !== 0)\n            writer.tag(12, WireType.Varint).int32(message.sealFate);\n        /* int32 murderous_intent = 13; */\n        if (message.murderousIntent !== 0)\n            writer.tag(13, WireType.Varint).int32(message.murderousIntent);\n        /* bool overkill = 14; */\n        if (message.overkill !== false)\n            writer.tag(14, WireType.Varint).bool(message.overkill);\n        /* bool master_poisoner = 15; */\n        if (message.masterPoisoner !== false)\n            writer.tag(15, WireType.Varint).bool(message.masterPoisoner);\n        /* int32 improved_expose_armor = 16; */\n        if (message.improvedExposeArmor !== 0)\n            writer.tag(16, WireType.Varint).int32(message.improvedExposeArmor);\n        /* int32 cut_to_the_chase = 17; */\n        if (message.cutToTheChase !== 0)\n            writer.tag(17, WireType.Varint).int32(message.cutToTheChase);\n        /* int32 venomous_wounds = 18; */\n        if (message.venomousWounds !== 0)\n            writer.tag(18, WireType.Varint).int32(message.venomousWounds);\n        /* bool vendetta = 19; */\n        if (message.vendetta !== false)\n            writer.tag(19, WireType.Varint).bool(message.vendetta);\n        /* int32 improved_recuperate = 20; */\n        if (message.improvedRecuperate !== 0)\n            writer.tag(20, WireType.Varint).int32(message.improvedRecuperate);\n        /* int32 improved_sinister_strike = 21; */\n        if (message.improvedSinisterStrike !== 0)\n            writer.tag(21, WireType.Varint).int32(message.improvedSinisterStrike);\n        /* int32 precision = 22; */\n        if (message.precision !== 0)\n            writer.tag(22, WireType.Varint).int32(message.precision);\n        /* int32 improved_slice_and_dice = 23; */\n        if (message.improvedSliceAndDice !== 0)\n            writer.tag(23, WireType.Varint).int32(message.improvedSliceAndDice);\n        /* int32 improved_sprint = 24; */\n        if (message.improvedSprint !== 0)\n            writer.tag(24, WireType.Varint).int32(message.improvedSprint);\n        /* int32 aggression = 25; */\n        if (message.aggression !== 0)\n            writer.tag(25, WireType.Varint).int32(message.aggression);\n        /* int32 improved_kick = 26; */\n        if (message.improvedKick !== 0)\n            writer.tag(26, WireType.Varint).int32(message.improvedKick);\n        /* int32 lightning_reflexes = 27; */\n        if (message.lightningReflexes !== 0)\n            writer.tag(27, WireType.Varint).int32(message.lightningReflexes);\n        /* bool revealing_strike = 28; */\n        if (message.revealingStrike !== false)\n            writer.tag(28, WireType.Varint).bool(message.revealingStrike);\n        /* int32 reinforced_leather = 29; */\n        if (message.reinforcedLeather !== 0)\n            writer.tag(29, WireType.Varint).int32(message.reinforcedLeather);\n        /* int32 improved_gouge = 30; */\n        if (message.improvedGouge !== 0)\n            writer.tag(30, WireType.Varint).int32(message.improvedGouge);\n        /* int32 combat_potency = 31; */\n        if (message.combatPotency !== 0)\n            writer.tag(31, WireType.Varint).int32(message.combatPotency);\n        /* int32 blade_twisting = 32; */\n        if (message.bladeTwisting !== 0)\n            writer.tag(32, WireType.Varint).int32(message.bladeTwisting);\n        /* int32 throwing_specialization = 33; */\n        if (message.throwingSpecialization !== 0)\n            writer.tag(33, WireType.Varint).int32(message.throwingSpecialization);\n        /* bool adrenaline_rush = 34; */\n        if (message.adrenalineRush !== false)\n            writer.tag(34, WireType.Varint).bool(message.adrenalineRush);\n        /* int32 savage_combat = 35; */\n        if (message.savageCombat !== 0)\n            writer.tag(35, WireType.Varint).int32(message.savageCombat);\n        /* int32 bandits_guile = 36; */\n        if (message.banditsGuile !== 0)\n            writer.tag(36, WireType.Varint).int32(message.banditsGuile);\n        /* int32 restless_blades = 37; */\n        if (message.restlessBlades !== 0)\n            writer.tag(37, WireType.Varint).int32(message.restlessBlades);\n        /* bool killing_spree = 38; */\n        if (message.killingSpree !== false)\n            writer.tag(38, WireType.Varint).bool(message.killingSpree);\n        /* int32 nightstalker = 39; */\n        if (message.nightstalker !== 0)\n            writer.tag(39, WireType.Varint).int32(message.nightstalker);\n        /* int32 improved_ambush = 40; */\n        if (message.improvedAmbush !== 0)\n            writer.tag(40, WireType.Varint).int32(message.improvedAmbush);\n        /* int32 relentless_strikes = 41; */\n        if (message.relentlessStrikes !== 0)\n            writer.tag(41, WireType.Varint).int32(message.relentlessStrikes);\n        /* int32 elusiveness = 42; */\n        if (message.elusiveness !== 0)\n            writer.tag(42, WireType.Varint).int32(message.elusiveness);\n        /* int32 waylay = 43; */\n        if (message.waylay !== 0)\n            writer.tag(43, WireType.Varint).int32(message.waylay);\n        /* int32 opportunity = 44; */\n        if (message.opportunity !== 0)\n            writer.tag(44, WireType.Varint).int32(message.opportunity);\n        /* int32 initiative = 45; */\n        if (message.initiative !== 0)\n            writer.tag(45, WireType.Varint).int32(message.initiative);\n        /* int32 energetic_recovery = 46; */\n        if (message.energeticRecovery !== 0)\n            writer.tag(46, WireType.Varint).int32(message.energeticRecovery);\n        /* int32 find_weakness = 47; */\n        if (message.findWeakness !== 0)\n            writer.tag(47, WireType.Varint).int32(message.findWeakness);\n        /* bool hemorrhage = 48; */\n        if (message.hemorrhage !== false)\n            writer.tag(48, WireType.Varint).bool(message.hemorrhage);\n        /* int32 honor_among_thieves = 49; */\n        if (message.honorAmongThieves !== 0)\n            writer.tag(49, WireType.Varint).int32(message.honorAmongThieves);\n        /* bool premeditation = 50; */\n        if (message.premeditation !== false)\n            writer.tag(50, WireType.Varint).bool(message.premeditation);\n        /* int32 enveloping_shadows = 51; */\n        if (message.envelopingShadows !== 0)\n            writer.tag(51, WireType.Varint).int32(message.envelopingShadows);\n        /* int32 cheat_death = 52; */\n        if (message.cheatDeath !== 0)\n            writer.tag(52, WireType.Varint).int32(message.cheatDeath);\n        /* bool preparation = 53; */\n        if (message.preparation !== false)\n            writer.tag(53, WireType.Varint).bool(message.preparation);\n        /* int32 sanguinary_vein = 54; */\n        if (message.sanguinaryVein !== 0)\n            writer.tag(54, WireType.Varint).int32(message.sanguinaryVein);\n        /* int32 slaughter_from_the_shadows = 55; */\n        if (message.slaughterFromTheShadows !== 0)\n            writer.tag(55, WireType.Varint).int32(message.slaughterFromTheShadows);\n        /* int32 serrated_blades = 56; */\n        if (message.serratedBlades !== 0)\n            writer.tag(56, WireType.Varint).int32(message.serratedBlades);\n        /* bool shadow_dance = 57; */\n        if (message.shadowDance !== false)\n            writer.tag(57, WireType.Varint).bool(message.shadowDance);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RogueTalents\n */\nexport const RogueTalents = new RogueTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RogueOptions$Type extends MessageType<RogueOptions> {\n    constructor() {\n        super(\"proto.RogueOptions\", [\n            { no: 1, name: \"tricks_of_the_trade_target\", kind: \"message\", T: () => UnitReference },\n            { no: 2, name: \"mh_imbue\", kind: \"enum\", T: () => [\"proto.RogueOptions.PoisonImbue\", RogueOptions_PoisonImbue] },\n            { no: 3, name: \"oh_imbue\", kind: \"enum\", T: () => [\"proto.RogueOptions.PoisonImbue\", RogueOptions_PoisonImbue] },\n            { no: 4, name: \"th_imbue\", kind: \"enum\", T: () => [\"proto.RogueOptions.PoisonImbue\", RogueOptions_PoisonImbue] },\n            { no: 5, name: \"starting_overkill_duration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"apply_poisons_manually\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"assume_bleed_active\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"vanish_break_time\", kind: \"scalar\", T: 2 /*ScalarType.FLOAT*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RogueOptions>): RogueOptions {\n        const message = { mhImbue: 0, ohImbue: 0, thImbue: 0, startingOverkillDuration: 0, applyPoisonsManually: false, assumeBleedActive: false, vanishBreakTime: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RogueOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueOptions): RogueOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitReference tricks_of_the_trade_target */ 1:\n                    message.tricksOfTheTradeTarget = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.tricksOfTheTradeTarget);\n                    break;\n                case /* proto.RogueOptions.PoisonImbue mh_imbue */ 2:\n                    message.mhImbue = reader.int32();\n                    break;\n                case /* proto.RogueOptions.PoisonImbue oh_imbue */ 3:\n                    message.ohImbue = reader.int32();\n                    break;\n                case /* proto.RogueOptions.PoisonImbue th_imbue */ 4:\n                    message.thImbue = reader.int32();\n                    break;\n                case /* int32 starting_overkill_duration */ 5:\n                    message.startingOverkillDuration = reader.int32();\n                    break;\n                case /* bool apply_poisons_manually */ 6:\n                    message.applyPoisonsManually = reader.bool();\n                    break;\n                case /* bool assume_bleed_active */ 7:\n                    message.assumeBleedActive = reader.bool();\n                    break;\n                case /* float vanish_break_time */ 8:\n                    message.vanishBreakTime = reader.float();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RogueOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitReference tricks_of_the_trade_target = 1; */\n        if (message.tricksOfTheTradeTarget)\n            UnitReference.internalBinaryWrite(message.tricksOfTheTradeTarget, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RogueOptions.PoisonImbue mh_imbue = 2; */\n        if (message.mhImbue !== 0)\n            writer.tag(2, WireType.Varint).int32(message.mhImbue);\n        /* proto.RogueOptions.PoisonImbue oh_imbue = 3; */\n        if (message.ohImbue !== 0)\n            writer.tag(3, WireType.Varint).int32(message.ohImbue);\n        /* proto.RogueOptions.PoisonImbue th_imbue = 4; */\n        if (message.thImbue !== 0)\n            writer.tag(4, WireType.Varint).int32(message.thImbue);\n        /* int32 starting_overkill_duration = 5; */\n        if (message.startingOverkillDuration !== 0)\n            writer.tag(5, WireType.Varint).int32(message.startingOverkillDuration);\n        /* bool apply_poisons_manually = 6; */\n        if (message.applyPoisonsManually !== false)\n            writer.tag(6, WireType.Varint).bool(message.applyPoisonsManually);\n        /* bool assume_bleed_active = 7; */\n        if (message.assumeBleedActive !== false)\n            writer.tag(7, WireType.Varint).bool(message.assumeBleedActive);\n        /* float vanish_break_time = 8; */\n        if (message.vanishBreakTime !== 0)\n            writer.tag(8, WireType.Bit32).float(message.vanishBreakTime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RogueOptions\n */\nexport const RogueOptions = new RogueOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AssassinationRogue$Type extends MessageType<AssassinationRogue> {\n    constructor() {\n        super(\"proto.AssassinationRogue\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => AssassinationRogue_Options }\n        ]);\n    }\n    create(value?: PartialMessage<AssassinationRogue>): AssassinationRogue {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AssassinationRogue>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssassinationRogue): AssassinationRogue {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.AssassinationRogue.Options options */ 1:\n                    message.options = AssassinationRogue_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AssassinationRogue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.AssassinationRogue.Options options = 1; */\n        if (message.options)\n            AssassinationRogue_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AssassinationRogue\n */\nexport const AssassinationRogue = new AssassinationRogue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AssassinationRogue_Rotation$Type extends MessageType<AssassinationRogue_Rotation> {\n    constructor() {\n        super(\"proto.AssassinationRogue.Rotation\", []);\n    }\n    create(value?: PartialMessage<AssassinationRogue_Rotation>): AssassinationRogue_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AssassinationRogue_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssassinationRogue_Rotation): AssassinationRogue_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: AssassinationRogue_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AssassinationRogue.Rotation\n */\nexport const AssassinationRogue_Rotation = new AssassinationRogue_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AssassinationRogue_Options$Type extends MessageType<AssassinationRogue_Options> {\n    constructor() {\n        super(\"proto.AssassinationRogue.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => RogueOptions }\n        ]);\n    }\n    create(value?: PartialMessage<AssassinationRogue_Options>): AssassinationRogue_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AssassinationRogue_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AssassinationRogue_Options): AssassinationRogue_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RogueOptions class_options */ 1:\n                    message.classOptions = RogueOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AssassinationRogue_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RogueOptions class_options = 1; */\n        if (message.classOptions)\n            RogueOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AssassinationRogue.Options\n */\nexport const AssassinationRogue_Options = new AssassinationRogue_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CombatRogue$Type extends MessageType<CombatRogue> {\n    constructor() {\n        super(\"proto.CombatRogue\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => CombatRogue_Options }\n        ]);\n    }\n    create(value?: PartialMessage<CombatRogue>): CombatRogue {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CombatRogue>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CombatRogue): CombatRogue {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.CombatRogue.Options options */ 1:\n                    message.options = CombatRogue_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CombatRogue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.CombatRogue.Options options = 1; */\n        if (message.options)\n            CombatRogue_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CombatRogue\n */\nexport const CombatRogue = new CombatRogue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CombatRogue_Rotation$Type extends MessageType<CombatRogue_Rotation> {\n    constructor() {\n        super(\"proto.CombatRogue.Rotation\", []);\n    }\n    create(value?: PartialMessage<CombatRogue_Rotation>): CombatRogue_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CombatRogue_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CombatRogue_Rotation): CombatRogue_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: CombatRogue_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CombatRogue.Rotation\n */\nexport const CombatRogue_Rotation = new CombatRogue_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CombatRogue_Options$Type extends MessageType<CombatRogue_Options> {\n    constructor() {\n        super(\"proto.CombatRogue.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => RogueOptions }\n        ]);\n    }\n    create(value?: PartialMessage<CombatRogue_Options>): CombatRogue_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CombatRogue_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CombatRogue_Options): CombatRogue_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RogueOptions class_options */ 1:\n                    message.classOptions = RogueOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CombatRogue_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RogueOptions class_options = 1; */\n        if (message.classOptions)\n            RogueOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CombatRogue.Options\n */\nexport const CombatRogue_Options = new CombatRogue_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubtletyRogue$Type extends MessageType<SubtletyRogue> {\n    constructor() {\n        super(\"proto.SubtletyRogue\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => SubtletyRogue_Options }\n        ]);\n    }\n    create(value?: PartialMessage<SubtletyRogue>): SubtletyRogue {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SubtletyRogue>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubtletyRogue): SubtletyRogue {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SubtletyRogue.Options options */ 1:\n                    message.options = SubtletyRogue_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubtletyRogue, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SubtletyRogue.Options options = 1; */\n        if (message.options)\n            SubtletyRogue_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SubtletyRogue\n */\nexport const SubtletyRogue = new SubtletyRogue$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubtletyRogue_Rotation$Type extends MessageType<SubtletyRogue_Rotation> {\n    constructor() {\n        super(\"proto.SubtletyRogue.Rotation\", []);\n    }\n    create(value?: PartialMessage<SubtletyRogue_Rotation>): SubtletyRogue_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SubtletyRogue_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubtletyRogue_Rotation): SubtletyRogue_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: SubtletyRogue_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SubtletyRogue.Rotation\n */\nexport const SubtletyRogue_Rotation = new SubtletyRogue_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubtletyRogue_Options$Type extends MessageType<SubtletyRogue_Options> {\n    constructor() {\n        super(\"proto.SubtletyRogue.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => RogueOptions },\n            { no: 6, name: \"honor_among_thieves_crit_rate\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SubtletyRogue_Options>): SubtletyRogue_Options {\n        const message = { honorAmongThievesCritRate: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SubtletyRogue_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SubtletyRogue_Options): SubtletyRogue_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RogueOptions class_options */ 1:\n                    message.classOptions = RogueOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* int32 honor_among_thieves_crit_rate */ 6:\n                    message.honorAmongThievesCritRate = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SubtletyRogue_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RogueOptions class_options = 1; */\n        if (message.classOptions)\n            RogueOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 honor_among_thieves_crit_rate = 6; */\n        if (message.honorAmongThievesCritRate !== 0)\n            writer.tag(6, WireType.Varint).int32(message.honorAmongThievesCritRate);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SubtletyRogue.Options\n */\nexport const SubtletyRogue_Options = new SubtletyRogue_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"priest.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { UnitReference } from \"./common\";\n/**\n * @generated from protobuf message proto.PriestTalents\n */\nexport interface PriestTalents {\n    /**\n     * Discipline\n     *\n     * @generated from protobuf field: int32 improved_power_word_shield = 1;\n     */\n    improvedPowerWordShield: number;\n    /**\n     * @generated from protobuf field: int32 twin_disciplines = 2;\n     */\n    twinDisciplines: number;\n    /**\n     * @generated from protobuf field: int32 mental_agility = 3;\n     */\n    mentalAgility: number;\n    /**\n     * @generated from protobuf field: int32 evangelism = 4;\n     */\n    evangelism: number;\n    /**\n     * @generated from protobuf field: bool archangel = 5;\n     */\n    archangel: boolean;\n    /**\n     * @generated from protobuf field: int32 inner_sanctum = 6;\n     */\n    innerSanctum: number;\n    /**\n     * @generated from protobuf field: int32 soul_warding = 7;\n     */\n    soulWarding: number;\n    /**\n     * @generated from protobuf field: int32 renewed_hope = 8;\n     */\n    renewedHope: number;\n    /**\n     * @generated from protobuf field: bool power_infusion = 9;\n     */\n    powerInfusion: boolean;\n    /**\n     * @generated from protobuf field: int32 atonement = 10;\n     */\n    atonement: number;\n    /**\n     * @generated from protobuf field: bool inner_focus = 11;\n     */\n    innerFocus: boolean;\n    /**\n     * @generated from protobuf field: int32 rapture = 12;\n     */\n    rapture: number;\n    /**\n     * @generated from protobuf field: int32 borrowed_time = 13;\n     */\n    borrowedTime: number;\n    /**\n     * @generated from protobuf field: int32 reflective_shield = 14;\n     */\n    reflectiveShield: number;\n    /**\n     * @generated from protobuf field: int32 strength_of_soul = 15;\n     */\n    strengthOfSoul: number;\n    /**\n     * @generated from protobuf field: int32 divine_aegis = 16;\n     */\n    divineAegis: number;\n    /**\n     * @generated from protobuf field: bool pain_suppression = 17;\n     */\n    painSuppression: boolean;\n    /**\n     * @generated from protobuf field: int32 train_of_thought = 18;\n     */\n    trainOfThought: number;\n    /**\n     * @generated from protobuf field: int32 focused_will = 19;\n     */\n    focusedWill: number;\n    /**\n     * @generated from protobuf field: int32 grace = 20;\n     */\n    grace: number;\n    /**\n     * @generated from protobuf field: bool power_word_barrier = 21;\n     */\n    powerWordBarrier: boolean;\n    /**\n     * Holy\n     *\n     * @generated from protobuf field: int32 improved_renew = 22;\n     */\n    improvedRenew: number;\n    /**\n     * @generated from protobuf field: int32 empowered_healing = 23;\n     */\n    empoweredHealing: number;\n    /**\n     * @generated from protobuf field: int32 divine_fury = 24;\n     */\n    divineFury: number;\n    /**\n     * @generated from protobuf field: bool desperate_prayer = 25;\n     */\n    desperatePrayer: boolean;\n    /**\n     * @generated from protobuf field: int32 surge_of_light = 26;\n     */\n    surgeOfLight: number;\n    /**\n     * @generated from protobuf field: int32 inspiration = 27;\n     */\n    inspiration: number;\n    /**\n     * @generated from protobuf field: int32 divine_touch = 28;\n     */\n    divineTouch: number;\n    /**\n     * @generated from protobuf field: int32 holy_concentration = 29;\n     */\n    holyConcentration: number;\n    /**\n     * @generated from protobuf field: bool lightwell = 30;\n     */\n    lightwell: boolean;\n    /**\n     * @generated from protobuf field: int32 tome_of_light = 31;\n     */\n    tomeOfLight: number;\n    /**\n     * @generated from protobuf field: bool rapid_renewal = 32;\n     */\n    rapidRenewal: boolean;\n    /**\n     * @generated from protobuf field: bool spirit_of_redemption = 33;\n     */\n    spiritOfRedemption: boolean;\n    /**\n     * @generated from protobuf field: int32 serendipity = 34;\n     */\n    serendipity: number;\n    /**\n     * @generated from protobuf field: int32 body_and_soul = 35;\n     */\n    bodyAndSoul: number;\n    /**\n     * @generated from protobuf field: bool chakra = 36;\n     */\n    chakra: boolean;\n    /**\n     * @generated from protobuf field: bool revelations = 37;\n     */\n    revelations: boolean;\n    /**\n     * @generated from protobuf field: int32 blessed_resilience = 38;\n     */\n    blessedResilience: number;\n    /**\n     * @generated from protobuf field: int32 test_of_faith = 39;\n     */\n    testOfFaith: number;\n    /**\n     * @generated from protobuf field: int32 heavenly_voice = 40;\n     */\n    heavenlyVoice: number;\n    /**\n     * @generated from protobuf field: bool circle_of_healing = 41;\n     */\n    circleOfHealing: boolean;\n    /**\n     * @generated from protobuf field: bool guardian_spirit = 42;\n     */\n    guardianSpirit: boolean;\n    /**\n     * Shadow\n     *\n     * @generated from protobuf field: int32 darkness = 43;\n     */\n    darkness: number;\n    /**\n     * @generated from protobuf field: int32 improved_shadow_word_pain = 44;\n     */\n    improvedShadowWordPain: number;\n    /**\n     * @generated from protobuf field: int32 veiled_shadows = 45;\n     */\n    veiledShadows: number;\n    /**\n     * @generated from protobuf field: int32 improved_psychic_scream = 46;\n     */\n    improvedPsychicScream: number;\n    /**\n     * @generated from protobuf field: int32 improved_mind_blast = 47;\n     */\n    improvedMindBlast: number;\n    /**\n     * @generated from protobuf field: int32 improved_devouring_plague = 48;\n     */\n    improvedDevouringPlague: number;\n    /**\n     * @generated from protobuf field: int32 twisted_faith = 49;\n     */\n    twistedFaith: number;\n    /**\n     * @generated from protobuf field: bool shadowform = 50;\n     */\n    shadowform: boolean;\n    /**\n     * @generated from protobuf field: int32 phantasm = 51;\n     */\n    phantasm: number;\n    /**\n     * @generated from protobuf field: int32 harnessed_shadows = 52;\n     */\n    harnessedShadows: number;\n    /**\n     * @generated from protobuf field: bool silence = 53;\n     */\n    silence: boolean;\n    /**\n     * @generated from protobuf field: bool vampiric_embrace = 54;\n     */\n    vampiricEmbrace: boolean;\n    /**\n     * @generated from protobuf field: int32 masochism = 55;\n     */\n    masochism: number;\n    /**\n     * @generated from protobuf field: int32 mind_melt = 56;\n     */\n    mindMelt: number;\n    /**\n     * @generated from protobuf field: int32 pain_and_suffering = 57;\n     */\n    painAndSuffering: number;\n    /**\n     * @generated from protobuf field: bool vampiric_touch = 58;\n     */\n    vampiricTouch: boolean;\n    /**\n     * @generated from protobuf field: int32 paralysis = 59;\n     */\n    paralysis: number;\n    /**\n     * @generated from protobuf field: bool psychic_horror = 60;\n     */\n    psychicHorror: boolean;\n    /**\n     * @generated from protobuf field: int32 sin_and_punishment = 61;\n     */\n    sinAndPunishment: number;\n    /**\n     * @generated from protobuf field: int32 shadowy_apparition = 62;\n     */\n    shadowyApparition: number;\n    /**\n     * @generated from protobuf field: bool dispersion = 63;\n     */\n    dispersion: boolean;\n}\n/**\n * @generated from protobuf message proto.PriestOptions\n */\nexport interface PriestOptions {\n    /**\n     * @generated from protobuf field: proto.PriestOptions.Armor armor = 1;\n     */\n    armor: PriestOptions_Armor;\n    /**\n     * @generated from protobuf field: bool use_shadowfiend = 2;\n     */\n    useShadowfiend: boolean;\n}\n/**\n * @generated from protobuf enum proto.PriestOptions.Armor\n */\nexport enum PriestOptions_Armor {\n    /**\n     * @generated from protobuf enum value: NoArmor = 0;\n     */\n    NoArmor = 0,\n    /**\n     * @generated from protobuf enum value: InnerFire = 1;\n     */\n    InnerFire = 1\n}\n/**\n * @generated from protobuf message proto.DisciplinePriest\n */\nexport interface DisciplinePriest {\n    /**\n     * @generated from protobuf field: proto.DisciplinePriest.Options options = 3;\n     */\n    options?: DisciplinePriest_Options;\n}\n/**\n * @generated from protobuf message proto.DisciplinePriest.Rotation\n */\nexport interface DisciplinePriest_Rotation {\n}\n/**\n * @generated from protobuf message proto.DisciplinePriest.Options\n */\nexport interface DisciplinePriest_Options {\n    /**\n     * @generated from protobuf field: proto.PriestOptions class_options = 1;\n     */\n    classOptions?: PriestOptions;\n    /**\n     * @generated from protobuf field: proto.UnitReference power_infusion_target = 2;\n     */\n    powerInfusionTarget?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.HolyPriest\n */\nexport interface HolyPriest {\n    /**\n     * @generated from protobuf field: proto.HolyPriest.Options options = 3;\n     */\n    options?: HolyPriest_Options;\n}\n/**\n * @generated from protobuf message proto.HolyPriest.Rotation\n */\nexport interface HolyPriest_Rotation {\n}\n/**\n * @generated from protobuf message proto.HolyPriest.Options\n */\nexport interface HolyPriest_Options {\n    /**\n     * @generated from protobuf field: proto.PriestOptions class_options = 1;\n     */\n    classOptions?: PriestOptions;\n}\n/**\n * @generated from protobuf message proto.ShadowPriest\n */\nexport interface ShadowPriest {\n    /**\n     * @generated from protobuf field: proto.ShadowPriest.Options options = 3;\n     */\n    options?: ShadowPriest_Options;\n}\n/**\n * @generated from protobuf message proto.ShadowPriest.Rotation\n */\nexport interface ShadowPriest_Rotation {\n}\n/**\n * @generated from protobuf message proto.ShadowPriest.Options\n */\nexport interface ShadowPriest_Options {\n    /**\n     * @generated from protobuf field: proto.PriestOptions class_options = 1;\n     */\n    classOptions?: PriestOptions;\n    /**\n     * @generated from protobuf field: proto.UnitReference power_infusion_target = 2;\n     */\n    powerInfusionTarget?: UnitReference;\n}\n/**\n * @generated from protobuf enum proto.PriestPrimeGlyph\n */\nexport enum PriestPrimeGlyph {\n    /**\n     * @generated from protobuf enum value: PriestPrimeGlyphNone = 0;\n     */\n    PriestPrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfDispersion = 45753;\n     */\n    GlyphOfDispersion = 45753,\n    /**\n     * @generated from protobuf enum value: GlyphOfFlashHeal = 42400;\n     */\n    GlyphOfFlashHeal = 42400,\n    /**\n     * @generated from protobuf enum value: GlyphOfGuardianSpirit = 45755;\n     */\n    GlyphOfGuardianSpirit = 45755,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightwell = 42403;\n     */\n    GlyphOfLightwell = 42403,\n    /**\n     * @generated from protobuf enum value: GlyphOfMindFlay = 42415;\n     */\n    GlyphOfMindFlay = 42415,\n    /**\n     * @generated from protobuf enum value: GlyphOfPenance = 45756;\n     */\n    GlyphOfPenance = 45756,\n    /**\n     * @generated from protobuf enum value: GlyphOfPowerWordBarrier = 42407;\n     */\n    GlyphOfPowerWordBarrier = 42407,\n    /**\n     * @generated from protobuf enum value: GlyphOfPowerWordShield = 42408;\n     */\n    GlyphOfPowerWordShield = 42408,\n    /**\n     * @generated from protobuf enum value: GlyphOfPrayerOfHealing = 42409;\n     */\n    GlyphOfPrayerOfHealing = 42409,\n    /**\n     * @generated from protobuf enum value: GlyphOfRenew = 42411;\n     */\n    GlyphOfRenew = 42411,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowWordDeath = 42414;\n     */\n    GlyphOfShadowWordDeath = 42414,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowWordPain = 42406;\n     */\n    GlyphOfShadowWordPain = 42406\n}\n/**\n * @generated from protobuf enum proto.PriestMajorGlyph\n */\nexport enum PriestMajorGlyph {\n    /**\n     * @generated from protobuf enum value: PriestMajorGlyphNone = 0;\n     */\n    PriestMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfCircleOfHealing = 42396;\n     */\n    GlyphOfCircleOfHealing = 42396,\n    /**\n     * @generated from protobuf enum value: GlyphOfDesperation = 45760;\n     */\n    GlyphOfDesperation = 45760,\n    /**\n     * @generated from protobuf enum value: GlyphOfDispelMagic = 42397;\n     */\n    GlyphOfDispelMagic = 42397,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivineAccuracy = 45758;\n     */\n    GlyphOfDivineAccuracy = 45758,\n    /**\n     * @generated from protobuf enum value: GlyphOfFade = 42398;\n     */\n    GlyphOfFade = 42398,\n    /**\n     * @generated from protobuf enum value: GlyphOfFearWard = 42399;\n     */\n    GlyphOfFearWard = 42399,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyNova = 42401;\n     */\n    GlyphOfHolyNova = 42401,\n    /**\n     * @generated from protobuf enum value: GlyphOfInnerFire = 42402;\n     */\n    GlyphOfInnerFire = 42402,\n    /**\n     * @generated from protobuf enum value: GlyphOfMassDispel = 42404;\n     */\n    GlyphOfMassDispel = 42404,\n    /**\n     * @generated from protobuf enum value: GlyphOfPrayerOfMending = 42417;\n     */\n    GlyphOfPrayerOfMending = 42417,\n    /**\n     * @generated from protobuf enum value: GlyphOfPsychicHorror = 42405;\n     */\n    GlyphOfPsychicHorror = 42405,\n    /**\n     * @generated from protobuf enum value: GlyphOfPsychicScream = 42410;\n     */\n    GlyphOfPsychicScream = 42410,\n    /**\n     * @generated from protobuf enum value: GlyphOfScourgeImprisonment = 42412;\n     */\n    GlyphOfScourgeImprisonment = 42412,\n    /**\n     * @generated from protobuf enum value: GlyphOfSmite = 42416;\n     */\n    GlyphOfSmite = 42416,\n    /**\n     * @generated from protobuf enum value: GlyphOfSpiritTap = 45757;\n     */\n    GlyphOfSpiritTap = 45757\n}\n/**\n * @generated from protobuf enum proto.PriestMinorGlyph\n */\nexport enum PriestMinorGlyph {\n    /**\n     * @generated from protobuf enum value: PriestMinorGlyphNone = 0;\n     */\n    PriestMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfFading = 43342;\n     */\n    GlyphOfFading = 43342,\n    /**\n     * @generated from protobuf enum value: GlyphOfFortitude = 43371;\n     */\n    GlyphOfFortitude = 43371,\n    /**\n     * @generated from protobuf enum value: GlyphOfLevitate = 43370;\n     */\n    GlyphOfLevitate = 43370,\n    /**\n     * @generated from protobuf enum value: GlyphOfShackleUndead = 43373;\n     */\n    GlyphOfShackleUndead = 43373,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadow = 77101;\n     */\n    GlyphOfShadow = 77101,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowProtection = 43372;\n     */\n    GlyphOfShadowProtection = 43372,\n    /**\n     * @generated from protobuf enum value: GlyphOfShadowfiend = 43374;\n     */\n    GlyphOfShadowfiend = 43374\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass PriestTalents$Type extends MessageType<PriestTalents> {\n    constructor() {\n        super(\"proto.PriestTalents\", [\n            { no: 1, name: \"improved_power_word_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"twin_disciplines\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"mental_agility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"evangelism\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"archangel\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"inner_sanctum\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"soul_warding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"renewed_hope\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"power_infusion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"atonement\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"inner_focus\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"rapture\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"borrowed_time\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"reflective_shield\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"strength_of_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"divine_aegis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"pain_suppression\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"train_of_thought\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"focused_will\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"grace\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"power_word_barrier\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 22, name: \"improved_renew\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"empowered_healing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"divine_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"desperate_prayer\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"surge_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"inspiration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"divine_touch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"holy_concentration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"lightwell\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"tome_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"rapid_renewal\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"spirit_of_redemption\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"serendipity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"body_and_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"chakra\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"revelations\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"blessed_resilience\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"test_of_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"heavenly_voice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"circle_of_healing\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 42, name: \"guardian_spirit\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 43, name: \"darkness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"improved_shadow_word_pain\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"veiled_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"improved_psychic_scream\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"improved_mind_blast\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"improved_devouring_plague\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"twisted_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"shadowform\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"phantasm\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"harnessed_shadows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"silence\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 54, name: \"vampiric_embrace\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"masochism\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"mind_melt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"pain_and_suffering\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"vampiric_touch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 59, name: \"paralysis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"psychic_horror\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 61, name: \"sin_and_punishment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"shadowy_apparition\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 63, name: \"dispersion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PriestTalents>): PriestTalents {\n        const message = { improvedPowerWordShield: 0, twinDisciplines: 0, mentalAgility: 0, evangelism: 0, archangel: false, innerSanctum: 0, soulWarding: 0, renewedHope: 0, powerInfusion: false, atonement: 0, innerFocus: false, rapture: 0, borrowedTime: 0, reflectiveShield: 0, strengthOfSoul: 0, divineAegis: 0, painSuppression: false, trainOfThought: 0, focusedWill: 0, grace: 0, powerWordBarrier: false, improvedRenew: 0, empoweredHealing: 0, divineFury: 0, desperatePrayer: false, surgeOfLight: 0, inspiration: 0, divineTouch: 0, holyConcentration: 0, lightwell: false, tomeOfLight: 0, rapidRenewal: false, spiritOfRedemption: false, serendipity: 0, bodyAndSoul: 0, chakra: false, revelations: false, blessedResilience: 0, testOfFaith: 0, heavenlyVoice: 0, circleOfHealing: false, guardianSpirit: false, darkness: 0, improvedShadowWordPain: 0, veiledShadows: 0, improvedPsychicScream: 0, improvedMindBlast: 0, improvedDevouringPlague: 0, twistedFaith: 0, shadowform: false, phantasm: 0, harnessedShadows: 0, silence: false, vampiricEmbrace: false, masochism: 0, mindMelt: 0, painAndSuffering: 0, vampiricTouch: false, paralysis: 0, psychicHorror: false, sinAndPunishment: 0, shadowyApparition: 0, dispersion: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PriestTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PriestTalents): PriestTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_power_word_shield */ 1:\n                    message.improvedPowerWordShield = reader.int32();\n                    break;\n                case /* int32 twin_disciplines */ 2:\n                    message.twinDisciplines = reader.int32();\n                    break;\n                case /* int32 mental_agility */ 3:\n                    message.mentalAgility = reader.int32();\n                    break;\n                case /* int32 evangelism */ 4:\n                    message.evangelism = reader.int32();\n                    break;\n                case /* bool archangel */ 5:\n                    message.archangel = reader.bool();\n                    break;\n                case /* int32 inner_sanctum */ 6:\n                    message.innerSanctum = reader.int32();\n                    break;\n                case /* int32 soul_warding */ 7:\n                    message.soulWarding = reader.int32();\n                    break;\n                case /* int32 renewed_hope */ 8:\n                    message.renewedHope = reader.int32();\n                    break;\n                case /* bool power_infusion */ 9:\n                    message.powerInfusion = reader.bool();\n                    break;\n                case /* int32 atonement */ 10:\n                    message.atonement = reader.int32();\n                    break;\n                case /* bool inner_focus */ 11:\n                    message.innerFocus = reader.bool();\n                    break;\n                case /* int32 rapture */ 12:\n                    message.rapture = reader.int32();\n                    break;\n                case /* int32 borrowed_time */ 13:\n                    message.borrowedTime = reader.int32();\n                    break;\n                case /* int32 reflective_shield */ 14:\n                    message.reflectiveShield = reader.int32();\n                    break;\n                case /* int32 strength_of_soul */ 15:\n                    message.strengthOfSoul = reader.int32();\n                    break;\n                case /* int32 divine_aegis */ 16:\n                    message.divineAegis = reader.int32();\n                    break;\n                case /* bool pain_suppression */ 17:\n                    message.painSuppression = reader.bool();\n                    break;\n                case /* int32 train_of_thought */ 18:\n                    message.trainOfThought = reader.int32();\n                    break;\n                case /* int32 focused_will */ 19:\n                    message.focusedWill = reader.int32();\n                    break;\n                case /* int32 grace */ 20:\n                    message.grace = reader.int32();\n                    break;\n                case /* bool power_word_barrier */ 21:\n                    message.powerWordBarrier = reader.bool();\n                    break;\n                case /* int32 improved_renew */ 22:\n                    message.improvedRenew = reader.int32();\n                    break;\n                case /* int32 empowered_healing */ 23:\n                    message.empoweredHealing = reader.int32();\n                    break;\n                case /* int32 divine_fury */ 24:\n                    message.divineFury = reader.int32();\n                    break;\n                case /* bool desperate_prayer */ 25:\n                    message.desperatePrayer = reader.bool();\n                    break;\n                case /* int32 surge_of_light */ 26:\n                    message.surgeOfLight = reader.int32();\n                    break;\n                case /* int32 inspiration */ 27:\n                    message.inspiration = reader.int32();\n                    break;\n                case /* int32 divine_touch */ 28:\n                    message.divineTouch = reader.int32();\n                    break;\n                case /* int32 holy_concentration */ 29:\n                    message.holyConcentration = reader.int32();\n                    break;\n                case /* bool lightwell */ 30:\n                    message.lightwell = reader.bool();\n                    break;\n                case /* int32 tome_of_light */ 31:\n                    message.tomeOfLight = reader.int32();\n                    break;\n                case /* bool rapid_renewal */ 32:\n                    message.rapidRenewal = reader.bool();\n                    break;\n                case /* bool spirit_of_redemption */ 33:\n                    message.spiritOfRedemption = reader.bool();\n                    break;\n                case /* int32 serendipity */ 34:\n                    message.serendipity = reader.int32();\n                    break;\n                case /* int32 body_and_soul */ 35:\n                    message.bodyAndSoul = reader.int32();\n                    break;\n                case /* bool chakra */ 36:\n                    message.chakra = reader.bool();\n                    break;\n                case /* bool revelations */ 37:\n                    message.revelations = reader.bool();\n                    break;\n                case /* int32 blessed_resilience */ 38:\n                    message.blessedResilience = reader.int32();\n                    break;\n                case /* int32 test_of_faith */ 39:\n                    message.testOfFaith = reader.int32();\n                    break;\n                case /* int32 heavenly_voice */ 40:\n                    message.heavenlyVoice = reader.int32();\n                    break;\n                case /* bool circle_of_healing */ 41:\n                    message.circleOfHealing = reader.bool();\n                    break;\n                case /* bool guardian_spirit */ 42:\n                    message.guardianSpirit = reader.bool();\n                    break;\n                case /* int32 darkness */ 43:\n                    message.darkness = reader.int32();\n                    break;\n                case /* int32 improved_shadow_word_pain */ 44:\n                    message.improvedShadowWordPain = reader.int32();\n                    break;\n                case /* int32 veiled_shadows */ 45:\n                    message.veiledShadows = reader.int32();\n                    break;\n                case /* int32 improved_psychic_scream */ 46:\n                    message.improvedPsychicScream = reader.int32();\n                    break;\n                case /* int32 improved_mind_blast */ 47:\n                    message.improvedMindBlast = reader.int32();\n                    break;\n                case /* int32 improved_devouring_plague */ 48:\n                    message.improvedDevouringPlague = reader.int32();\n                    break;\n                case /* int32 twisted_faith */ 49:\n                    message.twistedFaith = reader.int32();\n                    break;\n                case /* bool shadowform */ 50:\n                    message.shadowform = reader.bool();\n                    break;\n                case /* int32 phantasm */ 51:\n                    message.phantasm = reader.int32();\n                    break;\n                case /* int32 harnessed_shadows */ 52:\n                    message.harnessedShadows = reader.int32();\n                    break;\n                case /* bool silence */ 53:\n                    message.silence = reader.bool();\n                    break;\n                case /* bool vampiric_embrace */ 54:\n                    message.vampiricEmbrace = reader.bool();\n                    break;\n                case /* int32 masochism */ 55:\n                    message.masochism = reader.int32();\n                    break;\n                case /* int32 mind_melt */ 56:\n                    message.mindMelt = reader.int32();\n                    break;\n                case /* int32 pain_and_suffering */ 57:\n                    message.painAndSuffering = reader.int32();\n                    break;\n                case /* bool vampiric_touch */ 58:\n                    message.vampiricTouch = reader.bool();\n                    break;\n                case /* int32 paralysis */ 59:\n                    message.paralysis = reader.int32();\n                    break;\n                case /* bool psychic_horror */ 60:\n                    message.psychicHorror = reader.bool();\n                    break;\n                case /* int32 sin_and_punishment */ 61:\n                    message.sinAndPunishment = reader.int32();\n                    break;\n                case /* int32 shadowy_apparition */ 62:\n                    message.shadowyApparition = reader.int32();\n                    break;\n                case /* bool dispersion */ 63:\n                    message.dispersion = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PriestTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_power_word_shield = 1; */\n        if (message.improvedPowerWordShield !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedPowerWordShield);\n        /* int32 twin_disciplines = 2; */\n        if (message.twinDisciplines !== 0)\n            writer.tag(2, WireType.Varint).int32(message.twinDisciplines);\n        /* int32 mental_agility = 3; */\n        if (message.mentalAgility !== 0)\n            writer.tag(3, WireType.Varint).int32(message.mentalAgility);\n        /* int32 evangelism = 4; */\n        if (message.evangelism !== 0)\n            writer.tag(4, WireType.Varint).int32(message.evangelism);\n        /* bool archangel = 5; */\n        if (message.archangel !== false)\n            writer.tag(5, WireType.Varint).bool(message.archangel);\n        /* int32 inner_sanctum = 6; */\n        if (message.innerSanctum !== 0)\n            writer.tag(6, WireType.Varint).int32(message.innerSanctum);\n        /* int32 soul_warding = 7; */\n        if (message.soulWarding !== 0)\n            writer.tag(7, WireType.Varint).int32(message.soulWarding);\n        /* int32 renewed_hope = 8; */\n        if (message.renewedHope !== 0)\n            writer.tag(8, WireType.Varint).int32(message.renewedHope);\n        /* bool power_infusion = 9; */\n        if (message.powerInfusion !== false)\n            writer.tag(9, WireType.Varint).bool(message.powerInfusion);\n        /* int32 atonement = 10; */\n        if (message.atonement !== 0)\n            writer.tag(10, WireType.Varint).int32(message.atonement);\n        /* bool inner_focus = 11; */\n        if (message.innerFocus !== false)\n            writer.tag(11, WireType.Varint).bool(message.innerFocus);\n        /* int32 rapture = 12; */\n        if (message.rapture !== 0)\n            writer.tag(12, WireType.Varint).int32(message.rapture);\n        /* int32 borrowed_time = 13; */\n        if (message.borrowedTime !== 0)\n            writer.tag(13, WireType.Varint).int32(message.borrowedTime);\n        /* int32 reflective_shield = 14; */\n        if (message.reflectiveShield !== 0)\n            writer.tag(14, WireType.Varint).int32(message.reflectiveShield);\n        /* int32 strength_of_soul = 15; */\n        if (message.strengthOfSoul !== 0)\n            writer.tag(15, WireType.Varint).int32(message.strengthOfSoul);\n        /* int32 divine_aegis = 16; */\n        if (message.divineAegis !== 0)\n            writer.tag(16, WireType.Varint).int32(message.divineAegis);\n        /* bool pain_suppression = 17; */\n        if (message.painSuppression !== false)\n            writer.tag(17, WireType.Varint).bool(message.painSuppression);\n        /* int32 train_of_thought = 18; */\n        if (message.trainOfThought !== 0)\n            writer.tag(18, WireType.Varint).int32(message.trainOfThought);\n        /* int32 focused_will = 19; */\n        if (message.focusedWill !== 0)\n            writer.tag(19, WireType.Varint).int32(message.focusedWill);\n        /* int32 grace = 20; */\n        if (message.grace !== 0)\n            writer.tag(20, WireType.Varint).int32(message.grace);\n        /* bool power_word_barrier = 21; */\n        if (message.powerWordBarrier !== false)\n            writer.tag(21, WireType.Varint).bool(message.powerWordBarrier);\n        /* int32 improved_renew = 22; */\n        if (message.improvedRenew !== 0)\n            writer.tag(22, WireType.Varint).int32(message.improvedRenew);\n        /* int32 empowered_healing = 23; */\n        if (message.empoweredHealing !== 0)\n            writer.tag(23, WireType.Varint).int32(message.empoweredHealing);\n        /* int32 divine_fury = 24; */\n        if (message.divineFury !== 0)\n            writer.tag(24, WireType.Varint).int32(message.divineFury);\n        /* bool desperate_prayer = 25; */\n        if (message.desperatePrayer !== false)\n            writer.tag(25, WireType.Varint).bool(message.desperatePrayer);\n        /* int32 surge_of_light = 26; */\n        if (message.surgeOfLight !== 0)\n            writer.tag(26, WireType.Varint).int32(message.surgeOfLight);\n        /* int32 inspiration = 27; */\n        if (message.inspiration !== 0)\n            writer.tag(27, WireType.Varint).int32(message.inspiration);\n        /* int32 divine_touch = 28; */\n        if (message.divineTouch !== 0)\n            writer.tag(28, WireType.Varint).int32(message.divineTouch);\n        /* int32 holy_concentration = 29; */\n        if (message.holyConcentration !== 0)\n            writer.tag(29, WireType.Varint).int32(message.holyConcentration);\n        /* bool lightwell = 30; */\n        if (message.lightwell !== false)\n            writer.tag(30, WireType.Varint).bool(message.lightwell);\n        /* int32 tome_of_light = 31; */\n        if (message.tomeOfLight !== 0)\n            writer.tag(31, WireType.Varint).int32(message.tomeOfLight);\n        /* bool rapid_renewal = 32; */\n        if (message.rapidRenewal !== false)\n            writer.tag(32, WireType.Varint).bool(message.rapidRenewal);\n        /* bool spirit_of_redemption = 33; */\n        if (message.spiritOfRedemption !== false)\n            writer.tag(33, WireType.Varint).bool(message.spiritOfRedemption);\n        /* int32 serendipity = 34; */\n        if (message.serendipity !== 0)\n            writer.tag(34, WireType.Varint).int32(message.serendipity);\n        /* int32 body_and_soul = 35; */\n        if (message.bodyAndSoul !== 0)\n            writer.tag(35, WireType.Varint).int32(message.bodyAndSoul);\n        /* bool chakra = 36; */\n        if (message.chakra !== false)\n            writer.tag(36, WireType.Varint).bool(message.chakra);\n        /* bool revelations = 37; */\n        if (message.revelations !== false)\n            writer.tag(37, WireType.Varint).bool(message.revelations);\n        /* int32 blessed_resilience = 38; */\n        if (message.blessedResilience !== 0)\n            writer.tag(38, WireType.Varint).int32(message.blessedResilience);\n        /* int32 test_of_faith = 39; */\n        if (message.testOfFaith !== 0)\n            writer.tag(39, WireType.Varint).int32(message.testOfFaith);\n        /* int32 heavenly_voice = 40; */\n        if (message.heavenlyVoice !== 0)\n            writer.tag(40, WireType.Varint).int32(message.heavenlyVoice);\n        /* bool circle_of_healing = 41; */\n        if (message.circleOfHealing !== false)\n            writer.tag(41, WireType.Varint).bool(message.circleOfHealing);\n        /* bool guardian_spirit = 42; */\n        if (message.guardianSpirit !== false)\n            writer.tag(42, WireType.Varint).bool(message.guardianSpirit);\n        /* int32 darkness = 43; */\n        if (message.darkness !== 0)\n            writer.tag(43, WireType.Varint).int32(message.darkness);\n        /* int32 improved_shadow_word_pain = 44; */\n        if (message.improvedShadowWordPain !== 0)\n            writer.tag(44, WireType.Varint).int32(message.improvedShadowWordPain);\n        /* int32 veiled_shadows = 45; */\n        if (message.veiledShadows !== 0)\n            writer.tag(45, WireType.Varint).int32(message.veiledShadows);\n        /* int32 improved_psychic_scream = 46; */\n        if (message.improvedPsychicScream !== 0)\n            writer.tag(46, WireType.Varint).int32(message.improvedPsychicScream);\n        /* int32 improved_mind_blast = 47; */\n        if (message.improvedMindBlast !== 0)\n            writer.tag(47, WireType.Varint).int32(message.improvedMindBlast);\n        /* int32 improved_devouring_plague = 48; */\n        if (message.improvedDevouringPlague !== 0)\n            writer.tag(48, WireType.Varint).int32(message.improvedDevouringPlague);\n        /* int32 twisted_faith = 49; */\n        if (message.twistedFaith !== 0)\n            writer.tag(49, WireType.Varint).int32(message.twistedFaith);\n        /* bool shadowform = 50; */\n        if (message.shadowform !== false)\n            writer.tag(50, WireType.Varint).bool(message.shadowform);\n        /* int32 phantasm = 51; */\n        if (message.phantasm !== 0)\n            writer.tag(51, WireType.Varint).int32(message.phantasm);\n        /* int32 harnessed_shadows = 52; */\n        if (message.harnessedShadows !== 0)\n            writer.tag(52, WireType.Varint).int32(message.harnessedShadows);\n        /* bool silence = 53; */\n        if (message.silence !== false)\n            writer.tag(53, WireType.Varint).bool(message.silence);\n        /* bool vampiric_embrace = 54; */\n        if (message.vampiricEmbrace !== false)\n            writer.tag(54, WireType.Varint).bool(message.vampiricEmbrace);\n        /* int32 masochism = 55; */\n        if (message.masochism !== 0)\n            writer.tag(55, WireType.Varint).int32(message.masochism);\n        /* int32 mind_melt = 56; */\n        if (message.mindMelt !== 0)\n            writer.tag(56, WireType.Varint).int32(message.mindMelt);\n        /* int32 pain_and_suffering = 57; */\n        if (message.painAndSuffering !== 0)\n            writer.tag(57, WireType.Varint).int32(message.painAndSuffering);\n        /* bool vampiric_touch = 58; */\n        if (message.vampiricTouch !== false)\n            writer.tag(58, WireType.Varint).bool(message.vampiricTouch);\n        /* int32 paralysis = 59; */\n        if (message.paralysis !== 0)\n            writer.tag(59, WireType.Varint).int32(message.paralysis);\n        /* bool psychic_horror = 60; */\n        if (message.psychicHorror !== false)\n            writer.tag(60, WireType.Varint).bool(message.psychicHorror);\n        /* int32 sin_and_punishment = 61; */\n        if (message.sinAndPunishment !== 0)\n            writer.tag(61, WireType.Varint).int32(message.sinAndPunishment);\n        /* int32 shadowy_apparition = 62; */\n        if (message.shadowyApparition !== 0)\n            writer.tag(62, WireType.Varint).int32(message.shadowyApparition);\n        /* bool dispersion = 63; */\n        if (message.dispersion !== false)\n            writer.tag(63, WireType.Varint).bool(message.dispersion);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PriestTalents\n */\nexport const PriestTalents = new PriestTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PriestOptions$Type extends MessageType<PriestOptions> {\n    constructor() {\n        super(\"proto.PriestOptions\", [\n            { no: 1, name: \"armor\", kind: \"enum\", T: () => [\"proto.PriestOptions.Armor\", PriestOptions_Armor] },\n            { no: 2, name: \"use_shadowfiend\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PriestOptions>): PriestOptions {\n        const message = { armor: 0, useShadowfiend: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PriestOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PriestOptions): PriestOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PriestOptions.Armor armor */ 1:\n                    message.armor = reader.int32();\n                    break;\n                case /* bool use_shadowfiend */ 2:\n                    message.useShadowfiend = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PriestOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PriestOptions.Armor armor = 1; */\n        if (message.armor !== 0)\n            writer.tag(1, WireType.Varint).int32(message.armor);\n        /* bool use_shadowfiend = 2; */\n        if (message.useShadowfiend !== false)\n            writer.tag(2, WireType.Varint).bool(message.useShadowfiend);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PriestOptions\n */\nexport const PriestOptions = new PriestOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DisciplinePriest$Type extends MessageType<DisciplinePriest> {\n    constructor() {\n        super(\"proto.DisciplinePriest\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => DisciplinePriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<DisciplinePriest>): DisciplinePriest {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DisciplinePriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisciplinePriest): DisciplinePriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DisciplinePriest.Options options */ 3:\n                    message.options = DisciplinePriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DisciplinePriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DisciplinePriest.Options options = 3; */\n        if (message.options)\n            DisciplinePriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DisciplinePriest\n */\nexport const DisciplinePriest = new DisciplinePriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DisciplinePriest_Rotation$Type extends MessageType<DisciplinePriest_Rotation> {\n    constructor() {\n        super(\"proto.DisciplinePriest.Rotation\", []);\n    }\n    create(value?: PartialMessage<DisciplinePriest_Rotation>): DisciplinePriest_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DisciplinePriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisciplinePriest_Rotation): DisciplinePriest_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: DisciplinePriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DisciplinePriest.Rotation\n */\nexport const DisciplinePriest_Rotation = new DisciplinePriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DisciplinePriest_Options$Type extends MessageType<DisciplinePriest_Options> {\n    constructor() {\n        super(\"proto.DisciplinePriest.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => PriestOptions },\n            { no: 2, name: \"power_infusion_target\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<DisciplinePriest_Options>): DisciplinePriest_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DisciplinePriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DisciplinePriest_Options): DisciplinePriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PriestOptions class_options */ 1:\n                    message.classOptions = PriestOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* proto.UnitReference power_infusion_target */ 2:\n                    message.powerInfusionTarget = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.powerInfusionTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DisciplinePriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PriestOptions class_options = 1; */\n        if (message.classOptions)\n            PriestOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitReference power_infusion_target = 2; */\n        if (message.powerInfusionTarget)\n            UnitReference.internalBinaryWrite(message.powerInfusionTarget, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DisciplinePriest.Options\n */\nexport const DisciplinePriest_Options = new DisciplinePriest_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HolyPriest$Type extends MessageType<HolyPriest> {\n    constructor() {\n        super(\"proto.HolyPriest\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => HolyPriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<HolyPriest>): HolyPriest {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HolyPriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HolyPriest): HolyPriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HolyPriest.Options options */ 3:\n                    message.options = HolyPriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HolyPriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HolyPriest.Options options = 3; */\n        if (message.options)\n            HolyPriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HolyPriest\n */\nexport const HolyPriest = new HolyPriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HolyPriest_Rotation$Type extends MessageType<HolyPriest_Rotation> {\n    constructor() {\n        super(\"proto.HolyPriest.Rotation\", []);\n    }\n    create(value?: PartialMessage<HolyPriest_Rotation>): HolyPriest_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HolyPriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HolyPriest_Rotation): HolyPriest_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: HolyPriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HolyPriest.Rotation\n */\nexport const HolyPriest_Rotation = new HolyPriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HolyPriest_Options$Type extends MessageType<HolyPriest_Options> {\n    constructor() {\n        super(\"proto.HolyPriest.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => PriestOptions }\n        ]);\n    }\n    create(value?: PartialMessage<HolyPriest_Options>): HolyPriest_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HolyPriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HolyPriest_Options): HolyPriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PriestOptions class_options */ 1:\n                    message.classOptions = PriestOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HolyPriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PriestOptions class_options = 1; */\n        if (message.classOptions)\n            PriestOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HolyPriest.Options\n */\nexport const HolyPriest_Options = new HolyPriest_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest$Type extends MessageType<ShadowPriest> {\n    constructor() {\n        super(\"proto.ShadowPriest\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => ShadowPriest_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ShadowPriest>): ShadowPriest {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest): ShadowPriest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ShadowPriest.Options options */ 3:\n                    message.options = ShadowPriest_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShadowPriest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ShadowPriest.Options options = 3; */\n        if (message.options)\n            ShadowPriest_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest\n */\nexport const ShadowPriest = new ShadowPriest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest_Rotation$Type extends MessageType<ShadowPriest_Rotation> {\n    constructor() {\n        super(\"proto.ShadowPriest.Rotation\", []);\n    }\n    create(value?: PartialMessage<ShadowPriest_Rotation>): ShadowPriest_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest_Rotation): ShadowPriest_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: ShadowPriest_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest.Rotation\n */\nexport const ShadowPriest_Rotation = new ShadowPriest_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ShadowPriest_Options$Type extends MessageType<ShadowPriest_Options> {\n    constructor() {\n        super(\"proto.ShadowPriest.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => PriestOptions },\n            { no: 2, name: \"power_infusion_target\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<ShadowPriest_Options>): ShadowPriest_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ShadowPriest_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShadowPriest_Options): ShadowPriest_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PriestOptions class_options */ 1:\n                    message.classOptions = PriestOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* proto.UnitReference power_infusion_target */ 2:\n                    message.powerInfusionTarget = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.powerInfusionTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ShadowPriest_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PriestOptions class_options = 1; */\n        if (message.classOptions)\n            PriestOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitReference power_infusion_target = 2; */\n        if (message.powerInfusionTarget)\n            UnitReference.internalBinaryWrite(message.powerInfusionTarget, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ShadowPriest.Options\n */\nexport const ShadowPriest_Options = new ShadowPriest_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"paladin.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\n/**\n * @generated from protobuf message proto.PaladinTalents\n */\nexport interface PaladinTalents {\n    /**\n     * Holy\n     *\n     * @generated from protobuf field: int32 arbiter_of_the_light = 1;\n     */\n    arbiterOfTheLight: number;\n    /**\n     * @generated from protobuf field: int32 protector_of_the_innocent = 2;\n     */\n    protectorOfTheInnocent: number;\n    /**\n     * @generated from protobuf field: int32 judgements_of_the_pure = 3;\n     */\n    judgementsOfThePure: number;\n    /**\n     * @generated from protobuf field: int32 clarity_of_purpose = 4;\n     */\n    clarityOfPurpose: number;\n    /**\n     * @generated from protobuf field: int32 last_word = 5;\n     */\n    lastWord: number;\n    /**\n     * @generated from protobuf field: int32 blazing_light = 6;\n     */\n    blazingLight: number;\n    /**\n     * @generated from protobuf field: int32 denounce = 7;\n     */\n    denounce: number;\n    /**\n     * @generated from protobuf field: bool divine_favor = 8;\n     */\n    divineFavor: boolean;\n    /**\n     * @generated from protobuf field: int32 infusion_of_light = 9;\n     */\n    infusionOfLight: number;\n    /**\n     * @generated from protobuf field: int32 daybreak = 10;\n     */\n    daybreak: number;\n    /**\n     * @generated from protobuf field: int32 enlightened_judgements = 11;\n     */\n    enlightenedJudgements: number;\n    /**\n     * @generated from protobuf field: bool beacon_of_light = 12;\n     */\n    beaconOfLight: boolean;\n    /**\n     * @generated from protobuf field: int32 speed_of_light = 13;\n     */\n    speedOfLight: number;\n    /**\n     * @generated from protobuf field: bool sacred_cleansing = 14;\n     */\n    sacredCleansing: boolean;\n    /**\n     * @generated from protobuf field: int32 conviction = 15;\n     */\n    conviction: number;\n    /**\n     * @generated from protobuf field: bool aura_mastery = 16;\n     */\n    auraMastery: boolean;\n    /**\n     * @generated from protobuf field: int32 paragon_of_virtue = 17;\n     */\n    paragonOfVirtue: number;\n    /**\n     * @generated from protobuf field: int32 tower_of_radiance = 18;\n     */\n    towerOfRadiance: number;\n    /**\n     * @generated from protobuf field: int32 blessed_life = 19;\n     */\n    blessedLife: number;\n    /**\n     * @generated from protobuf field: bool light_of_dawn = 20;\n     */\n    lightOfDawn: boolean;\n    /**\n     * Protection\n     *\n     * @generated from protobuf field: int32 divinity = 21;\n     */\n    divinity: number;\n    /**\n     * @generated from protobuf field: int32 seals_of_the_pure = 22;\n     */\n    sealsOfThePure: number;\n    /**\n     * @generated from protobuf field: int32 eternal_glory = 23;\n     */\n    eternalGlory: number;\n    /**\n     * @generated from protobuf field: int32 judgements_of_the_just = 24;\n     */\n    judgementsOfTheJust: number;\n    /**\n     * @generated from protobuf field: int32 toughness = 25;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 improved_hammer_of_justice = 26;\n     */\n    improvedHammerOfJustice: number;\n    /**\n     * @generated from protobuf field: int32 hallowed_ground = 27;\n     */\n    hallowedGround: number;\n    /**\n     * @generated from protobuf field: int32 sanctuary = 28;\n     */\n    sanctuary: number;\n    /**\n     * @generated from protobuf field: bool hammer_of_the_righteous = 29;\n     */\n    hammerOfTheRighteous: boolean;\n    /**\n     * @generated from protobuf field: int32 wrath_of_the_lightbringer = 30;\n     */\n    wrathOfTheLightbringer: number;\n    /**\n     * @generated from protobuf field: int32 reckoning = 31;\n     */\n    reckoning: number;\n    /**\n     * @generated from protobuf field: bool shield_of_the_righteous = 32;\n     */\n    shieldOfTheRighteous: boolean;\n    /**\n     * @generated from protobuf field: int32 grand_crusader = 33;\n     */\n    grandCrusader: number;\n    /**\n     * @generated from protobuf field: bool vindication = 34;\n     */\n    vindication: boolean;\n    /**\n     * @generated from protobuf field: bool holy_shield = 35;\n     */\n    holyShield: boolean;\n    /**\n     * @generated from protobuf field: int32 guarded_by_the_light = 36;\n     */\n    guardedByTheLight: number;\n    /**\n     * @generated from protobuf field: bool divine_guardian = 37;\n     */\n    divineGuardian: boolean;\n    /**\n     * @generated from protobuf field: int32 sacred_duty = 38;\n     */\n    sacredDuty: number;\n    /**\n     * @generated from protobuf field: int32 shield_of_the_templar = 39;\n     */\n    shieldOfTheTemplar: number;\n    /**\n     * @generated from protobuf field: bool ardent_defender = 40;\n     */\n    ardentDefender: boolean;\n    /**\n     * Retribution\n     *\n     * @generated from protobuf field: int32 eye_for_an_eye = 41;\n     */\n    eyeForAnEye: number;\n    /**\n     * @generated from protobuf field: int32 crusade = 42;\n     */\n    crusade: number;\n    /**\n     * @generated from protobuf field: int32 improved_judgement = 43;\n     */\n    improvedJudgement: number;\n    /**\n     * @generated from protobuf field: int32 guardians_favor = 44;\n     */\n    guardiansFavor: number;\n    /**\n     * @generated from protobuf field: int32 rule_of_law = 45;\n     */\n    ruleOfLaw: number;\n    /**\n     * @generated from protobuf field: int32 pursuit_of_justice = 46;\n     */\n    pursuitOfJustice: number;\n    /**\n     * @generated from protobuf field: bool communion = 47;\n     */\n    communion: boolean;\n    /**\n     * @generated from protobuf field: int32 the_art_of_war = 48;\n     */\n    theArtOfWar: number;\n    /**\n     * @generated from protobuf field: int32 long_arm_of_the_law = 49;\n     */\n    longArmOfTheLaw: number;\n    /**\n     * @generated from protobuf field: bool divine_storm = 50;\n     */\n    divineStorm: boolean;\n    /**\n     * @generated from protobuf field: bool sacred_shield = 51;\n     */\n    sacredShield: boolean;\n    /**\n     * @generated from protobuf field: bool sanctity_of_battle = 52;\n     */\n    sanctityOfBattle: boolean;\n    /**\n     * @generated from protobuf field: bool seals_of_command = 53;\n     */\n    sealsOfCommand: boolean;\n    /**\n     * @generated from protobuf field: int32 sanctified_wrath = 54;\n     */\n    sanctifiedWrath: number;\n    /**\n     * @generated from protobuf field: int32 selfless_healer = 55;\n     */\n    selflessHealer: number;\n    /**\n     * @generated from protobuf field: bool repentance = 56;\n     */\n    repentance: boolean;\n    /**\n     * @generated from protobuf field: int32 divine_purpose = 57;\n     */\n    divinePurpose: number;\n    /**\n     * @generated from protobuf field: int32 inquiry_of_faith = 58;\n     */\n    inquiryOfFaith: number;\n    /**\n     * @generated from protobuf field: int32 acts_of_sacrifice = 59;\n     */\n    actsOfSacrifice: number;\n    /**\n     * @generated from protobuf field: bool zealotry = 60;\n     */\n    zealotry: boolean;\n}\n/**\n * @generated from protobuf message proto.PaladinOptions\n */\nexport interface PaladinOptions {\n    /**\n     * @generated from protobuf field: proto.PaladinJudgement judgement = 1;\n     */\n    judgement: PaladinJudgement;\n    /**\n     * @generated from protobuf field: proto.PaladinSeal seal = 2;\n     */\n    seal: PaladinSeal;\n    /**\n     * @generated from protobuf field: proto.PaladinAura aura = 3;\n     */\n    aura: PaladinAura;\n    /**\n     * @generated from protobuf field: bool use_avenging_wrath = 4;\n     */\n    useAvengingWrath: boolean;\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin\n */\nexport interface RetributionPaladin {\n    /**\n     * @generated from protobuf field: proto.RetributionPaladin.Options options = 3;\n     */\n    options?: RetributionPaladin_Options;\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin.Rotation\n */\nexport interface RetributionPaladin_Rotation {\n}\n/**\n * @generated from protobuf message proto.RetributionPaladin.Options\n */\nexport interface RetributionPaladin_Options {\n    /**\n     * @generated from protobuf field: proto.PaladinOptions class_options = 1;\n     */\n    classOptions?: PaladinOptions;\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin\n */\nexport interface ProtectionPaladin {\n    /**\n     * @generated from protobuf field: proto.ProtectionPaladin.Options options = 3;\n     */\n    options?: ProtectionPaladin_Options;\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin.Rotation\n */\nexport interface ProtectionPaladin_Rotation {\n}\n/**\n * @generated from protobuf message proto.ProtectionPaladin.Options\n */\nexport interface ProtectionPaladin_Options {\n    /**\n     * @generated from protobuf field: proto.PaladinOptions class_options = 1;\n     */\n    classOptions?: PaladinOptions;\n}\n/**\n * @generated from protobuf message proto.HolyPaladin\n */\nexport interface HolyPaladin {\n    /**\n     * @generated from protobuf field: proto.HolyPaladin.Options options = 3;\n     */\n    options?: HolyPaladin_Options;\n}\n/**\n * @generated from protobuf message proto.HolyPaladin.Rotation\n */\nexport interface HolyPaladin_Rotation {\n}\n/**\n * @generated from protobuf message proto.HolyPaladin.Options\n */\nexport interface HolyPaladin_Options {\n    /**\n     * @generated from protobuf field: proto.PaladinOptions class_options = 2;\n     */\n    classOptions?: PaladinOptions;\n}\n/**\n * @generated from protobuf enum proto.PaladinPrimeGlyph\n */\nexport enum PaladinPrimeGlyph {\n    /**\n     * @generated from protobuf enum value: PaladinPrimeGlyphNone = 0;\n     */\n    PaladinPrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfCrusaderStrike = 41098;\n     */\n    GlyphOfCrusaderStrike = 41098,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivineFavor = 41106;\n     */\n    GlyphOfDivineFavor = 41106,\n    /**\n     * @generated from protobuf enum value: GlyphOfExorcism = 41103;\n     */\n    GlyphOfExorcism = 41103,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfTheRighteous = 45742;\n     */\n    GlyphOfHammerOfTheRighteous = 45742,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyShock = 45746;\n     */\n    GlyphOfHolyShock = 45746,\n    /**\n     * @generated from protobuf enum value: GlyphOfJudgement = 41092;\n     */\n    GlyphOfJudgement = 41092,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfInsight = 41110;\n     */\n    GlyphOfSealOfInsight = 41110,\n    /**\n     * @generated from protobuf enum value: GlyphOfSealOfTruth = 43869;\n     */\n    GlyphOfSealOfTruth = 43869,\n    /**\n     * @generated from protobuf enum value: GlyphOfShieldOfTheRighteous = 45744;\n     */\n    GlyphOfShieldOfTheRighteous = 45744,\n    /**\n     * @generated from protobuf enum value: GlyphOfTemplarSVerdict = 45743;\n     */\n    GlyphOfTemplarSVerdict = 45743,\n    /**\n     * @generated from protobuf enum value: GlyphOfWordOfGlory = 41105;\n     */\n    GlyphOfWordOfGlory = 41105\n}\n/**\n * @generated from protobuf enum proto.PaladinMajorGlyph\n */\nexport enum PaladinMajorGlyph {\n    /**\n     * @generated from protobuf enum value: PaladinMajorGlyphNone = 0;\n     */\n    PaladinMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBeaconOfLight = 45741;\n     */\n    GlyphOfBeaconOfLight = 45741,\n    /**\n     * @generated from protobuf enum value: GlyphOfCleansing = 41104;\n     */\n    GlyphOfCleansing = 41104,\n    /**\n     * @generated from protobuf enum value: GlyphOfConsecration = 41099;\n     */\n    GlyphOfConsecration = 41099,\n    /**\n     * @generated from protobuf enum value: GlyphOfDazingShield = 43868;\n     */\n    GlyphOfDazingShield = 43868,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivinePlea = 45745;\n     */\n    GlyphOfDivinePlea = 45745,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivineProtection = 41096;\n     */\n    GlyphOfDivineProtection = 41096,\n    /**\n     * @generated from protobuf enum value: GlyphOfDivinity = 41108;\n     */\n    GlyphOfDivinity = 41108,\n    /**\n     * @generated from protobuf enum value: GlyphOfFocusedShield = 41101;\n     */\n    GlyphOfFocusedShield = 41101,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfJustice = 41095;\n     */\n    GlyphOfHammerOfJustice = 41095,\n    /**\n     * @generated from protobuf enum value: GlyphOfHammerOfWrath = 41097;\n     */\n    GlyphOfHammerOfWrath = 41097,\n    /**\n     * @generated from protobuf enum value: GlyphOfHolyWrath = 43867;\n     */\n    GlyphOfHolyWrath = 43867,\n    /**\n     * @generated from protobuf enum value: GlyphOfLayOnHands = 43367;\n     */\n    GlyphOfLayOnHands = 43367,\n    /**\n     * @generated from protobuf enum value: GlyphOfLightOfDawn = 41109;\n     */\n    GlyphOfLightOfDawn = 41109,\n    /**\n     * @generated from protobuf enum value: GlyphOfRebuke = 41094;\n     */\n    GlyphOfRebuke = 41094,\n    /**\n     * @generated from protobuf enum value: GlyphOfReckoning = 204385;\n     */\n    GlyphOfReckoning = 204385,\n    /**\n     * @generated from protobuf enum value: GlyphOfSalvation = 45747;\n     */\n    GlyphOfSalvation = 45747,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheAsceticCrusader = 41107;\n     */\n    GlyphOfTheAsceticCrusader = 41107,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheLongWord = 66918;\n     */\n    GlyphOfTheLongWord = 66918,\n    /**\n     * @generated from protobuf enum value: GlyphOfTurnEvil = 41102;\n     */\n    GlyphOfTurnEvil = 41102\n}\n/**\n * @generated from protobuf enum proto.PaladinMinorGlyph\n */\nexport enum PaladinMinorGlyph {\n    /**\n     * @generated from protobuf enum value: PaladinMinorGlyphNone = 0;\n     */\n    PaladinMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlessingOfKings = 43365;\n     */\n    GlyphOfBlessingOfKings = 43365,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlessingOfMight = 43340;\n     */\n    GlyphOfBlessingOfMight = 43340,\n    /**\n     * @generated from protobuf enum value: GlyphOfInsight = 43366;\n     */\n    GlyphOfInsight = 43366,\n    /**\n     * @generated from protobuf enum value: GlyphOfJustice = 43369;\n     */\n    GlyphOfJustice = 43369,\n    /**\n     * @generated from protobuf enum value: GlyphOfRighteousness = 41100;\n     */\n    GlyphOfRighteousness = 41100,\n    /**\n     * @generated from protobuf enum value: GlyphOfTruth = 43368;\n     */\n    GlyphOfTruth = 43368\n}\n/**\n * @generated from protobuf enum proto.Blessings\n */\nexport enum Blessings {\n    /**\n     * @generated from protobuf enum value: BlessingUnknown = 0;\n     */\n    BlessingUnknown = 0,\n    /**\n     * @generated from protobuf enum value: BlessingOfKings = 1;\n     */\n    BlessingOfKings = 1,\n    /**\n     * @generated from protobuf enum value: BlessingOfMight = 2;\n     */\n    BlessingOfMight = 2,\n    /**\n     * @generated from protobuf enum value: BlessingOfSalvation = 3;\n     */\n    BlessingOfSalvation = 3,\n    /**\n     * @generated from protobuf enum value: BlessingOfWisdom = 4;\n     */\n    BlessingOfWisdom = 4,\n    /**\n     * @generated from protobuf enum value: BlessingOfSanctuary = 5;\n     */\n    BlessingOfSanctuary = 5,\n    /**\n     * @generated from protobuf enum value: BlessingOfLight = 6;\n     */\n    BlessingOfLight = 6\n}\n/**\n * @generated from protobuf enum proto.PaladinAura\n */\nexport enum PaladinAura {\n    /**\n     * @generated from protobuf enum value: NoPaladinAura = 0;\n     */\n    NoPaladinAura = 0,\n    /**\n     * @generated from protobuf enum value: DevotionAura = 2;\n     */\n    DevotionAura = 2,\n    /**\n     * @generated from protobuf enum value: RetributionAura = 3;\n     */\n    RetributionAura = 3\n}\n/**\n * @generated from protobuf enum proto.PaladinSeal\n */\nexport enum PaladinSeal {\n    /**\n     * @generated from protobuf enum value: Vengeance = 0;\n     */\n    Vengeance = 0,\n    /**\n     * @generated from protobuf enum value: Command = 1;\n     */\n    Command = 1,\n    /**\n     * @generated from protobuf enum value: Righteousness = 2;\n     */\n    Righteousness = 2\n}\n/**\n * @generated from protobuf enum proto.PaladinJudgement\n */\nexport enum PaladinJudgement {\n    /**\n     * @generated from protobuf enum value: JudgementOfWisdom = 0;\n     */\n    JudgementOfWisdom = 0,\n    /**\n     * @generated from protobuf enum value: JudgementOfLight = 1;\n     */\n    JudgementOfLight = 1,\n    /**\n     * @generated from protobuf enum value: NoJudgement = 2;\n     */\n    NoJudgement = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass PaladinTalents$Type extends MessageType<PaladinTalents> {\n    constructor() {\n        super(\"proto.PaladinTalents\", [\n            { no: 1, name: \"arbiter_of_the_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"protector_of_the_innocent\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"judgements_of_the_pure\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"clarity_of_purpose\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"last_word\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"blazing_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"denounce\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"divine_favor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"infusion_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"daybreak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"enlightened_judgements\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"beacon_of_light\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"speed_of_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"sacred_cleansing\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"conviction\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"aura_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"paragon_of_virtue\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"tower_of_radiance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"blessed_life\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"light_of_dawn\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"divinity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"seals_of_the_pure\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"eternal_glory\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"judgements_of_the_just\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"improved_hammer_of_justice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"hallowed_ground\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"sanctuary\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"hammer_of_the_righteous\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 30, name: \"wrath_of_the_lightbringer\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"reckoning\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"shield_of_the_righteous\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"grand_crusader\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"vindication\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"holy_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"guarded_by_the_light\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"divine_guardian\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"sacred_duty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"shield_of_the_templar\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"ardent_defender\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 41, name: \"eye_for_an_eye\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"crusade\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"improved_judgement\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"guardians_favor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"rule_of_law\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"pursuit_of_justice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"communion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"the_art_of_war\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"long_arm_of_the_law\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"divine_storm\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 51, name: \"sacred_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 52, name: \"sanctity_of_battle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"seals_of_command\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 54, name: \"sanctified_wrath\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"selfless_healer\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"repentance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 57, name: \"divine_purpose\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"inquiry_of_faith\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"acts_of_sacrifice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"zealotry\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PaladinTalents>): PaladinTalents {\n        const message = { arbiterOfTheLight: 0, protectorOfTheInnocent: 0, judgementsOfThePure: 0, clarityOfPurpose: 0, lastWord: 0, blazingLight: 0, denounce: 0, divineFavor: false, infusionOfLight: 0, daybreak: 0, enlightenedJudgements: 0, beaconOfLight: false, speedOfLight: 0, sacredCleansing: false, conviction: 0, auraMastery: false, paragonOfVirtue: 0, towerOfRadiance: 0, blessedLife: 0, lightOfDawn: false, divinity: 0, sealsOfThePure: 0, eternalGlory: 0, judgementsOfTheJust: 0, toughness: 0, improvedHammerOfJustice: 0, hallowedGround: 0, sanctuary: 0, hammerOfTheRighteous: false, wrathOfTheLightbringer: 0, reckoning: 0, shieldOfTheRighteous: false, grandCrusader: 0, vindication: false, holyShield: false, guardedByTheLight: 0, divineGuardian: false, sacredDuty: 0, shieldOfTheTemplar: 0, ardentDefender: false, eyeForAnEye: 0, crusade: 0, improvedJudgement: 0, guardiansFavor: 0, ruleOfLaw: 0, pursuitOfJustice: 0, communion: false, theArtOfWar: 0, longArmOfTheLaw: 0, divineStorm: false, sacredShield: false, sanctityOfBattle: false, sealsOfCommand: false, sanctifiedWrath: 0, selflessHealer: 0, repentance: false, divinePurpose: 0, inquiryOfFaith: 0, actsOfSacrifice: 0, zealotry: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PaladinTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaladinTalents): PaladinTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 arbiter_of_the_light */ 1:\n                    message.arbiterOfTheLight = reader.int32();\n                    break;\n                case /* int32 protector_of_the_innocent */ 2:\n                    message.protectorOfTheInnocent = reader.int32();\n                    break;\n                case /* int32 judgements_of_the_pure */ 3:\n                    message.judgementsOfThePure = reader.int32();\n                    break;\n                case /* int32 clarity_of_purpose */ 4:\n                    message.clarityOfPurpose = reader.int32();\n                    break;\n                case /* int32 last_word */ 5:\n                    message.lastWord = reader.int32();\n                    break;\n                case /* int32 blazing_light */ 6:\n                    message.blazingLight = reader.int32();\n                    break;\n                case /* int32 denounce */ 7:\n                    message.denounce = reader.int32();\n                    break;\n                case /* bool divine_favor */ 8:\n                    message.divineFavor = reader.bool();\n                    break;\n                case /* int32 infusion_of_light */ 9:\n                    message.infusionOfLight = reader.int32();\n                    break;\n                case /* int32 daybreak */ 10:\n                    message.daybreak = reader.int32();\n                    break;\n                case /* int32 enlightened_judgements */ 11:\n                    message.enlightenedJudgements = reader.int32();\n                    break;\n                case /* bool beacon_of_light */ 12:\n                    message.beaconOfLight = reader.bool();\n                    break;\n                case /* int32 speed_of_light */ 13:\n                    message.speedOfLight = reader.int32();\n                    break;\n                case /* bool sacred_cleansing */ 14:\n                    message.sacredCleansing = reader.bool();\n                    break;\n                case /* int32 conviction */ 15:\n                    message.conviction = reader.int32();\n                    break;\n                case /* bool aura_mastery */ 16:\n                    message.auraMastery = reader.bool();\n                    break;\n                case /* int32 paragon_of_virtue */ 17:\n                    message.paragonOfVirtue = reader.int32();\n                    break;\n                case /* int32 tower_of_radiance */ 18:\n                    message.towerOfRadiance = reader.int32();\n                    break;\n                case /* int32 blessed_life */ 19:\n                    message.blessedLife = reader.int32();\n                    break;\n                case /* bool light_of_dawn */ 20:\n                    message.lightOfDawn = reader.bool();\n                    break;\n                case /* int32 divinity */ 21:\n                    message.divinity = reader.int32();\n                    break;\n                case /* int32 seals_of_the_pure */ 22:\n                    message.sealsOfThePure = reader.int32();\n                    break;\n                case /* int32 eternal_glory */ 23:\n                    message.eternalGlory = reader.int32();\n                    break;\n                case /* int32 judgements_of_the_just */ 24:\n                    message.judgementsOfTheJust = reader.int32();\n                    break;\n                case /* int32 toughness */ 25:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 improved_hammer_of_justice */ 26:\n                    message.improvedHammerOfJustice = reader.int32();\n                    break;\n                case /* int32 hallowed_ground */ 27:\n                    message.hallowedGround = reader.int32();\n                    break;\n                case /* int32 sanctuary */ 28:\n                    message.sanctuary = reader.int32();\n                    break;\n                case /* bool hammer_of_the_righteous */ 29:\n                    message.hammerOfTheRighteous = reader.bool();\n                    break;\n                case /* int32 wrath_of_the_lightbringer */ 30:\n                    message.wrathOfTheLightbringer = reader.int32();\n                    break;\n                case /* int32 reckoning */ 31:\n                    message.reckoning = reader.int32();\n                    break;\n                case /* bool shield_of_the_righteous */ 32:\n                    message.shieldOfTheRighteous = reader.bool();\n                    break;\n                case /* int32 grand_crusader */ 33:\n                    message.grandCrusader = reader.int32();\n                    break;\n                case /* bool vindication */ 34:\n                    message.vindication = reader.bool();\n                    break;\n                case /* bool holy_shield */ 35:\n                    message.holyShield = reader.bool();\n                    break;\n                case /* int32 guarded_by_the_light */ 36:\n                    message.guardedByTheLight = reader.int32();\n                    break;\n                case /* bool divine_guardian */ 37:\n                    message.divineGuardian = reader.bool();\n                    break;\n                case /* int32 sacred_duty */ 38:\n                    message.sacredDuty = reader.int32();\n                    break;\n                case /* int32 shield_of_the_templar */ 39:\n                    message.shieldOfTheTemplar = reader.int32();\n                    break;\n                case /* bool ardent_defender */ 40:\n                    message.ardentDefender = reader.bool();\n                    break;\n                case /* int32 eye_for_an_eye */ 41:\n                    message.eyeForAnEye = reader.int32();\n                    break;\n                case /* int32 crusade */ 42:\n                    message.crusade = reader.int32();\n                    break;\n                case /* int32 improved_judgement */ 43:\n                    message.improvedJudgement = reader.int32();\n                    break;\n                case /* int32 guardians_favor */ 44:\n                    message.guardiansFavor = reader.int32();\n                    break;\n                case /* int32 rule_of_law */ 45:\n                    message.ruleOfLaw = reader.int32();\n                    break;\n                case /* int32 pursuit_of_justice */ 46:\n                    message.pursuitOfJustice = reader.int32();\n                    break;\n                case /* bool communion */ 47:\n                    message.communion = reader.bool();\n                    break;\n                case /* int32 the_art_of_war */ 48:\n                    message.theArtOfWar = reader.int32();\n                    break;\n                case /* int32 long_arm_of_the_law */ 49:\n                    message.longArmOfTheLaw = reader.int32();\n                    break;\n                case /* bool divine_storm */ 50:\n                    message.divineStorm = reader.bool();\n                    break;\n                case /* bool sacred_shield */ 51:\n                    message.sacredShield = reader.bool();\n                    break;\n                case /* bool sanctity_of_battle */ 52:\n                    message.sanctityOfBattle = reader.bool();\n                    break;\n                case /* bool seals_of_command */ 53:\n                    message.sealsOfCommand = reader.bool();\n                    break;\n                case /* int32 sanctified_wrath */ 54:\n                    message.sanctifiedWrath = reader.int32();\n                    break;\n                case /* int32 selfless_healer */ 55:\n                    message.selflessHealer = reader.int32();\n                    break;\n                case /* bool repentance */ 56:\n                    message.repentance = reader.bool();\n                    break;\n                case /* int32 divine_purpose */ 57:\n                    message.divinePurpose = reader.int32();\n                    break;\n                case /* int32 inquiry_of_faith */ 58:\n                    message.inquiryOfFaith = reader.int32();\n                    break;\n                case /* int32 acts_of_sacrifice */ 59:\n                    message.actsOfSacrifice = reader.int32();\n                    break;\n                case /* bool zealotry */ 60:\n                    message.zealotry = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PaladinTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 arbiter_of_the_light = 1; */\n        if (message.arbiterOfTheLight !== 0)\n            writer.tag(1, WireType.Varint).int32(message.arbiterOfTheLight);\n        /* int32 protector_of_the_innocent = 2; */\n        if (message.protectorOfTheInnocent !== 0)\n            writer.tag(2, WireType.Varint).int32(message.protectorOfTheInnocent);\n        /* int32 judgements_of_the_pure = 3; */\n        if (message.judgementsOfThePure !== 0)\n            writer.tag(3, WireType.Varint).int32(message.judgementsOfThePure);\n        /* int32 clarity_of_purpose = 4; */\n        if (message.clarityOfPurpose !== 0)\n            writer.tag(4, WireType.Varint).int32(message.clarityOfPurpose);\n        /* int32 last_word = 5; */\n        if (message.lastWord !== 0)\n            writer.tag(5, WireType.Varint).int32(message.lastWord);\n        /* int32 blazing_light = 6; */\n        if (message.blazingLight !== 0)\n            writer.tag(6, WireType.Varint).int32(message.blazingLight);\n        /* int32 denounce = 7; */\n        if (message.denounce !== 0)\n            writer.tag(7, WireType.Varint).int32(message.denounce);\n        /* bool divine_favor = 8; */\n        if (message.divineFavor !== false)\n            writer.tag(8, WireType.Varint).bool(message.divineFavor);\n        /* int32 infusion_of_light = 9; */\n        if (message.infusionOfLight !== 0)\n            writer.tag(9, WireType.Varint).int32(message.infusionOfLight);\n        /* int32 daybreak = 10; */\n        if (message.daybreak !== 0)\n            writer.tag(10, WireType.Varint).int32(message.daybreak);\n        /* int32 enlightened_judgements = 11; */\n        if (message.enlightenedJudgements !== 0)\n            writer.tag(11, WireType.Varint).int32(message.enlightenedJudgements);\n        /* bool beacon_of_light = 12; */\n        if (message.beaconOfLight !== false)\n            writer.tag(12, WireType.Varint).bool(message.beaconOfLight);\n        /* int32 speed_of_light = 13; */\n        if (message.speedOfLight !== 0)\n            writer.tag(13, WireType.Varint).int32(message.speedOfLight);\n        /* bool sacred_cleansing = 14; */\n        if (message.sacredCleansing !== false)\n            writer.tag(14, WireType.Varint).bool(message.sacredCleansing);\n        /* int32 conviction = 15; */\n        if (message.conviction !== 0)\n            writer.tag(15, WireType.Varint).int32(message.conviction);\n        /* bool aura_mastery = 16; */\n        if (message.auraMastery !== false)\n            writer.tag(16, WireType.Varint).bool(message.auraMastery);\n        /* int32 paragon_of_virtue = 17; */\n        if (message.paragonOfVirtue !== 0)\n            writer.tag(17, WireType.Varint).int32(message.paragonOfVirtue);\n        /* int32 tower_of_radiance = 18; */\n        if (message.towerOfRadiance !== 0)\n            writer.tag(18, WireType.Varint).int32(message.towerOfRadiance);\n        /* int32 blessed_life = 19; */\n        if (message.blessedLife !== 0)\n            writer.tag(19, WireType.Varint).int32(message.blessedLife);\n        /* bool light_of_dawn = 20; */\n        if (message.lightOfDawn !== false)\n            writer.tag(20, WireType.Varint).bool(message.lightOfDawn);\n        /* int32 divinity = 21; */\n        if (message.divinity !== 0)\n            writer.tag(21, WireType.Varint).int32(message.divinity);\n        /* int32 seals_of_the_pure = 22; */\n        if (message.sealsOfThePure !== 0)\n            writer.tag(22, WireType.Varint).int32(message.sealsOfThePure);\n        /* int32 eternal_glory = 23; */\n        if (message.eternalGlory !== 0)\n            writer.tag(23, WireType.Varint).int32(message.eternalGlory);\n        /* int32 judgements_of_the_just = 24; */\n        if (message.judgementsOfTheJust !== 0)\n            writer.tag(24, WireType.Varint).int32(message.judgementsOfTheJust);\n        /* int32 toughness = 25; */\n        if (message.toughness !== 0)\n            writer.tag(25, WireType.Varint).int32(message.toughness);\n        /* int32 improved_hammer_of_justice = 26; */\n        if (message.improvedHammerOfJustice !== 0)\n            writer.tag(26, WireType.Varint).int32(message.improvedHammerOfJustice);\n        /* int32 hallowed_ground = 27; */\n        if (message.hallowedGround !== 0)\n            writer.tag(27, WireType.Varint).int32(message.hallowedGround);\n        /* int32 sanctuary = 28; */\n        if (message.sanctuary !== 0)\n            writer.tag(28, WireType.Varint).int32(message.sanctuary);\n        /* bool hammer_of_the_righteous = 29; */\n        if (message.hammerOfTheRighteous !== false)\n            writer.tag(29, WireType.Varint).bool(message.hammerOfTheRighteous);\n        /* int32 wrath_of_the_lightbringer = 30; */\n        if (message.wrathOfTheLightbringer !== 0)\n            writer.tag(30, WireType.Varint).int32(message.wrathOfTheLightbringer);\n        /* int32 reckoning = 31; */\n        if (message.reckoning !== 0)\n            writer.tag(31, WireType.Varint).int32(message.reckoning);\n        /* bool shield_of_the_righteous = 32; */\n        if (message.shieldOfTheRighteous !== false)\n            writer.tag(32, WireType.Varint).bool(message.shieldOfTheRighteous);\n        /* int32 grand_crusader = 33; */\n        if (message.grandCrusader !== 0)\n            writer.tag(33, WireType.Varint).int32(message.grandCrusader);\n        /* bool vindication = 34; */\n        if (message.vindication !== false)\n            writer.tag(34, WireType.Varint).bool(message.vindication);\n        /* bool holy_shield = 35; */\n        if (message.holyShield !== false)\n            writer.tag(35, WireType.Varint).bool(message.holyShield);\n        /* int32 guarded_by_the_light = 36; */\n        if (message.guardedByTheLight !== 0)\n            writer.tag(36, WireType.Varint).int32(message.guardedByTheLight);\n        /* bool divine_guardian = 37; */\n        if (message.divineGuardian !== false)\n            writer.tag(37, WireType.Varint).bool(message.divineGuardian);\n        /* int32 sacred_duty = 38; */\n        if (message.sacredDuty !== 0)\n            writer.tag(38, WireType.Varint).int32(message.sacredDuty);\n        /* int32 shield_of_the_templar = 39; */\n        if (message.shieldOfTheTemplar !== 0)\n            writer.tag(39, WireType.Varint).int32(message.shieldOfTheTemplar);\n        /* bool ardent_defender = 40; */\n        if (message.ardentDefender !== false)\n            writer.tag(40, WireType.Varint).bool(message.ardentDefender);\n        /* int32 eye_for_an_eye = 41; */\n        if (message.eyeForAnEye !== 0)\n            writer.tag(41, WireType.Varint).int32(message.eyeForAnEye);\n        /* int32 crusade = 42; */\n        if (message.crusade !== 0)\n            writer.tag(42, WireType.Varint).int32(message.crusade);\n        /* int32 improved_judgement = 43; */\n        if (message.improvedJudgement !== 0)\n            writer.tag(43, WireType.Varint).int32(message.improvedJudgement);\n        /* int32 guardians_favor = 44; */\n        if (message.guardiansFavor !== 0)\n            writer.tag(44, WireType.Varint).int32(message.guardiansFavor);\n        /* int32 rule_of_law = 45; */\n        if (message.ruleOfLaw !== 0)\n            writer.tag(45, WireType.Varint).int32(message.ruleOfLaw);\n        /* int32 pursuit_of_justice = 46; */\n        if (message.pursuitOfJustice !== 0)\n            writer.tag(46, WireType.Varint).int32(message.pursuitOfJustice);\n        /* bool communion = 47; */\n        if (message.communion !== false)\n            writer.tag(47, WireType.Varint).bool(message.communion);\n        /* int32 the_art_of_war = 48; */\n        if (message.theArtOfWar !== 0)\n            writer.tag(48, WireType.Varint).int32(message.theArtOfWar);\n        /* int32 long_arm_of_the_law = 49; */\n        if (message.longArmOfTheLaw !== 0)\n            writer.tag(49, WireType.Varint).int32(message.longArmOfTheLaw);\n        /* bool divine_storm = 50; */\n        if (message.divineStorm !== false)\n            writer.tag(50, WireType.Varint).bool(message.divineStorm);\n        /* bool sacred_shield = 51; */\n        if (message.sacredShield !== false)\n            writer.tag(51, WireType.Varint).bool(message.sacredShield);\n        /* bool sanctity_of_battle = 52; */\n        if (message.sanctityOfBattle !== false)\n            writer.tag(52, WireType.Varint).bool(message.sanctityOfBattle);\n        /* bool seals_of_command = 53; */\n        if (message.sealsOfCommand !== false)\n            writer.tag(53, WireType.Varint).bool(message.sealsOfCommand);\n        /* int32 sanctified_wrath = 54; */\n        if (message.sanctifiedWrath !== 0)\n            writer.tag(54, WireType.Varint).int32(message.sanctifiedWrath);\n        /* int32 selfless_healer = 55; */\n        if (message.selflessHealer !== 0)\n            writer.tag(55, WireType.Varint).int32(message.selflessHealer);\n        /* bool repentance = 56; */\n        if (message.repentance !== false)\n            writer.tag(56, WireType.Varint).bool(message.repentance);\n        /* int32 divine_purpose = 57; */\n        if (message.divinePurpose !== 0)\n            writer.tag(57, WireType.Varint).int32(message.divinePurpose);\n        /* int32 inquiry_of_faith = 58; */\n        if (message.inquiryOfFaith !== 0)\n            writer.tag(58, WireType.Varint).int32(message.inquiryOfFaith);\n        /* int32 acts_of_sacrifice = 59; */\n        if (message.actsOfSacrifice !== 0)\n            writer.tag(59, WireType.Varint).int32(message.actsOfSacrifice);\n        /* bool zealotry = 60; */\n        if (message.zealotry !== false)\n            writer.tag(60, WireType.Varint).bool(message.zealotry);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PaladinTalents\n */\nexport const PaladinTalents = new PaladinTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PaladinOptions$Type extends MessageType<PaladinOptions> {\n    constructor() {\n        super(\"proto.PaladinOptions\", [\n            { no: 1, name: \"judgement\", kind: \"enum\", T: () => [\"proto.PaladinJudgement\", PaladinJudgement] },\n            { no: 2, name: \"seal\", kind: \"enum\", T: () => [\"proto.PaladinSeal\", PaladinSeal] },\n            { no: 3, name: \"aura\", kind: \"enum\", T: () => [\"proto.PaladinAura\", PaladinAura] },\n            { no: 4, name: \"use_avenging_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<PaladinOptions>): PaladinOptions {\n        const message = { judgement: 0, seal: 0, aura: 0, useAvengingWrath: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PaladinOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PaladinOptions): PaladinOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinJudgement judgement */ 1:\n                    message.judgement = reader.int32();\n                    break;\n                case /* proto.PaladinSeal seal */ 2:\n                    message.seal = reader.int32();\n                    break;\n                case /* proto.PaladinAura aura */ 3:\n                    message.aura = reader.int32();\n                    break;\n                case /* bool use_avenging_wrath */ 4:\n                    message.useAvengingWrath = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PaladinOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinJudgement judgement = 1; */\n        if (message.judgement !== 0)\n            writer.tag(1, WireType.Varint).int32(message.judgement);\n        /* proto.PaladinSeal seal = 2; */\n        if (message.seal !== 0)\n            writer.tag(2, WireType.Varint).int32(message.seal);\n        /* proto.PaladinAura aura = 3; */\n        if (message.aura !== 0)\n            writer.tag(3, WireType.Varint).int32(message.aura);\n        /* bool use_avenging_wrath = 4; */\n        if (message.useAvengingWrath !== false)\n            writer.tag(4, WireType.Varint).bool(message.useAvengingWrath);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PaladinOptions\n */\nexport const PaladinOptions = new PaladinOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin$Type extends MessageType<RetributionPaladin> {\n    constructor() {\n        super(\"proto.RetributionPaladin\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => RetributionPaladin_Options }\n        ]);\n    }\n    create(value?: PartialMessage<RetributionPaladin>): RetributionPaladin {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin): RetributionPaladin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RetributionPaladin.Options options */ 3:\n                    message.options = RetributionPaladin_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetributionPaladin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RetributionPaladin.Options options = 3; */\n        if (message.options)\n            RetributionPaladin_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin\n */\nexport const RetributionPaladin = new RetributionPaladin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin_Rotation$Type extends MessageType<RetributionPaladin_Rotation> {\n    constructor() {\n        super(\"proto.RetributionPaladin.Rotation\", []);\n    }\n    create(value?: PartialMessage<RetributionPaladin_Rotation>): RetributionPaladin_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin_Rotation): RetributionPaladin_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: RetributionPaladin_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin.Rotation\n */\nexport const RetributionPaladin_Rotation = new RetributionPaladin_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RetributionPaladin_Options$Type extends MessageType<RetributionPaladin_Options> {\n    constructor() {\n        super(\"proto.RetributionPaladin.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => PaladinOptions }\n        ]);\n    }\n    create(value?: PartialMessage<RetributionPaladin_Options>): RetributionPaladin_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RetributionPaladin_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RetributionPaladin_Options): RetributionPaladin_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinOptions class_options */ 1:\n                    message.classOptions = PaladinOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RetributionPaladin_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinOptions class_options = 1; */\n        if (message.classOptions)\n            PaladinOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RetributionPaladin.Options\n */\nexport const RetributionPaladin_Options = new RetributionPaladin_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin$Type extends MessageType<ProtectionPaladin> {\n    constructor() {\n        super(\"proto.ProtectionPaladin\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => ProtectionPaladin_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionPaladin>): ProtectionPaladin {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin): ProtectionPaladin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ProtectionPaladin.Options options */ 3:\n                    message.options = ProtectionPaladin_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionPaladin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ProtectionPaladin.Options options = 3; */\n        if (message.options)\n            ProtectionPaladin_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin\n */\nexport const ProtectionPaladin = new ProtectionPaladin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin_Rotation$Type extends MessageType<ProtectionPaladin_Rotation> {\n    constructor() {\n        super(\"proto.ProtectionPaladin.Rotation\", []);\n    }\n    create(value?: PartialMessage<ProtectionPaladin_Rotation>): ProtectionPaladin_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin_Rotation): ProtectionPaladin_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: ProtectionPaladin_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin.Rotation\n */\nexport const ProtectionPaladin_Rotation = new ProtectionPaladin_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProtectionPaladin_Options$Type extends MessageType<ProtectionPaladin_Options> {\n    constructor() {\n        super(\"proto.ProtectionPaladin.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => PaladinOptions }\n        ]);\n    }\n    create(value?: PartialMessage<ProtectionPaladin_Options>): ProtectionPaladin_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProtectionPaladin_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProtectionPaladin_Options): ProtectionPaladin_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinOptions class_options */ 1:\n                    message.classOptions = PaladinOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProtectionPaladin_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinOptions class_options = 1; */\n        if (message.classOptions)\n            PaladinOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProtectionPaladin.Options\n */\nexport const ProtectionPaladin_Options = new ProtectionPaladin_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HolyPaladin$Type extends MessageType<HolyPaladin> {\n    constructor() {\n        super(\"proto.HolyPaladin\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => HolyPaladin_Options }\n        ]);\n    }\n    create(value?: PartialMessage<HolyPaladin>): HolyPaladin {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HolyPaladin>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HolyPaladin): HolyPaladin {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HolyPaladin.Options options */ 3:\n                    message.options = HolyPaladin_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HolyPaladin, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HolyPaladin.Options options = 3; */\n        if (message.options)\n            HolyPaladin_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HolyPaladin\n */\nexport const HolyPaladin = new HolyPaladin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HolyPaladin_Rotation$Type extends MessageType<HolyPaladin_Rotation> {\n    constructor() {\n        super(\"proto.HolyPaladin.Rotation\", []);\n    }\n    create(value?: PartialMessage<HolyPaladin_Rotation>): HolyPaladin_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HolyPaladin_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HolyPaladin_Rotation): HolyPaladin_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: HolyPaladin_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HolyPaladin.Rotation\n */\nexport const HolyPaladin_Rotation = new HolyPaladin_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HolyPaladin_Options$Type extends MessageType<HolyPaladin_Options> {\n    constructor() {\n        super(\"proto.HolyPaladin.Options\", [\n            { no: 2, name: \"class_options\", kind: \"message\", T: () => PaladinOptions }\n        ]);\n    }\n    create(value?: PartialMessage<HolyPaladin_Options>): HolyPaladin_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HolyPaladin_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HolyPaladin_Options): HolyPaladin_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.PaladinOptions class_options */ 2:\n                    message.classOptions = PaladinOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HolyPaladin_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.PaladinOptions class_options = 2; */\n        if (message.classOptions)\n            PaladinOptions.internalBinaryWrite(message.classOptions, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HolyPaladin.Options\n */\nexport const HolyPaladin_Options = new HolyPaladin_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"mage.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { UnitReference } from \"./common\";\n/**\n * @generated from protobuf message proto.MageTalents\n */\nexport interface MageTalents {\n    /**\n     * Arcane\n     *\n     * @generated from protobuf field: int32 arcane_concentration = 1;\n     */\n    arcaneConcentration: number;\n    /**\n     * @generated from protobuf field: int32 improved_counterspell = 2;\n     */\n    improvedCounterspell: number;\n    /**\n     * @generated from protobuf field: int32 netherwind_presence = 3;\n     */\n    netherwindPresence: number;\n    /**\n     * @generated from protobuf field: int32 torment_the_weak = 4;\n     */\n    tormentTheWeak: number;\n    /**\n     * @generated from protobuf field: int32 invocation = 5;\n     */\n    invocation: number;\n    /**\n     * @generated from protobuf field: int32 improved_arcane_missiles = 6;\n     */\n    improvedArcaneMissiles: number;\n    /**\n     * @generated from protobuf field: int32 improved_blink = 7;\n     */\n    improvedBlink: number;\n    /**\n     * @generated from protobuf field: int32 arcane_flows = 8;\n     */\n    arcaneFlows: number;\n    /**\n     * @generated from protobuf field: bool presence_of_mind = 9;\n     */\n    presenceOfMind: boolean;\n    /**\n     * @generated from protobuf field: int32 missile_barrage = 10;\n     */\n    missileBarrage: number;\n    /**\n     * @generated from protobuf field: int32 prismatic_cloak = 11;\n     */\n    prismaticCloak: number;\n    /**\n     * @generated from protobuf field: int32 improved_polymorph = 12;\n     */\n    improvedPolymorph: number;\n    /**\n     * @generated from protobuf field: bool arcane_tactics = 13;\n     */\n    arcaneTactics: boolean;\n    /**\n     * @generated from protobuf field: int32 incanters_absorption = 14;\n     */\n    incantersAbsorption: number;\n    /**\n     * @generated from protobuf field: int32 improved_arcane_explosion = 16;\n     */\n    improvedArcaneExplosion: number;\n    /**\n     * @generated from protobuf field: int32 arcane_potency = 17;\n     */\n    arcanePotency: number;\n    /**\n     * @generated from protobuf field: bool slow = 18;\n     */\n    slow: boolean;\n    /**\n     * @generated from protobuf field: int32 nether_vortex = 19;\n     */\n    netherVortex: number;\n    /**\n     * @generated from protobuf field: bool focus_magic = 20;\n     */\n    focusMagic: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_mana_gem = 21;\n     */\n    improvedManaGem: number;\n    /**\n     * @generated from protobuf field: bool arcane_power = 22;\n     */\n    arcanePower: boolean;\n    /**\n     * Fire\n     *\n     * @generated from protobuf field: int32 master_of_elements = 23;\n     */\n    masterOfElements: number;\n    /**\n     * @generated from protobuf field: int32 burning_soul = 24;\n     */\n    burningSoul: number;\n    /**\n     * @generated from protobuf field: int32 improved_fire_blast = 25;\n     */\n    improvedFireBlast: number;\n    /**\n     * @generated from protobuf field: int32 ignite = 26;\n     */\n    ignite: number;\n    /**\n     * @generated from protobuf field: int32 fire_power = 27;\n     */\n    firePower: number;\n    /**\n     * @generated from protobuf field: int32 blazing_speed = 28;\n     */\n    blazingSpeed: number;\n    /**\n     * @generated from protobuf field: int32 impact = 29;\n     */\n    impact: number;\n    /**\n     * @generated from protobuf field: int32 cauterize = 30;\n     */\n    cauterize: number;\n    /**\n     * @generated from protobuf field: bool blast_wave = 31;\n     */\n    blastWave: boolean;\n    /**\n     * @generated from protobuf field: bool hot_streak = 32;\n     */\n    hotStreak: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_scorch = 33;\n     */\n    improvedScorch: number;\n    /**\n     * @generated from protobuf field: bool molten_shields = 34;\n     */\n    moltenShields: boolean;\n    /**\n     * @generated from protobuf field: bool combustion = 35;\n     */\n    combustion: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_hot_streak = 36;\n     */\n    improvedHotStreak: number;\n    /**\n     * @generated from protobuf field: bool firestarter = 37;\n     */\n    firestarter: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_flamestrike = 38;\n     */\n    improvedFlamestrike: number;\n    /**\n     * @generated from protobuf field: bool dragons_breath = 39;\n     */\n    dragonsBreath: boolean;\n    /**\n     * @generated from protobuf field: int32 molten_fury = 40;\n     */\n    moltenFury: number;\n    /**\n     * @generated from protobuf field: int32 pyromaniac = 41;\n     */\n    pyromaniac: number;\n    /**\n     * @generated from protobuf field: int32 critical_mass = 42;\n     */\n    criticalMass: number;\n    /**\n     * @generated from protobuf field: bool living_bomb = 43;\n     */\n    livingBomb: boolean;\n    /**\n     * Frost\n     *\n     * @generated from protobuf field: int32 early_frost = 44;\n     */\n    earlyFrost: number;\n    /**\n     * @generated from protobuf field: int32 piercing_ice = 45;\n     */\n    piercingIce: number;\n    /**\n     * @generated from protobuf field: int32 shatter = 46;\n     */\n    shatter: number;\n    /**\n     * @generated from protobuf field: int32 ice_floes = 47;\n     */\n    iceFloes: number;\n    /**\n     * @generated from protobuf field: int32 improved_cone_of_cold = 48;\n     */\n    improvedConeOfCold: number;\n    /**\n     * @generated from protobuf field: int32 piercing_chill = 49;\n     */\n    piercingChill: number;\n    /**\n     * @generated from protobuf field: int32 permafrost = 50;\n     */\n    permafrost: number;\n    /**\n     * @generated from protobuf field: int32 ice_shards = 51;\n     */\n    iceShards: number;\n    /**\n     * @generated from protobuf field: bool icy_veins = 52;\n     */\n    icyVeins: boolean;\n    /**\n     * @generated from protobuf field: int32 fingers_of_frost = 53;\n     */\n    fingersOfFrost: number;\n    /**\n     * @generated from protobuf field: int32 improved_freeze = 54;\n     */\n    improvedFreeze: number;\n    /**\n     * @generated from protobuf field: int32 enduring_winter = 55;\n     */\n    enduringWinter: number;\n    /**\n     * @generated from protobuf field: bool cold_snap = 56;\n     */\n    coldSnap: boolean;\n    /**\n     * @generated from protobuf field: int32 brain_freeze = 57;\n     */\n    brainFreeze: number;\n    /**\n     * @generated from protobuf field: int32 shattered_barrier = 58;\n     */\n    shatteredBarrier: number;\n    /**\n     * @generated from protobuf field: bool ice_barrier = 59;\n     */\n    iceBarrier: boolean;\n    /**\n     * @generated from protobuf field: int32 reactive_barrier = 60;\n     */\n    reactiveBarrier: number;\n    /**\n     * @generated from protobuf field: int32 frostfire_orb = 61;\n     */\n    frostfireOrb: number;\n    /**\n     * @generated from protobuf field: bool deep_freeze = 62;\n     */\n    deepFreeze: boolean;\n}\n/**\n * @generated from protobuf message proto.MageOptions\n */\nexport interface MageOptions {\n    /**\n     * @generated from protobuf field: proto.MageOptions.ArmorType armor = 1;\n     */\n    armor: MageOptions_ArmorType;\n}\n/**\n * @generated from protobuf enum proto.MageOptions.ArmorType\n */\nexport enum MageOptions_ArmorType {\n    /**\n     * @generated from protobuf enum value: NoArmor = 0;\n     */\n    NoArmor = 0,\n    /**\n     * @generated from protobuf enum value: MageArmor = 1;\n     */\n    MageArmor = 1,\n    /**\n     * @generated from protobuf enum value: MoltenArmor = 2;\n     */\n    MoltenArmor = 2\n}\n/**\n * @generated from protobuf message proto.ArcaneMage\n */\nexport interface ArcaneMage {\n    /**\n     * @generated from protobuf field: proto.ArcaneMage.Options options = 1;\n     */\n    options?: ArcaneMage_Options;\n}\n/**\n * @generated from protobuf message proto.ArcaneMage.Rotation\n */\nexport interface ArcaneMage_Rotation {\n    /**\n     * @generated from protobuf field: double missile_barrage_below_mana_percent = 1;\n     */\n    missileBarrageBelowManaPercent: number;\n    /**\n     * @generated from protobuf field: double blast_without_missile_barrage_above_mana_percent = 2;\n     */\n    blastWithoutMissileBarrageAboveManaPercent: number;\n    /**\n     * @generated from protobuf field: double only_3_arcane_blast_stacks_below_mana_percent = 3;\n     */\n    only3ArcaneBlastStacksBelowManaPercent: number;\n    /**\n     * @generated from protobuf field: bool use_arcane_barrage = 4;\n     */\n    useArcaneBarrage: boolean;\n}\n/**\n * @generated from protobuf message proto.ArcaneMage.Options\n */\nexport interface ArcaneMage_Options {\n    /**\n     * @generated from protobuf field: proto.MageOptions class_options = 1;\n     */\n    classOptions?: MageOptions;\n    /**\n     * @generated from protobuf field: int32 focus_magic_percent_uptime = 2;\n     */\n    focusMagicPercentUptime: number;\n    /**\n     * @generated from protobuf field: proto.UnitReference focus_magic_target = 3;\n     */\n    focusMagicTarget?: UnitReference;\n}\n/**\n * @generated from protobuf message proto.FireMage\n */\nexport interface FireMage {\n    /**\n     * @generated from protobuf field: proto.FireMage.Options options = 1;\n     */\n    options?: FireMage_Options;\n}\n/**\n * @generated from protobuf message proto.FireMage.Rotation\n */\nexport interface FireMage_Rotation {\n    /**\n     * @generated from protobuf field: proto.FireMage.Rotation.PrimaryFireSpell primary_fire_spell = 1;\n     */\n    primaryFireSpell: FireMage_Rotation_PrimaryFireSpell;\n    /**\n     * @generated from protobuf field: bool maintain_improved_scorch = 2;\n     */\n    maintainImprovedScorch: boolean;\n}\n/**\n * @generated from protobuf enum proto.FireMage.Rotation.PrimaryFireSpell\n */\nexport enum FireMage_Rotation_PrimaryFireSpell {\n    /**\n     * @generated from protobuf enum value: Fireball = 0;\n     */\n    Fireball = 0,\n    /**\n     * @generated from protobuf enum value: FrostfireBolt = 1;\n     */\n    FrostfireBolt = 1,\n    /**\n     * @generated from protobuf enum value: Scorch = 2;\n     */\n    Scorch = 2\n}\n/**\n * @generated from protobuf message proto.FireMage.Options\n */\nexport interface FireMage_Options {\n    /**\n     * @generated from protobuf field: proto.MageOptions class_options = 1;\n     */\n    classOptions?: MageOptions;\n}\n/**\n * @generated from protobuf message proto.FrostMage\n */\nexport interface FrostMage {\n    /**\n     * @generated from protobuf field: proto.FrostMage.Options options = 1;\n     */\n    options?: FrostMage_Options;\n}\n/**\n * @generated from protobuf message proto.FrostMage.Rotation\n */\nexport interface FrostMage_Rotation {\n    /**\n     * @generated from protobuf field: bool use_ice_lance = 1;\n     */\n    useIceLance: boolean;\n}\n/**\n * @generated from protobuf message proto.FrostMage.Options\n */\nexport interface FrostMage_Options {\n    /**\n     * @generated from protobuf field: proto.MageOptions class_options = 1;\n     */\n    classOptions?: MageOptions;\n    /**\n     * Chance for water elemental to disobey, doing nothing rather than cast.\n     *\n     * @generated from protobuf field: double water_elemental_disobey_chance = 2;\n     */\n    waterElementalDisobeyChance: number;\n}\n/**\n * @generated from protobuf enum proto.MagePrimeGlyph\n */\nexport enum MagePrimeGlyph {\n    /**\n     * @generated from protobuf enum value: MagePrimeGlyphNone = 0;\n     */\n    MagePrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneBarrage = 45738;\n     */\n    GlyphOfArcaneBarrage = 45738,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneBlast = 44955;\n     */\n    GlyphOfArcaneBlast = 44955,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneMissiles = 42735;\n     */\n    GlyphOfArcaneMissiles = 42735,\n    /**\n     * @generated from protobuf enum value: GlyphOfConeOfCold = 42753;\n     */\n    GlyphOfConeOfCold = 42753,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeepFreeze = 45736;\n     */\n    GlyphOfDeepFreeze = 45736,\n    /**\n     * @generated from protobuf enum value: GlyphOfFireball = 42739;\n     */\n    GlyphOfFireball = 42739,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostbolt = 42742;\n     */\n    GlyphOfFrostbolt = 42742,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostfire = 44684;\n     */\n    GlyphOfFrostfire = 44684,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceLance = 42745;\n     */\n    GlyphOfIceLance = 42745,\n    /**\n     * @generated from protobuf enum value: GlyphOfLivingBomb = 63539;\n     */\n    GlyphOfLivingBomb = 63539,\n    /**\n     * @generated from protobuf enum value: GlyphOfMageArmor = 42749;\n     */\n    GlyphOfMageArmor = 42749,\n    /**\n     * @generated from protobuf enum value: GlyphOfMoltenArmor = 42751;\n     */\n    GlyphOfMoltenArmor = 42751,\n    /**\n     * @generated from protobuf enum value: GlyphOfPyroblast = 42743;\n     */\n    GlyphOfPyroblast = 42743\n}\n/**\n * @generated from protobuf enum proto.MageMajorGlyph\n */\nexport enum MageMajorGlyph {\n    /**\n     * @generated from protobuf enum value: MageMajorGlyphNone = 0;\n     */\n    MageMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcanePower = 42736;\n     */\n    GlyphOfArcanePower = 42736,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlastWave = 44920;\n     */\n    GlyphOfBlastWave = 44920,\n    /**\n     * @generated from protobuf enum value: GlyphOfBlink = 42737;\n     */\n    GlyphOfBlink = 42737,\n    /**\n     * @generated from protobuf enum value: GlyphOfDragonSBreath = 42754;\n     */\n    GlyphOfDragonSBreath = 42754,\n    /**\n     * @generated from protobuf enum value: GlyphOfEvocation = 42738;\n     */\n    GlyphOfEvocation = 42738,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostArmor = 69773;\n     */\n    GlyphOfFrostArmor = 69773,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostNova = 42741;\n     */\n    GlyphOfFrostNova = 42741,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceBarrier = 45740;\n     */\n    GlyphOfIceBarrier = 45740,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceBlock = 42744;\n     */\n    GlyphOfIceBlock = 42744,\n    /**\n     * @generated from protobuf enum value: GlyphOfIcyVeins = 42746;\n     */\n    GlyphOfIcyVeins = 42746,\n    /**\n     * @generated from protobuf enum value: GlyphOfInvisibility = 42748;\n     */\n    GlyphOfInvisibility = 42748,\n    /**\n     * @generated from protobuf enum value: GlyphOfManaShield = 50045;\n     */\n    GlyphOfManaShield = 50045,\n    /**\n     * @generated from protobuf enum value: GlyphOfPolymorph = 42752;\n     */\n    GlyphOfPolymorph = 42752,\n    /**\n     * @generated from protobuf enum value: GlyphOfSlow = 45737;\n     */\n    GlyphOfSlow = 45737\n}\n/**\n * @generated from protobuf enum proto.MageMinorGlyph\n */\nexport enum MageMinorGlyph {\n    /**\n     * @generated from protobuf enum value: MageMinorGlyphNone = 0;\n     */\n    MageMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneBrilliance = 43339;\n     */\n    GlyphOfArcaneBrilliance = 43339,\n    /**\n     * @generated from protobuf enum value: GlyphOfArmors = 63416;\n     */\n    GlyphOfArmors = 63416,\n    /**\n     * @generated from protobuf enum value: GlyphOfConjuring = 43359;\n     */\n    GlyphOfConjuring = 43359,\n    /**\n     * @generated from protobuf enum value: GlyphOfMirrorImage = 45739;\n     */\n    GlyphOfMirrorImage = 45739,\n    /**\n     * @generated from protobuf enum value: GlyphOfSlowFall = 43364;\n     */\n    GlyphOfSlowFall = 43364,\n    /**\n     * @generated from protobuf enum value: GlyphOfTheMonkey = 43360;\n     */\n    GlyphOfTheMonkey = 43360,\n    /**\n     * @generated from protobuf enum value: GlyphOfThePenguin = 43361;\n     */\n    GlyphOfThePenguin = 43361\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass MageTalents$Type extends MessageType<MageTalents> {\n    constructor() {\n        super(\"proto.MageTalents\", [\n            { no: 1, name: \"arcane_concentration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"improved_counterspell\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"netherwind_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"torment_the_weak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"invocation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"improved_arcane_missiles\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"improved_blink\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"arcane_flows\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"presence_of_mind\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"missile_barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"prismatic_cloak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"improved_polymorph\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"arcane_tactics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 14, name: \"incanters_absorption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"improved_arcane_explosion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"arcane_potency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 18, name: \"slow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"nether_vortex\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"focus_magic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"improved_mana_gem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"arcane_power\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 23, name: \"master_of_elements\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"burning_soul\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"improved_fire_blast\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"ignite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"fire_power\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"blazing_speed\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"impact\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"cauterize\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"blast_wave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 32, name: \"hot_streak\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"improved_scorch\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"molten_shields\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 35, name: \"combustion\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"improved_hot_streak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"firestarter\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"improved_flamestrike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"dragons_breath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 40, name: \"molten_fury\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"pyromaniac\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"critical_mass\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"living_bomb\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 44, name: \"early_frost\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"piercing_ice\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"shatter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"ice_floes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"improved_cone_of_cold\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"piercing_chill\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"permafrost\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"ice_shards\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"icy_veins\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 53, name: \"fingers_of_frost\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"improved_freeze\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"enduring_winter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 56, name: \"cold_snap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 57, name: \"brain_freeze\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"shattered_barrier\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"ice_barrier\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 60, name: \"reactive_barrier\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 61, name: \"frostfire_orb\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 62, name: \"deep_freeze\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<MageTalents>): MageTalents {\n        const message = { arcaneConcentration: 0, improvedCounterspell: 0, netherwindPresence: 0, tormentTheWeak: 0, invocation: 0, improvedArcaneMissiles: 0, improvedBlink: 0, arcaneFlows: 0, presenceOfMind: false, missileBarrage: 0, prismaticCloak: 0, improvedPolymorph: 0, arcaneTactics: false, incantersAbsorption: 0, improvedArcaneExplosion: 0, arcanePotency: 0, slow: false, netherVortex: 0, focusMagic: false, improvedManaGem: 0, arcanePower: false, masterOfElements: 0, burningSoul: 0, improvedFireBlast: 0, ignite: 0, firePower: 0, blazingSpeed: 0, impact: 0, cauterize: 0, blastWave: false, hotStreak: false, improvedScorch: 0, moltenShields: false, combustion: false, improvedHotStreak: 0, firestarter: false, improvedFlamestrike: 0, dragonsBreath: false, moltenFury: 0, pyromaniac: 0, criticalMass: 0, livingBomb: false, earlyFrost: 0, piercingIce: 0, shatter: 0, iceFloes: 0, improvedConeOfCold: 0, piercingChill: 0, permafrost: 0, iceShards: 0, icyVeins: false, fingersOfFrost: 0, improvedFreeze: 0, enduringWinter: 0, coldSnap: false, brainFreeze: 0, shatteredBarrier: 0, iceBarrier: false, reactiveBarrier: 0, frostfireOrb: 0, deepFreeze: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<MageTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MageTalents): MageTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 arcane_concentration */ 1:\n                    message.arcaneConcentration = reader.int32();\n                    break;\n                case /* int32 improved_counterspell */ 2:\n                    message.improvedCounterspell = reader.int32();\n                    break;\n                case /* int32 netherwind_presence */ 3:\n                    message.netherwindPresence = reader.int32();\n                    break;\n                case /* int32 torment_the_weak */ 4:\n                    message.tormentTheWeak = reader.int32();\n                    break;\n                case /* int32 invocation */ 5:\n                    message.invocation = reader.int32();\n                    break;\n                case /* int32 improved_arcane_missiles */ 6:\n                    message.improvedArcaneMissiles = reader.int32();\n                    break;\n                case /* int32 improved_blink */ 7:\n                    message.improvedBlink = reader.int32();\n                    break;\n                case /* int32 arcane_flows */ 8:\n                    message.arcaneFlows = reader.int32();\n                    break;\n                case /* bool presence_of_mind */ 9:\n                    message.presenceOfMind = reader.bool();\n                    break;\n                case /* int32 missile_barrage */ 10:\n                    message.missileBarrage = reader.int32();\n                    break;\n                case /* int32 prismatic_cloak */ 11:\n                    message.prismaticCloak = reader.int32();\n                    break;\n                case /* int32 improved_polymorph */ 12:\n                    message.improvedPolymorph = reader.int32();\n                    break;\n                case /* bool arcane_tactics */ 13:\n                    message.arcaneTactics = reader.bool();\n                    break;\n                case /* int32 incanters_absorption */ 14:\n                    message.incantersAbsorption = reader.int32();\n                    break;\n                case /* int32 improved_arcane_explosion */ 16:\n                    message.improvedArcaneExplosion = reader.int32();\n                    break;\n                case /* int32 arcane_potency */ 17:\n                    message.arcanePotency = reader.int32();\n                    break;\n                case /* bool slow */ 18:\n                    message.slow = reader.bool();\n                    break;\n                case /* int32 nether_vortex */ 19:\n                    message.netherVortex = reader.int32();\n                    break;\n                case /* bool focus_magic */ 20:\n                    message.focusMagic = reader.bool();\n                    break;\n                case /* int32 improved_mana_gem */ 21:\n                    message.improvedManaGem = reader.int32();\n                    break;\n                case /* bool arcane_power */ 22:\n                    message.arcanePower = reader.bool();\n                    break;\n                case /* int32 master_of_elements */ 23:\n                    message.masterOfElements = reader.int32();\n                    break;\n                case /* int32 burning_soul */ 24:\n                    message.burningSoul = reader.int32();\n                    break;\n                case /* int32 improved_fire_blast */ 25:\n                    message.improvedFireBlast = reader.int32();\n                    break;\n                case /* int32 ignite */ 26:\n                    message.ignite = reader.int32();\n                    break;\n                case /* int32 fire_power */ 27:\n                    message.firePower = reader.int32();\n                    break;\n                case /* int32 blazing_speed */ 28:\n                    message.blazingSpeed = reader.int32();\n                    break;\n                case /* int32 impact */ 29:\n                    message.impact = reader.int32();\n                    break;\n                case /* int32 cauterize */ 30:\n                    message.cauterize = reader.int32();\n                    break;\n                case /* bool blast_wave */ 31:\n                    message.blastWave = reader.bool();\n                    break;\n                case /* bool hot_streak */ 32:\n                    message.hotStreak = reader.bool();\n                    break;\n                case /* int32 improved_scorch */ 33:\n                    message.improvedScorch = reader.int32();\n                    break;\n                case /* bool molten_shields */ 34:\n                    message.moltenShields = reader.bool();\n                    break;\n                case /* bool combustion */ 35:\n                    message.combustion = reader.bool();\n                    break;\n                case /* int32 improved_hot_streak */ 36:\n                    message.improvedHotStreak = reader.int32();\n                    break;\n                case /* bool firestarter */ 37:\n                    message.firestarter = reader.bool();\n                    break;\n                case /* int32 improved_flamestrike */ 38:\n                    message.improvedFlamestrike = reader.int32();\n                    break;\n                case /* bool dragons_breath */ 39:\n                    message.dragonsBreath = reader.bool();\n                    break;\n                case /* int32 molten_fury */ 40:\n                    message.moltenFury = reader.int32();\n                    break;\n                case /* int32 pyromaniac */ 41:\n                    message.pyromaniac = reader.int32();\n                    break;\n                case /* int32 critical_mass */ 42:\n                    message.criticalMass = reader.int32();\n                    break;\n                case /* bool living_bomb */ 43:\n                    message.livingBomb = reader.bool();\n                    break;\n                case /* int32 early_frost */ 44:\n                    message.earlyFrost = reader.int32();\n                    break;\n                case /* int32 piercing_ice */ 45:\n                    message.piercingIce = reader.int32();\n                    break;\n                case /* int32 shatter */ 46:\n                    message.shatter = reader.int32();\n                    break;\n                case /* int32 ice_floes */ 47:\n                    message.iceFloes = reader.int32();\n                    break;\n                case /* int32 improved_cone_of_cold */ 48:\n                    message.improvedConeOfCold = reader.int32();\n                    break;\n                case /* int32 piercing_chill */ 49:\n                    message.piercingChill = reader.int32();\n                    break;\n                case /* int32 permafrost */ 50:\n                    message.permafrost = reader.int32();\n                    break;\n                case /* int32 ice_shards */ 51:\n                    message.iceShards = reader.int32();\n                    break;\n                case /* bool icy_veins */ 52:\n                    message.icyVeins = reader.bool();\n                    break;\n                case /* int32 fingers_of_frost */ 53:\n                    message.fingersOfFrost = reader.int32();\n                    break;\n                case /* int32 improved_freeze */ 54:\n                    message.improvedFreeze = reader.int32();\n                    break;\n                case /* int32 enduring_winter */ 55:\n                    message.enduringWinter = reader.int32();\n                    break;\n                case /* bool cold_snap */ 56:\n                    message.coldSnap = reader.bool();\n                    break;\n                case /* int32 brain_freeze */ 57:\n                    message.brainFreeze = reader.int32();\n                    break;\n                case /* int32 shattered_barrier */ 58:\n                    message.shatteredBarrier = reader.int32();\n                    break;\n                case /* bool ice_barrier */ 59:\n                    message.iceBarrier = reader.bool();\n                    break;\n                case /* int32 reactive_barrier */ 60:\n                    message.reactiveBarrier = reader.int32();\n                    break;\n                case /* int32 frostfire_orb */ 61:\n                    message.frostfireOrb = reader.int32();\n                    break;\n                case /* bool deep_freeze */ 62:\n                    message.deepFreeze = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MageTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 arcane_concentration = 1; */\n        if (message.arcaneConcentration !== 0)\n            writer.tag(1, WireType.Varint).int32(message.arcaneConcentration);\n        /* int32 improved_counterspell = 2; */\n        if (message.improvedCounterspell !== 0)\n            writer.tag(2, WireType.Varint).int32(message.improvedCounterspell);\n        /* int32 netherwind_presence = 3; */\n        if (message.netherwindPresence !== 0)\n            writer.tag(3, WireType.Varint).int32(message.netherwindPresence);\n        /* int32 torment_the_weak = 4; */\n        if (message.tormentTheWeak !== 0)\n            writer.tag(4, WireType.Varint).int32(message.tormentTheWeak);\n        /* int32 invocation = 5; */\n        if (message.invocation !== 0)\n            writer.tag(5, WireType.Varint).int32(message.invocation);\n        /* int32 improved_arcane_missiles = 6; */\n        if (message.improvedArcaneMissiles !== 0)\n            writer.tag(6, WireType.Varint).int32(message.improvedArcaneMissiles);\n        /* int32 improved_blink = 7; */\n        if (message.improvedBlink !== 0)\n            writer.tag(7, WireType.Varint).int32(message.improvedBlink);\n        /* int32 arcane_flows = 8; */\n        if (message.arcaneFlows !== 0)\n            writer.tag(8, WireType.Varint).int32(message.arcaneFlows);\n        /* bool presence_of_mind = 9; */\n        if (message.presenceOfMind !== false)\n            writer.tag(9, WireType.Varint).bool(message.presenceOfMind);\n        /* int32 missile_barrage = 10; */\n        if (message.missileBarrage !== 0)\n            writer.tag(10, WireType.Varint).int32(message.missileBarrage);\n        /* int32 prismatic_cloak = 11; */\n        if (message.prismaticCloak !== 0)\n            writer.tag(11, WireType.Varint).int32(message.prismaticCloak);\n        /* int32 improved_polymorph = 12; */\n        if (message.improvedPolymorph !== 0)\n            writer.tag(12, WireType.Varint).int32(message.improvedPolymorph);\n        /* bool arcane_tactics = 13; */\n        if (message.arcaneTactics !== false)\n            writer.tag(13, WireType.Varint).bool(message.arcaneTactics);\n        /* int32 incanters_absorption = 14; */\n        if (message.incantersAbsorption !== 0)\n            writer.tag(14, WireType.Varint).int32(message.incantersAbsorption);\n        /* int32 improved_arcane_explosion = 16; */\n        if (message.improvedArcaneExplosion !== 0)\n            writer.tag(16, WireType.Varint).int32(message.improvedArcaneExplosion);\n        /* int32 arcane_potency = 17; */\n        if (message.arcanePotency !== 0)\n            writer.tag(17, WireType.Varint).int32(message.arcanePotency);\n        /* bool slow = 18; */\n        if (message.slow !== false)\n            writer.tag(18, WireType.Varint).bool(message.slow);\n        /* int32 nether_vortex = 19; */\n        if (message.netherVortex !== 0)\n            writer.tag(19, WireType.Varint).int32(message.netherVortex);\n        /* bool focus_magic = 20; */\n        if (message.focusMagic !== false)\n            writer.tag(20, WireType.Varint).bool(message.focusMagic);\n        /* int32 improved_mana_gem = 21; */\n        if (message.improvedManaGem !== 0)\n            writer.tag(21, WireType.Varint).int32(message.improvedManaGem);\n        /* bool arcane_power = 22; */\n        if (message.arcanePower !== false)\n            writer.tag(22, WireType.Varint).bool(message.arcanePower);\n        /* int32 master_of_elements = 23; */\n        if (message.masterOfElements !== 0)\n            writer.tag(23, WireType.Varint).int32(message.masterOfElements);\n        /* int32 burning_soul = 24; */\n        if (message.burningSoul !== 0)\n            writer.tag(24, WireType.Varint).int32(message.burningSoul);\n        /* int32 improved_fire_blast = 25; */\n        if (message.improvedFireBlast !== 0)\n            writer.tag(25, WireType.Varint).int32(message.improvedFireBlast);\n        /* int32 ignite = 26; */\n        if (message.ignite !== 0)\n            writer.tag(26, WireType.Varint).int32(message.ignite);\n        /* int32 fire_power = 27; */\n        if (message.firePower !== 0)\n            writer.tag(27, WireType.Varint).int32(message.firePower);\n        /* int32 blazing_speed = 28; */\n        if (message.blazingSpeed !== 0)\n            writer.tag(28, WireType.Varint).int32(message.blazingSpeed);\n        /* int32 impact = 29; */\n        if (message.impact !== 0)\n            writer.tag(29, WireType.Varint).int32(message.impact);\n        /* int32 cauterize = 30; */\n        if (message.cauterize !== 0)\n            writer.tag(30, WireType.Varint).int32(message.cauterize);\n        /* bool blast_wave = 31; */\n        if (message.blastWave !== false)\n            writer.tag(31, WireType.Varint).bool(message.blastWave);\n        /* bool hot_streak = 32; */\n        if (message.hotStreak !== false)\n            writer.tag(32, WireType.Varint).bool(message.hotStreak);\n        /* int32 improved_scorch = 33; */\n        if (message.improvedScorch !== 0)\n            writer.tag(33, WireType.Varint).int32(message.improvedScorch);\n        /* bool molten_shields = 34; */\n        if (message.moltenShields !== false)\n            writer.tag(34, WireType.Varint).bool(message.moltenShields);\n        /* bool combustion = 35; */\n        if (message.combustion !== false)\n            writer.tag(35, WireType.Varint).bool(message.combustion);\n        /* int32 improved_hot_streak = 36; */\n        if (message.improvedHotStreak !== 0)\n            writer.tag(36, WireType.Varint).int32(message.improvedHotStreak);\n        /* bool firestarter = 37; */\n        if (message.firestarter !== false)\n            writer.tag(37, WireType.Varint).bool(message.firestarter);\n        /* int32 improved_flamestrike = 38; */\n        if (message.improvedFlamestrike !== 0)\n            writer.tag(38, WireType.Varint).int32(message.improvedFlamestrike);\n        /* bool dragons_breath = 39; */\n        if (message.dragonsBreath !== false)\n            writer.tag(39, WireType.Varint).bool(message.dragonsBreath);\n        /* int32 molten_fury = 40; */\n        if (message.moltenFury !== 0)\n            writer.tag(40, WireType.Varint).int32(message.moltenFury);\n        /* int32 pyromaniac = 41; */\n        if (message.pyromaniac !== 0)\n            writer.tag(41, WireType.Varint).int32(message.pyromaniac);\n        /* int32 critical_mass = 42; */\n        if (message.criticalMass !== 0)\n            writer.tag(42, WireType.Varint).int32(message.criticalMass);\n        /* bool living_bomb = 43; */\n        if (message.livingBomb !== false)\n            writer.tag(43, WireType.Varint).bool(message.livingBomb);\n        /* int32 early_frost = 44; */\n        if (message.earlyFrost !== 0)\n            writer.tag(44, WireType.Varint).int32(message.earlyFrost);\n        /* int32 piercing_ice = 45; */\n        if (message.piercingIce !== 0)\n            writer.tag(45, WireType.Varint).int32(message.piercingIce);\n        /* int32 shatter = 46; */\n        if (message.shatter !== 0)\n            writer.tag(46, WireType.Varint).int32(message.shatter);\n        /* int32 ice_floes = 47; */\n        if (message.iceFloes !== 0)\n            writer.tag(47, WireType.Varint).int32(message.iceFloes);\n        /* int32 improved_cone_of_cold = 48; */\n        if (message.improvedConeOfCold !== 0)\n            writer.tag(48, WireType.Varint).int32(message.improvedConeOfCold);\n        /* int32 piercing_chill = 49; */\n        if (message.piercingChill !== 0)\n            writer.tag(49, WireType.Varint).int32(message.piercingChill);\n        /* int32 permafrost = 50; */\n        if (message.permafrost !== 0)\n            writer.tag(50, WireType.Varint).int32(message.permafrost);\n        /* int32 ice_shards = 51; */\n        if (message.iceShards !== 0)\n            writer.tag(51, WireType.Varint).int32(message.iceShards);\n        /* bool icy_veins = 52; */\n        if (message.icyVeins !== false)\n            writer.tag(52, WireType.Varint).bool(message.icyVeins);\n        /* int32 fingers_of_frost = 53; */\n        if (message.fingersOfFrost !== 0)\n            writer.tag(53, WireType.Varint).int32(message.fingersOfFrost);\n        /* int32 improved_freeze = 54; */\n        if (message.improvedFreeze !== 0)\n            writer.tag(54, WireType.Varint).int32(message.improvedFreeze);\n        /* int32 enduring_winter = 55; */\n        if (message.enduringWinter !== 0)\n            writer.tag(55, WireType.Varint).int32(message.enduringWinter);\n        /* bool cold_snap = 56; */\n        if (message.coldSnap !== false)\n            writer.tag(56, WireType.Varint).bool(message.coldSnap);\n        /* int32 brain_freeze = 57; */\n        if (message.brainFreeze !== 0)\n            writer.tag(57, WireType.Varint).int32(message.brainFreeze);\n        /* int32 shattered_barrier = 58; */\n        if (message.shatteredBarrier !== 0)\n            writer.tag(58, WireType.Varint).int32(message.shatteredBarrier);\n        /* bool ice_barrier = 59; */\n        if (message.iceBarrier !== false)\n            writer.tag(59, WireType.Varint).bool(message.iceBarrier);\n        /* int32 reactive_barrier = 60; */\n        if (message.reactiveBarrier !== 0)\n            writer.tag(60, WireType.Varint).int32(message.reactiveBarrier);\n        /* int32 frostfire_orb = 61; */\n        if (message.frostfireOrb !== 0)\n            writer.tag(61, WireType.Varint).int32(message.frostfireOrb);\n        /* bool deep_freeze = 62; */\n        if (message.deepFreeze !== false)\n            writer.tag(62, WireType.Varint).bool(message.deepFreeze);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.MageTalents\n */\nexport const MageTalents = new MageTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MageOptions$Type extends MessageType<MageOptions> {\n    constructor() {\n        super(\"proto.MageOptions\", [\n            { no: 1, name: \"armor\", kind: \"enum\", T: () => [\"proto.MageOptions.ArmorType\", MageOptions_ArmorType] }\n        ]);\n    }\n    create(value?: PartialMessage<MageOptions>): MageOptions {\n        const message = { armor: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<MageOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MageOptions): MageOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.MageOptions.ArmorType armor */ 1:\n                    message.armor = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MageOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.MageOptions.ArmorType armor = 1; */\n        if (message.armor !== 0)\n            writer.tag(1, WireType.Varint).int32(message.armor);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.MageOptions\n */\nexport const MageOptions = new MageOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArcaneMage$Type extends MessageType<ArcaneMage> {\n    constructor() {\n        super(\"proto.ArcaneMage\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => ArcaneMage_Options }\n        ]);\n    }\n    create(value?: PartialMessage<ArcaneMage>): ArcaneMage {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ArcaneMage>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArcaneMage): ArcaneMage {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ArcaneMage.Options options */ 1:\n                    message.options = ArcaneMage_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ArcaneMage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ArcaneMage.Options options = 1; */\n        if (message.options)\n            ArcaneMage_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ArcaneMage\n */\nexport const ArcaneMage = new ArcaneMage$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArcaneMage_Rotation$Type extends MessageType<ArcaneMage_Rotation> {\n    constructor() {\n        super(\"proto.ArcaneMage.Rotation\", [\n            { no: 1, name: \"missile_barrage_below_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"blast_without_missile_barrage_above_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"only_3_arcane_blast_stacks_below_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"use_arcane_barrage\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ArcaneMage_Rotation>): ArcaneMage_Rotation {\n        const message = { missileBarrageBelowManaPercent: 0, blastWithoutMissileBarrageAboveManaPercent: 0, only3ArcaneBlastStacksBelowManaPercent: 0, useArcaneBarrage: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ArcaneMage_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArcaneMage_Rotation): ArcaneMage_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double missile_barrage_below_mana_percent */ 1:\n                    message.missileBarrageBelowManaPercent = reader.double();\n                    break;\n                case /* double blast_without_missile_barrage_above_mana_percent */ 2:\n                    message.blastWithoutMissileBarrageAboveManaPercent = reader.double();\n                    break;\n                case /* double only_3_arcane_blast_stacks_below_mana_percent */ 3:\n                    message.only3ArcaneBlastStacksBelowManaPercent = reader.double();\n                    break;\n                case /* bool use_arcane_barrage */ 4:\n                    message.useArcaneBarrage = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ArcaneMage_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double missile_barrage_below_mana_percent = 1; */\n        if (message.missileBarrageBelowManaPercent !== 0)\n            writer.tag(1, WireType.Bit64).double(message.missileBarrageBelowManaPercent);\n        /* double blast_without_missile_barrage_above_mana_percent = 2; */\n        if (message.blastWithoutMissileBarrageAboveManaPercent !== 0)\n            writer.tag(2, WireType.Bit64).double(message.blastWithoutMissileBarrageAboveManaPercent);\n        /* double only_3_arcane_blast_stacks_below_mana_percent = 3; */\n        if (message.only3ArcaneBlastStacksBelowManaPercent !== 0)\n            writer.tag(3, WireType.Bit64).double(message.only3ArcaneBlastStacksBelowManaPercent);\n        /* bool use_arcane_barrage = 4; */\n        if (message.useArcaneBarrage !== false)\n            writer.tag(4, WireType.Varint).bool(message.useArcaneBarrage);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ArcaneMage.Rotation\n */\nexport const ArcaneMage_Rotation = new ArcaneMage_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ArcaneMage_Options$Type extends MessageType<ArcaneMage_Options> {\n    constructor() {\n        super(\"proto.ArcaneMage.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => MageOptions },\n            { no: 2, name: \"focus_magic_percent_uptime\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"focus_magic_target\", kind: \"message\", T: () => UnitReference }\n        ]);\n    }\n    create(value?: PartialMessage<ArcaneMage_Options>): ArcaneMage_Options {\n        const message = { focusMagicPercentUptime: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ArcaneMage_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ArcaneMage_Options): ArcaneMage_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.MageOptions class_options */ 1:\n                    message.classOptions = MageOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* int32 focus_magic_percent_uptime */ 2:\n                    message.focusMagicPercentUptime = reader.int32();\n                    break;\n                case /* proto.UnitReference focus_magic_target */ 3:\n                    message.focusMagicTarget = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.focusMagicTarget);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ArcaneMage_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.MageOptions class_options = 1; */\n        if (message.classOptions)\n            MageOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 focus_magic_percent_uptime = 2; */\n        if (message.focusMagicPercentUptime !== 0)\n            writer.tag(2, WireType.Varint).int32(message.focusMagicPercentUptime);\n        /* proto.UnitReference focus_magic_target = 3; */\n        if (message.focusMagicTarget)\n            UnitReference.internalBinaryWrite(message.focusMagicTarget, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ArcaneMage.Options\n */\nexport const ArcaneMage_Options = new ArcaneMage_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FireMage$Type extends MessageType<FireMage> {\n    constructor() {\n        super(\"proto.FireMage\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => FireMage_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FireMage>): FireMage {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FireMage>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FireMage): FireMage {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FireMage.Options options */ 1:\n                    message.options = FireMage_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FireMage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FireMage.Options options = 1; */\n        if (message.options)\n            FireMage_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FireMage\n */\nexport const FireMage = new FireMage$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FireMage_Rotation$Type extends MessageType<FireMage_Rotation> {\n    constructor() {\n        super(\"proto.FireMage.Rotation\", [\n            { no: 1, name: \"primary_fire_spell\", kind: \"enum\", T: () => [\"proto.FireMage.Rotation.PrimaryFireSpell\", FireMage_Rotation_PrimaryFireSpell] },\n            { no: 2, name: \"maintain_improved_scorch\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FireMage_Rotation>): FireMage_Rotation {\n        const message = { primaryFireSpell: 0, maintainImprovedScorch: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FireMage_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FireMage_Rotation): FireMage_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FireMage.Rotation.PrimaryFireSpell primary_fire_spell */ 1:\n                    message.primaryFireSpell = reader.int32();\n                    break;\n                case /* bool maintain_improved_scorch */ 2:\n                    message.maintainImprovedScorch = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FireMage_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FireMage.Rotation.PrimaryFireSpell primary_fire_spell = 1; */\n        if (message.primaryFireSpell !== 0)\n            writer.tag(1, WireType.Varint).int32(message.primaryFireSpell);\n        /* bool maintain_improved_scorch = 2; */\n        if (message.maintainImprovedScorch !== false)\n            writer.tag(2, WireType.Varint).bool(message.maintainImprovedScorch);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FireMage.Rotation\n */\nexport const FireMage_Rotation = new FireMage_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FireMage_Options$Type extends MessageType<FireMage_Options> {\n    constructor() {\n        super(\"proto.FireMage.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => MageOptions }\n        ]);\n    }\n    create(value?: PartialMessage<FireMage_Options>): FireMage_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FireMage_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FireMage_Options): FireMage_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.MageOptions class_options */ 1:\n                    message.classOptions = MageOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FireMage_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.MageOptions class_options = 1; */\n        if (message.classOptions)\n            MageOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FireMage.Options\n */\nexport const FireMage_Options = new FireMage_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FrostMage$Type extends MessageType<FrostMage> {\n    constructor() {\n        super(\"proto.FrostMage\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => FrostMage_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FrostMage>): FrostMage {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FrostMage>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FrostMage): FrostMage {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FrostMage.Options options */ 1:\n                    message.options = FrostMage_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FrostMage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FrostMage.Options options = 1; */\n        if (message.options)\n            FrostMage_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FrostMage\n */\nexport const FrostMage = new FrostMage$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FrostMage_Rotation$Type extends MessageType<FrostMage_Rotation> {\n    constructor() {\n        super(\"proto.FrostMage.Rotation\", [\n            { no: 1, name: \"use_ice_lance\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FrostMage_Rotation>): FrostMage_Rotation {\n        const message = { useIceLance: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FrostMage_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FrostMage_Rotation): FrostMage_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* bool use_ice_lance */ 1:\n                    message.useIceLance = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FrostMage_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* bool use_ice_lance = 1; */\n        if (message.useIceLance !== false)\n            writer.tag(1, WireType.Varint).bool(message.useIceLance);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FrostMage.Rotation\n */\nexport const FrostMage_Rotation = new FrostMage_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FrostMage_Options$Type extends MessageType<FrostMage_Options> {\n    constructor() {\n        super(\"proto.FrostMage.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => MageOptions },\n            { no: 2, name: \"water_elemental_disobey_chance\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FrostMage_Options>): FrostMage_Options {\n        const message = { waterElementalDisobeyChance: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FrostMage_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FrostMage_Options): FrostMage_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.MageOptions class_options */ 1:\n                    message.classOptions = MageOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* double water_elemental_disobey_chance */ 2:\n                    message.waterElementalDisobeyChance = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FrostMage_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.MageOptions class_options = 1; */\n        if (message.classOptions)\n            MageOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double water_elemental_disobey_chance = 2; */\n        if (message.waterElementalDisobeyChance !== 0)\n            writer.tag(2, WireType.Bit64).double(message.waterElementalDisobeyChance);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FrostMage.Options\n */\nexport const FrostMage_Options = new FrostMage_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"hunter.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RotationType } from \"./common\";\n/**\n * @generated from protobuf message proto.HunterTalents\n */\nexport interface HunterTalents {\n    /**\n     * Beast Mastery\n     *\n     * @generated from protobuf field: int32 improved_kill_command = 1;\n     */\n    improvedKillCommand: number;\n    /**\n     * @generated from protobuf field: int32 one_with_nature = 2;\n     */\n    oneWithNature: number;\n    /**\n     * @generated from protobuf field: int32 bestial_discipline = 3;\n     */\n    bestialDiscipline: number;\n    /**\n     * @generated from protobuf field: int32 pathfinding = 4;\n     */\n    pathfinding: number;\n    /**\n     * @generated from protobuf field: int32 spirit_bond = 5;\n     */\n    spiritBond: number;\n    /**\n     * @generated from protobuf field: int32 frenzy = 6;\n     */\n    frenzy: number;\n    /**\n     * @generated from protobuf field: int32 improved_mend_pet = 7;\n     */\n    improvedMendPet: number;\n    /**\n     * @generated from protobuf field: int32 cobra_strikes = 8;\n     */\n    cobraStrikes: number;\n    /**\n     * @generated from protobuf field: bool fervor = 9;\n     */\n    fervor: boolean;\n    /**\n     * @generated from protobuf field: bool focus_fire = 10;\n     */\n    focusFire: boolean;\n    /**\n     * @generated from protobuf field: int32 longevity = 11;\n     */\n    longevity: number;\n    /**\n     * @generated from protobuf field: int32 killing_streak = 12;\n     */\n    killingStreak: number;\n    /**\n     * @generated from protobuf field: int32 crouching_tiger_hidden_chimera = 13;\n     */\n    crouchingTigerHiddenChimera: number;\n    /**\n     * @generated from protobuf field: bool bestial_wrath = 14;\n     */\n    bestialWrath: boolean;\n    /**\n     * @generated from protobuf field: bool ferocious_inspiration = 15;\n     */\n    ferociousInspiration: boolean;\n    /**\n     * @generated from protobuf field: int32 kindred_spirits = 16;\n     */\n    kindredSpirits: number;\n    /**\n     * @generated from protobuf field: bool the_beast_within = 17;\n     */\n    theBeastWithin: boolean;\n    /**\n     * @generated from protobuf field: int32 invigoration = 18;\n     */\n    invigoration: number;\n    /**\n     * @generated from protobuf field: bool beast_mastery = 19;\n     */\n    beastMastery: boolean;\n    /**\n     * Marksmanship\n     *\n     * @generated from protobuf field: int32 go_for_the_throat = 20;\n     */\n    goForTheThroat: number;\n    /**\n     * @generated from protobuf field: int32 efficiency = 21;\n     */\n    efficiency: number;\n    /**\n     * @generated from protobuf field: int32 rapid_killing = 22;\n     */\n    rapidKilling: number;\n    /**\n     * @generated from protobuf field: int32 sic_em = 23;\n     */\n    sicEm: number;\n    /**\n     * @generated from protobuf field: int32 improved_steady_shot = 24;\n     */\n    improvedSteadyShot: number;\n    /**\n     * @generated from protobuf field: int32 careful_aim = 25;\n     */\n    carefulAim: number;\n    /**\n     * @generated from protobuf field: bool silencing_shot = 26;\n     */\n    silencingShot: boolean;\n    /**\n     * @generated from protobuf field: int32 concussive_barrage = 27;\n     */\n    concussiveBarrage: number;\n    /**\n     * @generated from protobuf field: int32 piercing_shots = 28;\n     */\n    piercingShots: number;\n    /**\n     * @generated from protobuf field: int32 bombardment = 29;\n     */\n    bombardment: number;\n    /**\n     * @generated from protobuf field: bool trueshot_aura = 30;\n     */\n    trueshotAura: boolean;\n    /**\n     * @generated from protobuf field: int32 termination = 31;\n     */\n    termination: number;\n    /**\n     * @generated from protobuf field: int32 resistance_is_futile = 32;\n     */\n    resistanceIsFutile: number;\n    /**\n     * @generated from protobuf field: int32 rapid_recuperation = 33;\n     */\n    rapidRecuperation: number;\n    /**\n     * @generated from protobuf field: int32 master_marksman = 34;\n     */\n    masterMarksman: number;\n    /**\n     * @generated from protobuf field: bool readiness = 35;\n     */\n    readiness: boolean;\n    /**\n     * @generated from protobuf field: int32 posthaste = 36;\n     */\n    posthaste: number;\n    /**\n     * @generated from protobuf field: int32 marked_for_death = 37;\n     */\n    markedForDeath: number;\n    /**\n     * @generated from protobuf field: bool chimera_shot = 38;\n     */\n    chimeraShot: boolean;\n    /**\n     * Survival\n     *\n     * @generated from protobuf field: int32 hunter_vs_wild = 39;\n     */\n    hunterVsWild: number;\n    /**\n     * @generated from protobuf field: int32 pathing = 40;\n     */\n    pathing: number;\n    /**\n     * @generated from protobuf field: int32 improved_serpent_sting = 41;\n     */\n    improvedSerpentSting: number;\n    /**\n     * @generated from protobuf field: int32 survival_tactics = 42;\n     */\n    survivalTactics: number;\n    /**\n     * @generated from protobuf field: int32 trap_mastery = 43;\n     */\n    trapMastery: number;\n    /**\n     * @generated from protobuf field: int32 entrapment = 44;\n     */\n    entrapment: number;\n    /**\n     * @generated from protobuf field: int32 point_of_no_escape = 45;\n     */\n    pointOfNoEscape: number;\n    /**\n     * @generated from protobuf field: int32 thrill_of_the_hunt = 46;\n     */\n    thrillOfTheHunt: number;\n    /**\n     * @generated from protobuf field: bool counterattack = 47;\n     */\n    counterattack: boolean;\n    /**\n     * @generated from protobuf field: int32 lock_and_load = 48;\n     */\n    lockAndLoad: number;\n    /**\n     * @generated from protobuf field: int32 resourcefulness = 49;\n     */\n    resourcefulness: number;\n    /**\n     * @generated from protobuf field: int32 mirrored_blades = 50;\n     */\n    mirroredBlades: number;\n    /**\n     * @generated from protobuf field: int32 t_n_t = 51;\n     */\n    tNT: number;\n    /**\n     * @generated from protobuf field: int32 toxicology = 52;\n     */\n    toxicology: number;\n    /**\n     * @generated from protobuf field: bool wyvern_sting = 53;\n     */\n    wyvernSting: boolean;\n    /**\n     * @generated from protobuf field: int32 noxious_stings = 54;\n     */\n    noxiousStings: number;\n    /**\n     * @generated from protobuf field: bool hunting_party = 55;\n     */\n    huntingParty: boolean;\n    /**\n     * @generated from protobuf field: int32 sniper_training = 56;\n     */\n    sniperTraining: number;\n    /**\n     * @generated from protobuf field: int32 serpent_spread = 57;\n     */\n    serpentSpread: number;\n    /**\n     * @generated from protobuf field: bool black_arrow = 58;\n     */\n    blackArrow: boolean;\n}\n/**\n * @generated from protobuf message proto.HunterPetTalents\n */\nexport interface HunterPetTalents {\n    /**\n     * Ferocity\n     *\n     * @generated from protobuf field: int32 serpent_swiftness = 1;\n     */\n    serpentSwiftness: number;\n    /**\n     * @generated from protobuf field: bool dash = 2;\n     */\n    dash: boolean;\n    /**\n     * @generated from protobuf field: int32 great_stamina = 3;\n     */\n    greatStamina: number;\n    /**\n     * @generated from protobuf field: int32 natural_armor = 4;\n     */\n    naturalArmor: number;\n    /**\n     * @generated from protobuf field: int32 improved_cower = 5;\n     */\n    improvedCower: number;\n    /**\n     * @generated from protobuf field: int32 bloodthirsty = 6;\n     */\n    bloodthirsty: number;\n    /**\n     * @generated from protobuf field: int32 spiked_collar = 7;\n     */\n    spikedCollar: number;\n    /**\n     * @generated from protobuf field: bool boars_speed = 8;\n     */\n    boarsSpeed: boolean;\n    /**\n     * @generated from protobuf field: int32 culling_the_herd = 9;\n     */\n    cullingTheHerd: number;\n    /**\n     * @generated from protobuf field: int32 lionhearted = 10;\n     */\n    lionhearted: number;\n    /**\n     * @generated from protobuf field: bool charge = 11;\n     */\n    charge: boolean;\n    /**\n     * @generated from protobuf field: bool heart_of_the_phoenix = 12;\n     */\n    heartOfThePhoenix: boolean;\n    /**\n     * @generated from protobuf field: int32 spiders_bite = 13;\n     */\n    spidersBite: number;\n    /**\n     * @generated from protobuf field: int32 great_resistance = 14;\n     */\n    greatResistance: number;\n    /**\n     * @generated from protobuf field: bool rabid = 15;\n     */\n    rabid: boolean;\n    /**\n     * @generated from protobuf field: bool lick_your_wounds = 16;\n     */\n    lickYourWounds: boolean;\n    /**\n     * @generated from protobuf field: bool call_of_the_wild = 17;\n     */\n    callOfTheWild: boolean;\n    /**\n     * @generated from protobuf field: int32 shark_attack = 18;\n     */\n    sharkAttack: number;\n    /**\n     * @generated from protobuf field: int32 wild_hunt = 19;\n     */\n    wildHunt: number;\n    /**\n     * Tenacity\n     *\n     * @generated from protobuf field: int32 blood_of_the_rhino = 20;\n     */\n    bloodOfTheRhino: number;\n    /**\n     * @generated from protobuf field: int32 pet_barding = 21;\n     */\n    petBarding: number;\n    /**\n     * @generated from protobuf field: int32 guard_dog = 22;\n     */\n    guardDog: number;\n    /**\n     * @generated from protobuf field: bool thunderstomp = 23;\n     */\n    thunderstomp: boolean;\n    /**\n     * @generated from protobuf field: int32 grace_of_the_mantis = 24;\n     */\n    graceOfTheMantis: number;\n    /**\n     * @generated from protobuf field: bool last_stand = 25;\n     */\n    lastStand: boolean;\n    /**\n     * @generated from protobuf field: bool taunt = 26;\n     */\n    taunt: boolean;\n    /**\n     * @generated from protobuf field: bool roar_of_sacrifice = 27;\n     */\n    roarOfSacrifice: boolean;\n    /**\n     * @generated from protobuf field: bool intervene = 28;\n     */\n    intervene: boolean;\n    /**\n     * @generated from protobuf field: int32 silverback = 29;\n     */\n    silverback: number;\n    /**\n     * Cunning\n     *\n     * @generated from protobuf field: bool dive = 30;\n     */\n    dive: boolean;\n    /**\n     * @generated from protobuf field: int32 mobility = 31;\n     */\n    mobility: number;\n    /**\n     * @generated from protobuf field: int32 owls_focus = 32;\n     */\n    owlsFocus: number;\n    /**\n     * @generated from protobuf field: bool carrion_feeder = 33;\n     */\n    carrionFeeder: boolean;\n    /**\n     * @generated from protobuf field: int32 cornered = 34;\n     */\n    cornered: number;\n    /**\n     * @generated from protobuf field: int32 feeding_frenzy = 35;\n     */\n    feedingFrenzy: number;\n    /**\n     * @generated from protobuf field: bool wolverine_bite = 36;\n     */\n    wolverineBite: boolean;\n    /**\n     * @generated from protobuf field: bool roar_of_recovery = 37;\n     */\n    roarOfRecovery: boolean;\n    /**\n     * @generated from protobuf field: bool bullheaded = 38;\n     */\n    bullheaded: boolean;\n}\n/**\n * @generated from protobuf message proto.HunterOptions\n */\nexport interface HunterOptions {\n    /**\n     * @generated from protobuf field: proto.HunterOptions.Ammo ammo = 1;\n     */\n    ammo: HunterOptions_Ammo;\n    /**\n     * @generated from protobuf field: proto.HunterOptions.PetType pet_type = 2;\n     */\n    petType: HunterOptions_PetType;\n    /**\n     * @generated from protobuf field: proto.HunterPetTalents pet_talents = 3;\n     */\n    petTalents?: HunterPetTalents;\n    /**\n     * @generated from protobuf field: double pet_uptime = 4;\n     */\n    petUptime: number;\n    /**\n     * @generated from protobuf field: double time_to_trap_weave_ms = 5;\n     */\n    timeToTrapWeaveMs: number;\n    /**\n     * @generated from protobuf field: bool use_hunters_mark = 6;\n     */\n    useHuntersMark: boolean;\n}\n/**\n * @generated from protobuf enum proto.HunterOptions.Ammo\n */\nexport enum HunterOptions_Ammo {\n    /**\n     * @generated from protobuf enum value: AmmoNone = 0;\n     */\n    AmmoNone = 0,\n    /**\n     * @generated from protobuf enum value: IcebladeArrow = 1;\n     */\n    IcebladeArrow = 1,\n    /**\n     * @generated from protobuf enum value: SaroniteRazorheads = 2;\n     */\n    SaroniteRazorheads = 2,\n    /**\n     * @generated from protobuf enum value: TerrorshaftArrow = 3;\n     */\n    TerrorshaftArrow = 3,\n    /**\n     * @generated from protobuf enum value: TimelessArrow = 4;\n     */\n    TimelessArrow = 4,\n    /**\n     * @generated from protobuf enum value: MysteriousArrow = 5;\n     */\n    MysteriousArrow = 5,\n    /**\n     * @generated from protobuf enum value: AdamantiteStinger = 6;\n     */\n    AdamantiteStinger = 6,\n    /**\n     * @generated from protobuf enum value: BlackflightArrow = 7;\n     */\n    BlackflightArrow = 7\n}\n/**\n * @generated from protobuf enum proto.HunterOptions.PetType\n */\nexport enum HunterOptions_PetType {\n    /**\n     * @generated from protobuf enum value: PetNone = 0;\n     */\n    PetNone = 0,\n    /**\n     * @generated from protobuf enum value: Bat = 1;\n     */\n    Bat = 1,\n    /**\n     * @generated from protobuf enum value: Bear = 2;\n     */\n    Bear = 2,\n    /**\n     * @generated from protobuf enum value: BirdOfPrey = 3;\n     */\n    BirdOfPrey = 3,\n    /**\n     * @generated from protobuf enum value: Boar = 4;\n     */\n    Boar = 4,\n    /**\n     * @generated from protobuf enum value: CarrionBird = 5;\n     */\n    CarrionBird = 5,\n    /**\n     * @generated from protobuf enum value: Cat = 6;\n     */\n    Cat = 6,\n    /**\n     * @generated from protobuf enum value: Chimaera = 7;\n     */\n    Chimaera = 7,\n    /**\n     * @generated from protobuf enum value: CoreHound = 8;\n     */\n    CoreHound = 8,\n    /**\n     * @generated from protobuf enum value: Crab = 9;\n     */\n    Crab = 9,\n    /**\n     * @generated from protobuf enum value: Crocolisk = 10;\n     */\n    Crocolisk = 10,\n    /**\n     * @generated from protobuf enum value: Devilsaur = 11;\n     */\n    Devilsaur = 11,\n    /**\n     * @generated from protobuf enum value: Dragonhawk = 12;\n     */\n    Dragonhawk = 12,\n    /**\n     * @generated from protobuf enum value: Gorilla = 13;\n     */\n    Gorilla = 13,\n    /**\n     * @generated from protobuf enum value: Hyena = 14;\n     */\n    Hyena = 14,\n    /**\n     * @generated from protobuf enum value: Moth = 15;\n     */\n    Moth = 15,\n    /**\n     * @generated from protobuf enum value: NetherRay = 16;\n     */\n    NetherRay = 16,\n    /**\n     * @generated from protobuf enum value: Raptor = 17;\n     */\n    Raptor = 17,\n    /**\n     * @generated from protobuf enum value: Ravager = 18;\n     */\n    Ravager = 18,\n    /**\n     * @generated from protobuf enum value: Rhino = 19;\n     */\n    Rhino = 19,\n    /**\n     * @generated from protobuf enum value: Scorpid = 20;\n     */\n    Scorpid = 20,\n    /**\n     * @generated from protobuf enum value: Serpent = 21;\n     */\n    Serpent = 21,\n    /**\n     * @generated from protobuf enum value: Silithid = 22;\n     */\n    Silithid = 22,\n    /**\n     * @generated from protobuf enum value: Spider = 23;\n     */\n    Spider = 23,\n    /**\n     * @generated from protobuf enum value: SpiritBeast = 24;\n     */\n    SpiritBeast = 24,\n    /**\n     * @generated from protobuf enum value: SporeBat = 25;\n     */\n    SporeBat = 25,\n    /**\n     * @generated from protobuf enum value: Tallstrider = 26;\n     */\n    Tallstrider = 26,\n    /**\n     * @generated from protobuf enum value: Turtle = 27;\n     */\n    Turtle = 27,\n    /**\n     * @generated from protobuf enum value: WarpStalker = 28;\n     */\n    WarpStalker = 28,\n    /**\n     * @generated from protobuf enum value: Wasp = 29;\n     */\n    Wasp = 29,\n    /**\n     * @generated from protobuf enum value: WindSerpent = 30;\n     */\n    WindSerpent = 30,\n    /**\n     * @generated from protobuf enum value: Wolf = 31;\n     */\n    Wolf = 31,\n    /**\n     * @generated from protobuf enum value: Worm = 32;\n     */\n    Worm = 32\n}\n/**\n * @generated from protobuf message proto.BeastMasteryHunter\n */\nexport interface BeastMasteryHunter {\n    /**\n     * @generated from protobuf field: proto.BeastMasteryHunter.Options options = 1;\n     */\n    options?: BeastMasteryHunter_Options;\n}\n/**\n * @generated from protobuf message proto.BeastMasteryHunter.Rotation\n */\nexport interface BeastMasteryHunter_Rotation {\n    /**\n     * @generated from protobuf field: proto.RotationType type = 9;\n     */\n    type: RotationType;\n    /**\n     * @generated from protobuf field: proto.HunterStingType sting = 5;\n     */\n    sting: HunterStingType;\n    /**\n     * @generated from protobuf field: bool trap_weave = 1;\n     */\n    trapWeave: boolean;\n    /**\n     * Switch to Aspect of the Viper when mana goes below this percent.\n     *\n     * @generated from protobuf field: double viper_start_mana_percent = 6;\n     */\n    viperStartManaPercent: number;\n    /**\n     * Switch back to Aspect of the Hawk when mana goes above this percent.\n     *\n     * @generated from protobuf field: double viper_stop_mana_percent = 7;\n     */\n    viperStopManaPercent: number;\n    /**\n     * Allow use of Explosive Shot Rank 3 during LNL procs.\n     *\n     * @generated from protobuf field: bool allow_explosive_shot_downrank = 10;\n     */\n    allowExplosiveShotDownrank: boolean;\n    /**\n     * @generated from protobuf field: bool multi_dot_serpent_sting = 11;\n     */\n    multiDotSerpentSting: boolean;\n}\n/**\n * @generated from protobuf message proto.BeastMasteryHunter.Options\n */\nexport interface BeastMasteryHunter_Options {\n    /**\n     * @generated from protobuf field: proto.HunterOptions class_options = 1;\n     */\n    classOptions?: HunterOptions;\n}\n/**\n * @generated from protobuf message proto.MarksmanshipHunter\n */\nexport interface MarksmanshipHunter {\n    /**\n     * @generated from protobuf field: proto.MarksmanshipHunter.Options options = 1;\n     */\n    options?: MarksmanshipHunter_Options;\n}\n/**\n * @generated from protobuf message proto.MarksmanshipHunter.Rotation\n */\nexport interface MarksmanshipHunter_Rotation {\n    /**\n     * @generated from protobuf field: proto.RotationType type = 9;\n     */\n    type: RotationType;\n    /**\n     * @generated from protobuf field: proto.HunterStingType sting = 5;\n     */\n    sting: HunterStingType;\n    /**\n     * @generated from protobuf field: bool trap_weave = 1;\n     */\n    trapWeave: boolean;\n    /**\n     * Switch to Aspect of the Viper when mana goes below this percent.\n     *\n     * @generated from protobuf field: double viper_start_mana_percent = 6;\n     */\n    viperStartManaPercent: number;\n    /**\n     * Switch back to Aspect of the Hawk when mana goes above this percent.\n     *\n     * @generated from protobuf field: double viper_stop_mana_percent = 7;\n     */\n    viperStopManaPercent: number;\n    /**\n     * Allow use of Explosive Shot Rank 3 during LNL procs.\n     *\n     * @generated from protobuf field: bool allow_explosive_shot_downrank = 10;\n     */\n    allowExplosiveShotDownrank: boolean;\n    /**\n     * @generated from protobuf field: bool multi_dot_serpent_sting = 11;\n     */\n    multiDotSerpentSting: boolean;\n}\n/**\n * @generated from protobuf message proto.MarksmanshipHunter.Options\n */\nexport interface MarksmanshipHunter_Options {\n    /**\n     * @generated from protobuf field: proto.HunterOptions class_options = 1;\n     */\n    classOptions?: HunterOptions;\n}\n/**\n * @generated from protobuf message proto.SurvivalHunter\n */\nexport interface SurvivalHunter {\n    /**\n     * @generated from protobuf field: proto.SurvivalHunter.Options options = 1;\n     */\n    options?: SurvivalHunter_Options;\n}\n/**\n * @generated from protobuf message proto.SurvivalHunter.Rotation\n */\nexport interface SurvivalHunter_Rotation {\n    /**\n     * @generated from protobuf field: proto.RotationType type = 9;\n     */\n    type: RotationType;\n    /**\n     * @generated from protobuf field: proto.HunterStingType sting = 5;\n     */\n    sting: HunterStingType;\n    /**\n     * @generated from protobuf field: bool trap_weave = 1;\n     */\n    trapWeave: boolean;\n    /**\n     * Switch to Aspect of the Viper when mana goes below this percent.\n     *\n     * @generated from protobuf field: double viper_start_mana_percent = 6;\n     */\n    viperStartManaPercent: number;\n    /**\n     * Switch back to Aspect of the Hawk when mana goes above this percent.\n     *\n     * @generated from protobuf field: double viper_stop_mana_percent = 7;\n     */\n    viperStopManaPercent: number;\n    /**\n     * Allow use of Explosive Shot Rank 3 during LNL procs.\n     *\n     * @generated from protobuf field: bool allow_explosive_shot_downrank = 10;\n     */\n    allowExplosiveShotDownrank: boolean;\n    /**\n     * @generated from protobuf field: bool multi_dot_serpent_sting = 11;\n     */\n    multiDotSerpentSting: boolean;\n}\n/**\n * @generated from protobuf message proto.SurvivalHunter.Options\n */\nexport interface SurvivalHunter_Options {\n    /**\n     * @generated from protobuf field: proto.HunterOptions class_options = 1;\n     */\n    classOptions?: HunterOptions;\n    /**\n     * @generated from protobuf field: double sniper_training_uptime = 2;\n     */\n    sniperTrainingUptime: number;\n}\n/**\n * @generated from protobuf enum proto.HunterPrimeGlyph\n */\nexport enum HunterPrimeGlyph {\n    /**\n     * @generated from protobuf enum value: HunterPrimeGlyphNone = 0;\n     */\n    HunterPrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAimedShot = 42897;\n     */\n    GlyphOfAimedShot = 42897,\n    /**\n     * @generated from protobuf enum value: GlyphOfArcaneShot = 42898;\n     */\n    GlyphOfArcaneShot = 42898,\n    /**\n     * @generated from protobuf enum value: GlyphOfChimeraShot = 45625;\n     */\n    GlyphOfChimeraShot = 45625,\n    /**\n     * @generated from protobuf enum value: GlyphOfDazzledPrey = 42909;\n     */\n    GlyphOfDazzledPrey = 42909,\n    /**\n     * @generated from protobuf enum value: GlyphOfExplosiveShot = 45731;\n     */\n    GlyphOfExplosiveShot = 45731,\n    /**\n     * @generated from protobuf enum value: GlyphOfKillCommand = 42915;\n     */\n    GlyphOfKillCommand = 42915,\n    /**\n     * @generated from protobuf enum value: GlyphOfKillShot = 45732;\n     */\n    GlyphOfKillShot = 45732,\n    /**\n     * @generated from protobuf enum value: GlyphOfRapidFire = 42911;\n     */\n    GlyphOfRapidFire = 42911,\n    /**\n     * @generated from protobuf enum value: GlyphOfSerpentSting = 42912;\n     */\n    GlyphOfSerpentSting = 42912,\n    /**\n     * @generated from protobuf enum value: GlyphOfSteadyShot = 42914;\n     */\n    GlyphOfSteadyShot = 42914\n}\n/**\n * @generated from protobuf enum proto.HunterMajorGlyph\n */\nexport enum HunterMajorGlyph {\n    /**\n     * @generated from protobuf enum value: HunterMajorGlyphNone = 0;\n     */\n    HunterMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBestialWrath = 42902;\n     */\n    GlyphOfBestialWrath = 42902,\n    /**\n     * @generated from protobuf enum value: GlyphOfConcussiveShot = 42901;\n     */\n    GlyphOfConcussiveShot = 42901,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeterrence = 42903;\n     */\n    GlyphOfDeterrence = 42903,\n    /**\n     * @generated from protobuf enum value: GlyphOfDisengage = 42904;\n     */\n    GlyphOfDisengage = 42904,\n    /**\n     * @generated from protobuf enum value: GlyphOfFreezingTrap = 42905;\n     */\n    GlyphOfFreezingTrap = 42905,\n    /**\n     * @generated from protobuf enum value: GlyphOfIceTrap = 42906;\n     */\n    GlyphOfIceTrap = 42906,\n    /**\n     * @generated from protobuf enum value: GlyphOfImmolationTrap = 42908;\n     */\n    GlyphOfImmolationTrap = 42908,\n    /**\n     * @generated from protobuf enum value: GlyphOfMasterSCall = 45733;\n     */\n    GlyphOfMasterSCall = 45733,\n    /**\n     * @generated from protobuf enum value: GlyphOfMending = 42900;\n     */\n    GlyphOfMending = 42900,\n    /**\n     * @generated from protobuf enum value: GlyphOfMisdirection = 42907;\n     */\n    GlyphOfMisdirection = 42907,\n    /**\n     * @generated from protobuf enum value: GlyphOfRaptorStrike = 45735;\n     */\n    GlyphOfRaptorStrike = 45735,\n    /**\n     * @generated from protobuf enum value: GlyphOfScatterShot = 45734;\n     */\n    GlyphOfScatterShot = 45734,\n    /**\n     * @generated from protobuf enum value: GlyphOfSilencingShot = 42910;\n     */\n    GlyphOfSilencingShot = 42910,\n    /**\n     * @generated from protobuf enum value: GlyphOfSnakeTrap = 42913;\n     */\n    GlyphOfSnakeTrap = 42913,\n    /**\n     * @generated from protobuf enum value: GlyphOfTrapLauncher = 42899;\n     */\n    GlyphOfTrapLauncher = 42899,\n    /**\n     * @generated from protobuf enum value: GlyphOfWyvernSting = 42917;\n     */\n    GlyphOfWyvernSting = 42917\n}\n/**\n * @generated from protobuf enum proto.HunterMinorGlyph\n */\nexport enum HunterMinorGlyph {\n    /**\n     * @generated from protobuf enum value: HunterMinorGlyphNone = 0;\n     */\n    HunterMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAspectOfThePack = 43355;\n     */\n    GlyphOfAspectOfThePack = 43355,\n    /**\n     * @generated from protobuf enum value: GlyphOfFeignDeath = 43351;\n     */\n    GlyphOfFeignDeath = 43351,\n    /**\n     * @generated from protobuf enum value: GlyphOfLesserProportion = 43350;\n     */\n    GlyphOfLesserProportion = 43350,\n    /**\n     * @generated from protobuf enum value: GlyphOfRevivePet = 43338;\n     */\n    GlyphOfRevivePet = 43338,\n    /**\n     * @generated from protobuf enum value: GlyphOfScareBeast = 43356;\n     */\n    GlyphOfScareBeast = 43356\n}\n/**\n * @generated from protobuf enum proto.HunterStingType\n */\nexport enum HunterStingType {\n    /**\n     * @generated from protobuf enum value: NoSting = 0;\n     */\n    NoSting = 0,\n    /**\n     * @generated from protobuf enum value: ScorpidSting = 1;\n     */\n    ScorpidSting = 1,\n    /**\n     * @generated from protobuf enum value: SerpentSting = 2;\n     */\n    SerpentSting = 2\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass HunterTalents$Type extends MessageType<HunterTalents> {\n    constructor() {\n        super(\"proto.HunterTalents\", [\n            { no: 1, name: \"improved_kill_command\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"one_with_nature\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"bestial_discipline\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"pathfinding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"spirit_bond\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"improved_mend_pet\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"cobra_strikes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"fervor\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"focus_fire\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"longevity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"killing_streak\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"crouching_tiger_hidden_chimera\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"bestial_wrath\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 15, name: \"ferocious_inspiration\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"kindred_spirits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"the_beast_within\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"invigoration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"beast_mastery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 20, name: \"go_for_the_throat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"efficiency\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"rapid_killing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"sic_em\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"improved_steady_shot\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"careful_aim\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 26, name: \"silencing_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"concussive_barrage\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"piercing_shots\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"bombardment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"trueshot_aura\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"termination\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"resistance_is_futile\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"rapid_recuperation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 34, name: \"master_marksman\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"readiness\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 36, name: \"posthaste\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 37, name: \"marked_for_death\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"chimera_shot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 39, name: \"hunter_vs_wild\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"pathing\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 41, name: \"improved_serpent_sting\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"survival_tactics\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"trap_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"entrapment\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"point_of_no_escape\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"thrill_of_the_hunt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"counterattack\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"lock_and_load\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 49, name: \"resourcefulness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"mirrored_blades\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"t_n_t\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"toxicology\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"wyvern_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 54, name: \"noxious_stings\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 55, name: \"hunting_party\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"sniper_training\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"serpent_spread\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 58, name: \"black_arrow\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HunterTalents>): HunterTalents {\n        const message = { improvedKillCommand: 0, oneWithNature: 0, bestialDiscipline: 0, pathfinding: 0, spiritBond: 0, frenzy: 0, improvedMendPet: 0, cobraStrikes: 0, fervor: false, focusFire: false, longevity: 0, killingStreak: 0, crouchingTigerHiddenChimera: 0, bestialWrath: false, ferociousInspiration: false, kindredSpirits: 0, theBeastWithin: false, invigoration: 0, beastMastery: false, goForTheThroat: 0, efficiency: 0, rapidKilling: 0, sicEm: 0, improvedSteadyShot: 0, carefulAim: 0, silencingShot: false, concussiveBarrage: 0, piercingShots: 0, bombardment: 0, trueshotAura: false, termination: 0, resistanceIsFutile: 0, rapidRecuperation: 0, masterMarksman: 0, readiness: false, posthaste: 0, markedForDeath: 0, chimeraShot: false, hunterVsWild: 0, pathing: 0, improvedSerpentSting: 0, survivalTactics: 0, trapMastery: 0, entrapment: 0, pointOfNoEscape: 0, thrillOfTheHunt: 0, counterattack: false, lockAndLoad: 0, resourcefulness: 0, mirroredBlades: 0, tNT: 0, toxicology: 0, wyvernSting: false, noxiousStings: 0, huntingParty: false, sniperTraining: 0, serpentSpread: 0, blackArrow: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HunterTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HunterTalents): HunterTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 improved_kill_command */ 1:\n                    message.improvedKillCommand = reader.int32();\n                    break;\n                case /* int32 one_with_nature */ 2:\n                    message.oneWithNature = reader.int32();\n                    break;\n                case /* int32 bestial_discipline */ 3:\n                    message.bestialDiscipline = reader.int32();\n                    break;\n                case /* int32 pathfinding */ 4:\n                    message.pathfinding = reader.int32();\n                    break;\n                case /* int32 spirit_bond */ 5:\n                    message.spiritBond = reader.int32();\n                    break;\n                case /* int32 frenzy */ 6:\n                    message.frenzy = reader.int32();\n                    break;\n                case /* int32 improved_mend_pet */ 7:\n                    message.improvedMendPet = reader.int32();\n                    break;\n                case /* int32 cobra_strikes */ 8:\n                    message.cobraStrikes = reader.int32();\n                    break;\n                case /* bool fervor */ 9:\n                    message.fervor = reader.bool();\n                    break;\n                case /* bool focus_fire */ 10:\n                    message.focusFire = reader.bool();\n                    break;\n                case /* int32 longevity */ 11:\n                    message.longevity = reader.int32();\n                    break;\n                case /* int32 killing_streak */ 12:\n                    message.killingStreak = reader.int32();\n                    break;\n                case /* int32 crouching_tiger_hidden_chimera */ 13:\n                    message.crouchingTigerHiddenChimera = reader.int32();\n                    break;\n                case /* bool bestial_wrath */ 14:\n                    message.bestialWrath = reader.bool();\n                    break;\n                case /* bool ferocious_inspiration */ 15:\n                    message.ferociousInspiration = reader.bool();\n                    break;\n                case /* int32 kindred_spirits */ 16:\n                    message.kindredSpirits = reader.int32();\n                    break;\n                case /* bool the_beast_within */ 17:\n                    message.theBeastWithin = reader.bool();\n                    break;\n                case /* int32 invigoration */ 18:\n                    message.invigoration = reader.int32();\n                    break;\n                case /* bool beast_mastery */ 19:\n                    message.beastMastery = reader.bool();\n                    break;\n                case /* int32 go_for_the_throat */ 20:\n                    message.goForTheThroat = reader.int32();\n                    break;\n                case /* int32 efficiency */ 21:\n                    message.efficiency = reader.int32();\n                    break;\n                case /* int32 rapid_killing */ 22:\n                    message.rapidKilling = reader.int32();\n                    break;\n                case /* int32 sic_em */ 23:\n                    message.sicEm = reader.int32();\n                    break;\n                case /* int32 improved_steady_shot */ 24:\n                    message.improvedSteadyShot = reader.int32();\n                    break;\n                case /* int32 careful_aim */ 25:\n                    message.carefulAim = reader.int32();\n                    break;\n                case /* bool silencing_shot */ 26:\n                    message.silencingShot = reader.bool();\n                    break;\n                case /* int32 concussive_barrage */ 27:\n                    message.concussiveBarrage = reader.int32();\n                    break;\n                case /* int32 piercing_shots */ 28:\n                    message.piercingShots = reader.int32();\n                    break;\n                case /* int32 bombardment */ 29:\n                    message.bombardment = reader.int32();\n                    break;\n                case /* bool trueshot_aura */ 30:\n                    message.trueshotAura = reader.bool();\n                    break;\n                case /* int32 termination */ 31:\n                    message.termination = reader.int32();\n                    break;\n                case /* int32 resistance_is_futile */ 32:\n                    message.resistanceIsFutile = reader.int32();\n                    break;\n                case /* int32 rapid_recuperation */ 33:\n                    message.rapidRecuperation = reader.int32();\n                    break;\n                case /* int32 master_marksman */ 34:\n                    message.masterMarksman = reader.int32();\n                    break;\n                case /* bool readiness */ 35:\n                    message.readiness = reader.bool();\n                    break;\n                case /* int32 posthaste */ 36:\n                    message.posthaste = reader.int32();\n                    break;\n                case /* int32 marked_for_death */ 37:\n                    message.markedForDeath = reader.int32();\n                    break;\n                case /* bool chimera_shot */ 38:\n                    message.chimeraShot = reader.bool();\n                    break;\n                case /* int32 hunter_vs_wild */ 39:\n                    message.hunterVsWild = reader.int32();\n                    break;\n                case /* int32 pathing */ 40:\n                    message.pathing = reader.int32();\n                    break;\n                case /* int32 improved_serpent_sting */ 41:\n                    message.improvedSerpentSting = reader.int32();\n                    break;\n                case /* int32 survival_tactics */ 42:\n                    message.survivalTactics = reader.int32();\n                    break;\n                case /* int32 trap_mastery */ 43:\n                    message.trapMastery = reader.int32();\n                    break;\n                case /* int32 entrapment */ 44:\n                    message.entrapment = reader.int32();\n                    break;\n                case /* int32 point_of_no_escape */ 45:\n                    message.pointOfNoEscape = reader.int32();\n                    break;\n                case /* int32 thrill_of_the_hunt */ 46:\n                    message.thrillOfTheHunt = reader.int32();\n                    break;\n                case /* bool counterattack */ 47:\n                    message.counterattack = reader.bool();\n                    break;\n                case /* int32 lock_and_load */ 48:\n                    message.lockAndLoad = reader.int32();\n                    break;\n                case /* int32 resourcefulness */ 49:\n                    message.resourcefulness = reader.int32();\n                    break;\n                case /* int32 mirrored_blades */ 50:\n                    message.mirroredBlades = reader.int32();\n                    break;\n                case /* int32 t_n_t */ 51:\n                    message.tNT = reader.int32();\n                    break;\n                case /* int32 toxicology */ 52:\n                    message.toxicology = reader.int32();\n                    break;\n                case /* bool wyvern_sting */ 53:\n                    message.wyvernSting = reader.bool();\n                    break;\n                case /* int32 noxious_stings */ 54:\n                    message.noxiousStings = reader.int32();\n                    break;\n                case /* bool hunting_party */ 55:\n                    message.huntingParty = reader.bool();\n                    break;\n                case /* int32 sniper_training */ 56:\n                    message.sniperTraining = reader.int32();\n                    break;\n                case /* int32 serpent_spread */ 57:\n                    message.serpentSpread = reader.int32();\n                    break;\n                case /* bool black_arrow */ 58:\n                    message.blackArrow = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HunterTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 improved_kill_command = 1; */\n        if (message.improvedKillCommand !== 0)\n            writer.tag(1, WireType.Varint).int32(message.improvedKillCommand);\n        /* int32 one_with_nature = 2; */\n        if (message.oneWithNature !== 0)\n            writer.tag(2, WireType.Varint).int32(message.oneWithNature);\n        /* int32 bestial_discipline = 3; */\n        if (message.bestialDiscipline !== 0)\n            writer.tag(3, WireType.Varint).int32(message.bestialDiscipline);\n        /* int32 pathfinding = 4; */\n        if (message.pathfinding !== 0)\n            writer.tag(4, WireType.Varint).int32(message.pathfinding);\n        /* int32 spirit_bond = 5; */\n        if (message.spiritBond !== 0)\n            writer.tag(5, WireType.Varint).int32(message.spiritBond);\n        /* int32 frenzy = 6; */\n        if (message.frenzy !== 0)\n            writer.tag(6, WireType.Varint).int32(message.frenzy);\n        /* int32 improved_mend_pet = 7; */\n        if (message.improvedMendPet !== 0)\n            writer.tag(7, WireType.Varint).int32(message.improvedMendPet);\n        /* int32 cobra_strikes = 8; */\n        if (message.cobraStrikes !== 0)\n            writer.tag(8, WireType.Varint).int32(message.cobraStrikes);\n        /* bool fervor = 9; */\n        if (message.fervor !== false)\n            writer.tag(9, WireType.Varint).bool(message.fervor);\n        /* bool focus_fire = 10; */\n        if (message.focusFire !== false)\n            writer.tag(10, WireType.Varint).bool(message.focusFire);\n        /* int32 longevity = 11; */\n        if (message.longevity !== 0)\n            writer.tag(11, WireType.Varint).int32(message.longevity);\n        /* int32 killing_streak = 12; */\n        if (message.killingStreak !== 0)\n            writer.tag(12, WireType.Varint).int32(message.killingStreak);\n        /* int32 crouching_tiger_hidden_chimera = 13; */\n        if (message.crouchingTigerHiddenChimera !== 0)\n            writer.tag(13, WireType.Varint).int32(message.crouchingTigerHiddenChimera);\n        /* bool bestial_wrath = 14; */\n        if (message.bestialWrath !== false)\n            writer.tag(14, WireType.Varint).bool(message.bestialWrath);\n        /* bool ferocious_inspiration = 15; */\n        if (message.ferociousInspiration !== false)\n            writer.tag(15, WireType.Varint).bool(message.ferociousInspiration);\n        /* int32 kindred_spirits = 16; */\n        if (message.kindredSpirits !== 0)\n            writer.tag(16, WireType.Varint).int32(message.kindredSpirits);\n        /* bool the_beast_within = 17; */\n        if (message.theBeastWithin !== false)\n            writer.tag(17, WireType.Varint).bool(message.theBeastWithin);\n        /* int32 invigoration = 18; */\n        if (message.invigoration !== 0)\n            writer.tag(18, WireType.Varint).int32(message.invigoration);\n        /* bool beast_mastery = 19; */\n        if (message.beastMastery !== false)\n            writer.tag(19, WireType.Varint).bool(message.beastMastery);\n        /* int32 go_for_the_throat = 20; */\n        if (message.goForTheThroat !== 0)\n            writer.tag(20, WireType.Varint).int32(message.goForTheThroat);\n        /* int32 efficiency = 21; */\n        if (message.efficiency !== 0)\n            writer.tag(21, WireType.Varint).int32(message.efficiency);\n        /* int32 rapid_killing = 22; */\n        if (message.rapidKilling !== 0)\n            writer.tag(22, WireType.Varint).int32(message.rapidKilling);\n        /* int32 sic_em = 23; */\n        if (message.sicEm !== 0)\n            writer.tag(23, WireType.Varint).int32(message.sicEm);\n        /* int32 improved_steady_shot = 24; */\n        if (message.improvedSteadyShot !== 0)\n            writer.tag(24, WireType.Varint).int32(message.improvedSteadyShot);\n        /* int32 careful_aim = 25; */\n        if (message.carefulAim !== 0)\n            writer.tag(25, WireType.Varint).int32(message.carefulAim);\n        /* bool silencing_shot = 26; */\n        if (message.silencingShot !== false)\n            writer.tag(26, WireType.Varint).bool(message.silencingShot);\n        /* int32 concussive_barrage = 27; */\n        if (message.concussiveBarrage !== 0)\n            writer.tag(27, WireType.Varint).int32(message.concussiveBarrage);\n        /* int32 piercing_shots = 28; */\n        if (message.piercingShots !== 0)\n            writer.tag(28, WireType.Varint).int32(message.piercingShots);\n        /* int32 bombardment = 29; */\n        if (message.bombardment !== 0)\n            writer.tag(29, WireType.Varint).int32(message.bombardment);\n        /* bool trueshot_aura = 30; */\n        if (message.trueshotAura !== false)\n            writer.tag(30, WireType.Varint).bool(message.trueshotAura);\n        /* int32 termination = 31; */\n        if (message.termination !== 0)\n            writer.tag(31, WireType.Varint).int32(message.termination);\n        /* int32 resistance_is_futile = 32; */\n        if (message.resistanceIsFutile !== 0)\n            writer.tag(32, WireType.Varint).int32(message.resistanceIsFutile);\n        /* int32 rapid_recuperation = 33; */\n        if (message.rapidRecuperation !== 0)\n            writer.tag(33, WireType.Varint).int32(message.rapidRecuperation);\n        /* int32 master_marksman = 34; */\n        if (message.masterMarksman !== 0)\n            writer.tag(34, WireType.Varint).int32(message.masterMarksman);\n        /* bool readiness = 35; */\n        if (message.readiness !== false)\n            writer.tag(35, WireType.Varint).bool(message.readiness);\n        /* int32 posthaste = 36; */\n        if (message.posthaste !== 0)\n            writer.tag(36, WireType.Varint).int32(message.posthaste);\n        /* int32 marked_for_death = 37; */\n        if (message.markedForDeath !== 0)\n            writer.tag(37, WireType.Varint).int32(message.markedForDeath);\n        /* bool chimera_shot = 38; */\n        if (message.chimeraShot !== false)\n            writer.tag(38, WireType.Varint).bool(message.chimeraShot);\n        /* int32 hunter_vs_wild = 39; */\n        if (message.hunterVsWild !== 0)\n            writer.tag(39, WireType.Varint).int32(message.hunterVsWild);\n        /* int32 pathing = 40; */\n        if (message.pathing !== 0)\n            writer.tag(40, WireType.Varint).int32(message.pathing);\n        /* int32 improved_serpent_sting = 41; */\n        if (message.improvedSerpentSting !== 0)\n            writer.tag(41, WireType.Varint).int32(message.improvedSerpentSting);\n        /* int32 survival_tactics = 42; */\n        if (message.survivalTactics !== 0)\n            writer.tag(42, WireType.Varint).int32(message.survivalTactics);\n        /* int32 trap_mastery = 43; */\n        if (message.trapMastery !== 0)\n            writer.tag(43, WireType.Varint).int32(message.trapMastery);\n        /* int32 entrapment = 44; */\n        if (message.entrapment !== 0)\n            writer.tag(44, WireType.Varint).int32(message.entrapment);\n        /* int32 point_of_no_escape = 45; */\n        if (message.pointOfNoEscape !== 0)\n            writer.tag(45, WireType.Varint).int32(message.pointOfNoEscape);\n        /* int32 thrill_of_the_hunt = 46; */\n        if (message.thrillOfTheHunt !== 0)\n            writer.tag(46, WireType.Varint).int32(message.thrillOfTheHunt);\n        /* bool counterattack = 47; */\n        if (message.counterattack !== false)\n            writer.tag(47, WireType.Varint).bool(message.counterattack);\n        /* int32 lock_and_load = 48; */\n        if (message.lockAndLoad !== 0)\n            writer.tag(48, WireType.Varint).int32(message.lockAndLoad);\n        /* int32 resourcefulness = 49; */\n        if (message.resourcefulness !== 0)\n            writer.tag(49, WireType.Varint).int32(message.resourcefulness);\n        /* int32 mirrored_blades = 50; */\n        if (message.mirroredBlades !== 0)\n            writer.tag(50, WireType.Varint).int32(message.mirroredBlades);\n        /* int32 t_n_t = 51; */\n        if (message.tNT !== 0)\n            writer.tag(51, WireType.Varint).int32(message.tNT);\n        /* int32 toxicology = 52; */\n        if (message.toxicology !== 0)\n            writer.tag(52, WireType.Varint).int32(message.toxicology);\n        /* bool wyvern_sting = 53; */\n        if (message.wyvernSting !== false)\n            writer.tag(53, WireType.Varint).bool(message.wyvernSting);\n        /* int32 noxious_stings = 54; */\n        if (message.noxiousStings !== 0)\n            writer.tag(54, WireType.Varint).int32(message.noxiousStings);\n        /* bool hunting_party = 55; */\n        if (message.huntingParty !== false)\n            writer.tag(55, WireType.Varint).bool(message.huntingParty);\n        /* int32 sniper_training = 56; */\n        if (message.sniperTraining !== 0)\n            writer.tag(56, WireType.Varint).int32(message.sniperTraining);\n        /* int32 serpent_spread = 57; */\n        if (message.serpentSpread !== 0)\n            writer.tag(57, WireType.Varint).int32(message.serpentSpread);\n        /* bool black_arrow = 58; */\n        if (message.blackArrow !== false)\n            writer.tag(58, WireType.Varint).bool(message.blackArrow);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HunterTalents\n */\nexport const HunterTalents = new HunterTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HunterPetTalents$Type extends MessageType<HunterPetTalents> {\n    constructor() {\n        super(\"proto.HunterPetTalents\", [\n            { no: 1, name: \"serpent_swiftness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"dash\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"great_stamina\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"natural_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"improved_cower\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"bloodthirsty\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"spiked_collar\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"boars_speed\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"culling_the_herd\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"lionhearted\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"charge\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"heart_of_the_phoenix\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"spiders_bite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"great_resistance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"rabid\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 16, name: \"lick_your_wounds\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"call_of_the_wild\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"shark_attack\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"wild_hunt\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"blood_of_the_rhino\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 21, name: \"pet_barding\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"guard_dog\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"thunderstomp\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 24, name: \"grace_of_the_mantis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"last_stand\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"taunt\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"roar_of_sacrifice\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 28, name: \"intervene\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 29, name: \"silverback\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"dive\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 31, name: \"mobility\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"owls_focus\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 33, name: \"carrion_feeder\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"cornered\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"feeding_frenzy\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"wolverine_bite\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"roar_of_recovery\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 38, name: \"bullheaded\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HunterPetTalents>): HunterPetTalents {\n        const message = { serpentSwiftness: 0, dash: false, greatStamina: 0, naturalArmor: 0, improvedCower: 0, bloodthirsty: 0, spikedCollar: 0, boarsSpeed: false, cullingTheHerd: 0, lionhearted: 0, charge: false, heartOfThePhoenix: false, spidersBite: 0, greatResistance: 0, rabid: false, lickYourWounds: false, callOfTheWild: false, sharkAttack: 0, wildHunt: 0, bloodOfTheRhino: 0, petBarding: 0, guardDog: 0, thunderstomp: false, graceOfTheMantis: 0, lastStand: false, taunt: false, roarOfSacrifice: false, intervene: false, silverback: 0, dive: false, mobility: 0, owlsFocus: 0, carrionFeeder: false, cornered: 0, feedingFrenzy: 0, wolverineBite: false, roarOfRecovery: false, bullheaded: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HunterPetTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HunterPetTalents): HunterPetTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 serpent_swiftness */ 1:\n                    message.serpentSwiftness = reader.int32();\n                    break;\n                case /* bool dash */ 2:\n                    message.dash = reader.bool();\n                    break;\n                case /* int32 great_stamina */ 3:\n                    message.greatStamina = reader.int32();\n                    break;\n                case /* int32 natural_armor */ 4:\n                    message.naturalArmor = reader.int32();\n                    break;\n                case /* int32 improved_cower */ 5:\n                    message.improvedCower = reader.int32();\n                    break;\n                case /* int32 bloodthirsty */ 6:\n                    message.bloodthirsty = reader.int32();\n                    break;\n                case /* int32 spiked_collar */ 7:\n                    message.spikedCollar = reader.int32();\n                    break;\n                case /* bool boars_speed */ 8:\n                    message.boarsSpeed = reader.bool();\n                    break;\n                case /* int32 culling_the_herd */ 9:\n                    message.cullingTheHerd = reader.int32();\n                    break;\n                case /* int32 lionhearted */ 10:\n                    message.lionhearted = reader.int32();\n                    break;\n                case /* bool charge */ 11:\n                    message.charge = reader.bool();\n                    break;\n                case /* bool heart_of_the_phoenix */ 12:\n                    message.heartOfThePhoenix = reader.bool();\n                    break;\n                case /* int32 spiders_bite */ 13:\n                    message.spidersBite = reader.int32();\n                    break;\n                case /* int32 great_resistance */ 14:\n                    message.greatResistance = reader.int32();\n                    break;\n                case /* bool rabid */ 15:\n                    message.rabid = reader.bool();\n                    break;\n                case /* bool lick_your_wounds */ 16:\n                    message.lickYourWounds = reader.bool();\n                    break;\n                case /* bool call_of_the_wild */ 17:\n                    message.callOfTheWild = reader.bool();\n                    break;\n                case /* int32 shark_attack */ 18:\n                    message.sharkAttack = reader.int32();\n                    break;\n                case /* int32 wild_hunt */ 19:\n                    message.wildHunt = reader.int32();\n                    break;\n                case /* int32 blood_of_the_rhino */ 20:\n                    message.bloodOfTheRhino = reader.int32();\n                    break;\n                case /* int32 pet_barding */ 21:\n                    message.petBarding = reader.int32();\n                    break;\n                case /* int32 guard_dog */ 22:\n                    message.guardDog = reader.int32();\n                    break;\n                case /* bool thunderstomp */ 23:\n                    message.thunderstomp = reader.bool();\n                    break;\n                case /* int32 grace_of_the_mantis */ 24:\n                    message.graceOfTheMantis = reader.int32();\n                    break;\n                case /* bool last_stand */ 25:\n                    message.lastStand = reader.bool();\n                    break;\n                case /* bool taunt */ 26:\n                    message.taunt = reader.bool();\n                    break;\n                case /* bool roar_of_sacrifice */ 27:\n                    message.roarOfSacrifice = reader.bool();\n                    break;\n                case /* bool intervene */ 28:\n                    message.intervene = reader.bool();\n                    break;\n                case /* int32 silverback */ 29:\n                    message.silverback = reader.int32();\n                    break;\n                case /* bool dive */ 30:\n                    message.dive = reader.bool();\n                    break;\n                case /* int32 mobility */ 31:\n                    message.mobility = reader.int32();\n                    break;\n                case /* int32 owls_focus */ 32:\n                    message.owlsFocus = reader.int32();\n                    break;\n                case /* bool carrion_feeder */ 33:\n                    message.carrionFeeder = reader.bool();\n                    break;\n                case /* int32 cornered */ 34:\n                    message.cornered = reader.int32();\n                    break;\n                case /* int32 feeding_frenzy */ 35:\n                    message.feedingFrenzy = reader.int32();\n                    break;\n                case /* bool wolverine_bite */ 36:\n                    message.wolverineBite = reader.bool();\n                    break;\n                case /* bool roar_of_recovery */ 37:\n                    message.roarOfRecovery = reader.bool();\n                    break;\n                case /* bool bullheaded */ 38:\n                    message.bullheaded = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HunterPetTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 serpent_swiftness = 1; */\n        if (message.serpentSwiftness !== 0)\n            writer.tag(1, WireType.Varint).int32(message.serpentSwiftness);\n        /* bool dash = 2; */\n        if (message.dash !== false)\n            writer.tag(2, WireType.Varint).bool(message.dash);\n        /* int32 great_stamina = 3; */\n        if (message.greatStamina !== 0)\n            writer.tag(3, WireType.Varint).int32(message.greatStamina);\n        /* int32 natural_armor = 4; */\n        if (message.naturalArmor !== 0)\n            writer.tag(4, WireType.Varint).int32(message.naturalArmor);\n        /* int32 improved_cower = 5; */\n        if (message.improvedCower !== 0)\n            writer.tag(5, WireType.Varint).int32(message.improvedCower);\n        /* int32 bloodthirsty = 6; */\n        if (message.bloodthirsty !== 0)\n            writer.tag(6, WireType.Varint).int32(message.bloodthirsty);\n        /* int32 spiked_collar = 7; */\n        if (message.spikedCollar !== 0)\n            writer.tag(7, WireType.Varint).int32(message.spikedCollar);\n        /* bool boars_speed = 8; */\n        if (message.boarsSpeed !== false)\n            writer.tag(8, WireType.Varint).bool(message.boarsSpeed);\n        /* int32 culling_the_herd = 9; */\n        if (message.cullingTheHerd !== 0)\n            writer.tag(9, WireType.Varint).int32(message.cullingTheHerd);\n        /* int32 lionhearted = 10; */\n        if (message.lionhearted !== 0)\n            writer.tag(10, WireType.Varint).int32(message.lionhearted);\n        /* bool charge = 11; */\n        if (message.charge !== false)\n            writer.tag(11, WireType.Varint).bool(message.charge);\n        /* bool heart_of_the_phoenix = 12; */\n        if (message.heartOfThePhoenix !== false)\n            writer.tag(12, WireType.Varint).bool(message.heartOfThePhoenix);\n        /* int32 spiders_bite = 13; */\n        if (message.spidersBite !== 0)\n            writer.tag(13, WireType.Varint).int32(message.spidersBite);\n        /* int32 great_resistance = 14; */\n        if (message.greatResistance !== 0)\n            writer.tag(14, WireType.Varint).int32(message.greatResistance);\n        /* bool rabid = 15; */\n        if (message.rabid !== false)\n            writer.tag(15, WireType.Varint).bool(message.rabid);\n        /* bool lick_your_wounds = 16; */\n        if (message.lickYourWounds !== false)\n            writer.tag(16, WireType.Varint).bool(message.lickYourWounds);\n        /* bool call_of_the_wild = 17; */\n        if (message.callOfTheWild !== false)\n            writer.tag(17, WireType.Varint).bool(message.callOfTheWild);\n        /* int32 shark_attack = 18; */\n        if (message.sharkAttack !== 0)\n            writer.tag(18, WireType.Varint).int32(message.sharkAttack);\n        /* int32 wild_hunt = 19; */\n        if (message.wildHunt !== 0)\n            writer.tag(19, WireType.Varint).int32(message.wildHunt);\n        /* int32 blood_of_the_rhino = 20; */\n        if (message.bloodOfTheRhino !== 0)\n            writer.tag(20, WireType.Varint).int32(message.bloodOfTheRhino);\n        /* int32 pet_barding = 21; */\n        if (message.petBarding !== 0)\n            writer.tag(21, WireType.Varint).int32(message.petBarding);\n        /* int32 guard_dog = 22; */\n        if (message.guardDog !== 0)\n            writer.tag(22, WireType.Varint).int32(message.guardDog);\n        /* bool thunderstomp = 23; */\n        if (message.thunderstomp !== false)\n            writer.tag(23, WireType.Varint).bool(message.thunderstomp);\n        /* int32 grace_of_the_mantis = 24; */\n        if (message.graceOfTheMantis !== 0)\n            writer.tag(24, WireType.Varint).int32(message.graceOfTheMantis);\n        /* bool last_stand = 25; */\n        if (message.lastStand !== false)\n            writer.tag(25, WireType.Varint).bool(message.lastStand);\n        /* bool taunt = 26; */\n        if (message.taunt !== false)\n            writer.tag(26, WireType.Varint).bool(message.taunt);\n        /* bool roar_of_sacrifice = 27; */\n        if (message.roarOfSacrifice !== false)\n            writer.tag(27, WireType.Varint).bool(message.roarOfSacrifice);\n        /* bool intervene = 28; */\n        if (message.intervene !== false)\n            writer.tag(28, WireType.Varint).bool(message.intervene);\n        /* int32 silverback = 29; */\n        if (message.silverback !== 0)\n            writer.tag(29, WireType.Varint).int32(message.silverback);\n        /* bool dive = 30; */\n        if (message.dive !== false)\n            writer.tag(30, WireType.Varint).bool(message.dive);\n        /* int32 mobility = 31; */\n        if (message.mobility !== 0)\n            writer.tag(31, WireType.Varint).int32(message.mobility);\n        /* int32 owls_focus = 32; */\n        if (message.owlsFocus !== 0)\n            writer.tag(32, WireType.Varint).int32(message.owlsFocus);\n        /* bool carrion_feeder = 33; */\n        if (message.carrionFeeder !== false)\n            writer.tag(33, WireType.Varint).bool(message.carrionFeeder);\n        /* int32 cornered = 34; */\n        if (message.cornered !== 0)\n            writer.tag(34, WireType.Varint).int32(message.cornered);\n        /* int32 feeding_frenzy = 35; */\n        if (message.feedingFrenzy !== 0)\n            writer.tag(35, WireType.Varint).int32(message.feedingFrenzy);\n        /* bool wolverine_bite = 36; */\n        if (message.wolverineBite !== false)\n            writer.tag(36, WireType.Varint).bool(message.wolverineBite);\n        /* bool roar_of_recovery = 37; */\n        if (message.roarOfRecovery !== false)\n            writer.tag(37, WireType.Varint).bool(message.roarOfRecovery);\n        /* bool bullheaded = 38; */\n        if (message.bullheaded !== false)\n            writer.tag(38, WireType.Varint).bool(message.bullheaded);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HunterPetTalents\n */\nexport const HunterPetTalents = new HunterPetTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HunterOptions$Type extends MessageType<HunterOptions> {\n    constructor() {\n        super(\"proto.HunterOptions\", [\n            { no: 1, name: \"ammo\", kind: \"enum\", T: () => [\"proto.HunterOptions.Ammo\", HunterOptions_Ammo] },\n            { no: 2, name: \"pet_type\", kind: \"enum\", T: () => [\"proto.HunterOptions.PetType\", HunterOptions_PetType] },\n            { no: 3, name: \"pet_talents\", kind: \"message\", T: () => HunterPetTalents },\n            { no: 4, name: \"pet_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"time_to_trap_weave_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"use_hunters_mark\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<HunterOptions>): HunterOptions {\n        const message = { ammo: 0, petType: 0, petUptime: 0, timeToTrapWeaveMs: 0, useHuntersMark: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<HunterOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HunterOptions): HunterOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HunterOptions.Ammo ammo */ 1:\n                    message.ammo = reader.int32();\n                    break;\n                case /* proto.HunterOptions.PetType pet_type */ 2:\n                    message.petType = reader.int32();\n                    break;\n                case /* proto.HunterPetTalents pet_talents */ 3:\n                    message.petTalents = HunterPetTalents.internalBinaryRead(reader, reader.uint32(), options, message.petTalents);\n                    break;\n                case /* double pet_uptime */ 4:\n                    message.petUptime = reader.double();\n                    break;\n                case /* double time_to_trap_weave_ms */ 5:\n                    message.timeToTrapWeaveMs = reader.double();\n                    break;\n                case /* bool use_hunters_mark */ 6:\n                    message.useHuntersMark = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: HunterOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HunterOptions.Ammo ammo = 1; */\n        if (message.ammo !== 0)\n            writer.tag(1, WireType.Varint).int32(message.ammo);\n        /* proto.HunterOptions.PetType pet_type = 2; */\n        if (message.petType !== 0)\n            writer.tag(2, WireType.Varint).int32(message.petType);\n        /* proto.HunterPetTalents pet_talents = 3; */\n        if (message.petTalents)\n            HunterPetTalents.internalBinaryWrite(message.petTalents, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* double pet_uptime = 4; */\n        if (message.petUptime !== 0)\n            writer.tag(4, WireType.Bit64).double(message.petUptime);\n        /* double time_to_trap_weave_ms = 5; */\n        if (message.timeToTrapWeaveMs !== 0)\n            writer.tag(5, WireType.Bit64).double(message.timeToTrapWeaveMs);\n        /* bool use_hunters_mark = 6; */\n        if (message.useHuntersMark !== false)\n            writer.tag(6, WireType.Varint).bool(message.useHuntersMark);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.HunterOptions\n */\nexport const HunterOptions = new HunterOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BeastMasteryHunter$Type extends MessageType<BeastMasteryHunter> {\n    constructor() {\n        super(\"proto.BeastMasteryHunter\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => BeastMasteryHunter_Options }\n        ]);\n    }\n    create(value?: PartialMessage<BeastMasteryHunter>): BeastMasteryHunter {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BeastMasteryHunter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BeastMasteryHunter): BeastMasteryHunter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.BeastMasteryHunter.Options options */ 1:\n                    message.options = BeastMasteryHunter_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BeastMasteryHunter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.BeastMasteryHunter.Options options = 1; */\n        if (message.options)\n            BeastMasteryHunter_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BeastMasteryHunter\n */\nexport const BeastMasteryHunter = new BeastMasteryHunter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BeastMasteryHunter_Rotation$Type extends MessageType<BeastMasteryHunter_Rotation> {\n    constructor() {\n        super(\"proto.BeastMasteryHunter.Rotation\", [\n            { no: 9, name: \"type\", kind: \"enum\", T: () => [\"proto.RotationType\", RotationType] },\n            { no: 5, name: \"sting\", kind: \"enum\", T: () => [\"proto.HunterStingType\", HunterStingType] },\n            { no: 1, name: \"trap_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"viper_start_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"viper_stop_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"allow_explosive_shot_downrank\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"multi_dot_serpent_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<BeastMasteryHunter_Rotation>): BeastMasteryHunter_Rotation {\n        const message = { type: 0, sting: 0, trapWeave: false, viperStartManaPercent: 0, viperStopManaPercent: 0, allowExplosiveShotDownrank: false, multiDotSerpentSting: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BeastMasteryHunter_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BeastMasteryHunter_Rotation): BeastMasteryHunter_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RotationType type */ 9:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.HunterStingType sting */ 5:\n                    message.sting = reader.int32();\n                    break;\n                case /* bool trap_weave */ 1:\n                    message.trapWeave = reader.bool();\n                    break;\n                case /* double viper_start_mana_percent */ 6:\n                    message.viperStartManaPercent = reader.double();\n                    break;\n                case /* double viper_stop_mana_percent */ 7:\n                    message.viperStopManaPercent = reader.double();\n                    break;\n                case /* bool allow_explosive_shot_downrank */ 10:\n                    message.allowExplosiveShotDownrank = reader.bool();\n                    break;\n                case /* bool multi_dot_serpent_sting */ 11:\n                    message.multiDotSerpentSting = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BeastMasteryHunter_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RotationType type = 9; */\n        if (message.type !== 0)\n            writer.tag(9, WireType.Varint).int32(message.type);\n        /* proto.HunterStingType sting = 5; */\n        if (message.sting !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sting);\n        /* bool trap_weave = 1; */\n        if (message.trapWeave !== false)\n            writer.tag(1, WireType.Varint).bool(message.trapWeave);\n        /* double viper_start_mana_percent = 6; */\n        if (message.viperStartManaPercent !== 0)\n            writer.tag(6, WireType.Bit64).double(message.viperStartManaPercent);\n        /* double viper_stop_mana_percent = 7; */\n        if (message.viperStopManaPercent !== 0)\n            writer.tag(7, WireType.Bit64).double(message.viperStopManaPercent);\n        /* bool allow_explosive_shot_downrank = 10; */\n        if (message.allowExplosiveShotDownrank !== false)\n            writer.tag(10, WireType.Varint).bool(message.allowExplosiveShotDownrank);\n        /* bool multi_dot_serpent_sting = 11; */\n        if (message.multiDotSerpentSting !== false)\n            writer.tag(11, WireType.Varint).bool(message.multiDotSerpentSting);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BeastMasteryHunter.Rotation\n */\nexport const BeastMasteryHunter_Rotation = new BeastMasteryHunter_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BeastMasteryHunter_Options$Type extends MessageType<BeastMasteryHunter_Options> {\n    constructor() {\n        super(\"proto.BeastMasteryHunter.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => HunterOptions }\n        ]);\n    }\n    create(value?: PartialMessage<BeastMasteryHunter_Options>): BeastMasteryHunter_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BeastMasteryHunter_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BeastMasteryHunter_Options): BeastMasteryHunter_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HunterOptions class_options */ 1:\n                    message.classOptions = HunterOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BeastMasteryHunter_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HunterOptions class_options = 1; */\n        if (message.classOptions)\n            HunterOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BeastMasteryHunter.Options\n */\nexport const BeastMasteryHunter_Options = new BeastMasteryHunter_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MarksmanshipHunter$Type extends MessageType<MarksmanshipHunter> {\n    constructor() {\n        super(\"proto.MarksmanshipHunter\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => MarksmanshipHunter_Options }\n        ]);\n    }\n    create(value?: PartialMessage<MarksmanshipHunter>): MarksmanshipHunter {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<MarksmanshipHunter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarksmanshipHunter): MarksmanshipHunter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.MarksmanshipHunter.Options options */ 1:\n                    message.options = MarksmanshipHunter_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MarksmanshipHunter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.MarksmanshipHunter.Options options = 1; */\n        if (message.options)\n            MarksmanshipHunter_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.MarksmanshipHunter\n */\nexport const MarksmanshipHunter = new MarksmanshipHunter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MarksmanshipHunter_Rotation$Type extends MessageType<MarksmanshipHunter_Rotation> {\n    constructor() {\n        super(\"proto.MarksmanshipHunter.Rotation\", [\n            { no: 9, name: \"type\", kind: \"enum\", T: () => [\"proto.RotationType\", RotationType] },\n            { no: 5, name: \"sting\", kind: \"enum\", T: () => [\"proto.HunterStingType\", HunterStingType] },\n            { no: 1, name: \"trap_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"viper_start_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"viper_stop_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"allow_explosive_shot_downrank\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"multi_dot_serpent_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<MarksmanshipHunter_Rotation>): MarksmanshipHunter_Rotation {\n        const message = { type: 0, sting: 0, trapWeave: false, viperStartManaPercent: 0, viperStopManaPercent: 0, allowExplosiveShotDownrank: false, multiDotSerpentSting: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<MarksmanshipHunter_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarksmanshipHunter_Rotation): MarksmanshipHunter_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RotationType type */ 9:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.HunterStingType sting */ 5:\n                    message.sting = reader.int32();\n                    break;\n                case /* bool trap_weave */ 1:\n                    message.trapWeave = reader.bool();\n                    break;\n                case /* double viper_start_mana_percent */ 6:\n                    message.viperStartManaPercent = reader.double();\n                    break;\n                case /* double viper_stop_mana_percent */ 7:\n                    message.viperStopManaPercent = reader.double();\n                    break;\n                case /* bool allow_explosive_shot_downrank */ 10:\n                    message.allowExplosiveShotDownrank = reader.bool();\n                    break;\n                case /* bool multi_dot_serpent_sting */ 11:\n                    message.multiDotSerpentSting = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MarksmanshipHunter_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RotationType type = 9; */\n        if (message.type !== 0)\n            writer.tag(9, WireType.Varint).int32(message.type);\n        /* proto.HunterStingType sting = 5; */\n        if (message.sting !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sting);\n        /* bool trap_weave = 1; */\n        if (message.trapWeave !== false)\n            writer.tag(1, WireType.Varint).bool(message.trapWeave);\n        /* double viper_start_mana_percent = 6; */\n        if (message.viperStartManaPercent !== 0)\n            writer.tag(6, WireType.Bit64).double(message.viperStartManaPercent);\n        /* double viper_stop_mana_percent = 7; */\n        if (message.viperStopManaPercent !== 0)\n            writer.tag(7, WireType.Bit64).double(message.viperStopManaPercent);\n        /* bool allow_explosive_shot_downrank = 10; */\n        if (message.allowExplosiveShotDownrank !== false)\n            writer.tag(10, WireType.Varint).bool(message.allowExplosiveShotDownrank);\n        /* bool multi_dot_serpent_sting = 11; */\n        if (message.multiDotSerpentSting !== false)\n            writer.tag(11, WireType.Varint).bool(message.multiDotSerpentSting);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.MarksmanshipHunter.Rotation\n */\nexport const MarksmanshipHunter_Rotation = new MarksmanshipHunter_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass MarksmanshipHunter_Options$Type extends MessageType<MarksmanshipHunter_Options> {\n    constructor() {\n        super(\"proto.MarksmanshipHunter.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => HunterOptions }\n        ]);\n    }\n    create(value?: PartialMessage<MarksmanshipHunter_Options>): MarksmanshipHunter_Options {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<MarksmanshipHunter_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MarksmanshipHunter_Options): MarksmanshipHunter_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HunterOptions class_options */ 1:\n                    message.classOptions = HunterOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: MarksmanshipHunter_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HunterOptions class_options = 1; */\n        if (message.classOptions)\n            HunterOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.MarksmanshipHunter.Options\n */\nexport const MarksmanshipHunter_Options = new MarksmanshipHunter_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SurvivalHunter$Type extends MessageType<SurvivalHunter> {\n    constructor() {\n        super(\"proto.SurvivalHunter\", [\n            { no: 1, name: \"options\", kind: \"message\", T: () => SurvivalHunter_Options }\n        ]);\n    }\n    create(value?: PartialMessage<SurvivalHunter>): SurvivalHunter {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SurvivalHunter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SurvivalHunter): SurvivalHunter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SurvivalHunter.Options options */ 1:\n                    message.options = SurvivalHunter_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SurvivalHunter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SurvivalHunter.Options options = 1; */\n        if (message.options)\n            SurvivalHunter_Options.internalBinaryWrite(message.options, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SurvivalHunter\n */\nexport const SurvivalHunter = new SurvivalHunter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SurvivalHunter_Rotation$Type extends MessageType<SurvivalHunter_Rotation> {\n    constructor() {\n        super(\"proto.SurvivalHunter.Rotation\", [\n            { no: 9, name: \"type\", kind: \"enum\", T: () => [\"proto.RotationType\", RotationType] },\n            { no: 5, name: \"sting\", kind: \"enum\", T: () => [\"proto.HunterStingType\", HunterStingType] },\n            { no: 1, name: \"trap_weave\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"viper_start_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"viper_stop_mana_percent\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"allow_explosive_shot_downrank\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"multi_dot_serpent_sting\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SurvivalHunter_Rotation>): SurvivalHunter_Rotation {\n        const message = { type: 0, sting: 0, trapWeave: false, viperStartManaPercent: 0, viperStopManaPercent: 0, allowExplosiveShotDownrank: false, multiDotSerpentSting: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SurvivalHunter_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SurvivalHunter_Rotation): SurvivalHunter_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RotationType type */ 9:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.HunterStingType sting */ 5:\n                    message.sting = reader.int32();\n                    break;\n                case /* bool trap_weave */ 1:\n                    message.trapWeave = reader.bool();\n                    break;\n                case /* double viper_start_mana_percent */ 6:\n                    message.viperStartManaPercent = reader.double();\n                    break;\n                case /* double viper_stop_mana_percent */ 7:\n                    message.viperStopManaPercent = reader.double();\n                    break;\n                case /* bool allow_explosive_shot_downrank */ 10:\n                    message.allowExplosiveShotDownrank = reader.bool();\n                    break;\n                case /* bool multi_dot_serpent_sting */ 11:\n                    message.multiDotSerpentSting = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SurvivalHunter_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RotationType type = 9; */\n        if (message.type !== 0)\n            writer.tag(9, WireType.Varint).int32(message.type);\n        /* proto.HunterStingType sting = 5; */\n        if (message.sting !== 0)\n            writer.tag(5, WireType.Varint).int32(message.sting);\n        /* bool trap_weave = 1; */\n        if (message.trapWeave !== false)\n            writer.tag(1, WireType.Varint).bool(message.trapWeave);\n        /* double viper_start_mana_percent = 6; */\n        if (message.viperStartManaPercent !== 0)\n            writer.tag(6, WireType.Bit64).double(message.viperStartManaPercent);\n        /* double viper_stop_mana_percent = 7; */\n        if (message.viperStopManaPercent !== 0)\n            writer.tag(7, WireType.Bit64).double(message.viperStopManaPercent);\n        /* bool allow_explosive_shot_downrank = 10; */\n        if (message.allowExplosiveShotDownrank !== false)\n            writer.tag(10, WireType.Varint).bool(message.allowExplosiveShotDownrank);\n        /* bool multi_dot_serpent_sting = 11; */\n        if (message.multiDotSerpentSting !== false)\n            writer.tag(11, WireType.Varint).bool(message.multiDotSerpentSting);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SurvivalHunter.Rotation\n */\nexport const SurvivalHunter_Rotation = new SurvivalHunter_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SurvivalHunter_Options$Type extends MessageType<SurvivalHunter_Options> {\n    constructor() {\n        super(\"proto.SurvivalHunter.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => HunterOptions },\n            { no: 2, name: \"sniper_training_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SurvivalHunter_Options>): SurvivalHunter_Options {\n        const message = { sniperTrainingUptime: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SurvivalHunter_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SurvivalHunter_Options): SurvivalHunter_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.HunterOptions class_options */ 1:\n                    message.classOptions = HunterOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* double sniper_training_uptime */ 2:\n                    message.sniperTrainingUptime = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SurvivalHunter_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.HunterOptions class_options = 1; */\n        if (message.classOptions)\n            HunterOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double sniper_training_uptime = 2; */\n        if (message.sniperTrainingUptime !== 0)\n            writer.tag(2, WireType.Bit64).double(message.sniperTrainingUptime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SurvivalHunter.Options\n */\nexport const SurvivalHunter_Options = new SurvivalHunter_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"death_knight.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { UnitReference } from \"./common\";\n/**\n * @generated from protobuf message proto.DeathKnightTalents\n */\nexport interface DeathKnightTalents {\n    /**\n     * Blood\n     *\n     * @generated from protobuf field: int32 butchery = 1;\n     */\n    butchery: number;\n    /**\n     * @generated from protobuf field: int32 blade_barrier = 2;\n     */\n    bladeBarrier: number;\n    /**\n     * @generated from protobuf field: int32 bladed_armor = 3;\n     */\n    bladedArmor: number;\n    /**\n     * @generated from protobuf field: int32 improved_blood_tap = 4;\n     */\n    improvedBloodTap: number;\n    /**\n     * @generated from protobuf field: int32 scent_of_blood = 5;\n     */\n    scentOfBlood: number;\n    /**\n     * @generated from protobuf field: int32 scarlet_fever = 6;\n     */\n    scarletFever: number;\n    /**\n     * @generated from protobuf field: int32 hand_of_doom = 7;\n     */\n    handOfDoom: number;\n    /**\n     * @generated from protobuf field: int32 blood_caked_blade = 8;\n     */\n    bloodCakedBlade: number;\n    /**\n     * @generated from protobuf field: bool bone_shield = 9;\n     */\n    boneShield: boolean;\n    /**\n     * @generated from protobuf field: int32 toughness = 10;\n     */\n    toughness: number;\n    /**\n     * @generated from protobuf field: int32 abominations_might = 11;\n     */\n    abominationsMight: number;\n    /**\n     * @generated from protobuf field: int32 sanguine_fortitude = 12;\n     */\n    sanguineFortitude: number;\n    /**\n     * @generated from protobuf field: int32 blood_parasite = 13;\n     */\n    bloodParasite: number;\n    /**\n     * @generated from protobuf field: int32 improved_blood_presence = 14;\n     */\n    improvedBloodPresence: number;\n    /**\n     * @generated from protobuf field: int32 will_of_the_necropolis = 15;\n     */\n    willOfTheNecropolis: number;\n    /**\n     * @generated from protobuf field: bool rune_tap = 16;\n     */\n    runeTap: boolean;\n    /**\n     * @generated from protobuf field: bool vampiric_blood = 17;\n     */\n    vampiricBlood: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_death_strike = 18;\n     */\n    improvedDeathStrike: number;\n    /**\n     * @generated from protobuf field: int32 crimson_scourge = 19;\n     */\n    crimsonScourge: number;\n    /**\n     * @generated from protobuf field: bool dancing_rune_weapon = 20;\n     */\n    dancingRuneWeapon: boolean;\n    /**\n     * Frost\n     *\n     * @generated from protobuf field: int32 runic_power_mastery = 21;\n     */\n    runicPowerMastery: number;\n    /**\n     * @generated from protobuf field: int32 icy_reach = 22;\n     */\n    icyReach: number;\n    /**\n     * @generated from protobuf field: int32 nerves_of_cold_steel = 23;\n     */\n    nervesOfColdSteel: number;\n    /**\n     * @generated from protobuf field: int32 annihilation = 24;\n     */\n    annihilation: number;\n    /**\n     * @generated from protobuf field: bool lichborne = 25;\n     */\n    lichborne: boolean;\n    /**\n     * @generated from protobuf field: int32 on_a_pale_horse = 26;\n     */\n    onAPaleHorse: number;\n    /**\n     * @generated from protobuf field: int32 endless_winter = 27;\n     */\n    endlessWinter: number;\n    /**\n     * @generated from protobuf field: int32 merciless_combat = 28;\n     */\n    mercilessCombat: number;\n    /**\n     * @generated from protobuf field: int32 chill_of_the_grave = 29;\n     */\n    chillOfTheGrave: number;\n    /**\n     * @generated from protobuf field: int32 killing_machine = 30;\n     */\n    killingMachine: number;\n    /**\n     * @generated from protobuf field: int32 rime = 31;\n     */\n    rime: number;\n    /**\n     * @generated from protobuf field: bool pillar_of_frost = 32;\n     */\n    pillarOfFrost: boolean;\n    /**\n     * @generated from protobuf field: bool improved_icy_talons = 33;\n     */\n    improvedIcyTalons: boolean;\n    /**\n     * @generated from protobuf field: int32 brittle_bones = 34;\n     */\n    brittleBones: number;\n    /**\n     * @generated from protobuf field: int32 chilblains = 35;\n     */\n    chilblains: number;\n    /**\n     * @generated from protobuf field: bool hungering_cold = 36;\n     */\n    hungeringCold: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_frost_presence = 37;\n     */\n    improvedFrostPresence: number;\n    /**\n     * @generated from protobuf field: int32 threat_of_thassarian = 38;\n     */\n    threatOfThassarian: number;\n    /**\n     * @generated from protobuf field: int32 might_of_the_frozen_wastes = 39;\n     */\n    mightOfTheFrozenWastes: number;\n    /**\n     * @generated from protobuf field: bool howling_blast = 40;\n     */\n    howlingBlast: boolean;\n    /**\n     * Unholy\n     *\n     * @generated from protobuf field: int32 unholy_command = 41;\n     */\n    unholyCommand: number;\n    /**\n     * @generated from protobuf field: int32 virulence = 42;\n     */\n    virulence: number;\n    /**\n     * @generated from protobuf field: int32 epidemic = 43;\n     */\n    epidemic: number;\n    /**\n     * @generated from protobuf field: int32 desecration = 44;\n     */\n    desecration: number;\n    /**\n     * @generated from protobuf field: int32 resilient_infection = 45;\n     */\n    resilientInfection: number;\n    /**\n     * @generated from protobuf field: int32 morbidity = 46;\n     */\n    morbidity: number;\n    /**\n     * @generated from protobuf field: int32 runic_corruption = 47;\n     */\n    runicCorruption: number;\n    /**\n     * @generated from protobuf field: bool unholy_frenzy = 48;\n     */\n    unholyFrenzy: boolean;\n    /**\n     * @generated from protobuf field: int32 contagion = 49;\n     */\n    contagion: number;\n    /**\n     * @generated from protobuf field: int32 shadow_infusion = 50;\n     */\n    shadowInfusion: number;\n    /**\n     * @generated from protobuf field: int32 deaths_advance = 51;\n     */\n    deathsAdvance: number;\n    /**\n     * @generated from protobuf field: int32 magic_suppression = 52;\n     */\n    magicSuppression: number;\n    /**\n     * @generated from protobuf field: int32 rage_of_rivendare = 53;\n     */\n    rageOfRivendare: number;\n    /**\n     * @generated from protobuf field: bool unholy_blight = 54;\n     */\n    unholyBlight: boolean;\n    /**\n     * @generated from protobuf field: bool anti_magic_zone = 55;\n     */\n    antiMagicZone: boolean;\n    /**\n     * @generated from protobuf field: int32 improved_unholy_presence = 56;\n     */\n    improvedUnholyPresence: number;\n    /**\n     * @generated from protobuf field: bool dark_transformation = 57;\n     */\n    darkTransformation: boolean;\n    /**\n     * @generated from protobuf field: int32 ebon_plaguebringer = 58;\n     */\n    ebonPlaguebringer: number;\n    /**\n     * @generated from protobuf field: int32 sudden_doom = 59;\n     */\n    suddenDoom: number;\n    /**\n     * @generated from protobuf field: bool summon_gargoyle = 60;\n     */\n    summonGargoyle: boolean;\n}\n/**\n * @generated from protobuf message proto.DeathKnightOptions\n */\nexport interface DeathKnightOptions {\n    /**\n     * @generated from protobuf field: double starting_runic_power = 1;\n     */\n    startingRunicPower: number;\n    /**\n     * @generated from protobuf field: double pet_uptime = 2;\n     */\n    petUptime: number;\n}\n/**\n * @generated from protobuf message proto.BloodDeathKnight\n */\nexport interface BloodDeathKnight {\n    /**\n     * @generated from protobuf field: proto.BloodDeathKnight.Rotation rotation = 1;\n     */\n    rotation?: BloodDeathKnight_Rotation;\n    /**\n     * @generated from protobuf field: proto.BloodDeathKnight.Options options = 3;\n     */\n    options?: BloodDeathKnight_Options;\n}\n/**\n * @generated from protobuf message proto.BloodDeathKnight.Rotation\n */\nexport interface BloodDeathKnight_Rotation {\n    /**\n     * @generated from protobuf field: proto.BloodDeathKnight.Rotation.Opener opener = 1;\n     */\n    opener: BloodDeathKnight_Rotation_Opener;\n    /**\n     * @generated from protobuf field: proto.BloodDeathKnight.Rotation.OptimizationSetting optimization_setting = 2;\n     */\n    optimizationSetting: BloodDeathKnight_Rotation_OptimizationSetting;\n    /**\n     * @generated from protobuf field: proto.BloodDeathKnight.Rotation.BloodSpell blood_spell = 3;\n     */\n    bloodSpell: BloodDeathKnight_Rotation_BloodSpell;\n    /**\n     * @generated from protobuf field: proto.BloodDeathKnight.Rotation.Presence presence = 4;\n     */\n    presence: BloodDeathKnight_Rotation_Presence;\n    /**\n     * @generated from protobuf field: proto.BloodDeathKnight.Rotation.BloodTapPrio blood_tap_prio = 5;\n     */\n    bloodTapPrio: BloodDeathKnight_Rotation_BloodTapPrio;\n}\n/**\n * @generated from protobuf enum proto.BloodDeathKnight.Rotation.Opener\n */\nexport enum BloodDeathKnight_Rotation_Opener {\n    /**\n     * @generated from protobuf enum value: Regular = 0;\n     */\n    Regular = 0,\n    /**\n     * @generated from protobuf enum value: Threat = 1;\n     */\n    Threat = 1\n}\n/**\n * @generated from protobuf enum proto.BloodDeathKnight.Rotation.OptimizationSetting\n */\nexport enum BloodDeathKnight_Rotation_OptimizationSetting {\n    /**\n     * @generated from protobuf enum value: Hps = 0;\n     */\n    Hps = 0,\n    /**\n     * @generated from protobuf enum value: Tps = 1;\n     */\n    Tps = 1\n}\n/**\n * @generated from protobuf enum proto.BloodDeathKnight.Rotation.BloodSpell\n */\nexport enum BloodDeathKnight_Rotation_BloodSpell {\n    /**\n     * @generated from protobuf enum value: BloodStrike = 0;\n     */\n    BloodStrike = 0,\n    /**\n     * @generated from protobuf enum value: BloodBoil = 1;\n     */\n    BloodBoil = 1,\n    /**\n     * @generated from protobuf enum value: HeartStrike = 2;\n     */\n    HeartStrike = 2\n}\n/**\n * @generated from protobuf enum proto.BloodDeathKnight.Rotation.BloodTapPrio\n */\nexport enum BloodDeathKnight_Rotation_BloodTapPrio {\n    /**\n     * @generated from protobuf enum value: Defensive = 0;\n     */\n    Defensive = 0,\n    /**\n     * @generated from protobuf enum value: Offensive = 1;\n     */\n    Offensive = 1\n}\n/**\n * @generated from protobuf enum proto.BloodDeathKnight.Rotation.Presence\n */\nexport enum BloodDeathKnight_Rotation_Presence {\n    /**\n     * @generated from protobuf enum value: Blood = 0;\n     */\n    Blood = 0,\n    /**\n     * @generated from protobuf enum value: Frost = 1;\n     */\n    Frost = 1,\n    /**\n     * @generated from protobuf enum value: Unholy = 2;\n     */\n    Unholy = 2\n}\n/**\n * @generated from protobuf message proto.BloodDeathKnight.Options\n */\nexport interface BloodDeathKnight_Options {\n    /**\n     * @generated from protobuf field: proto.DeathKnightOptions class_options = 1;\n     */\n    classOptions?: DeathKnightOptions;\n    /**\n     * @generated from protobuf field: double defensive_delay = 2;\n     */\n    defensiveDelay: number;\n    /**\n     * @generated from protobuf field: bool drw_pesti_apply = 6;\n     */\n    drwPestiApply: boolean;\n}\n/**\n * @generated from protobuf message proto.FrostDeathKnight\n */\nexport interface FrostDeathKnight {\n    /**\n     * @generated from protobuf field: proto.FrostDeathKnight.Options options = 3;\n     */\n    options?: FrostDeathKnight_Options;\n}\n/**\n * @generated from protobuf message proto.FrostDeathKnight.Rotation\n */\nexport interface FrostDeathKnight_Rotation {\n}\n/**\n * @generated from protobuf message proto.FrostDeathKnight.Options\n */\nexport interface FrostDeathKnight_Options {\n    /**\n     * @generated from protobuf field: proto.DeathKnightOptions class_options = 1;\n     */\n    classOptions?: DeathKnightOptions;\n    /**\n     * @generated from protobuf field: bool use_ams = 2;\n     */\n    useAms: boolean;\n    /**\n     * @generated from protobuf field: double avg_ams_success_rate = 3;\n     */\n    avgAmsSuccessRate: number;\n    /**\n     * @generated from protobuf field: double avg_ams_hit = 4;\n     */\n    avgAmsHit: number;\n}\n/**\n * @generated from protobuf message proto.UnholyDeathKnight\n */\nexport interface UnholyDeathKnight {\n    /**\n     * @generated from protobuf field: proto.UnholyDeathKnight.Options options = 3;\n     */\n    options?: UnholyDeathKnight_Options;\n}\n/**\n * @generated from protobuf message proto.UnholyDeathKnight.Rotation\n */\nexport interface UnholyDeathKnight_Rotation {\n}\n/**\n * @generated from protobuf message proto.UnholyDeathKnight.Options\n */\nexport interface UnholyDeathKnight_Options {\n    /**\n     * @generated from protobuf field: proto.DeathKnightOptions class_options = 1;\n     */\n    classOptions?: DeathKnightOptions;\n    /**\n     * @generated from protobuf field: proto.UnitReference unholy_frenzy_target = 2;\n     */\n    unholyFrenzyTarget?: UnitReference;\n    /**\n     * @generated from protobuf field: bool use_ams = 3;\n     */\n    useAms: boolean;\n    /**\n     * @generated from protobuf field: double avg_ams_success_rate = 4;\n     */\n    avgAmsSuccessRate: number;\n    /**\n     * @generated from protobuf field: double avg_ams_hit = 5;\n     */\n    avgAmsHit: number;\n}\n/**\n * @generated from protobuf enum proto.DeathKnightPrimeGlyph\n */\nexport enum DeathKnightPrimeGlyph {\n    /**\n     * @generated from protobuf enum value: DeathKnightPrimeGlyphNone = 0;\n     */\n    DeathKnightPrimeGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathAndDecay = 43542;\n     */\n    GlyphOfDeathAndDecay = 43542,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathCoil = 45804;\n     */\n    GlyphOfDeathCoil = 45804,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathStrike = 43827;\n     */\n    GlyphOfDeathStrike = 43827,\n    /**\n     * @generated from protobuf enum value: GlyphOfFrostStrike = 43543;\n     */\n    GlyphOfFrostStrike = 43543,\n    /**\n     * @generated from protobuf enum value: GlyphOfHeartStrike = 43534;\n     */\n    GlyphOfHeartStrike = 43534,\n    /**\n     * @generated from protobuf enum value: GlyphOfHowlingBlast = 45806;\n     */\n    GlyphOfHowlingBlast = 45806,\n    /**\n     * @generated from protobuf enum value: GlyphOfIcyTouch = 43546;\n     */\n    GlyphOfIcyTouch = 43546,\n    /**\n     * @generated from protobuf enum value: GlyphOfObliterate = 43547;\n     */\n    GlyphOfObliterate = 43547,\n    /**\n     * @generated from protobuf enum value: GlyphOfRaiseDead = 43549;\n     */\n    GlyphOfRaiseDead = 43549,\n    /**\n     * @generated from protobuf enum value: GlyphOfRuneStrike = 43550;\n     */\n    GlyphOfRuneStrike = 43550,\n    /**\n     * @generated from protobuf enum value: GlyphOfScourgeStrike = 43551;\n     */\n    GlyphOfScourgeStrike = 43551\n}\n/**\n * @generated from protobuf enum proto.DeathKnightMajorGlyph\n */\nexport enum DeathKnightMajorGlyph {\n    /**\n     * @generated from protobuf enum value: DeathKnightMajorGlyphNone = 0;\n     */\n    DeathKnightMajorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfAntiMagicShell = 43533;\n     */\n    GlyphOfAntiMagicShell = 43533,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodBoil = 43826;\n     */\n    GlyphOfBloodBoil = 43826,\n    /**\n     * @generated from protobuf enum value: GlyphOfBoneShield = 43536;\n     */\n    GlyphOfBoneShield = 43536,\n    /**\n     * @generated from protobuf enum value: GlyphOfChainsOfIce = 43537;\n     */\n    GlyphOfChainsOfIce = 43537,\n    /**\n     * @generated from protobuf enum value: GlyphOfDancingRuneWeapon = 45799;\n     */\n    GlyphOfDancingRuneWeapon = 45799,\n    /**\n     * @generated from protobuf enum value: GlyphOfDarkSuccor = 68793;\n     */\n    GlyphOfDarkSuccor = 68793,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathGrip = 43541;\n     */\n    GlyphOfDeathGrip = 43541,\n    /**\n     * @generated from protobuf enum value: GlyphOfHungeringCold = 45800;\n     */\n    GlyphOfHungeringCold = 45800,\n    /**\n     * @generated from protobuf enum value: GlyphOfPestilence = 43548;\n     */\n    GlyphOfPestilence = 43548,\n    /**\n     * @generated from protobuf enum value: GlyphOfPillarOfFrost = 43553;\n     */\n    GlyphOfPillarOfFrost = 43553,\n    /**\n     * @generated from protobuf enum value: GlyphOfRuneTap = 43825;\n     */\n    GlyphOfRuneTap = 43825,\n    /**\n     * @generated from protobuf enum value: GlyphOfStrangulate = 43552;\n     */\n    GlyphOfStrangulate = 43552,\n    /**\n     * @generated from protobuf enum value: GlyphOfVampiricBlood = 43554;\n     */\n    GlyphOfVampiricBlood = 43554\n}\n/**\n * @generated from protobuf enum proto.DeathKnightMinorGlyph\n */\nexport enum DeathKnightMinorGlyph {\n    /**\n     * @generated from protobuf enum value: DeathKnightMinorGlyphNone = 0;\n     */\n    DeathKnightMinorGlyphNone = 0,\n    /**\n     * @generated from protobuf enum value: GlyphOfBloodTap = 43535;\n     */\n    GlyphOfBloodTap = 43535,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathGate = 43673;\n     */\n    GlyphOfDeathGate = 43673,\n    /**\n     * @generated from protobuf enum value: GlyphOfDeathSEmbrace = 43539;\n     */\n    GlyphOfDeathSEmbrace = 43539,\n    /**\n     * @generated from protobuf enum value: GlyphOfHornOfWinter = 43544;\n     */\n    GlyphOfHornOfWinter = 43544,\n    /**\n     * @generated from protobuf enum value: GlyphOfPathOfFrost = 43671;\n     */\n    GlyphOfPathOfFrost = 43671,\n    /**\n     * @generated from protobuf enum value: GlyphOfResilientGrip = 43672;\n     */\n    GlyphOfResilientGrip = 43672\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass DeathKnightTalents$Type extends MessageType<DeathKnightTalents> {\n    constructor() {\n        super(\"proto.DeathKnightTalents\", [\n            { no: 1, name: \"butchery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"blade_barrier\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"bladed_armor\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"improved_blood_tap\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"scent_of_blood\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"scarlet_fever\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"hand_of_doom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"blood_caked_blade\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"bone_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 10, name: \"toughness\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"abominations_might\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"sanguine_fortitude\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"blood_parasite\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"improved_blood_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 15, name: \"will_of_the_necropolis\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"rune_tap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"vampiric_blood\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 18, name: \"improved_death_strike\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 19, name: \"crimson_scourge\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"dancing_rune_weapon\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 21, name: \"runic_power_mastery\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 22, name: \"icy_reach\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 23, name: \"nerves_of_cold_steel\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 24, name: \"annihilation\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 25, name: \"lichborne\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 26, name: \"on_a_pale_horse\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 27, name: \"endless_winter\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 28, name: \"merciless_combat\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 29, name: \"chill_of_the_grave\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 30, name: \"killing_machine\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 31, name: \"rime\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 32, name: \"pillar_of_frost\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 33, name: \"improved_icy_talons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 34, name: \"brittle_bones\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 35, name: \"chilblains\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 36, name: \"hungering_cold\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 37, name: \"improved_frost_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 38, name: \"threat_of_thassarian\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 39, name: \"might_of_the_frozen_wastes\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 40, name: \"howling_blast\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 41, name: \"unholy_command\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 42, name: \"virulence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 43, name: \"epidemic\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 44, name: \"desecration\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 45, name: \"resilient_infection\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"morbidity\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"runic_corruption\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 48, name: \"unholy_frenzy\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 49, name: \"contagion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 50, name: \"shadow_infusion\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 51, name: \"deaths_advance\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 52, name: \"magic_suppression\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 53, name: \"rage_of_rivendare\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 54, name: \"unholy_blight\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 55, name: \"anti_magic_zone\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 56, name: \"improved_unholy_presence\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 57, name: \"dark_transformation\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 58, name: \"ebon_plaguebringer\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 59, name: \"sudden_doom\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 60, name: \"summon_gargoyle\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DeathKnightTalents>): DeathKnightTalents {\n        const message = { butchery: 0, bladeBarrier: 0, bladedArmor: 0, improvedBloodTap: 0, scentOfBlood: 0, scarletFever: 0, handOfDoom: 0, bloodCakedBlade: 0, boneShield: false, toughness: 0, abominationsMight: 0, sanguineFortitude: 0, bloodParasite: 0, improvedBloodPresence: 0, willOfTheNecropolis: 0, runeTap: false, vampiricBlood: false, improvedDeathStrike: 0, crimsonScourge: 0, dancingRuneWeapon: false, runicPowerMastery: 0, icyReach: 0, nervesOfColdSteel: 0, annihilation: 0, lichborne: false, onAPaleHorse: 0, endlessWinter: 0, mercilessCombat: 0, chillOfTheGrave: 0, killingMachine: 0, rime: 0, pillarOfFrost: false, improvedIcyTalons: false, brittleBones: 0, chilblains: 0, hungeringCold: false, improvedFrostPresence: 0, threatOfThassarian: 0, mightOfTheFrozenWastes: 0, howlingBlast: false, unholyCommand: 0, virulence: 0, epidemic: 0, desecration: 0, resilientInfection: 0, morbidity: 0, runicCorruption: 0, unholyFrenzy: false, contagion: 0, shadowInfusion: 0, deathsAdvance: 0, magicSuppression: 0, rageOfRivendare: 0, unholyBlight: false, antiMagicZone: false, improvedUnholyPresence: 0, darkTransformation: false, ebonPlaguebringer: 0, suddenDoom: 0, summonGargoyle: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DeathKnightTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeathKnightTalents): DeathKnightTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 butchery */ 1:\n                    message.butchery = reader.int32();\n                    break;\n                case /* int32 blade_barrier */ 2:\n                    message.bladeBarrier = reader.int32();\n                    break;\n                case /* int32 bladed_armor */ 3:\n                    message.bladedArmor = reader.int32();\n                    break;\n                case /* int32 improved_blood_tap */ 4:\n                    message.improvedBloodTap = reader.int32();\n                    break;\n                case /* int32 scent_of_blood */ 5:\n                    message.scentOfBlood = reader.int32();\n                    break;\n                case /* int32 scarlet_fever */ 6:\n                    message.scarletFever = reader.int32();\n                    break;\n                case /* int32 hand_of_doom */ 7:\n                    message.handOfDoom = reader.int32();\n                    break;\n                case /* int32 blood_caked_blade */ 8:\n                    message.bloodCakedBlade = reader.int32();\n                    break;\n                case /* bool bone_shield */ 9:\n                    message.boneShield = reader.bool();\n                    break;\n                case /* int32 toughness */ 10:\n                    message.toughness = reader.int32();\n                    break;\n                case /* int32 abominations_might */ 11:\n                    message.abominationsMight = reader.int32();\n                    break;\n                case /* int32 sanguine_fortitude */ 12:\n                    message.sanguineFortitude = reader.int32();\n                    break;\n                case /* int32 blood_parasite */ 13:\n                    message.bloodParasite = reader.int32();\n                    break;\n                case /* int32 improved_blood_presence */ 14:\n                    message.improvedBloodPresence = reader.int32();\n                    break;\n                case /* int32 will_of_the_necropolis */ 15:\n                    message.willOfTheNecropolis = reader.int32();\n                    break;\n                case /* bool rune_tap */ 16:\n                    message.runeTap = reader.bool();\n                    break;\n                case /* bool vampiric_blood */ 17:\n                    message.vampiricBlood = reader.bool();\n                    break;\n                case /* int32 improved_death_strike */ 18:\n                    message.improvedDeathStrike = reader.int32();\n                    break;\n                case /* int32 crimson_scourge */ 19:\n                    message.crimsonScourge = reader.int32();\n                    break;\n                case /* bool dancing_rune_weapon */ 20:\n                    message.dancingRuneWeapon = reader.bool();\n                    break;\n                case /* int32 runic_power_mastery */ 21:\n                    message.runicPowerMastery = reader.int32();\n                    break;\n                case /* int32 icy_reach */ 22:\n                    message.icyReach = reader.int32();\n                    break;\n                case /* int32 nerves_of_cold_steel */ 23:\n                    message.nervesOfColdSteel = reader.int32();\n                    break;\n                case /* int32 annihilation */ 24:\n                    message.annihilation = reader.int32();\n                    break;\n                case /* bool lichborne */ 25:\n                    message.lichborne = reader.bool();\n                    break;\n                case /* int32 on_a_pale_horse */ 26:\n                    message.onAPaleHorse = reader.int32();\n                    break;\n                case /* int32 endless_winter */ 27:\n                    message.endlessWinter = reader.int32();\n                    break;\n                case /* int32 merciless_combat */ 28:\n                    message.mercilessCombat = reader.int32();\n                    break;\n                case /* int32 chill_of_the_grave */ 29:\n                    message.chillOfTheGrave = reader.int32();\n                    break;\n                case /* int32 killing_machine */ 30:\n                    message.killingMachine = reader.int32();\n                    break;\n                case /* int32 rime */ 31:\n                    message.rime = reader.int32();\n                    break;\n                case /* bool pillar_of_frost */ 32:\n                    message.pillarOfFrost = reader.bool();\n                    break;\n                case /* bool improved_icy_talons */ 33:\n                    message.improvedIcyTalons = reader.bool();\n                    break;\n                case /* int32 brittle_bones */ 34:\n                    message.brittleBones = reader.int32();\n                    break;\n                case /* int32 chilblains */ 35:\n                    message.chilblains = reader.int32();\n                    break;\n                case /* bool hungering_cold */ 36:\n                    message.hungeringCold = reader.bool();\n                    break;\n                case /* int32 improved_frost_presence */ 37:\n                    message.improvedFrostPresence = reader.int32();\n                    break;\n                case /* int32 threat_of_thassarian */ 38:\n                    message.threatOfThassarian = reader.int32();\n                    break;\n                case /* int32 might_of_the_frozen_wastes */ 39:\n                    message.mightOfTheFrozenWastes = reader.int32();\n                    break;\n                case /* bool howling_blast */ 40:\n                    message.howlingBlast = reader.bool();\n                    break;\n                case /* int32 unholy_command */ 41:\n                    message.unholyCommand = reader.int32();\n                    break;\n                case /* int32 virulence */ 42:\n                    message.virulence = reader.int32();\n                    break;\n                case /* int32 epidemic */ 43:\n                    message.epidemic = reader.int32();\n                    break;\n                case /* int32 desecration */ 44:\n                    message.desecration = reader.int32();\n                    break;\n                case /* int32 resilient_infection */ 45:\n                    message.resilientInfection = reader.int32();\n                    break;\n                case /* int32 morbidity */ 46:\n                    message.morbidity = reader.int32();\n                    break;\n                case /* int32 runic_corruption */ 47:\n                    message.runicCorruption = reader.int32();\n                    break;\n                case /* bool unholy_frenzy */ 48:\n                    message.unholyFrenzy = reader.bool();\n                    break;\n                case /* int32 contagion */ 49:\n                    message.contagion = reader.int32();\n                    break;\n                case /* int32 shadow_infusion */ 50:\n                    message.shadowInfusion = reader.int32();\n                    break;\n                case /* int32 deaths_advance */ 51:\n                    message.deathsAdvance = reader.int32();\n                    break;\n                case /* int32 magic_suppression */ 52:\n                    message.magicSuppression = reader.int32();\n                    break;\n                case /* int32 rage_of_rivendare */ 53:\n                    message.rageOfRivendare = reader.int32();\n                    break;\n                case /* bool unholy_blight */ 54:\n                    message.unholyBlight = reader.bool();\n                    break;\n                case /* bool anti_magic_zone */ 55:\n                    message.antiMagicZone = reader.bool();\n                    break;\n                case /* int32 improved_unholy_presence */ 56:\n                    message.improvedUnholyPresence = reader.int32();\n                    break;\n                case /* bool dark_transformation */ 57:\n                    message.darkTransformation = reader.bool();\n                    break;\n                case /* int32 ebon_plaguebringer */ 58:\n                    message.ebonPlaguebringer = reader.int32();\n                    break;\n                case /* int32 sudden_doom */ 59:\n                    message.suddenDoom = reader.int32();\n                    break;\n                case /* bool summon_gargoyle */ 60:\n                    message.summonGargoyle = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DeathKnightTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 butchery = 1; */\n        if (message.butchery !== 0)\n            writer.tag(1, WireType.Varint).int32(message.butchery);\n        /* int32 blade_barrier = 2; */\n        if (message.bladeBarrier !== 0)\n            writer.tag(2, WireType.Varint).int32(message.bladeBarrier);\n        /* int32 bladed_armor = 3; */\n        if (message.bladedArmor !== 0)\n            writer.tag(3, WireType.Varint).int32(message.bladedArmor);\n        /* int32 improved_blood_tap = 4; */\n        if (message.improvedBloodTap !== 0)\n            writer.tag(4, WireType.Varint).int32(message.improvedBloodTap);\n        /* int32 scent_of_blood = 5; */\n        if (message.scentOfBlood !== 0)\n            writer.tag(5, WireType.Varint).int32(message.scentOfBlood);\n        /* int32 scarlet_fever = 6; */\n        if (message.scarletFever !== 0)\n            writer.tag(6, WireType.Varint).int32(message.scarletFever);\n        /* int32 hand_of_doom = 7; */\n        if (message.handOfDoom !== 0)\n            writer.tag(7, WireType.Varint).int32(message.handOfDoom);\n        /* int32 blood_caked_blade = 8; */\n        if (message.bloodCakedBlade !== 0)\n            writer.tag(8, WireType.Varint).int32(message.bloodCakedBlade);\n        /* bool bone_shield = 9; */\n        if (message.boneShield !== false)\n            writer.tag(9, WireType.Varint).bool(message.boneShield);\n        /* int32 toughness = 10; */\n        if (message.toughness !== 0)\n            writer.tag(10, WireType.Varint).int32(message.toughness);\n        /* int32 abominations_might = 11; */\n        if (message.abominationsMight !== 0)\n            writer.tag(11, WireType.Varint).int32(message.abominationsMight);\n        /* int32 sanguine_fortitude = 12; */\n        if (message.sanguineFortitude !== 0)\n            writer.tag(12, WireType.Varint).int32(message.sanguineFortitude);\n        /* int32 blood_parasite = 13; */\n        if (message.bloodParasite !== 0)\n            writer.tag(13, WireType.Varint).int32(message.bloodParasite);\n        /* int32 improved_blood_presence = 14; */\n        if (message.improvedBloodPresence !== 0)\n            writer.tag(14, WireType.Varint).int32(message.improvedBloodPresence);\n        /* int32 will_of_the_necropolis = 15; */\n        if (message.willOfTheNecropolis !== 0)\n            writer.tag(15, WireType.Varint).int32(message.willOfTheNecropolis);\n        /* bool rune_tap = 16; */\n        if (message.runeTap !== false)\n            writer.tag(16, WireType.Varint).bool(message.runeTap);\n        /* bool vampiric_blood = 17; */\n        if (message.vampiricBlood !== false)\n            writer.tag(17, WireType.Varint).bool(message.vampiricBlood);\n        /* int32 improved_death_strike = 18; */\n        if (message.improvedDeathStrike !== 0)\n            writer.tag(18, WireType.Varint).int32(message.improvedDeathStrike);\n        /* int32 crimson_scourge = 19; */\n        if (message.crimsonScourge !== 0)\n            writer.tag(19, WireType.Varint).int32(message.crimsonScourge);\n        /* bool dancing_rune_weapon = 20; */\n        if (message.dancingRuneWeapon !== false)\n            writer.tag(20, WireType.Varint).bool(message.dancingRuneWeapon);\n        /* int32 runic_power_mastery = 21; */\n        if (message.runicPowerMastery !== 0)\n            writer.tag(21, WireType.Varint).int32(message.runicPowerMastery);\n        /* int32 icy_reach = 22; */\n        if (message.icyReach !== 0)\n            writer.tag(22, WireType.Varint).int32(message.icyReach);\n        /* int32 nerves_of_cold_steel = 23; */\n        if (message.nervesOfColdSteel !== 0)\n            writer.tag(23, WireType.Varint).int32(message.nervesOfColdSteel);\n        /* int32 annihilation = 24; */\n        if (message.annihilation !== 0)\n            writer.tag(24, WireType.Varint).int32(message.annihilation);\n        /* bool lichborne = 25; */\n        if (message.lichborne !== false)\n            writer.tag(25, WireType.Varint).bool(message.lichborne);\n        /* int32 on_a_pale_horse = 26; */\n        if (message.onAPaleHorse !== 0)\n            writer.tag(26, WireType.Varint).int32(message.onAPaleHorse);\n        /* int32 endless_winter = 27; */\n        if (message.endlessWinter !== 0)\n            writer.tag(27, WireType.Varint).int32(message.endlessWinter);\n        /* int32 merciless_combat = 28; */\n        if (message.mercilessCombat !== 0)\n            writer.tag(28, WireType.Varint).int32(message.mercilessCombat);\n        /* int32 chill_of_the_grave = 29; */\n        if (message.chillOfTheGrave !== 0)\n            writer.tag(29, WireType.Varint).int32(message.chillOfTheGrave);\n        /* int32 killing_machine = 30; */\n        if (message.killingMachine !== 0)\n            writer.tag(30, WireType.Varint).int32(message.killingMachine);\n        /* int32 rime = 31; */\n        if (message.rime !== 0)\n            writer.tag(31, WireType.Varint).int32(message.rime);\n        /* bool pillar_of_frost = 32; */\n        if (message.pillarOfFrost !== false)\n            writer.tag(32, WireType.Varint).bool(message.pillarOfFrost);\n        /* bool improved_icy_talons = 33; */\n        if (message.improvedIcyTalons !== false)\n            writer.tag(33, WireType.Varint).bool(message.improvedIcyTalons);\n        /* int32 brittle_bones = 34; */\n        if (message.brittleBones !== 0)\n            writer.tag(34, WireType.Varint).int32(message.brittleBones);\n        /* int32 chilblains = 35; */\n        if (message.chilblains !== 0)\n            writer.tag(35, WireType.Varint).int32(message.chilblains);\n        /* bool hungering_cold = 36; */\n        if (message.hungeringCold !== false)\n            writer.tag(36, WireType.Varint).bool(message.hungeringCold);\n        /* int32 improved_frost_presence = 37; */\n        if (message.improvedFrostPresence !== 0)\n            writer.tag(37, WireType.Varint).int32(message.improvedFrostPresence);\n        /* int32 threat_of_thassarian = 38; */\n        if (message.threatOfThassarian !== 0)\n            writer.tag(38, WireType.Varint).int32(message.threatOfThassarian);\n        /* int32 might_of_the_frozen_wastes = 39; */\n        if (message.mightOfTheFrozenWastes !== 0)\n            writer.tag(39, WireType.Varint).int32(message.mightOfTheFrozenWastes);\n        /* bool howling_blast = 40; */\n        if (message.howlingBlast !== false)\n            writer.tag(40, WireType.Varint).bool(message.howlingBlast);\n        /* int32 unholy_command = 41; */\n        if (message.unholyCommand !== 0)\n            writer.tag(41, WireType.Varint).int32(message.unholyCommand);\n        /* int32 virulence = 42; */\n        if (message.virulence !== 0)\n            writer.tag(42, WireType.Varint).int32(message.virulence);\n        /* int32 epidemic = 43; */\n        if (message.epidemic !== 0)\n            writer.tag(43, WireType.Varint).int32(message.epidemic);\n        /* int32 desecration = 44; */\n        if (message.desecration !== 0)\n            writer.tag(44, WireType.Varint).int32(message.desecration);\n        /* int32 resilient_infection = 45; */\n        if (message.resilientInfection !== 0)\n            writer.tag(45, WireType.Varint).int32(message.resilientInfection);\n        /* int32 morbidity = 46; */\n        if (message.morbidity !== 0)\n            writer.tag(46, WireType.Varint).int32(message.morbidity);\n        /* int32 runic_corruption = 47; */\n        if (message.runicCorruption !== 0)\n            writer.tag(47, WireType.Varint).int32(message.runicCorruption);\n        /* bool unholy_frenzy = 48; */\n        if (message.unholyFrenzy !== false)\n            writer.tag(48, WireType.Varint).bool(message.unholyFrenzy);\n        /* int32 contagion = 49; */\n        if (message.contagion !== 0)\n            writer.tag(49, WireType.Varint).int32(message.contagion);\n        /* int32 shadow_infusion = 50; */\n        if (message.shadowInfusion !== 0)\n            writer.tag(50, WireType.Varint).int32(message.shadowInfusion);\n        /* int32 deaths_advance = 51; */\n        if (message.deathsAdvance !== 0)\n            writer.tag(51, WireType.Varint).int32(message.deathsAdvance);\n        /* int32 magic_suppression = 52; */\n        if (message.magicSuppression !== 0)\n            writer.tag(52, WireType.Varint).int32(message.magicSuppression);\n        /* int32 rage_of_rivendare = 53; */\n        if (message.rageOfRivendare !== 0)\n            writer.tag(53, WireType.Varint).int32(message.rageOfRivendare);\n        /* bool unholy_blight = 54; */\n        if (message.unholyBlight !== false)\n            writer.tag(54, WireType.Varint).bool(message.unholyBlight);\n        /* bool anti_magic_zone = 55; */\n        if (message.antiMagicZone !== false)\n            writer.tag(55, WireType.Varint).bool(message.antiMagicZone);\n        /* int32 improved_unholy_presence = 56; */\n        if (message.improvedUnholyPresence !== 0)\n            writer.tag(56, WireType.Varint).int32(message.improvedUnholyPresence);\n        /* bool dark_transformation = 57; */\n        if (message.darkTransformation !== false)\n            writer.tag(57, WireType.Varint).bool(message.darkTransformation);\n        /* int32 ebon_plaguebringer = 58; */\n        if (message.ebonPlaguebringer !== 0)\n            writer.tag(58, WireType.Varint).int32(message.ebonPlaguebringer);\n        /* int32 sudden_doom = 59; */\n        if (message.suddenDoom !== 0)\n            writer.tag(59, WireType.Varint).int32(message.suddenDoom);\n        /* bool summon_gargoyle = 60; */\n        if (message.summonGargoyle !== false)\n            writer.tag(60, WireType.Varint).bool(message.summonGargoyle);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DeathKnightTalents\n */\nexport const DeathKnightTalents = new DeathKnightTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DeathKnightOptions$Type extends MessageType<DeathKnightOptions> {\n    constructor() {\n        super(\"proto.DeathKnightOptions\", [\n            { no: 1, name: \"starting_runic_power\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"pet_uptime\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DeathKnightOptions>): DeathKnightOptions {\n        const message = { startingRunicPower: 0, petUptime: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DeathKnightOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeathKnightOptions): DeathKnightOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double starting_runic_power */ 1:\n                    message.startingRunicPower = reader.double();\n                    break;\n                case /* double pet_uptime */ 2:\n                    message.petUptime = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DeathKnightOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double starting_runic_power = 1; */\n        if (message.startingRunicPower !== 0)\n            writer.tag(1, WireType.Bit64).double(message.startingRunicPower);\n        /* double pet_uptime = 2; */\n        if (message.petUptime !== 0)\n            writer.tag(2, WireType.Bit64).double(message.petUptime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DeathKnightOptions\n */\nexport const DeathKnightOptions = new DeathKnightOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BloodDeathKnight$Type extends MessageType<BloodDeathKnight> {\n    constructor() {\n        super(\"proto.BloodDeathKnight\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => BloodDeathKnight_Rotation },\n            { no: 3, name: \"options\", kind: \"message\", T: () => BloodDeathKnight_Options }\n        ]);\n    }\n    create(value?: PartialMessage<BloodDeathKnight>): BloodDeathKnight {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BloodDeathKnight>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BloodDeathKnight): BloodDeathKnight {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.BloodDeathKnight.Rotation rotation */ 1:\n                    message.rotation = BloodDeathKnight_Rotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* proto.BloodDeathKnight.Options options */ 3:\n                    message.options = BloodDeathKnight_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BloodDeathKnight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.BloodDeathKnight.Rotation rotation = 1; */\n        if (message.rotation)\n            BloodDeathKnight_Rotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BloodDeathKnight.Options options = 3; */\n        if (message.options)\n            BloodDeathKnight_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BloodDeathKnight\n */\nexport const BloodDeathKnight = new BloodDeathKnight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BloodDeathKnight_Rotation$Type extends MessageType<BloodDeathKnight_Rotation> {\n    constructor() {\n        super(\"proto.BloodDeathKnight.Rotation\", [\n            { no: 1, name: \"opener\", kind: \"enum\", T: () => [\"proto.BloodDeathKnight.Rotation.Opener\", BloodDeathKnight_Rotation_Opener] },\n            { no: 2, name: \"optimization_setting\", kind: \"enum\", T: () => [\"proto.BloodDeathKnight.Rotation.OptimizationSetting\", BloodDeathKnight_Rotation_OptimizationSetting] },\n            { no: 3, name: \"blood_spell\", kind: \"enum\", T: () => [\"proto.BloodDeathKnight.Rotation.BloodSpell\", BloodDeathKnight_Rotation_BloodSpell] },\n            { no: 4, name: \"presence\", kind: \"enum\", T: () => [\"proto.BloodDeathKnight.Rotation.Presence\", BloodDeathKnight_Rotation_Presence] },\n            { no: 5, name: \"blood_tap_prio\", kind: \"enum\", T: () => [\"proto.BloodDeathKnight.Rotation.BloodTapPrio\", BloodDeathKnight_Rotation_BloodTapPrio] }\n        ]);\n    }\n    create(value?: PartialMessage<BloodDeathKnight_Rotation>): BloodDeathKnight_Rotation {\n        const message = { opener: 0, optimizationSetting: 0, bloodSpell: 0, presence: 0, bloodTapPrio: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BloodDeathKnight_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BloodDeathKnight_Rotation): BloodDeathKnight_Rotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.BloodDeathKnight.Rotation.Opener opener */ 1:\n                    message.opener = reader.int32();\n                    break;\n                case /* proto.BloodDeathKnight.Rotation.OptimizationSetting optimization_setting */ 2:\n                    message.optimizationSetting = reader.int32();\n                    break;\n                case /* proto.BloodDeathKnight.Rotation.BloodSpell blood_spell */ 3:\n                    message.bloodSpell = reader.int32();\n                    break;\n                case /* proto.BloodDeathKnight.Rotation.Presence presence */ 4:\n                    message.presence = reader.int32();\n                    break;\n                case /* proto.BloodDeathKnight.Rotation.BloodTapPrio blood_tap_prio */ 5:\n                    message.bloodTapPrio = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BloodDeathKnight_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.BloodDeathKnight.Rotation.Opener opener = 1; */\n        if (message.opener !== 0)\n            writer.tag(1, WireType.Varint).int32(message.opener);\n        /* proto.BloodDeathKnight.Rotation.OptimizationSetting optimization_setting = 2; */\n        if (message.optimizationSetting !== 0)\n            writer.tag(2, WireType.Varint).int32(message.optimizationSetting);\n        /* proto.BloodDeathKnight.Rotation.BloodSpell blood_spell = 3; */\n        if (message.bloodSpell !== 0)\n            writer.tag(3, WireType.Varint).int32(message.bloodSpell);\n        /* proto.BloodDeathKnight.Rotation.Presence presence = 4; */\n        if (message.presence !== 0)\n            writer.tag(4, WireType.Varint).int32(message.presence);\n        /* proto.BloodDeathKnight.Rotation.BloodTapPrio blood_tap_prio = 5; */\n        if (message.bloodTapPrio !== 0)\n            writer.tag(5, WireType.Varint).int32(message.bloodTapPrio);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BloodDeathKnight.Rotation\n */\nexport const BloodDeathKnight_Rotation = new BloodDeathKnight_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BloodDeathKnight_Options$Type extends MessageType<BloodDeathKnight_Options> {\n    constructor() {\n        super(\"proto.BloodDeathKnight.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => DeathKnightOptions },\n            { no: 2, name: \"defensive_delay\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"drw_pesti_apply\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<BloodDeathKnight_Options>): BloodDeathKnight_Options {\n        const message = { defensiveDelay: 0, drwPestiApply: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BloodDeathKnight_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BloodDeathKnight_Options): BloodDeathKnight_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DeathKnightOptions class_options */ 1:\n                    message.classOptions = DeathKnightOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* double defensive_delay */ 2:\n                    message.defensiveDelay = reader.double();\n                    break;\n                case /* bool drw_pesti_apply */ 6:\n                    message.drwPestiApply = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BloodDeathKnight_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DeathKnightOptions class_options = 1; */\n        if (message.classOptions)\n            DeathKnightOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double defensive_delay = 2; */\n        if (message.defensiveDelay !== 0)\n            writer.tag(2, WireType.Bit64).double(message.defensiveDelay);\n        /* bool drw_pesti_apply = 6; */\n        if (message.drwPestiApply !== false)\n            writer.tag(6, WireType.Varint).bool(message.drwPestiApply);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BloodDeathKnight.Options\n */\nexport const BloodDeathKnight_Options = new BloodDeathKnight_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FrostDeathKnight$Type extends MessageType<FrostDeathKnight> {\n    constructor() {\n        super(\"proto.FrostDeathKnight\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => FrostDeathKnight_Options }\n        ]);\n    }\n    create(value?: PartialMessage<FrostDeathKnight>): FrostDeathKnight {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FrostDeathKnight>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FrostDeathKnight): FrostDeathKnight {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.FrostDeathKnight.Options options */ 3:\n                    message.options = FrostDeathKnight_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FrostDeathKnight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.FrostDeathKnight.Options options = 3; */\n        if (message.options)\n            FrostDeathKnight_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FrostDeathKnight\n */\nexport const FrostDeathKnight = new FrostDeathKnight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FrostDeathKnight_Rotation$Type extends MessageType<FrostDeathKnight_Rotation> {\n    constructor() {\n        super(\"proto.FrostDeathKnight.Rotation\", []);\n    }\n    create(value?: PartialMessage<FrostDeathKnight_Rotation>): FrostDeathKnight_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FrostDeathKnight_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FrostDeathKnight_Rotation): FrostDeathKnight_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: FrostDeathKnight_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FrostDeathKnight.Rotation\n */\nexport const FrostDeathKnight_Rotation = new FrostDeathKnight_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass FrostDeathKnight_Options$Type extends MessageType<FrostDeathKnight_Options> {\n    constructor() {\n        super(\"proto.FrostDeathKnight.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => DeathKnightOptions },\n            { no: 2, name: \"use_ams\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"avg_ams_success_rate\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"avg_ams_hit\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<FrostDeathKnight_Options>): FrostDeathKnight_Options {\n        const message = { useAms: false, avgAmsSuccessRate: 0, avgAmsHit: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<FrostDeathKnight_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FrostDeathKnight_Options): FrostDeathKnight_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DeathKnightOptions class_options */ 1:\n                    message.classOptions = DeathKnightOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* bool use_ams */ 2:\n                    message.useAms = reader.bool();\n                    break;\n                case /* double avg_ams_success_rate */ 3:\n                    message.avgAmsSuccessRate = reader.double();\n                    break;\n                case /* double avg_ams_hit */ 4:\n                    message.avgAmsHit = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: FrostDeathKnight_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DeathKnightOptions class_options = 1; */\n        if (message.classOptions)\n            DeathKnightOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool use_ams = 2; */\n        if (message.useAms !== false)\n            writer.tag(2, WireType.Varint).bool(message.useAms);\n        /* double avg_ams_success_rate = 3; */\n        if (message.avgAmsSuccessRate !== 0)\n            writer.tag(3, WireType.Bit64).double(message.avgAmsSuccessRate);\n        /* double avg_ams_hit = 4; */\n        if (message.avgAmsHit !== 0)\n            writer.tag(4, WireType.Bit64).double(message.avgAmsHit);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.FrostDeathKnight.Options\n */\nexport const FrostDeathKnight_Options = new FrostDeathKnight_Options$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnholyDeathKnight$Type extends MessageType<UnholyDeathKnight> {\n    constructor() {\n        super(\"proto.UnholyDeathKnight\", [\n            { no: 3, name: \"options\", kind: \"message\", T: () => UnholyDeathKnight_Options }\n        ]);\n    }\n    create(value?: PartialMessage<UnholyDeathKnight>): UnholyDeathKnight {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnholyDeathKnight>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnholyDeathKnight): UnholyDeathKnight {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnholyDeathKnight.Options options */ 3:\n                    message.options = UnholyDeathKnight_Options.internalBinaryRead(reader, reader.uint32(), options, message.options);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnholyDeathKnight, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnholyDeathKnight.Options options = 3; */\n        if (message.options)\n            UnholyDeathKnight_Options.internalBinaryWrite(message.options, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnholyDeathKnight\n */\nexport const UnholyDeathKnight = new UnholyDeathKnight$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnholyDeathKnight_Rotation$Type extends MessageType<UnholyDeathKnight_Rotation> {\n    constructor() {\n        super(\"proto.UnholyDeathKnight.Rotation\", []);\n    }\n    create(value?: PartialMessage<UnholyDeathKnight_Rotation>): UnholyDeathKnight_Rotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnholyDeathKnight_Rotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnholyDeathKnight_Rotation): UnholyDeathKnight_Rotation {\n        return target ?? this.create();\n    }\n    internalBinaryWrite(message: UnholyDeathKnight_Rotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnholyDeathKnight.Rotation\n */\nexport const UnholyDeathKnight_Rotation = new UnholyDeathKnight_Rotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnholyDeathKnight_Options$Type extends MessageType<UnholyDeathKnight_Options> {\n    constructor() {\n        super(\"proto.UnholyDeathKnight.Options\", [\n            { no: 1, name: \"class_options\", kind: \"message\", T: () => DeathKnightOptions },\n            { no: 2, name: \"unholy_frenzy_target\", kind: \"message\", T: () => UnitReference },\n            { no: 3, name: \"use_ams\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"avg_ams_success_rate\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"avg_ams_hit\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<UnholyDeathKnight_Options>): UnholyDeathKnight_Options {\n        const message = { useAms: false, avgAmsSuccessRate: 0, avgAmsHit: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnholyDeathKnight_Options>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnholyDeathKnight_Options): UnholyDeathKnight_Options {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DeathKnightOptions class_options */ 1:\n                    message.classOptions = DeathKnightOptions.internalBinaryRead(reader, reader.uint32(), options, message.classOptions);\n                    break;\n                case /* proto.UnitReference unholy_frenzy_target */ 2:\n                    message.unholyFrenzyTarget = UnitReference.internalBinaryRead(reader, reader.uint32(), options, message.unholyFrenzyTarget);\n                    break;\n                case /* bool use_ams */ 3:\n                    message.useAms = reader.bool();\n                    break;\n                case /* double avg_ams_success_rate */ 4:\n                    message.avgAmsSuccessRate = reader.double();\n                    break;\n                case /* double avg_ams_hit */ 5:\n                    message.avgAmsHit = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnholyDeathKnight_Options, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DeathKnightOptions class_options = 1; */\n        if (message.classOptions)\n            DeathKnightOptions.internalBinaryWrite(message.classOptions, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitReference unholy_frenzy_target = 2; */\n        if (message.unholyFrenzyTarget)\n            UnitReference.internalBinaryWrite(message.unholyFrenzyTarget, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* bool use_ams = 3; */\n        if (message.useAms !== false)\n            writer.tag(3, WireType.Varint).bool(message.useAms);\n        /* double avg_ams_success_rate = 4; */\n        if (message.avgAmsSuccessRate !== 0)\n            writer.tag(4, WireType.Bit64).double(message.avgAmsSuccessRate);\n        /* double avg_ams_hit = 5; */\n        if (message.avgAmsHit !== 0)\n            writer.tag(5, WireType.Bit64).double(message.avgAmsHit);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnholyDeathKnight.Options\n */\nexport const UnholyDeathKnight_Options = new UnholyDeathKnight_Options$Type();\n","// @generated by protobuf-ts 2.9.1 with parameter generate_dependencies\n// @generated from protobuf file \"api.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { ItemSlot } from \"./common\";\nimport { ItemSpec } from \"./common\";\nimport { PseudoStat } from \"./common\";\nimport { Stat } from \"./common\";\nimport { Encounter } from \"./common\";\nimport { ActionID } from \"./common\";\nimport { UnitReference } from \"./common\";\nimport { Debuffs } from \"./common\";\nimport { RaidBuffs } from \"./common\";\nimport { PartyBuffs } from \"./common\";\nimport { SimDatabase } from \"./common\";\nimport { HealingModel } from \"./common\";\nimport { APLRotation } from \"./apl\";\nimport { Cooldowns } from \"./common\";\nimport { Profession } from \"./common\";\nimport { Glyphs } from \"./common\";\nimport { ProtectionWarrior } from \"./warrior\";\nimport { FuryWarrior } from \"./warrior\";\nimport { ArmsWarrior } from \"./warrior\";\nimport { DestructionWarlock } from \"./warlock\";\nimport { DemonologyWarlock } from \"./warlock\";\nimport { AfflictionWarlock } from \"./warlock\";\nimport { RestorationShaman } from \"./shaman\";\nimport { EnhancementShaman } from \"./shaman\";\nimport { ElementalShaman } from \"./shaman\";\nimport { SubtletyRogue } from \"./rogue\";\nimport { CombatRogue } from \"./rogue\";\nimport { AssassinationRogue } from \"./rogue\";\nimport { ShadowPriest } from \"./priest\";\nimport { HolyPriest } from \"./priest\";\nimport { DisciplinePriest } from \"./priest\";\nimport { RetributionPaladin } from \"./paladin\";\nimport { ProtectionPaladin } from \"./paladin\";\nimport { HolyPaladin } from \"./paladin\";\nimport { FrostMage } from \"./mage\";\nimport { FireMage } from \"./mage\";\nimport { ArcaneMage } from \"./mage\";\nimport { SurvivalHunter } from \"./hunter\";\nimport { MarksmanshipHunter } from \"./hunter\";\nimport { BeastMasteryHunter } from \"./hunter\";\nimport { RestorationDruid } from \"./druid\";\nimport { FeralDruid } from \"./druid\";\nimport { BalanceDruid } from \"./druid\";\nimport { UnholyDeathKnight } from \"./death_knight\";\nimport { FrostDeathKnight } from \"./death_knight\";\nimport { BloodDeathKnight } from \"./death_knight\";\nimport { IndividualBuffs } from \"./common\";\nimport { ItemSwap } from \"./common\";\nimport { UnitStats } from \"./common\";\nimport { Consumes } from \"./common\";\nimport { EquipmentSpec } from \"./common\";\nimport { Class } from \"./common\";\nimport { Race } from \"./common\";\n/**\n * NextIndex: 52\n *\n * @generated from protobuf message proto.Player\n */\nexport interface Player {\n    /**\n     * Label used for logging.\n     *\n     * @generated from protobuf field: string name = 51;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.Race race = 1;\n     */\n    race: Race;\n    /**\n     * @generated from protobuf field: proto.Class class = 2;\n     */\n    class: Class;\n    /**\n     * @generated from protobuf field: proto.EquipmentSpec equipment = 3;\n     */\n    equipment?: EquipmentSpec;\n    /**\n     * @generated from protobuf field: proto.Consumes consumes = 4;\n     */\n    consumes?: Consumes;\n    /**\n     * @generated from protobuf field: proto.UnitStats bonus_stats = 5;\n     */\n    bonusStats?: UnitStats;\n    /**\n     * @generated from protobuf field: bool enable_item_swap = 6;\n     */\n    enableItemSwap: boolean;\n    /**\n     * @generated from protobuf field: proto.ItemSwap item_swap = 7;\n     */\n    itemSwap?: ItemSwap;\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs buffs = 8;\n     */\n    buffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf oneof: spec\n     */\n    spec: {\n        oneofKind: \"bloodDeathKnight\";\n        /**\n         * @generated from protobuf field: proto.BloodDeathKnight blood_death_knight = 9;\n         */\n        bloodDeathKnight: BloodDeathKnight;\n    } | {\n        oneofKind: \"frostDeathKnight\";\n        /**\n         * @generated from protobuf field: proto.FrostDeathKnight frost_death_knight = 10;\n         */\n        frostDeathKnight: FrostDeathKnight;\n    } | {\n        oneofKind: \"unholyDeathKnight\";\n        /**\n         * @generated from protobuf field: proto.UnholyDeathKnight unholy_death_knight = 11;\n         */\n        unholyDeathKnight: UnholyDeathKnight;\n    } | {\n        oneofKind: \"balanceDruid\";\n        /**\n         * @generated from protobuf field: proto.BalanceDruid balance_druid = 12;\n         */\n        balanceDruid: BalanceDruid;\n    } | {\n        oneofKind: \"feralDruid\";\n        /**\n         * @generated from protobuf field: proto.FeralDruid feral_druid = 13;\n         */\n        feralDruid: FeralDruid;\n    } | {\n        oneofKind: \"restorationDruid\";\n        /**\n         * @generated from protobuf field: proto.RestorationDruid restoration_druid = 14;\n         */\n        restorationDruid: RestorationDruid;\n    } | {\n        oneofKind: \"beastMasteryHunter\";\n        /**\n         * @generated from protobuf field: proto.BeastMasteryHunter beast_mastery_hunter = 15;\n         */\n        beastMasteryHunter: BeastMasteryHunter;\n    } | {\n        oneofKind: \"marksmanshipHunter\";\n        /**\n         * @generated from protobuf field: proto.MarksmanshipHunter marksmanship_hunter = 16;\n         */\n        marksmanshipHunter: MarksmanshipHunter;\n    } | {\n        oneofKind: \"survivalHunter\";\n        /**\n         * @generated from protobuf field: proto.SurvivalHunter survival_hunter = 17;\n         */\n        survivalHunter: SurvivalHunter;\n    } | {\n        oneofKind: \"arcaneMage\";\n        /**\n         * @generated from protobuf field: proto.ArcaneMage arcane_mage = 18;\n         */\n        arcaneMage: ArcaneMage;\n    } | {\n        oneofKind: \"fireMage\";\n        /**\n         * @generated from protobuf field: proto.FireMage fire_mage = 19;\n         */\n        fireMage: FireMage;\n    } | {\n        oneofKind: \"frostMage\";\n        /**\n         * @generated from protobuf field: proto.FrostMage frost_mage = 20;\n         */\n        frostMage: FrostMage;\n    } | {\n        oneofKind: \"holyPaladin\";\n        /**\n         * @generated from protobuf field: proto.HolyPaladin holy_paladin = 21;\n         */\n        holyPaladin: HolyPaladin;\n    } | {\n        oneofKind: \"protectionPaladin\";\n        /**\n         * @generated from protobuf field: proto.ProtectionPaladin protection_paladin = 22;\n         */\n        protectionPaladin: ProtectionPaladin;\n    } | {\n        oneofKind: \"retributionPaladin\";\n        /**\n         * @generated from protobuf field: proto.RetributionPaladin retribution_paladin = 23;\n         */\n        retributionPaladin: RetributionPaladin;\n    } | {\n        oneofKind: \"disciplinePriest\";\n        /**\n         * @generated from protobuf field: proto.DisciplinePriest discipline_priest = 24;\n         */\n        disciplinePriest: DisciplinePriest;\n    } | {\n        oneofKind: \"holyPriest\";\n        /**\n         * @generated from protobuf field: proto.HolyPriest holy_priest = 25;\n         */\n        holyPriest: HolyPriest;\n    } | {\n        oneofKind: \"shadowPriest\";\n        /**\n         * @generated from protobuf field: proto.ShadowPriest shadow_priest = 26;\n         */\n        shadowPriest: ShadowPriest;\n    } | {\n        oneofKind: \"assassinationRogue\";\n        /**\n         * @generated from protobuf field: proto.AssassinationRogue assassination_rogue = 27;\n         */\n        assassinationRogue: AssassinationRogue;\n    } | {\n        oneofKind: \"combatRogue\";\n        /**\n         * @generated from protobuf field: proto.CombatRogue combat_rogue = 28;\n         */\n        combatRogue: CombatRogue;\n    } | {\n        oneofKind: \"subtletyRogue\";\n        /**\n         * @generated from protobuf field: proto.SubtletyRogue subtlety_rogue = 29;\n         */\n        subtletyRogue: SubtletyRogue;\n    } | {\n        oneofKind: \"elementalShaman\";\n        /**\n         * @generated from protobuf field: proto.ElementalShaman elemental_shaman = 30;\n         */\n        elementalShaman: ElementalShaman;\n    } | {\n        oneofKind: \"enhancementShaman\";\n        /**\n         * @generated from protobuf field: proto.EnhancementShaman enhancement_shaman = 31;\n         */\n        enhancementShaman: EnhancementShaman;\n    } | {\n        oneofKind: \"restorationShaman\";\n        /**\n         * @generated from protobuf field: proto.RestorationShaman restoration_shaman = 32;\n         */\n        restorationShaman: RestorationShaman;\n    } | {\n        oneofKind: \"afflictionWarlock\";\n        /**\n         * @generated from protobuf field: proto.AfflictionWarlock affliction_warlock = 33;\n         */\n        afflictionWarlock: AfflictionWarlock;\n    } | {\n        oneofKind: \"demonologyWarlock\";\n        /**\n         * @generated from protobuf field: proto.DemonologyWarlock demonology_warlock = 34;\n         */\n        demonologyWarlock: DemonologyWarlock;\n    } | {\n        oneofKind: \"destructionWarlock\";\n        /**\n         * @generated from protobuf field: proto.DestructionWarlock destruction_warlock = 35;\n         */\n        destructionWarlock: DestructionWarlock;\n    } | {\n        oneofKind: \"armsWarrior\";\n        /**\n         * @generated from protobuf field: proto.ArmsWarrior arms_warrior = 36;\n         */\n        armsWarrior: ArmsWarrior;\n    } | {\n        oneofKind: \"furyWarrior\";\n        /**\n         * @generated from protobuf field: proto.FuryWarrior fury_warrior = 37;\n         */\n        furyWarrior: FuryWarrior;\n    } | {\n        oneofKind: \"protectionWarrior\";\n        /**\n         * @generated from protobuf field: proto.ProtectionWarrior protection_warrior = 38;\n         */\n        protectionWarrior: ProtectionWarrior;\n    } | {\n        oneofKind: undefined;\n    };\n    /**\n     * Talents in wowhead format, e.g. '01102123133-12312312-'\n     *\n     * @generated from protobuf field: string talents_string = 39;\n     */\n    talentsString: string;\n    /**\n     * @generated from protobuf field: proto.Glyphs glyphs = 40;\n     */\n    glyphs?: Glyphs;\n    /**\n     * @generated from protobuf field: proto.Profession profession1 = 41;\n     */\n    profession1: Profession;\n    /**\n     * @generated from protobuf field: proto.Profession profession2 = 42;\n     */\n    profession2: Profession;\n    /**\n     * @generated from protobuf field: proto.Cooldowns cooldowns = 43;\n     */\n    cooldowns?: Cooldowns;\n    /**\n     * @generated from protobuf field: proto.APLRotation rotation = 44;\n     */\n    rotation?: APLRotation;\n    // TODO: Move most of the remaining fields into a 'MiscellaneousPlayerOptions' message.\n    // This will remove a lot of the boilerplate code in the UI for each new field.\n\n    /**\n     * @generated from protobuf field: int32 reaction_time_ms = 45;\n     */\n    reactionTimeMs: number;\n    /**\n     * @generated from protobuf field: int32 channel_clip_delay_ms = 46;\n     */\n    channelClipDelayMs: number;\n    /**\n     * @generated from protobuf field: bool in_front_of_target = 47;\n     */\n    inFrontOfTarget: boolean;\n    /**\n     * @generated from protobuf field: double distance_from_target = 48;\n     */\n    distanceFromTarget: number;\n    /**\n     * @generated from protobuf field: proto.HealingModel healing_model = 49;\n     */\n    healingModel?: HealingModel;\n    /**\n     * Items/enchants/gems/etc to include in the database.\n     *\n     * @generated from protobuf field: proto.SimDatabase database = 50;\n     */\n    database?: SimDatabase;\n}\n/**\n * @generated from protobuf message proto.Party\n */\nexport interface Party {\n    /**\n     * @generated from protobuf field: repeated proto.Player players = 1;\n     */\n    players: Player[];\n    /**\n     * @generated from protobuf field: proto.PartyBuffs buffs = 2;\n     */\n    buffs?: PartyBuffs;\n}\n/**\n * @generated from protobuf message proto.Raid\n */\nexport interface Raid {\n    /**\n     * @generated from protobuf field: repeated proto.Party parties = 1;\n     */\n    parties: Party[];\n    /**\n     * The number of parties in the raid who participate in the sim, e.g.\n     * 10-man vs 25-man raids. The remaining parties are unused but can hold\n     * bench players.\n     *\n     * If this value is 0, all parties are included.\n     *\n     * @generated from protobuf field: int32 num_active_parties = 2;\n     */\n    numActiveParties: number;\n    /**\n     * @generated from protobuf field: proto.RaidBuffs buffs = 7;\n     */\n    buffs?: RaidBuffs;\n    /**\n     * Extra debuffs provided by buff bots in this raid.\n     * This is also used for debuffs in the individual sims.\n     *\n     * @generated from protobuf field: proto.Debuffs debuffs = 5;\n     */\n    debuffs?: Debuffs;\n    /**\n     * Players who will be tanking mobs.\n     *\n     * @generated from protobuf field: repeated proto.UnitReference tanks = 4;\n     */\n    tanks: UnitReference[];\n    /**\n     * Staggers Stormstrike casts across Enhance Shaman to maximize charge usage.\n     *\n     * @generated from protobuf field: bool stagger_stormstrikes = 3;\n     */\n    staggerStormstrikes: boolean;\n    /**\n     * Extra fake players to add. Currently only used by healing sims.\n     *\n     * @generated from protobuf field: int32 target_dummies = 6;\n     */\n    targetDummies: number;\n}\n/**\n * @generated from protobuf message proto.SimOptions\n */\nexport interface SimOptions {\n    /**\n     * @generated from protobuf field: int32 iterations = 1;\n     */\n    iterations: number;\n    /**\n     * @generated from protobuf field: int64 random_seed = 2;\n     */\n    randomSeed: bigint;\n    /**\n     * @generated from protobuf field: bool debug = 3;\n     */\n    debug: boolean; // Enables debug logging.\n    /**\n     * @generated from protobuf field: bool debug_first_iteration = 6;\n     */\n    debugFirstIteration: boolean;\n    /**\n     * @generated from protobuf field: bool is_test = 5;\n     */\n    isTest: boolean; // Only used internally.\n    /**\n     * @generated from protobuf field: bool save_all_values = 7;\n     */\n    saveAllValues: boolean; // Only used internally.\n    /**\n     * @generated from protobuf field: bool interactive = 8;\n     */\n    interactive: boolean; // Enables interactive mode.\n}\n/**\n * The aggregated results from all uses of a particular action.\n *\n * @generated from protobuf message proto.ActionMetrics\n */\nexport interface ActionMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * True if a melee action, false if a spell action.\n     *\n     * @generated from protobuf field: bool is_melee = 2;\n     */\n    isMelee: boolean;\n    /**\n     * Metrics for this action for each target.\n     * Note that some spells are untargeted, these will always have a single\n     * element in this array.\n     *\n     * @generated from protobuf field: repeated proto.TargetedActionMetrics targets = 3;\n     */\n    targets: TargetedActionMetrics[];\n}\n/**\n * Metrics for a specific action, when cast at a particular target.\n *\n * @generated from protobuf message proto.TargetedActionMetrics\n */\nexport interface TargetedActionMetrics {\n    /**\n     * Raid/Target Index of the unit these metrics are targeted at.\n     *\n     * @generated from protobuf field: int32 unit_index = 12;\n     */\n    unitIndex: number;\n    /**\n     * # of times this action was used by the agent.\n     *\n     * @generated from protobuf field: int32 casts = 1;\n     */\n    casts: number;\n    /**\n     * # of times this action hit a target. For cleave spells this can be larger than casts.\n     *\n     * @generated from protobuf field: int32 hits = 2;\n     */\n    hits: number;\n    /**\n     * # of times this action was a critical strike.\n     *\n     * @generated from protobuf field: int32 crits = 3;\n     */\n    crits: number;\n    /**\n     * # of times this action was a Miss or Resist.\n     *\n     * @generated from protobuf field: int32 misses = 4;\n     */\n    misses: number;\n    /**\n     * # of times this action was a Dodge.\n     *\n     * @generated from protobuf field: int32 dodges = 5;\n     */\n    dodges: number;\n    /**\n     * # of times this action was a Parry.\n     *\n     * @generated from protobuf field: int32 parries = 6;\n     */\n    parries: number;\n    /**\n     * # of times this action was a Block.\n     *\n     * @generated from protobuf field: int32 blocks = 7;\n     */\n    blocks: number;\n    /**\n     * # of times this action was a Glance.\n     *\n     * @generated from protobuf field: int32 glances = 8;\n     */\n    glances: number;\n    /**\n     * Total damage done to this target by this action.\n     *\n     * @generated from protobuf field: double damage = 9;\n     */\n    damage: number;\n    /**\n     * Total threat done to this target by this action.\n     *\n     * @generated from protobuf field: double threat = 10;\n     */\n    threat: number;\n    /**\n     * Total healing done to this target by this action.\n     *\n     * @generated from protobuf field: double healing = 11;\n     */\n    healing: number;\n    /**\n     * Total shielding done to this target by this action.\n     *\n     * @generated from protobuf field: double shielding = 13;\n     */\n    shielding: number;\n    /**\n     * Total time spent casting this action, in milliseconds, either from hard casts, GCD, or channeling.\n     *\n     * @generated from protobuf field: double cast_time_ms = 14;\n     */\n    castTimeMs: number;\n}\n/**\n * @generated from protobuf message proto.AuraMetrics\n */\nexport interface AuraMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * @generated from protobuf field: double uptime_seconds_avg = 2;\n     */\n    uptimeSecondsAvg: number;\n    /**\n     * @generated from protobuf field: double uptime_seconds_stdev = 3;\n     */\n    uptimeSecondsStdev: number;\n    /**\n     * @generated from protobuf field: double procs_avg = 4;\n     */\n    procsAvg: number;\n}\n/**\n * @generated from protobuf message proto.ResourceMetrics\n */\nexport interface ResourceMetrics {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * @generated from protobuf field: proto.ResourceType type = 2;\n     */\n    type: ResourceType;\n    /**\n     * # of times this action was used by the agent.\n     *\n     * @generated from protobuf field: int32 events = 3;\n     */\n    events: number;\n    /**\n     * Total resource gain from this action. Will be negative for spend actions.\n     *\n     * @generated from protobuf field: double gain = 4;\n     */\n    gain: number;\n    /**\n     * Like gain, but doesn't include gains over resource cap.\n     *\n     * @generated from protobuf field: double actual_gain = 5;\n     */\n    actualGain: number;\n}\n/**\n * @generated from protobuf message proto.DistributionMetrics\n */\nexport interface DistributionMetrics {\n    /**\n     * @generated from protobuf field: double avg = 1;\n     */\n    avg: number;\n    /**\n     * @generated from protobuf field: double stdev = 2;\n     */\n    stdev: number;\n    /**\n     * @generated from protobuf field: double max = 3;\n     */\n    max: number;\n    /**\n     * @generated from protobuf field: int64 max_seed = 5;\n     */\n    maxSeed: bigint;\n    /**\n     * @generated from protobuf field: double min = 6;\n     */\n    min: number;\n    /**\n     * @generated from protobuf field: int64 min_seed = 7;\n     */\n    minSeed: bigint;\n    /**\n     * @generated from protobuf field: map<int32, int32> hist = 4;\n     */\n    hist: {\n        [key: number]: number;\n    };\n    /**\n     * @generated from protobuf field: repeated double all_values = 8;\n     */\n    allValues: number[];\n}\n/**\n * All the results for a single Unit (player, target, or pet).\n *\n * @generated from protobuf message proto.UnitMetrics\n */\nexport interface UnitMetrics {\n    /**\n     * @generated from protobuf field: string name = 9;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: int32 unit_index = 13;\n     */\n    unitIndex: number;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dpasp = 16;\n     */\n    dpasp?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics threat = 8;\n     */\n    threat?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dtps = 11;\n     */\n    dtps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics tmi = 17;\n     */\n    tmi?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics hps = 14;\n     */\n    hps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics tto = 15;\n     */\n    tto?: DistributionMetrics; // Time To OOM, in seconds.\n    /**\n     * average seconds spent oom per iteration\n     *\n     * @generated from protobuf field: double seconds_oom_avg = 3;\n     */\n    secondsOomAvg: number;\n    /**\n     * Chance (0-1) representing probability of death. Used for tank sims.\n     *\n     * @generated from protobuf field: double chance_of_death = 12;\n     */\n    chanceOfDeath: number;\n    /**\n     * @generated from protobuf field: repeated proto.ActionMetrics actions = 5;\n     */\n    actions: ActionMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.AuraMetrics auras = 6;\n     */\n    auras: AuraMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.ResourceMetrics resources = 10;\n     */\n    resources: ResourceMetrics[];\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics pets = 7;\n     */\n    pets: UnitMetrics[];\n}\n/**\n * Results for a whole raid.\n *\n * @generated from protobuf message proto.PartyMetrics\n */\nexport interface PartyMetrics {\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics hps = 3;\n     */\n    hps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics players = 2;\n     */\n    players: UnitMetrics[];\n}\n/**\n * Results for a whole raid.\n *\n * @generated from protobuf message proto.RaidMetrics\n */\nexport interface RaidMetrics {\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics dps = 1;\n     */\n    dps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: proto.DistributionMetrics hps = 3;\n     */\n    hps?: DistributionMetrics;\n    /**\n     * @generated from protobuf field: repeated proto.PartyMetrics parties = 2;\n     */\n    parties: PartyMetrics[];\n}\n/**\n * @generated from protobuf message proto.EncounterMetrics\n */\nexport interface EncounterMetrics {\n    /**\n     * @generated from protobuf field: repeated proto.UnitMetrics targets = 1;\n     */\n    targets: UnitMetrics[];\n}\n/**\n * RPC RaidSim\n *\n * @generated from protobuf message proto.RaidSimRequest\n */\nexport interface RaidSimRequest {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 2;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: proto.SimOptions sim_options = 3;\n     */\n    simOptions?: SimOptions;\n}\n/**\n * Result from running the raid sim.\n *\n * @generated from protobuf message proto.RaidSimResult\n */\nexport interface RaidSimResult {\n    /**\n     * @generated from protobuf field: proto.RaidMetrics raid_metrics = 1;\n     */\n    raidMetrics?: RaidMetrics;\n    /**\n     * @generated from protobuf field: proto.EncounterMetrics encounter_metrics = 2;\n     */\n    encounterMetrics?: EncounterMetrics;\n    /**\n     * @generated from protobuf field: string logs = 3;\n     */\n    logs: string;\n    /**\n     * Needed for displaying the timeline properly when the duration +/- option\n     * is used.\n     *\n     * @generated from protobuf field: double first_iteration_duration = 4;\n     */\n    firstIterationDuration: number;\n    /**\n     * @generated from protobuf field: double avg_iteration_duration = 6;\n     */\n    avgIterationDuration: number;\n    /**\n     * @generated from protobuf field: string error_result = 5;\n     */\n    errorResult: string;\n}\n/**\n * RPC ComputeStats\n *\n * @generated from protobuf message proto.ComputeStatsRequest\n */\nexport interface ComputeStatsRequest {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 2;\n     */\n    encounter?: Encounter;\n}\n/**\n * @generated from protobuf message proto.AuraStats\n */\nexport interface AuraStats {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * @generated from protobuf field: int32 max_stacks = 2;\n     */\n    maxStacks: number;\n    /**\n     * @generated from protobuf field: bool has_icd = 3;\n     */\n    hasIcd: boolean;\n    /**\n     * @generated from protobuf field: bool has_exclusive_effect = 4;\n     */\n    hasExclusiveEffect: boolean;\n}\n/**\n * @generated from protobuf message proto.SpellStats\n */\nexport interface SpellStats {\n    /**\n     * @generated from protobuf field: proto.ActionID id = 1;\n     */\n    id?: ActionID;\n    /**\n     * @generated from protobuf field: bool is_castable = 2;\n     */\n    isCastable: boolean; // Whether this spell may be cast by the APL logic.\n    /**\n     * @generated from protobuf field: bool is_channeled = 7;\n     */\n    isChanneled: boolean; // Whether this spell is a channeled spell (Mind Flay, Drain Soul, etc).\n    /**\n     * @generated from protobuf field: bool is_major_cooldown = 3;\n     */\n    isMajorCooldown: boolean; // Whether this spell is a major cooldown.\n    /**\n     * @generated from protobuf field: bool has_dot = 4;\n     */\n    hasDot: boolean; // Whether this spell applies a DoT effect.\n    /**\n     * @generated from protobuf field: bool has_shield = 6;\n     */\n    hasShield: boolean; // Whether this spell applies a shield effect.\n    /**\n     * @generated from protobuf field: bool prepull_only = 5;\n     */\n    prepullOnly: boolean; // Whether this spell may only be cast during prepull.\n    /**\n     * @generated from protobuf field: bool encounter_only = 8;\n     */\n    encounterOnly: boolean; // Whether this spell may only be cast during the encounter (not prepull).\n    /**\n     * @generated from protobuf field: bool has_cast_time = 9;\n     */\n    hasCastTime: boolean; // Whether this spell has a cast time or not.\n}\n/**\n * @generated from protobuf message proto.APLActionStats\n */\nexport interface APLActionStats {\n    /**\n     * @generated from protobuf field: repeated string warnings = 1;\n     */\n    warnings: string[];\n}\n/**\n * @generated from protobuf message proto.APLStats\n */\nexport interface APLStats {\n    /**\n     * @generated from protobuf field: repeated proto.APLActionStats prepull_actions = 1;\n     */\n    prepullActions: APLActionStats[];\n    /**\n     * @generated from protobuf field: repeated proto.APLActionStats priority_list = 2;\n     */\n    priorityList: APLActionStats[];\n}\n/**\n * @generated from protobuf message proto.UnitMetadata\n */\nexport interface UnitMetadata {\n    /**\n     * @generated from protobuf field: string name = 3;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: repeated proto.SpellStats spells = 1;\n     */\n    spells: SpellStats[];\n    /**\n     * @generated from protobuf field: repeated proto.AuraStats auras = 2;\n     */\n    auras: AuraStats[];\n}\n/**\n * @generated from protobuf message proto.PetStats\n */\nexport interface PetStats {\n    /**\n     * @generated from protobuf field: proto.UnitMetadata metadata = 1;\n     */\n    metadata?: UnitMetadata;\n}\n/**\n * @generated from protobuf message proto.PlayerStats\n */\nexport interface PlayerStats {\n    /**\n     * Stats\n     *\n     * @generated from protobuf field: proto.UnitStats base_stats = 6;\n     */\n    baseStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats gear_stats = 1;\n     */\n    gearStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats talents_stats = 7;\n     */\n    talentsStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats buffs_stats = 8;\n     */\n    buffsStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats consumes_stats = 9;\n     */\n    consumesStats?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats final_stats = 2;\n     */\n    finalStats?: UnitStats;\n    /**\n     * @generated from protobuf field: repeated string sets = 3;\n     */\n    sets: string[];\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs buffs = 4;\n     */\n    buffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf field: proto.UnitMetadata metadata = 10;\n     */\n    metadata?: UnitMetadata;\n    /**\n     * @generated from protobuf field: proto.APLStats rotation_stats = 12;\n     */\n    rotationStats?: APLStats;\n    /**\n     * @generated from protobuf field: repeated proto.PetStats pets = 11;\n     */\n    pets: PetStats[];\n}\n/**\n * @generated from protobuf message proto.PartyStats\n */\nexport interface PartyStats {\n    /**\n     * @generated from protobuf field: repeated proto.PlayerStats players = 1;\n     */\n    players: PlayerStats[];\n}\n/**\n * @generated from protobuf message proto.RaidStats\n */\nexport interface RaidStats {\n    /**\n     * @generated from protobuf field: repeated proto.PartyStats parties = 1;\n     */\n    parties: PartyStats[];\n}\n/**\n * @generated from protobuf message proto.TargetStats\n */\nexport interface TargetStats {\n    /**\n     * @generated from protobuf field: proto.UnitMetadata metadata = 1;\n     */\n    metadata?: UnitMetadata;\n}\n/**\n * @generated from protobuf message proto.EncounterStats\n */\nexport interface EncounterStats {\n    /**\n     * @generated from protobuf field: repeated proto.TargetStats targets = 1;\n     */\n    targets: TargetStats[];\n}\n/**\n * @generated from protobuf message proto.ComputeStatsResult\n */\nexport interface ComputeStatsResult {\n    /**\n     * @generated from protobuf field: proto.RaidStats raid_stats = 1;\n     */\n    raidStats?: RaidStats;\n    /**\n     * @generated from protobuf field: proto.EncounterStats encounter_stats = 3;\n     */\n    encounterStats?: EncounterStats;\n    /**\n     * @generated from protobuf field: string error_result = 2;\n     */\n    errorResult: string;\n}\n/**\n * RPC StatWeights\n *\n * @generated from protobuf message proto.StatWeightsRequest\n */\nexport interface StatWeightsRequest {\n    /**\n     * @generated from protobuf field: proto.Player player = 1;\n     */\n    player?: Player;\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 2;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 3;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 9;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: proto.SimOptions sim_options = 5;\n     */\n    simOptions?: SimOptions;\n    /**\n     * @generated from protobuf field: repeated proto.UnitReference tanks = 8;\n     */\n    tanks: UnitReference[];\n    /**\n     * @generated from protobuf field: repeated proto.Stat stats_to_weigh = 6;\n     */\n    statsToWeigh: Stat[];\n    /**\n     * @generated from protobuf field: repeated proto.PseudoStat pseudo_stats_to_weigh = 10;\n     */\n    pseudoStatsToWeigh: PseudoStat[];\n    /**\n     * @generated from protobuf field: proto.Stat ep_reference_stat = 7;\n     */\n    epReferenceStat: Stat;\n}\n/**\n * @generated from protobuf message proto.StatWeightsResult\n */\nexport interface StatWeightsResult {\n    /**\n     * @generated from protobuf field: proto.StatWeightValues dps = 1;\n     */\n    dps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues hps = 4;\n     */\n    hps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues tps = 2;\n     */\n    tps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues dtps = 3;\n     */\n    dtps?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues tmi = 5;\n     */\n    tmi?: StatWeightValues;\n    /**\n     * @generated from protobuf field: proto.StatWeightValues p_death = 6;\n     */\n    pDeath?: StatWeightValues;\n}\n/**\n * @generated from protobuf message proto.StatWeightValues\n */\nexport interface StatWeightValues {\n    /**\n     * @generated from protobuf field: proto.UnitStats weights = 1;\n     */\n    weights?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats weights_stdev = 2;\n     */\n    weightsStdev?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats ep_values = 3;\n     */\n    epValues?: UnitStats;\n    /**\n     * @generated from protobuf field: proto.UnitStats ep_values_stdev = 4;\n     */\n    epValuesStdev?: UnitStats;\n}\n/**\n * @generated from protobuf message proto.AsyncAPIResult\n */\nexport interface AsyncAPIResult {\n    /**\n     * @generated from protobuf field: string progress_id = 1;\n     */\n    progressId: string;\n}\n/**\n * ProgressMetrics are used by all async APIs\n *\n * @generated from protobuf message proto.ProgressMetrics\n */\nexport interface ProgressMetrics {\n    /**\n     * @generated from protobuf field: int32 completed_iterations = 1;\n     */\n    completedIterations: number;\n    /**\n     * @generated from protobuf field: int32 total_iterations = 2;\n     */\n    totalIterations: number;\n    /**\n     * @generated from protobuf field: int32 completed_sims = 3;\n     */\n    completedSims: number;\n    /**\n     * @generated from protobuf field: int32 total_sims = 4;\n     */\n    totalSims: number;\n    /**\n     * @generated from protobuf field: bool presim_running = 8;\n     */\n    presimRunning: boolean;\n    /**\n     * Partial Results\n     *\n     * @generated from protobuf field: double dps = 5;\n     */\n    dps: number;\n    /**\n     * @generated from protobuf field: double hps = 9;\n     */\n    hps: number;\n    /**\n     * Final Results\n     *\n     * @generated from protobuf field: proto.RaidSimResult final_raid_result = 6;\n     */\n    finalRaidResult?: RaidSimResult; // only set when completed\n    /**\n     * @generated from protobuf field: proto.StatWeightsResult final_weight_result = 7;\n     */\n    finalWeightResult?: StatWeightsResult;\n    /**\n     * @generated from protobuf field: proto.BulkSimResult final_bulk_result = 10;\n     */\n    finalBulkResult?: BulkSimResult;\n}\n/**\n * RPC: BulkSim\n *\n * @generated from protobuf message proto.BulkSimRequest\n */\nexport interface BulkSimRequest {\n    /**\n     * @generated from protobuf field: proto.RaidSimRequest base_settings = 1;\n     */\n    baseSettings?: RaidSimRequest;\n    /**\n     * @generated from protobuf field: proto.BulkSettings bulk_settings = 2;\n     */\n    bulkSettings?: BulkSettings;\n}\n/**\n * @generated from protobuf message proto.TalentLoadout\n */\nexport interface TalentLoadout {\n    /**\n     * @generated from protobuf field: string talents_string = 1;\n     */\n    talentsString: string;\n    /**\n     * @generated from protobuf field: proto.Glyphs glyphs = 2;\n     */\n    glyphs?: Glyphs;\n    /**\n     * @generated from protobuf field: string name = 3;\n     */\n    name: string;\n}\n/**\n * @generated from protobuf message proto.BulkSettings\n */\nexport interface BulkSettings {\n    /**\n     * @generated from protobuf field: repeated proto.ItemSpec items = 1;\n     */\n    items: ItemSpec[];\n    /**\n     * @generated from protobuf field: bool combinations = 2;\n     */\n    combinations: boolean;\n    /**\n     * @generated from protobuf field: bool fast_mode = 3;\n     */\n    fastMode: boolean; // Used to run with less iterations to start and slowly increase to weed out items faster.\n    /**\n     * Use current enchant on the slot if not specified by the ItemSpec.\n     * Only works when replacement item is valid target for enchant.\n     *\n     * @generated from protobuf field: bool auto_enchant = 4;\n     */\n    autoEnchant: boolean;\n    /**\n     * Currently not used.\n     * Used to fill out gem slots that are not filled in the ItemSpec\n     *\n     * @generated from protobuf field: bool auto_gem = 5;\n     */\n    autoGem: boolean;\n    /**\n     * @generated from protobuf field: int32 default_red_gem = 6;\n     */\n    defaultRedGem: number;\n    /**\n     * @generated from protobuf field: int32 default_blue_gem = 7;\n     */\n    defaultBlueGem: number;\n    /**\n     * @generated from protobuf field: int32 default_yellow_gem = 8;\n     */\n    defaultYellowGem: number;\n    /**\n     * @generated from protobuf field: int32 default_meta_gem = 9;\n     */\n    defaultMetaGem: number;\n    /**\n     * @generated from protobuf field: bool ensure_meta_req_met = 10;\n     */\n    ensureMetaReqMet: boolean; // ensures that meta requirements are met when auto-gemming.\n    /**\n     * Number of iterations per combo.\n     * If set to 0 the sim core decides the optimal iterations.\n     *\n     * @generated from protobuf field: int32 iterations_per_combo = 11;\n     */\n    iterationsPerCombo: number;\n    /**\n     * Should sim talents as well\n     *\n     * @generated from protobuf field: bool sim_talents = 12;\n     */\n    simTalents: boolean;\n    /**\n     * @generated from protobuf field: repeated proto.TalentLoadout talents_to_sim = 13;\n     */\n    talentsToSim: TalentLoadout[];\n}\n/**\n * @generated from protobuf message proto.BulkSimResult\n */\nexport interface BulkSimResult {\n    /**\n     * @generated from protobuf field: repeated proto.BulkComboResult results = 1;\n     */\n    results: BulkComboResult[];\n    /**\n     * @generated from protobuf field: proto.BulkComboResult equipped_gear_result = 2;\n     */\n    equippedGearResult?: BulkComboResult;\n    /**\n     * @generated from protobuf field: string error_result = 3;\n     */\n    errorResult: string; // only set if sim failed.\n}\n/**\n * @generated from protobuf message proto.BulkComboResult\n */\nexport interface BulkComboResult {\n    /**\n     * @generated from protobuf field: repeated proto.ItemSpecWithSlot items_added = 1;\n     */\n    itemsAdded: ItemSpecWithSlot[];\n    /**\n     * @generated from protobuf field: proto.UnitMetrics unit_metrics = 2;\n     */\n    unitMetrics?: UnitMetrics;\n    /**\n     * @generated from protobuf field: proto.TalentLoadout talent_loadout = 3;\n     */\n    talentLoadout?: TalentLoadout;\n}\n/**\n * @generated from protobuf message proto.ItemSpecWithSlot\n */\nexport interface ItemSpecWithSlot {\n    /**\n     * @generated from protobuf field: proto.ItemSpec item = 1;\n     */\n    item?: ItemSpec;\n    /**\n     * @generated from protobuf field: proto.ItemSlot slot = 2;\n     */\n    slot: ItemSlot;\n}\n/**\n * @generated from protobuf enum proto.ResourceType\n */\nexport enum ResourceType {\n    /**\n     * @generated from protobuf enum value: ResourceTypeNone = 0;\n     */\n    ResourceTypeNone = 0,\n    /**\n     * @generated from protobuf enum value: ResourceTypeMana = 1;\n     */\n    ResourceTypeMana = 1,\n    /**\n     * @generated from protobuf enum value: ResourceTypeEnergy = 2;\n     */\n    ResourceTypeEnergy = 2,\n    /**\n     * @generated from protobuf enum value: ResourceTypeRage = 3;\n     */\n    ResourceTypeRage = 3,\n    /**\n     * @generated from protobuf enum value: ResourceTypeComboPoints = 4;\n     */\n    ResourceTypeComboPoints = 4,\n    /**\n     * @generated from protobuf enum value: ResourceTypeFocus = 5;\n     */\n    ResourceTypeFocus = 5,\n    /**\n     * @generated from protobuf enum value: ResourceTypeHealth = 6;\n     */\n    ResourceTypeHealth = 6,\n    /**\n     * @generated from protobuf enum value: ResourceTypeRunicPower = 7;\n     */\n    ResourceTypeRunicPower = 7,\n    /**\n     * @generated from protobuf enum value: ResourceTypeBloodRune = 8;\n     */\n    ResourceTypeBloodRune = 8,\n    /**\n     * @generated from protobuf enum value: ResourceTypeFrostRune = 9;\n     */\n    ResourceTypeFrostRune = 9,\n    /**\n     * @generated from protobuf enum value: ResourceTypeUnholyRune = 10;\n     */\n    ResourceTypeUnholyRune = 10,\n    /**\n     * @generated from protobuf enum value: ResourceTypeDeathRune = 11;\n     */\n    ResourceTypeDeathRune = 11\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Player$Type extends MessageType<Player> {\n    constructor() {\n        super(\"proto.Player\", [\n            { no: 51, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 1, name: \"race\", kind: \"enum\", T: () => [\"proto.Race\", Race] },\n            { no: 2, name: \"class\", kind: \"enum\", T: () => [\"proto.Class\", Class] },\n            { no: 3, name: \"equipment\", kind: \"message\", T: () => EquipmentSpec },\n            { no: 4, name: \"consumes\", kind: \"message\", T: () => Consumes },\n            { no: 5, name: \"bonus_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 6, name: \"enable_item_swap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"item_swap\", kind: \"message\", T: () => ItemSwap },\n            { no: 8, name: \"buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 9, name: \"blood_death_knight\", kind: \"message\", oneof: \"spec\", T: () => BloodDeathKnight },\n            { no: 10, name: \"frost_death_knight\", kind: \"message\", oneof: \"spec\", T: () => FrostDeathKnight },\n            { no: 11, name: \"unholy_death_knight\", kind: \"message\", oneof: \"spec\", T: () => UnholyDeathKnight },\n            { no: 12, name: \"balance_druid\", kind: \"message\", oneof: \"spec\", T: () => BalanceDruid },\n            { no: 13, name: \"feral_druid\", kind: \"message\", oneof: \"spec\", T: () => FeralDruid },\n            { no: 14, name: \"restoration_druid\", kind: \"message\", oneof: \"spec\", T: () => RestorationDruid },\n            { no: 15, name: \"beast_mastery_hunter\", kind: \"message\", oneof: \"spec\", T: () => BeastMasteryHunter },\n            { no: 16, name: \"marksmanship_hunter\", kind: \"message\", oneof: \"spec\", T: () => MarksmanshipHunter },\n            { no: 17, name: \"survival_hunter\", kind: \"message\", oneof: \"spec\", T: () => SurvivalHunter },\n            { no: 18, name: \"arcane_mage\", kind: \"message\", oneof: \"spec\", T: () => ArcaneMage },\n            { no: 19, name: \"fire_mage\", kind: \"message\", oneof: \"spec\", T: () => FireMage },\n            { no: 20, name: \"frost_mage\", kind: \"message\", oneof: \"spec\", T: () => FrostMage },\n            { no: 21, name: \"holy_paladin\", kind: \"message\", oneof: \"spec\", T: () => HolyPaladin },\n            { no: 22, name: \"protection_paladin\", kind: \"message\", oneof: \"spec\", T: () => ProtectionPaladin },\n            { no: 23, name: \"retribution_paladin\", kind: \"message\", oneof: \"spec\", T: () => RetributionPaladin },\n            { no: 24, name: \"discipline_priest\", kind: \"message\", oneof: \"spec\", T: () => DisciplinePriest },\n            { no: 25, name: \"holy_priest\", kind: \"message\", oneof: \"spec\", T: () => HolyPriest },\n            { no: 26, name: \"shadow_priest\", kind: \"message\", oneof: \"spec\", T: () => ShadowPriest },\n            { no: 27, name: \"assassination_rogue\", kind: \"message\", oneof: \"spec\", T: () => AssassinationRogue },\n            { no: 28, name: \"combat_rogue\", kind: \"message\", oneof: \"spec\", T: () => CombatRogue },\n            { no: 29, name: \"subtlety_rogue\", kind: \"message\", oneof: \"spec\", T: () => SubtletyRogue },\n            { no: 30, name: \"elemental_shaman\", kind: \"message\", oneof: \"spec\", T: () => ElementalShaman },\n            { no: 31, name: \"enhancement_shaman\", kind: \"message\", oneof: \"spec\", T: () => EnhancementShaman },\n            { no: 32, name: \"restoration_shaman\", kind: \"message\", oneof: \"spec\", T: () => RestorationShaman },\n            { no: 33, name: \"affliction_warlock\", kind: \"message\", oneof: \"spec\", T: () => AfflictionWarlock },\n            { no: 34, name: \"demonology_warlock\", kind: \"message\", oneof: \"spec\", T: () => DemonologyWarlock },\n            { no: 35, name: \"destruction_warlock\", kind: \"message\", oneof: \"spec\", T: () => DestructionWarlock },\n            { no: 36, name: \"arms_warrior\", kind: \"message\", oneof: \"spec\", T: () => ArmsWarrior },\n            { no: 37, name: \"fury_warrior\", kind: \"message\", oneof: \"spec\", T: () => FuryWarrior },\n            { no: 38, name: \"protection_warrior\", kind: \"message\", oneof: \"spec\", T: () => ProtectionWarrior },\n            { no: 39, name: \"talents_string\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 40, name: \"glyphs\", kind: \"message\", T: () => Glyphs },\n            { no: 41, name: \"profession1\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 42, name: \"profession2\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 43, name: \"cooldowns\", kind: \"message\", T: () => Cooldowns },\n            { no: 44, name: \"rotation\", kind: \"message\", T: () => APLRotation },\n            { no: 45, name: \"reaction_time_ms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 46, name: \"channel_clip_delay_ms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 47, name: \"in_front_of_target\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 48, name: \"distance_from_target\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 49, name: \"healing_model\", kind: \"message\", T: () => HealingModel },\n            { no: 50, name: \"database\", kind: \"message\", T: () => SimDatabase }\n        ]);\n    }\n    create(value?: PartialMessage<Player>): Player {\n        const message = { name: \"\", race: 0, class: 0, enableItemSwap: false, spec: { oneofKind: undefined }, talentsString: \"\", profession1: 0, profession2: 0, reactionTimeMs: 0, channelClipDelayMs: 0, inFrontOfTarget: false, distanceFromTarget: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Player>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player): Player {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 51:\n                    message.name = reader.string();\n                    break;\n                case /* proto.Race race */ 1:\n                    message.race = reader.int32();\n                    break;\n                case /* proto.Class class */ 2:\n                    message.class = reader.int32();\n                    break;\n                case /* proto.EquipmentSpec equipment */ 3:\n                    message.equipment = EquipmentSpec.internalBinaryRead(reader, reader.uint32(), options, message.equipment);\n                    break;\n                case /* proto.Consumes consumes */ 4:\n                    message.consumes = Consumes.internalBinaryRead(reader, reader.uint32(), options, message.consumes);\n                    break;\n                case /* proto.UnitStats bonus_stats */ 5:\n                    message.bonusStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.bonusStats);\n                    break;\n                case /* bool enable_item_swap */ 6:\n                    message.enableItemSwap = reader.bool();\n                    break;\n                case /* proto.ItemSwap item_swap */ 7:\n                    message.itemSwap = ItemSwap.internalBinaryRead(reader, reader.uint32(), options, message.itemSwap);\n                    break;\n                case /* proto.IndividualBuffs buffs */ 8:\n                    message.buffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* proto.BloodDeathKnight blood_death_knight */ 9:\n                    message.spec = {\n                        oneofKind: \"bloodDeathKnight\",\n                        bloodDeathKnight: BloodDeathKnight.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).bloodDeathKnight)\n                    };\n                    break;\n                case /* proto.FrostDeathKnight frost_death_knight */ 10:\n                    message.spec = {\n                        oneofKind: \"frostDeathKnight\",\n                        frostDeathKnight: FrostDeathKnight.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).frostDeathKnight)\n                    };\n                    break;\n                case /* proto.UnholyDeathKnight unholy_death_knight */ 11:\n                    message.spec = {\n                        oneofKind: \"unholyDeathKnight\",\n                        unholyDeathKnight: UnholyDeathKnight.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).unholyDeathKnight)\n                    };\n                    break;\n                case /* proto.BalanceDruid balance_druid */ 12:\n                    message.spec = {\n                        oneofKind: \"balanceDruid\",\n                        balanceDruid: BalanceDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).balanceDruid)\n                    };\n                    break;\n                case /* proto.FeralDruid feral_druid */ 13:\n                    message.spec = {\n                        oneofKind: \"feralDruid\",\n                        feralDruid: FeralDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).feralDruid)\n                    };\n                    break;\n                case /* proto.RestorationDruid restoration_druid */ 14:\n                    message.spec = {\n                        oneofKind: \"restorationDruid\",\n                        restorationDruid: RestorationDruid.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).restorationDruid)\n                    };\n                    break;\n                case /* proto.BeastMasteryHunter beast_mastery_hunter */ 15:\n                    message.spec = {\n                        oneofKind: \"beastMasteryHunter\",\n                        beastMasteryHunter: BeastMasteryHunter.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).beastMasteryHunter)\n                    };\n                    break;\n                case /* proto.MarksmanshipHunter marksmanship_hunter */ 16:\n                    message.spec = {\n                        oneofKind: \"marksmanshipHunter\",\n                        marksmanshipHunter: MarksmanshipHunter.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).marksmanshipHunter)\n                    };\n                    break;\n                case /* proto.SurvivalHunter survival_hunter */ 17:\n                    message.spec = {\n                        oneofKind: \"survivalHunter\",\n                        survivalHunter: SurvivalHunter.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).survivalHunter)\n                    };\n                    break;\n                case /* proto.ArcaneMage arcane_mage */ 18:\n                    message.spec = {\n                        oneofKind: \"arcaneMage\",\n                        arcaneMage: ArcaneMage.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).arcaneMage)\n                    };\n                    break;\n                case /* proto.FireMage fire_mage */ 19:\n                    message.spec = {\n                        oneofKind: \"fireMage\",\n                        fireMage: FireMage.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).fireMage)\n                    };\n                    break;\n                case /* proto.FrostMage frost_mage */ 20:\n                    message.spec = {\n                        oneofKind: \"frostMage\",\n                        frostMage: FrostMage.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).frostMage)\n                    };\n                    break;\n                case /* proto.HolyPaladin holy_paladin */ 21:\n                    message.spec = {\n                        oneofKind: \"holyPaladin\",\n                        holyPaladin: HolyPaladin.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).holyPaladin)\n                    };\n                    break;\n                case /* proto.ProtectionPaladin protection_paladin */ 22:\n                    message.spec = {\n                        oneofKind: \"protectionPaladin\",\n                        protectionPaladin: ProtectionPaladin.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).protectionPaladin)\n                    };\n                    break;\n                case /* proto.RetributionPaladin retribution_paladin */ 23:\n                    message.spec = {\n                        oneofKind: \"retributionPaladin\",\n                        retributionPaladin: RetributionPaladin.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).retributionPaladin)\n                    };\n                    break;\n                case /* proto.DisciplinePriest discipline_priest */ 24:\n                    message.spec = {\n                        oneofKind: \"disciplinePriest\",\n                        disciplinePriest: DisciplinePriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).disciplinePriest)\n                    };\n                    break;\n                case /* proto.HolyPriest holy_priest */ 25:\n                    message.spec = {\n                        oneofKind: \"holyPriest\",\n                        holyPriest: HolyPriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).holyPriest)\n                    };\n                    break;\n                case /* proto.ShadowPriest shadow_priest */ 26:\n                    message.spec = {\n                        oneofKind: \"shadowPriest\",\n                        shadowPriest: ShadowPriest.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).shadowPriest)\n                    };\n                    break;\n                case /* proto.AssassinationRogue assassination_rogue */ 27:\n                    message.spec = {\n                        oneofKind: \"assassinationRogue\",\n                        assassinationRogue: AssassinationRogue.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).assassinationRogue)\n                    };\n                    break;\n                case /* proto.CombatRogue combat_rogue */ 28:\n                    message.spec = {\n                        oneofKind: \"combatRogue\",\n                        combatRogue: CombatRogue.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).combatRogue)\n                    };\n                    break;\n                case /* proto.SubtletyRogue subtlety_rogue */ 29:\n                    message.spec = {\n                        oneofKind: \"subtletyRogue\",\n                        subtletyRogue: SubtletyRogue.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).subtletyRogue)\n                    };\n                    break;\n                case /* proto.ElementalShaman elemental_shaman */ 30:\n                    message.spec = {\n                        oneofKind: \"elementalShaman\",\n                        elementalShaman: ElementalShaman.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).elementalShaman)\n                    };\n                    break;\n                case /* proto.EnhancementShaman enhancement_shaman */ 31:\n                    message.spec = {\n                        oneofKind: \"enhancementShaman\",\n                        enhancementShaman: EnhancementShaman.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).enhancementShaman)\n                    };\n                    break;\n                case /* proto.RestorationShaman restoration_shaman */ 32:\n                    message.spec = {\n                        oneofKind: \"restorationShaman\",\n                        restorationShaman: RestorationShaman.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).restorationShaman)\n                    };\n                    break;\n                case /* proto.AfflictionWarlock affliction_warlock */ 33:\n                    message.spec = {\n                        oneofKind: \"afflictionWarlock\",\n                        afflictionWarlock: AfflictionWarlock.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).afflictionWarlock)\n                    };\n                    break;\n                case /* proto.DemonologyWarlock demonology_warlock */ 34:\n                    message.spec = {\n                        oneofKind: \"demonologyWarlock\",\n                        demonologyWarlock: DemonologyWarlock.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).demonologyWarlock)\n                    };\n                    break;\n                case /* proto.DestructionWarlock destruction_warlock */ 35:\n                    message.spec = {\n                        oneofKind: \"destructionWarlock\",\n                        destructionWarlock: DestructionWarlock.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).destructionWarlock)\n                    };\n                    break;\n                case /* proto.ArmsWarrior arms_warrior */ 36:\n                    message.spec = {\n                        oneofKind: \"armsWarrior\",\n                        armsWarrior: ArmsWarrior.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).armsWarrior)\n                    };\n                    break;\n                case /* proto.FuryWarrior fury_warrior */ 37:\n                    message.spec = {\n                        oneofKind: \"furyWarrior\",\n                        furyWarrior: FuryWarrior.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).furyWarrior)\n                    };\n                    break;\n                case /* proto.ProtectionWarrior protection_warrior */ 38:\n                    message.spec = {\n                        oneofKind: \"protectionWarrior\",\n                        protectionWarrior: ProtectionWarrior.internalBinaryRead(reader, reader.uint32(), options, (message.spec as any).protectionWarrior)\n                    };\n                    break;\n                case /* string talents_string */ 39:\n                    message.talentsString = reader.string();\n                    break;\n                case /* proto.Glyphs glyphs */ 40:\n                    message.glyphs = Glyphs.internalBinaryRead(reader, reader.uint32(), options, message.glyphs);\n                    break;\n                case /* proto.Profession profession1 */ 41:\n                    message.profession1 = reader.int32();\n                    break;\n                case /* proto.Profession profession2 */ 42:\n                    message.profession2 = reader.int32();\n                    break;\n                case /* proto.Cooldowns cooldowns */ 43:\n                    message.cooldowns = Cooldowns.internalBinaryRead(reader, reader.uint32(), options, message.cooldowns);\n                    break;\n                case /* proto.APLRotation rotation */ 44:\n                    message.rotation = APLRotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                case /* int32 reaction_time_ms */ 45:\n                    message.reactionTimeMs = reader.int32();\n                    break;\n                case /* int32 channel_clip_delay_ms */ 46:\n                    message.channelClipDelayMs = reader.int32();\n                    break;\n                case /* bool in_front_of_target */ 47:\n                    message.inFrontOfTarget = reader.bool();\n                    break;\n                case /* double distance_from_target */ 48:\n                    message.distanceFromTarget = reader.double();\n                    break;\n                case /* proto.HealingModel healing_model */ 49:\n                    message.healingModel = HealingModel.internalBinaryRead(reader, reader.uint32(), options, message.healingModel);\n                    break;\n                case /* proto.SimDatabase database */ 50:\n                    message.database = SimDatabase.internalBinaryRead(reader, reader.uint32(), options, message.database);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Player, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 51; */\n        if (message.name !== \"\")\n            writer.tag(51, WireType.LengthDelimited).string(message.name);\n        /* proto.Race race = 1; */\n        if (message.race !== 0)\n            writer.tag(1, WireType.Varint).int32(message.race);\n        /* proto.Class class = 2; */\n        if (message.class !== 0)\n            writer.tag(2, WireType.Varint).int32(message.class);\n        /* proto.EquipmentSpec equipment = 3; */\n        if (message.equipment)\n            EquipmentSpec.internalBinaryWrite(message.equipment, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Consumes consumes = 4; */\n        if (message.consumes)\n            Consumes.internalBinaryWrite(message.consumes, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats bonus_stats = 5; */\n        if (message.bonusStats)\n            UnitStats.internalBinaryWrite(message.bonusStats, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* bool enable_item_swap = 6; */\n        if (message.enableItemSwap !== false)\n            writer.tag(6, WireType.Varint).bool(message.enableItemSwap);\n        /* proto.ItemSwap item_swap = 7; */\n        if (message.itemSwap)\n            ItemSwap.internalBinaryWrite(message.itemSwap, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.IndividualBuffs buffs = 8; */\n        if (message.buffs)\n            IndividualBuffs.internalBinaryWrite(message.buffs, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BloodDeathKnight blood_death_knight = 9; */\n        if (message.spec.oneofKind === \"bloodDeathKnight\")\n            BloodDeathKnight.internalBinaryWrite(message.spec.bloodDeathKnight, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FrostDeathKnight frost_death_knight = 10; */\n        if (message.spec.oneofKind === \"frostDeathKnight\")\n            FrostDeathKnight.internalBinaryWrite(message.spec.frostDeathKnight, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnholyDeathKnight unholy_death_knight = 11; */\n        if (message.spec.oneofKind === \"unholyDeathKnight\")\n            UnholyDeathKnight.internalBinaryWrite(message.spec.unholyDeathKnight, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BalanceDruid balance_druid = 12; */\n        if (message.spec.oneofKind === \"balanceDruid\")\n            BalanceDruid.internalBinaryWrite(message.spec.balanceDruid, writer.tag(12, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FeralDruid feral_druid = 13; */\n        if (message.spec.oneofKind === \"feralDruid\")\n            FeralDruid.internalBinaryWrite(message.spec.feralDruid, writer.tag(13, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RestorationDruid restoration_druid = 14; */\n        if (message.spec.oneofKind === \"restorationDruid\")\n            RestorationDruid.internalBinaryWrite(message.spec.restorationDruid, writer.tag(14, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BeastMasteryHunter beast_mastery_hunter = 15; */\n        if (message.spec.oneofKind === \"beastMasteryHunter\")\n            BeastMasteryHunter.internalBinaryWrite(message.spec.beastMasteryHunter, writer.tag(15, WireType.LengthDelimited).fork(), options).join();\n        /* proto.MarksmanshipHunter marksmanship_hunter = 16; */\n        if (message.spec.oneofKind === \"marksmanshipHunter\")\n            MarksmanshipHunter.internalBinaryWrite(message.spec.marksmanshipHunter, writer.tag(16, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SurvivalHunter survival_hunter = 17; */\n        if (message.spec.oneofKind === \"survivalHunter\")\n            SurvivalHunter.internalBinaryWrite(message.spec.survivalHunter, writer.tag(17, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ArcaneMage arcane_mage = 18; */\n        if (message.spec.oneofKind === \"arcaneMage\")\n            ArcaneMage.internalBinaryWrite(message.spec.arcaneMage, writer.tag(18, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FireMage fire_mage = 19; */\n        if (message.spec.oneofKind === \"fireMage\")\n            FireMage.internalBinaryWrite(message.spec.fireMage, writer.tag(19, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FrostMage frost_mage = 20; */\n        if (message.spec.oneofKind === \"frostMage\")\n            FrostMage.internalBinaryWrite(message.spec.frostMage, writer.tag(20, WireType.LengthDelimited).fork(), options).join();\n        /* proto.HolyPaladin holy_paladin = 21; */\n        if (message.spec.oneofKind === \"holyPaladin\")\n            HolyPaladin.internalBinaryWrite(message.spec.holyPaladin, writer.tag(21, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionPaladin protection_paladin = 22; */\n        if (message.spec.oneofKind === \"protectionPaladin\")\n            ProtectionPaladin.internalBinaryWrite(message.spec.protectionPaladin, writer.tag(22, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RetributionPaladin retribution_paladin = 23; */\n        if (message.spec.oneofKind === \"retributionPaladin\")\n            RetributionPaladin.internalBinaryWrite(message.spec.retributionPaladin, writer.tag(23, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DisciplinePriest discipline_priest = 24; */\n        if (message.spec.oneofKind === \"disciplinePriest\")\n            DisciplinePriest.internalBinaryWrite(message.spec.disciplinePriest, writer.tag(24, WireType.LengthDelimited).fork(), options).join();\n        /* proto.HolyPriest holy_priest = 25; */\n        if (message.spec.oneofKind === \"holyPriest\")\n            HolyPriest.internalBinaryWrite(message.spec.holyPriest, writer.tag(25, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ShadowPriest shadow_priest = 26; */\n        if (message.spec.oneofKind === \"shadowPriest\")\n            ShadowPriest.internalBinaryWrite(message.spec.shadowPriest, writer.tag(26, WireType.LengthDelimited).fork(), options).join();\n        /* proto.AssassinationRogue assassination_rogue = 27; */\n        if (message.spec.oneofKind === \"assassinationRogue\")\n            AssassinationRogue.internalBinaryWrite(message.spec.assassinationRogue, writer.tag(27, WireType.LengthDelimited).fork(), options).join();\n        /* proto.CombatRogue combat_rogue = 28; */\n        if (message.spec.oneofKind === \"combatRogue\")\n            CombatRogue.internalBinaryWrite(message.spec.combatRogue, writer.tag(28, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SubtletyRogue subtlety_rogue = 29; */\n        if (message.spec.oneofKind === \"subtletyRogue\")\n            SubtletyRogue.internalBinaryWrite(message.spec.subtletyRogue, writer.tag(29, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ElementalShaman elemental_shaman = 30; */\n        if (message.spec.oneofKind === \"elementalShaman\")\n            ElementalShaman.internalBinaryWrite(message.spec.elementalShaman, writer.tag(30, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EnhancementShaman enhancement_shaman = 31; */\n        if (message.spec.oneofKind === \"enhancementShaman\")\n            EnhancementShaman.internalBinaryWrite(message.spec.enhancementShaman, writer.tag(31, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RestorationShaman restoration_shaman = 32; */\n        if (message.spec.oneofKind === \"restorationShaman\")\n            RestorationShaman.internalBinaryWrite(message.spec.restorationShaman, writer.tag(32, WireType.LengthDelimited).fork(), options).join();\n        /* proto.AfflictionWarlock affliction_warlock = 33; */\n        if (message.spec.oneofKind === \"afflictionWarlock\")\n            AfflictionWarlock.internalBinaryWrite(message.spec.afflictionWarlock, writer.tag(33, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DemonologyWarlock demonology_warlock = 34; */\n        if (message.spec.oneofKind === \"demonologyWarlock\")\n            DemonologyWarlock.internalBinaryWrite(message.spec.demonologyWarlock, writer.tag(34, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DestructionWarlock destruction_warlock = 35; */\n        if (message.spec.oneofKind === \"destructionWarlock\")\n            DestructionWarlock.internalBinaryWrite(message.spec.destructionWarlock, writer.tag(35, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ArmsWarrior arms_warrior = 36; */\n        if (message.spec.oneofKind === \"armsWarrior\")\n            ArmsWarrior.internalBinaryWrite(message.spec.armsWarrior, writer.tag(36, WireType.LengthDelimited).fork(), options).join();\n        /* proto.FuryWarrior fury_warrior = 37; */\n        if (message.spec.oneofKind === \"furyWarrior\")\n            FuryWarrior.internalBinaryWrite(message.spec.furyWarrior, writer.tag(37, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ProtectionWarrior protection_warrior = 38; */\n        if (message.spec.oneofKind === \"protectionWarrior\")\n            ProtectionWarrior.internalBinaryWrite(message.spec.protectionWarrior, writer.tag(38, WireType.LengthDelimited).fork(), options).join();\n        /* string talents_string = 39; */\n        if (message.talentsString !== \"\")\n            writer.tag(39, WireType.LengthDelimited).string(message.talentsString);\n        /* proto.Glyphs glyphs = 40; */\n        if (message.glyphs)\n            Glyphs.internalBinaryWrite(message.glyphs, writer.tag(40, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Profession profession1 = 41; */\n        if (message.profession1 !== 0)\n            writer.tag(41, WireType.Varint).int32(message.profession1);\n        /* proto.Profession profession2 = 42; */\n        if (message.profession2 !== 0)\n            writer.tag(42, WireType.Varint).int32(message.profession2);\n        /* proto.Cooldowns cooldowns = 43; */\n        if (message.cooldowns)\n            Cooldowns.internalBinaryWrite(message.cooldowns, writer.tag(43, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLRotation rotation = 44; */\n        if (message.rotation)\n            APLRotation.internalBinaryWrite(message.rotation, writer.tag(44, WireType.LengthDelimited).fork(), options).join();\n        /* int32 reaction_time_ms = 45; */\n        if (message.reactionTimeMs !== 0)\n            writer.tag(45, WireType.Varint).int32(message.reactionTimeMs);\n        /* int32 channel_clip_delay_ms = 46; */\n        if (message.channelClipDelayMs !== 0)\n            writer.tag(46, WireType.Varint).int32(message.channelClipDelayMs);\n        /* bool in_front_of_target = 47; */\n        if (message.inFrontOfTarget !== false)\n            writer.tag(47, WireType.Varint).bool(message.inFrontOfTarget);\n        /* double distance_from_target = 48; */\n        if (message.distanceFromTarget !== 0)\n            writer.tag(48, WireType.Bit64).double(message.distanceFromTarget);\n        /* proto.HealingModel healing_model = 49; */\n        if (message.healingModel)\n            HealingModel.internalBinaryWrite(message.healingModel, writer.tag(49, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimDatabase database = 50; */\n        if (message.database)\n            SimDatabase.internalBinaryWrite(message.database, writer.tag(50, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Player\n */\nexport const Player = new Player$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Party$Type extends MessageType<Party> {\n    constructor() {\n        super(\"proto.Party\", [\n            { no: 1, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Player },\n            { no: 2, name: \"buffs\", kind: \"message\", T: () => PartyBuffs }\n        ]);\n    }\n    create(value?: PartialMessage<Party>): Party {\n        const message = { players: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Party>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Party): Party {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Player players */ 1:\n                    message.players.push(Player.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.PartyBuffs buffs */ 2:\n                    message.buffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Party, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Player players = 1; */\n        for (let i = 0; i < message.players.length; i++)\n            Player.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs buffs = 2; */\n        if (message.buffs)\n            PartyBuffs.internalBinaryWrite(message.buffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Party\n */\nexport const Party = new Party$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Raid$Type extends MessageType<Raid> {\n    constructor() {\n        super(\"proto.Raid\", [\n            { no: 1, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => Party },\n            { no: 2, name: \"num_active_parties\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 5, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 4, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitReference },\n            { no: 3, name: \"stagger_stormstrikes\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"target_dummies\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<Raid>): Raid {\n        const message = { parties: [], numActiveParties: 0, tanks: [], staggerStormstrikes: false, targetDummies: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<Raid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Raid): Raid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Party parties */ 1:\n                    message.parties.push(Party.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* int32 num_active_parties */ 2:\n                    message.numActiveParties = reader.int32();\n                    break;\n                case /* proto.RaidBuffs buffs */ 7:\n                    message.buffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 5:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* repeated proto.UnitReference tanks */ 4:\n                    message.tanks.push(UnitReference.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* bool stagger_stormstrikes */ 3:\n                    message.staggerStormstrikes = reader.bool();\n                    break;\n                case /* int32 target_dummies */ 6:\n                    message.targetDummies = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: Raid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Party parties = 1; */\n        for (let i = 0; i < message.parties.length; i++)\n            Party.internalBinaryWrite(message.parties[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 num_active_parties = 2; */\n        if (message.numActiveParties !== 0)\n            writer.tag(2, WireType.Varint).int32(message.numActiveParties);\n        /* proto.RaidBuffs buffs = 7; */\n        if (message.buffs)\n            RaidBuffs.internalBinaryWrite(message.buffs, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 5; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitReference tanks = 4; */\n        for (let i = 0; i < message.tanks.length; i++)\n            UnitReference.internalBinaryWrite(message.tanks[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* bool stagger_stormstrikes = 3; */\n        if (message.staggerStormstrikes !== false)\n            writer.tag(3, WireType.Varint).bool(message.staggerStormstrikes);\n        /* int32 target_dummies = 6; */\n        if (message.targetDummies !== 0)\n            writer.tag(6, WireType.Varint).int32(message.targetDummies);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.Raid\n */\nexport const Raid = new Raid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimOptions$Type extends MessageType<SimOptions> {\n    constructor() {\n        super(\"proto.SimOptions\", [\n            { no: 1, name: \"iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"random_seed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 3, name: \"debug\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"debug_first_iteration\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"is_test\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"save_all_values\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"interactive\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SimOptions>): SimOptions {\n        const message = { iterations: 0, randomSeed: 0n, debug: false, debugFirstIteration: false, isTest: false, saveAllValues: false, interactive: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimOptions>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimOptions): SimOptions {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 iterations */ 1:\n                    message.iterations = reader.int32();\n                    break;\n                case /* int64 random_seed */ 2:\n                    message.randomSeed = reader.int64().toBigInt();\n                    break;\n                case /* bool debug */ 3:\n                    message.debug = reader.bool();\n                    break;\n                case /* bool debug_first_iteration */ 6:\n                    message.debugFirstIteration = reader.bool();\n                    break;\n                case /* bool is_test */ 5:\n                    message.isTest = reader.bool();\n                    break;\n                case /* bool save_all_values */ 7:\n                    message.saveAllValues = reader.bool();\n                    break;\n                case /* bool interactive */ 8:\n                    message.interactive = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimOptions, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 iterations = 1; */\n        if (message.iterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.iterations);\n        /* int64 random_seed = 2; */\n        if (message.randomSeed !== 0n)\n            writer.tag(2, WireType.Varint).int64(message.randomSeed);\n        /* bool debug = 3; */\n        if (message.debug !== false)\n            writer.tag(3, WireType.Varint).bool(message.debug);\n        /* bool debug_first_iteration = 6; */\n        if (message.debugFirstIteration !== false)\n            writer.tag(6, WireType.Varint).bool(message.debugFirstIteration);\n        /* bool is_test = 5; */\n        if (message.isTest !== false)\n            writer.tag(5, WireType.Varint).bool(message.isTest);\n        /* bool save_all_values = 7; */\n        if (message.saveAllValues !== false)\n            writer.tag(7, WireType.Varint).bool(message.saveAllValues);\n        /* bool interactive = 8; */\n        if (message.interactive !== false)\n            writer.tag(8, WireType.Varint).bool(message.interactive);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimOptions\n */\nexport const SimOptions = new SimOptions$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ActionMetrics$Type extends MessageType<ActionMetrics> {\n    constructor() {\n        super(\"proto.ActionMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"is_melee\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TargetedActionMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<ActionMetrics>): ActionMetrics {\n        const message = { isMelee: false, targets: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ActionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ActionMetrics): ActionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* bool is_melee */ 2:\n                    message.isMelee = reader.bool();\n                    break;\n                case /* repeated proto.TargetedActionMetrics targets */ 3:\n                    message.targets.push(TargetedActionMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ActionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool is_melee = 2; */\n        if (message.isMelee !== false)\n            writer.tag(2, WireType.Varint).bool(message.isMelee);\n        /* repeated proto.TargetedActionMetrics targets = 3; */\n        for (let i = 0; i < message.targets.length; i++)\n            TargetedActionMetrics.internalBinaryWrite(message.targets[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ActionMetrics\n */\nexport const ActionMetrics = new ActionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TargetedActionMetrics$Type extends MessageType<TargetedActionMetrics> {\n    constructor() {\n        super(\"proto.TargetedActionMetrics\", [\n            { no: 12, name: \"unit_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 1, name: \"casts\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"hits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"crits\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"misses\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 5, name: \"dodges\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 6, name: \"parries\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"blocks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"glances\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"damage\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"threat\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 11, name: \"healing\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"shielding\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"cast_time_ms\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TargetedActionMetrics>): TargetedActionMetrics {\n        const message = { unitIndex: 0, casts: 0, hits: 0, crits: 0, misses: 0, dodges: 0, parries: 0, blocks: 0, glances: 0, damage: 0, threat: 0, healing: 0, shielding: 0, castTimeMs: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TargetedActionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TargetedActionMetrics): TargetedActionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 unit_index */ 12:\n                    message.unitIndex = reader.int32();\n                    break;\n                case /* int32 casts */ 1:\n                    message.casts = reader.int32();\n                    break;\n                case /* int32 hits */ 2:\n                    message.hits = reader.int32();\n                    break;\n                case /* int32 crits */ 3:\n                    message.crits = reader.int32();\n                    break;\n                case /* int32 misses */ 4:\n                    message.misses = reader.int32();\n                    break;\n                case /* int32 dodges */ 5:\n                    message.dodges = reader.int32();\n                    break;\n                case /* int32 parries */ 6:\n                    message.parries = reader.int32();\n                    break;\n                case /* int32 blocks */ 7:\n                    message.blocks = reader.int32();\n                    break;\n                case /* int32 glances */ 8:\n                    message.glances = reader.int32();\n                    break;\n                case /* double damage */ 9:\n                    message.damage = reader.double();\n                    break;\n                case /* double threat */ 10:\n                    message.threat = reader.double();\n                    break;\n                case /* double healing */ 11:\n                    message.healing = reader.double();\n                    break;\n                case /* double shielding */ 13:\n                    message.shielding = reader.double();\n                    break;\n                case /* double cast_time_ms */ 14:\n                    message.castTimeMs = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TargetedActionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 unit_index = 12; */\n        if (message.unitIndex !== 0)\n            writer.tag(12, WireType.Varint).int32(message.unitIndex);\n        /* int32 casts = 1; */\n        if (message.casts !== 0)\n            writer.tag(1, WireType.Varint).int32(message.casts);\n        /* int32 hits = 2; */\n        if (message.hits !== 0)\n            writer.tag(2, WireType.Varint).int32(message.hits);\n        /* int32 crits = 3; */\n        if (message.crits !== 0)\n            writer.tag(3, WireType.Varint).int32(message.crits);\n        /* int32 misses = 4; */\n        if (message.misses !== 0)\n            writer.tag(4, WireType.Varint).int32(message.misses);\n        /* int32 dodges = 5; */\n        if (message.dodges !== 0)\n            writer.tag(5, WireType.Varint).int32(message.dodges);\n        /* int32 parries = 6; */\n        if (message.parries !== 0)\n            writer.tag(6, WireType.Varint).int32(message.parries);\n        /* int32 blocks = 7; */\n        if (message.blocks !== 0)\n            writer.tag(7, WireType.Varint).int32(message.blocks);\n        /* int32 glances = 8; */\n        if (message.glances !== 0)\n            writer.tag(8, WireType.Varint).int32(message.glances);\n        /* double damage = 9; */\n        if (message.damage !== 0)\n            writer.tag(9, WireType.Bit64).double(message.damage);\n        /* double threat = 10; */\n        if (message.threat !== 0)\n            writer.tag(10, WireType.Bit64).double(message.threat);\n        /* double healing = 11; */\n        if (message.healing !== 0)\n            writer.tag(11, WireType.Bit64).double(message.healing);\n        /* double shielding = 13; */\n        if (message.shielding !== 0)\n            writer.tag(13, WireType.Bit64).double(message.shielding);\n        /* double cast_time_ms = 14; */\n        if (message.castTimeMs !== 0)\n            writer.tag(14, WireType.Bit64).double(message.castTimeMs);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TargetedActionMetrics\n */\nexport const TargetedActionMetrics = new TargetedActionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AuraMetrics$Type extends MessageType<AuraMetrics> {\n    constructor() {\n        super(\"proto.AuraMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"uptime_seconds_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"uptime_seconds_stdev\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 4, name: \"procs_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<AuraMetrics>): AuraMetrics {\n        const message = { uptimeSecondsAvg: 0, uptimeSecondsStdev: 0, procsAvg: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AuraMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuraMetrics): AuraMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* double uptime_seconds_avg */ 2:\n                    message.uptimeSecondsAvg = reader.double();\n                    break;\n                case /* double uptime_seconds_stdev */ 3:\n                    message.uptimeSecondsStdev = reader.double();\n                    break;\n                case /* double procs_avg */ 4:\n                    message.procsAvg = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AuraMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* double uptime_seconds_avg = 2; */\n        if (message.uptimeSecondsAvg !== 0)\n            writer.tag(2, WireType.Bit64).double(message.uptimeSecondsAvg);\n        /* double uptime_seconds_stdev = 3; */\n        if (message.uptimeSecondsStdev !== 0)\n            writer.tag(3, WireType.Bit64).double(message.uptimeSecondsStdev);\n        /* double procs_avg = 4; */\n        if (message.procsAvg !== 0)\n            writer.tag(4, WireType.Bit64).double(message.procsAvg);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AuraMetrics\n */\nexport const AuraMetrics = new AuraMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ResourceMetrics$Type extends MessageType<ResourceMetrics> {\n    constructor() {\n        super(\"proto.ResourceMetrics\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"type\", kind: \"enum\", T: () => [\"proto.ResourceType\", ResourceType] },\n            { no: 3, name: \"events\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"gain\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"actual_gain\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ResourceMetrics>): ResourceMetrics {\n        const message = { type: 0, events: 0, gain: 0, actualGain: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ResourceMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResourceMetrics): ResourceMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* proto.ResourceType type */ 2:\n                    message.type = reader.int32();\n                    break;\n                case /* int32 events */ 3:\n                    message.events = reader.int32();\n                    break;\n                case /* double gain */ 4:\n                    message.gain = reader.double();\n                    break;\n                case /* double actual_gain */ 5:\n                    message.actualGain = reader.double();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ResourceMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ResourceType type = 2; */\n        if (message.type !== 0)\n            writer.tag(2, WireType.Varint).int32(message.type);\n        /* int32 events = 3; */\n        if (message.events !== 0)\n            writer.tag(3, WireType.Varint).int32(message.events);\n        /* double gain = 4; */\n        if (message.gain !== 0)\n            writer.tag(4, WireType.Bit64).double(message.gain);\n        /* double actual_gain = 5; */\n        if (message.actualGain !== 0)\n            writer.tag(5, WireType.Bit64).double(message.actualGain);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ResourceMetrics\n */\nexport const ResourceMetrics = new ResourceMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DistributionMetrics$Type extends MessageType<DistributionMetrics> {\n    constructor() {\n        super(\"proto.DistributionMetrics\", [\n            { no: 1, name: \"avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 2, name: \"stdev\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 3, name: \"max\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"max_seed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 6, name: \"min\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 7, name: \"min_seed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 4, name: \"hist\", kind: \"map\", K: 5 /*ScalarType.INT32*/, V: { kind: \"scalar\", T: 5 /*ScalarType.INT32*/ } },\n            { no: 8, name: \"all_values\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DistributionMetrics>): DistributionMetrics {\n        const message = { avg: 0, stdev: 0, max: 0, maxSeed: 0n, min: 0, minSeed: 0n, hist: {}, allValues: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DistributionMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DistributionMetrics): DistributionMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* double avg */ 1:\n                    message.avg = reader.double();\n                    break;\n                case /* double stdev */ 2:\n                    message.stdev = reader.double();\n                    break;\n                case /* double max */ 3:\n                    message.max = reader.double();\n                    break;\n                case /* int64 max_seed */ 5:\n                    message.maxSeed = reader.int64().toBigInt();\n                    break;\n                case /* double min */ 6:\n                    message.min = reader.double();\n                    break;\n                case /* int64 min_seed */ 7:\n                    message.minSeed = reader.int64().toBigInt();\n                    break;\n                case /* map<int32, int32> hist */ 4:\n                    this.binaryReadMap4(message.hist, reader, options);\n                    break;\n                case /* repeated double all_values */ 8:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.allValues.push(reader.double());\n                    else\n                        message.allValues.push(reader.double());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    private binaryReadMap4(map: DistributionMetrics[\"hist\"], reader: IBinaryReader, options: BinaryReadOptions): void {\n        let len = reader.uint32(), end = reader.pos + len, key: keyof DistributionMetrics[\"hist\"] | undefined, val: DistributionMetrics[\"hist\"][any] | undefined;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case 1:\n                    key = reader.int32();\n                    break;\n                case 2:\n                    val = reader.int32();\n                    break;\n                default: throw new globalThis.Error(\"unknown map entry field for field proto.DistributionMetrics.hist\");\n            }\n        }\n        map[key ?? 0] = val ?? 0;\n    }\n    internalBinaryWrite(message: DistributionMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* double avg = 1; */\n        if (message.avg !== 0)\n            writer.tag(1, WireType.Bit64).double(message.avg);\n        /* double stdev = 2; */\n        if (message.stdev !== 0)\n            writer.tag(2, WireType.Bit64).double(message.stdev);\n        /* double max = 3; */\n        if (message.max !== 0)\n            writer.tag(3, WireType.Bit64).double(message.max);\n        /* int64 max_seed = 5; */\n        if (message.maxSeed !== 0n)\n            writer.tag(5, WireType.Varint).int64(message.maxSeed);\n        /* double min = 6; */\n        if (message.min !== 0)\n            writer.tag(6, WireType.Bit64).double(message.min);\n        /* int64 min_seed = 7; */\n        if (message.minSeed !== 0n)\n            writer.tag(7, WireType.Varint).int64(message.minSeed);\n        /* map<int32, int32> hist = 4; */\n        for (let k of Object.keys(message.hist))\n            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).int32(parseInt(k)).tag(2, WireType.Varint).int32(message.hist[k as any]).join();\n        /* repeated double all_values = 8; */\n        if (message.allValues.length) {\n            writer.tag(8, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.allValues.length; i++)\n                writer.double(message.allValues[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DistributionMetrics\n */\nexport const DistributionMetrics = new DistributionMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnitMetrics$Type extends MessageType<UnitMetrics> {\n    constructor() {\n        super(\"proto.UnitMetrics\", [\n            { no: 9, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 13, name: \"unit_index\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 16, name: \"dpasp\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 8, name: \"threat\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 11, name: \"dtps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 17, name: \"tmi\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 14, name: \"hps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 15, name: \"tto\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 3, name: \"seconds_oom_avg\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"chance_of_death\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"actions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ActionMetrics },\n            { no: 6, name: \"auras\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => AuraMetrics },\n            { no: 10, name: \"resources\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ResourceMetrics },\n            { no: 7, name: \"pets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<UnitMetrics>): UnitMetrics {\n        const message = { name: \"\", unitIndex: 0, secondsOomAvg: 0, chanceOfDeath: 0, actions: [], auras: [], resources: [], pets: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnitMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitMetrics): UnitMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 9:\n                    message.name = reader.string();\n                    break;\n                case /* int32 unit_index */ 13:\n                    message.unitIndex = reader.int32();\n                    break;\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.DistributionMetrics dpasp */ 16:\n                    message.dpasp = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dpasp);\n                    break;\n                case /* proto.DistributionMetrics threat */ 8:\n                    message.threat = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.threat);\n                    break;\n                case /* proto.DistributionMetrics dtps */ 11:\n                    message.dtps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dtps);\n                    break;\n                case /* proto.DistributionMetrics tmi */ 17:\n                    message.tmi = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.tmi);\n                    break;\n                case /* proto.DistributionMetrics hps */ 14:\n                    message.hps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* proto.DistributionMetrics tto */ 15:\n                    message.tto = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.tto);\n                    break;\n                case /* double seconds_oom_avg */ 3:\n                    message.secondsOomAvg = reader.double();\n                    break;\n                case /* double chance_of_death */ 12:\n                    message.chanceOfDeath = reader.double();\n                    break;\n                case /* repeated proto.ActionMetrics actions */ 5:\n                    message.actions.push(ActionMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.AuraMetrics auras */ 6:\n                    message.auras.push(AuraMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.ResourceMetrics resources */ 10:\n                    message.resources.push(ResourceMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UnitMetrics pets */ 7:\n                    message.pets.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnitMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 9; */\n        if (message.name !== \"\")\n            writer.tag(9, WireType.LengthDelimited).string(message.name);\n        /* int32 unit_index = 13; */\n        if (message.unitIndex !== 0)\n            writer.tag(13, WireType.Varint).int32(message.unitIndex);\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics dpasp = 16; */\n        if (message.dpasp)\n            DistributionMetrics.internalBinaryWrite(message.dpasp, writer.tag(16, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics threat = 8; */\n        if (message.threat)\n            DistributionMetrics.internalBinaryWrite(message.threat, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics dtps = 11; */\n        if (message.dtps)\n            DistributionMetrics.internalBinaryWrite(message.dtps, writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics tmi = 17; */\n        if (message.tmi)\n            DistributionMetrics.internalBinaryWrite(message.tmi, writer.tag(17, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics hps = 14; */\n        if (message.hps)\n            DistributionMetrics.internalBinaryWrite(message.hps, writer.tag(14, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics tto = 15; */\n        if (message.tto)\n            DistributionMetrics.internalBinaryWrite(message.tto, writer.tag(15, WireType.LengthDelimited).fork(), options).join();\n        /* double seconds_oom_avg = 3; */\n        if (message.secondsOomAvg !== 0)\n            writer.tag(3, WireType.Bit64).double(message.secondsOomAvg);\n        /* double chance_of_death = 12; */\n        if (message.chanceOfDeath !== 0)\n            writer.tag(12, WireType.Bit64).double(message.chanceOfDeath);\n        /* repeated proto.ActionMetrics actions = 5; */\n        for (let i = 0; i < message.actions.length; i++)\n            ActionMetrics.internalBinaryWrite(message.actions[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.AuraMetrics auras = 6; */\n        for (let i = 0; i < message.auras.length; i++)\n            AuraMetrics.internalBinaryWrite(message.auras[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ResourceMetrics resources = 10; */\n        for (let i = 0; i < message.resources.length; i++)\n            ResourceMetrics.internalBinaryWrite(message.resources[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitMetrics pets = 7; */\n        for (let i = 0; i < message.pets.length; i++)\n            UnitMetrics.internalBinaryWrite(message.pets[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnitMetrics\n */\nexport const UnitMetrics = new UnitMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyMetrics$Type extends MessageType<PartyMetrics> {\n    constructor() {\n        super(\"proto.PartyMetrics\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 3, name: \"hps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 2, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<PartyMetrics>): PartyMetrics {\n        const message = { players: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyMetrics): PartyMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.DistributionMetrics hps */ 3:\n                    message.hps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* repeated proto.UnitMetrics players */ 2:\n                    message.players.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics hps = 3; */\n        if (message.hps)\n            DistributionMetrics.internalBinaryWrite(message.hps, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitMetrics players = 2; */\n        for (let i = 0; i < message.players.length; i++)\n            UnitMetrics.internalBinaryWrite(message.players[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyMetrics\n */\nexport const PartyMetrics = new PartyMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidMetrics$Type extends MessageType<RaidMetrics> {\n    constructor() {\n        super(\"proto.RaidMetrics\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 3, name: \"hps\", kind: \"message\", T: () => DistributionMetrics },\n            { no: 2, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PartyMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<RaidMetrics>): RaidMetrics {\n        const message = { parties: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidMetrics): RaidMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DistributionMetrics dps */ 1:\n                    message.dps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.DistributionMetrics hps */ 3:\n                    message.hps = DistributionMetrics.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* repeated proto.PartyMetrics parties */ 2:\n                    message.parties.push(PartyMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DistributionMetrics dps = 1; */\n        if (message.dps)\n            DistributionMetrics.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DistributionMetrics hps = 3; */\n        if (message.hps)\n            DistributionMetrics.internalBinaryWrite(message.hps, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.PartyMetrics parties = 2; */\n        for (let i = 0; i < message.parties.length; i++)\n            PartyMetrics.internalBinaryWrite(message.parties[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidMetrics\n */\nexport const RaidMetrics = new RaidMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EncounterMetrics$Type extends MessageType<EncounterMetrics> {\n    constructor() {\n        super(\"proto.EncounterMetrics\", [\n            { no: 1, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitMetrics }\n        ]);\n    }\n    create(value?: PartialMessage<EncounterMetrics>): EncounterMetrics {\n        const message = { targets: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EncounterMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EncounterMetrics): EncounterMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.UnitMetrics targets */ 1:\n                    message.targets.push(UnitMetrics.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EncounterMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.UnitMetrics targets = 1; */\n        for (let i = 0; i < message.targets.length; i++)\n            UnitMetrics.internalBinaryWrite(message.targets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EncounterMetrics\n */\nexport const EncounterMetrics = new EncounterMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimRequest$Type extends MessageType<RaidSimRequest> {\n    constructor() {\n        super(\"proto.RaidSimRequest\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 2, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 3, name: \"sim_options\", kind: \"message\", T: () => SimOptions }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimRequest>): RaidSimRequest {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimRequest): RaidSimRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* proto.Encounter encounter */ 2:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* proto.SimOptions sim_options */ 3:\n                    message.simOptions = SimOptions.internalBinaryRead(reader, reader.uint32(), options, message.simOptions);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 2; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimOptions sim_options = 3; */\n        if (message.simOptions)\n            SimOptions.internalBinaryWrite(message.simOptions, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimRequest\n */\nexport const RaidSimRequest = new RaidSimRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimResult$Type extends MessageType<RaidSimResult> {\n    constructor() {\n        super(\"proto.RaidSimResult\", [\n            { no: 1, name: \"raid_metrics\", kind: \"message\", T: () => RaidMetrics },\n            { no: 2, name: \"encounter_metrics\", kind: \"message\", T: () => EncounterMetrics },\n            { no: 3, name: \"logs\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"first_iteration_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"avg_iteration_duration\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"error_result\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimResult>): RaidSimResult {\n        const message = { logs: \"\", firstIterationDuration: 0, avgIterationDuration: 0, errorResult: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimResult): RaidSimResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidMetrics raid_metrics */ 1:\n                    message.raidMetrics = RaidMetrics.internalBinaryRead(reader, reader.uint32(), options, message.raidMetrics);\n                    break;\n                case /* proto.EncounterMetrics encounter_metrics */ 2:\n                    message.encounterMetrics = EncounterMetrics.internalBinaryRead(reader, reader.uint32(), options, message.encounterMetrics);\n                    break;\n                case /* string logs */ 3:\n                    message.logs = reader.string();\n                    break;\n                case /* double first_iteration_duration */ 4:\n                    message.firstIterationDuration = reader.double();\n                    break;\n                case /* double avg_iteration_duration */ 6:\n                    message.avgIterationDuration = reader.double();\n                    break;\n                case /* string error_result */ 5:\n                    message.errorResult = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidMetrics raid_metrics = 1; */\n        if (message.raidMetrics)\n            RaidMetrics.internalBinaryWrite(message.raidMetrics, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EncounterMetrics encounter_metrics = 2; */\n        if (message.encounterMetrics)\n            EncounterMetrics.internalBinaryWrite(message.encounterMetrics, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* string logs = 3; */\n        if (message.logs !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.logs);\n        /* double first_iteration_duration = 4; */\n        if (message.firstIterationDuration !== 0)\n            writer.tag(4, WireType.Bit64).double(message.firstIterationDuration);\n        /* double avg_iteration_duration = 6; */\n        if (message.avgIterationDuration !== 0)\n            writer.tag(6, WireType.Bit64).double(message.avgIterationDuration);\n        /* string error_result = 5; */\n        if (message.errorResult !== \"\")\n            writer.tag(5, WireType.LengthDelimited).string(message.errorResult);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimResult\n */\nexport const RaidSimResult = new RaidSimResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ComputeStatsRequest$Type extends MessageType<ComputeStatsRequest> {\n    constructor() {\n        super(\"proto.ComputeStatsRequest\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 2, name: \"encounter\", kind: \"message\", T: () => Encounter }\n        ]);\n    }\n    create(value?: PartialMessage<ComputeStatsRequest>): ComputeStatsRequest {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ComputeStatsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComputeStatsRequest): ComputeStatsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* proto.Encounter encounter */ 2:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ComputeStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 2; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ComputeStatsRequest\n */\nexport const ComputeStatsRequest = new ComputeStatsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AuraStats$Type extends MessageType<AuraStats> {\n    constructor() {\n        super(\"proto.AuraStats\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"max_stacks\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"has_icd\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"has_exclusive_effect\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<AuraStats>): AuraStats {\n        const message = { maxStacks: 0, hasIcd: false, hasExclusiveEffect: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AuraStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuraStats): AuraStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* int32 max_stacks */ 2:\n                    message.maxStacks = reader.int32();\n                    break;\n                case /* bool has_icd */ 3:\n                    message.hasIcd = reader.bool();\n                    break;\n                case /* bool has_exclusive_effect */ 4:\n                    message.hasExclusiveEffect = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AuraStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* int32 max_stacks = 2; */\n        if (message.maxStacks !== 0)\n            writer.tag(2, WireType.Varint).int32(message.maxStacks);\n        /* bool has_icd = 3; */\n        if (message.hasIcd !== false)\n            writer.tag(3, WireType.Varint).bool(message.hasIcd);\n        /* bool has_exclusive_effect = 4; */\n        if (message.hasExclusiveEffect !== false)\n            writer.tag(4, WireType.Varint).bool(message.hasExclusiveEffect);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AuraStats\n */\nexport const AuraStats = new AuraStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SpellStats$Type extends MessageType<SpellStats> {\n    constructor() {\n        super(\"proto.SpellStats\", [\n            { no: 1, name: \"id\", kind: \"message\", T: () => ActionID },\n            { no: 2, name: \"is_castable\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"is_channeled\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"is_major_cooldown\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"has_dot\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"has_shield\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"prepull_only\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"encounter_only\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"has_cast_time\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SpellStats>): SpellStats {\n        const message = { isCastable: false, isChanneled: false, isMajorCooldown: false, hasDot: false, hasShield: false, prepullOnly: false, encounterOnly: false, hasCastTime: false };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SpellStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SpellStats): SpellStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ActionID id */ 1:\n                    message.id = ActionID.internalBinaryRead(reader, reader.uint32(), options, message.id);\n                    break;\n                case /* bool is_castable */ 2:\n                    message.isCastable = reader.bool();\n                    break;\n                case /* bool is_channeled */ 7:\n                    message.isChanneled = reader.bool();\n                    break;\n                case /* bool is_major_cooldown */ 3:\n                    message.isMajorCooldown = reader.bool();\n                    break;\n                case /* bool has_dot */ 4:\n                    message.hasDot = reader.bool();\n                    break;\n                case /* bool has_shield */ 6:\n                    message.hasShield = reader.bool();\n                    break;\n                case /* bool prepull_only */ 5:\n                    message.prepullOnly = reader.bool();\n                    break;\n                case /* bool encounter_only */ 8:\n                    message.encounterOnly = reader.bool();\n                    break;\n                case /* bool has_cast_time */ 9:\n                    message.hasCastTime = reader.bool();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SpellStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ActionID id = 1; */\n        if (message.id)\n            ActionID.internalBinaryWrite(message.id, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool is_castable = 2; */\n        if (message.isCastable !== false)\n            writer.tag(2, WireType.Varint).bool(message.isCastable);\n        /* bool is_channeled = 7; */\n        if (message.isChanneled !== false)\n            writer.tag(7, WireType.Varint).bool(message.isChanneled);\n        /* bool is_major_cooldown = 3; */\n        if (message.isMajorCooldown !== false)\n            writer.tag(3, WireType.Varint).bool(message.isMajorCooldown);\n        /* bool has_dot = 4; */\n        if (message.hasDot !== false)\n            writer.tag(4, WireType.Varint).bool(message.hasDot);\n        /* bool has_shield = 6; */\n        if (message.hasShield !== false)\n            writer.tag(6, WireType.Varint).bool(message.hasShield);\n        /* bool prepull_only = 5; */\n        if (message.prepullOnly !== false)\n            writer.tag(5, WireType.Varint).bool(message.prepullOnly);\n        /* bool encounter_only = 8; */\n        if (message.encounterOnly !== false)\n            writer.tag(8, WireType.Varint).bool(message.encounterOnly);\n        /* bool has_cast_time = 9; */\n        if (message.hasCastTime !== false)\n            writer.tag(9, WireType.Varint).bool(message.hasCastTime);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SpellStats\n */\nexport const SpellStats = new SpellStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLActionStats$Type extends MessageType<APLActionStats> {\n    constructor() {\n        super(\"proto.APLActionStats\", [\n            { no: 1, name: \"warnings\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<APLActionStats>): APLActionStats {\n        const message = { warnings: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLActionStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLActionStats): APLActionStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated string warnings */ 1:\n                    message.warnings.push(reader.string());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLActionStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated string warnings = 1; */\n        for (let i = 0; i < message.warnings.length; i++)\n            writer.tag(1, WireType.LengthDelimited).string(message.warnings[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLActionStats\n */\nexport const APLActionStats = new APLActionStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass APLStats$Type extends MessageType<APLStats> {\n    constructor() {\n        super(\"proto.APLStats\", [\n            { no: 1, name: \"prepull_actions\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLActionStats },\n            { no: 2, name: \"priority_list\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => APLActionStats }\n        ]);\n    }\n    create(value?: PartialMessage<APLStats>): APLStats {\n        const message = { prepullActions: [], priorityList: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<APLStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: APLStats): APLStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.APLActionStats prepull_actions */ 1:\n                    message.prepullActions.push(APLActionStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.APLActionStats priority_list */ 2:\n                    message.priorityList.push(APLActionStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: APLStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.APLActionStats prepull_actions = 1; */\n        for (let i = 0; i < message.prepullActions.length; i++)\n            APLActionStats.internalBinaryWrite(message.prepullActions[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.APLActionStats priority_list = 2; */\n        for (let i = 0; i < message.priorityList.length; i++)\n            APLActionStats.internalBinaryWrite(message.priorityList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.APLStats\n */\nexport const APLStats = new APLStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UnitMetadata$Type extends MessageType<UnitMetadata> {\n    constructor() {\n        super(\"proto.UnitMetadata\", [\n            { no: 3, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 1, name: \"spells\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => SpellStats },\n            { no: 2, name: \"auras\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => AuraStats }\n        ]);\n    }\n    create(value?: PartialMessage<UnitMetadata>): UnitMetadata {\n        const message = { name: \"\", spells: [], auras: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UnitMetadata>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnitMetadata): UnitMetadata {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string name */ 3:\n                    message.name = reader.string();\n                    break;\n                case /* repeated proto.SpellStats spells */ 1:\n                    message.spells.push(SpellStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.AuraStats auras */ 2:\n                    message.auras.push(AuraStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UnitMetadata, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string name = 3; */\n        if (message.name !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.name);\n        /* repeated proto.SpellStats spells = 1; */\n        for (let i = 0; i < message.spells.length; i++)\n            SpellStats.internalBinaryWrite(message.spells[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.AuraStats auras = 2; */\n        for (let i = 0; i < message.auras.length; i++)\n            AuraStats.internalBinaryWrite(message.auras[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UnitMetadata\n */\nexport const UnitMetadata = new UnitMetadata$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PetStats$Type extends MessageType<PetStats> {\n    constructor() {\n        super(\"proto.PetStats\", [\n            { no: 1, name: \"metadata\", kind: \"message\", T: () => UnitMetadata }\n        ]);\n    }\n    create(value?: PartialMessage<PetStats>): PetStats {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PetStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PetStats): PetStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitMetadata metadata */ 1:\n                    message.metadata = UnitMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PetStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitMetadata metadata = 1; */\n        if (message.metadata)\n            UnitMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PetStats\n */\nexport const PetStats = new PetStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PlayerStats$Type extends MessageType<PlayerStats> {\n    constructor() {\n        super(\"proto.PlayerStats\", [\n            { no: 6, name: \"base_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 1, name: \"gear_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 7, name: \"talents_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 8, name: \"buffs_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 9, name: \"consumes_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 2, name: \"final_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 3, name: \"sets\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 10, name: \"metadata\", kind: \"message\", T: () => UnitMetadata },\n            { no: 12, name: \"rotation_stats\", kind: \"message\", T: () => APLStats },\n            { no: 11, name: \"pets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PetStats }\n        ]);\n    }\n    create(value?: PartialMessage<PlayerStats>): PlayerStats {\n        const message = { sets: [], pets: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PlayerStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerStats): PlayerStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitStats base_stats */ 6:\n                    message.baseStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.baseStats);\n                    break;\n                case /* proto.UnitStats gear_stats */ 1:\n                    message.gearStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.gearStats);\n                    break;\n                case /* proto.UnitStats talents_stats */ 7:\n                    message.talentsStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.talentsStats);\n                    break;\n                case /* proto.UnitStats buffs_stats */ 8:\n                    message.buffsStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.buffsStats);\n                    break;\n                case /* proto.UnitStats consumes_stats */ 9:\n                    message.consumesStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.consumesStats);\n                    break;\n                case /* proto.UnitStats final_stats */ 2:\n                    message.finalStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.finalStats);\n                    break;\n                case /* repeated string sets */ 3:\n                    message.sets.push(reader.string());\n                    break;\n                case /* proto.IndividualBuffs buffs */ 4:\n                    message.buffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.buffs);\n                    break;\n                case /* proto.UnitMetadata metadata */ 10:\n                    message.metadata = UnitMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);\n                    break;\n                case /* proto.APLStats rotation_stats */ 12:\n                    message.rotationStats = APLStats.internalBinaryRead(reader, reader.uint32(), options, message.rotationStats);\n                    break;\n                case /* repeated proto.PetStats pets */ 11:\n                    message.pets.push(PetStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PlayerStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitStats base_stats = 6; */\n        if (message.baseStats)\n            UnitStats.internalBinaryWrite(message.baseStats, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats gear_stats = 1; */\n        if (message.gearStats)\n            UnitStats.internalBinaryWrite(message.gearStats, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats talents_stats = 7; */\n        if (message.talentsStats)\n            UnitStats.internalBinaryWrite(message.talentsStats, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats buffs_stats = 8; */\n        if (message.buffsStats)\n            UnitStats.internalBinaryWrite(message.buffsStats, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats consumes_stats = 9; */\n        if (message.consumesStats)\n            UnitStats.internalBinaryWrite(message.consumesStats, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats final_stats = 2; */\n        if (message.finalStats)\n            UnitStats.internalBinaryWrite(message.finalStats, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* repeated string sets = 3; */\n        for (let i = 0; i < message.sets.length; i++)\n            writer.tag(3, WireType.LengthDelimited).string(message.sets[i]);\n        /* proto.IndividualBuffs buffs = 4; */\n        if (message.buffs)\n            IndividualBuffs.internalBinaryWrite(message.buffs, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitMetadata metadata = 10; */\n        if (message.metadata)\n            UnitMetadata.internalBinaryWrite(message.metadata, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* proto.APLStats rotation_stats = 12; */\n        if (message.rotationStats)\n            APLStats.internalBinaryWrite(message.rotationStats, writer.tag(12, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.PetStats pets = 11; */\n        for (let i = 0; i < message.pets.length; i++)\n            PetStats.internalBinaryWrite(message.pets[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PlayerStats\n */\nexport const PlayerStats = new PlayerStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PartyStats$Type extends MessageType<PartyStats> {\n    constructor() {\n        super(\"proto.PartyStats\", [\n            { no: 1, name: \"players\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PlayerStats }\n        ]);\n    }\n    create(value?: PartialMessage<PartyStats>): PartyStats {\n        const message = { players: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<PartyStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PartyStats): PartyStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.PlayerStats players */ 1:\n                    message.players.push(PlayerStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: PartyStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.PlayerStats players = 1; */\n        for (let i = 0; i < message.players.length; i++)\n            PlayerStats.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.PartyStats\n */\nexport const PartyStats = new PartyStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidStats$Type extends MessageType<RaidStats> {\n    constructor() {\n        super(\"proto.RaidStats\", [\n            { no: 1, name: \"parties\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PartyStats }\n        ]);\n    }\n    create(value?: PartialMessage<RaidStats>): RaidStats {\n        const message = { parties: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidStats): RaidStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.PartyStats parties */ 1:\n                    message.parties.push(PartyStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.PartyStats parties = 1; */\n        for (let i = 0; i < message.parties.length; i++)\n            PartyStats.internalBinaryWrite(message.parties[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidStats\n */\nexport const RaidStats = new RaidStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TargetStats$Type extends MessageType<TargetStats> {\n    constructor() {\n        super(\"proto.TargetStats\", [\n            { no: 1, name: \"metadata\", kind: \"message\", T: () => UnitMetadata }\n        ]);\n    }\n    create(value?: PartialMessage<TargetStats>): TargetStats {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TargetStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TargetStats): TargetStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitMetadata metadata */ 1:\n                    message.metadata = UnitMetadata.internalBinaryRead(reader, reader.uint32(), options, message.metadata);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TargetStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitMetadata metadata = 1; */\n        if (message.metadata)\n            UnitMetadata.internalBinaryWrite(message.metadata, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TargetStats\n */\nexport const TargetStats = new TargetStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass EncounterStats$Type extends MessageType<EncounterStats> {\n    constructor() {\n        super(\"proto.EncounterStats\", [\n            { no: 1, name: \"targets\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TargetStats }\n        ]);\n    }\n    create(value?: PartialMessage<EncounterStats>): EncounterStats {\n        const message = { targets: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<EncounterStats>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EncounterStats): EncounterStats {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.TargetStats targets */ 1:\n                    message.targets.push(TargetStats.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: EncounterStats, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.TargetStats targets = 1; */\n        for (let i = 0; i < message.targets.length; i++)\n            TargetStats.internalBinaryWrite(message.targets[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.EncounterStats\n */\nexport const EncounterStats = new EncounterStats$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ComputeStatsResult$Type extends MessageType<ComputeStatsResult> {\n    constructor() {\n        super(\"proto.ComputeStatsResult\", [\n            { no: 1, name: \"raid_stats\", kind: \"message\", T: () => RaidStats },\n            { no: 3, name: \"encounter_stats\", kind: \"message\", T: () => EncounterStats },\n            { no: 2, name: \"error_result\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<ComputeStatsResult>): ComputeStatsResult {\n        const message = { errorResult: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ComputeStatsResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ComputeStatsResult): ComputeStatsResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidStats raid_stats */ 1:\n                    message.raidStats = RaidStats.internalBinaryRead(reader, reader.uint32(), options, message.raidStats);\n                    break;\n                case /* proto.EncounterStats encounter_stats */ 3:\n                    message.encounterStats = EncounterStats.internalBinaryRead(reader, reader.uint32(), options, message.encounterStats);\n                    break;\n                case /* string error_result */ 2:\n                    message.errorResult = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ComputeStatsResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidStats raid_stats = 1; */\n        if (message.raidStats)\n            RaidStats.internalBinaryWrite(message.raidStats, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.EncounterStats encounter_stats = 3; */\n        if (message.encounterStats)\n            EncounterStats.internalBinaryWrite(message.encounterStats, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* string error_result = 2; */\n        if (message.errorResult !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.errorResult);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ComputeStatsResult\n */\nexport const ComputeStatsResult = new ComputeStatsResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightsRequest$Type extends MessageType<StatWeightsRequest> {\n    constructor() {\n        super(\"proto.StatWeightsRequest\", [\n            { no: 1, name: \"player\", kind: \"message\", T: () => Player },\n            { no: 2, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 3, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 9, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 5, name: \"sim_options\", kind: \"message\", T: () => SimOptions },\n            { no: 8, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitReference },\n            { no: 6, name: \"stats_to_weigh\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Stat\", Stat] },\n            { no: 10, name: \"pseudo_stats_to_weigh\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.PseudoStat\", PseudoStat] },\n            { no: 7, name: \"ep_reference_stat\", kind: \"enum\", T: () => [\"proto.Stat\", Stat] }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightsRequest>): StatWeightsRequest {\n        const message = { tanks: [], statsToWeigh: [], pseudoStatsToWeigh: [], epReferenceStat: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightsRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightsRequest): StatWeightsRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Player player */ 1:\n                    message.player = Player.internalBinaryRead(reader, reader.uint32(), options, message.player);\n                    break;\n                case /* proto.RaidBuffs raid_buffs */ 2:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 3:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 9:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* proto.SimOptions sim_options */ 5:\n                    message.simOptions = SimOptions.internalBinaryRead(reader, reader.uint32(), options, message.simOptions);\n                    break;\n                case /* repeated proto.UnitReference tanks */ 8:\n                    message.tanks.push(UnitReference.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.Stat stats_to_weigh */ 6:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.statsToWeigh.push(reader.int32());\n                    else\n                        message.statsToWeigh.push(reader.int32());\n                    break;\n                case /* repeated proto.PseudoStat pseudo_stats_to_weigh */ 10:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.pseudoStatsToWeigh.push(reader.int32());\n                    else\n                        message.pseudoStatsToWeigh.push(reader.int32());\n                    break;\n                case /* proto.Stat ep_reference_stat */ 7:\n                    message.epReferenceStat = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Player player = 1; */\n        if (message.player)\n            Player.internalBinaryWrite(message.player, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidBuffs raid_buffs = 2; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 3; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 9; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimOptions sim_options = 5; */\n        if (message.simOptions)\n            SimOptions.internalBinaryWrite(message.simOptions, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitReference tanks = 8; */\n        for (let i = 0; i < message.tanks.length; i++)\n            UnitReference.internalBinaryWrite(message.tanks[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.Stat stats_to_weigh = 6; */\n        if (message.statsToWeigh.length) {\n            writer.tag(6, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.statsToWeigh.length; i++)\n                writer.int32(message.statsToWeigh[i]);\n            writer.join();\n        }\n        /* repeated proto.PseudoStat pseudo_stats_to_weigh = 10; */\n        if (message.pseudoStatsToWeigh.length) {\n            writer.tag(10, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.pseudoStatsToWeigh.length; i++)\n                writer.int32(message.pseudoStatsToWeigh[i]);\n            writer.join();\n        }\n        /* proto.Stat ep_reference_stat = 7; */\n        if (message.epReferenceStat !== 0)\n            writer.tag(7, WireType.Varint).int32(message.epReferenceStat);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightsRequest\n */\nexport const StatWeightsRequest = new StatWeightsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightsResult$Type extends MessageType<StatWeightsResult> {\n    constructor() {\n        super(\"proto.StatWeightsResult\", [\n            { no: 1, name: \"dps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 4, name: \"hps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 2, name: \"tps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 3, name: \"dtps\", kind: \"message\", T: () => StatWeightValues },\n            { no: 5, name: \"tmi\", kind: \"message\", T: () => StatWeightValues },\n            { no: 6, name: \"p_death\", kind: \"message\", T: () => StatWeightValues }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightsResult>): StatWeightsResult {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightsResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightsResult): StatWeightsResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.StatWeightValues dps */ 1:\n                    message.dps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.dps);\n                    break;\n                case /* proto.StatWeightValues hps */ 4:\n                    message.hps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.hps);\n                    break;\n                case /* proto.StatWeightValues tps */ 2:\n                    message.tps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.tps);\n                    break;\n                case /* proto.StatWeightValues dtps */ 3:\n                    message.dtps = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.dtps);\n                    break;\n                case /* proto.StatWeightValues tmi */ 5:\n                    message.tmi = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.tmi);\n                    break;\n                case /* proto.StatWeightValues p_death */ 6:\n                    message.pDeath = StatWeightValues.internalBinaryRead(reader, reader.uint32(), options, message.pDeath);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightsResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.StatWeightValues dps = 1; */\n        if (message.dps)\n            StatWeightValues.internalBinaryWrite(message.dps, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues hps = 4; */\n        if (message.hps)\n            StatWeightValues.internalBinaryWrite(message.hps, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues tps = 2; */\n        if (message.tps)\n            StatWeightValues.internalBinaryWrite(message.tps, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues dtps = 3; */\n        if (message.dtps)\n            StatWeightValues.internalBinaryWrite(message.dtps, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues tmi = 5; */\n        if (message.tmi)\n            StatWeightValues.internalBinaryWrite(message.tmi, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightValues p_death = 6; */\n        if (message.pDeath)\n            StatWeightValues.internalBinaryWrite(message.pDeath, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightsResult\n */\nexport const StatWeightsResult = new StatWeightsResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StatWeightValues$Type extends MessageType<StatWeightValues> {\n    constructor() {\n        super(\"proto.StatWeightValues\", [\n            { no: 1, name: \"weights\", kind: \"message\", T: () => UnitStats },\n            { no: 2, name: \"weights_stdev\", kind: \"message\", T: () => UnitStats },\n            { no: 3, name: \"ep_values\", kind: \"message\", T: () => UnitStats },\n            { no: 4, name: \"ep_values_stdev\", kind: \"message\", T: () => UnitStats }\n        ]);\n    }\n    create(value?: PartialMessage<StatWeightValues>): StatWeightValues {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<StatWeightValues>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatWeightValues): StatWeightValues {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.UnitStats weights */ 1:\n                    message.weights = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.weights);\n                    break;\n                case /* proto.UnitStats weights_stdev */ 2:\n                    message.weightsStdev = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.weightsStdev);\n                    break;\n                case /* proto.UnitStats ep_values */ 3:\n                    message.epValues = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.epValues);\n                    break;\n                case /* proto.UnitStats ep_values_stdev */ 4:\n                    message.epValuesStdev = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.epValuesStdev);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: StatWeightValues, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.UnitStats weights = 1; */\n        if (message.weights)\n            UnitStats.internalBinaryWrite(message.weights, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats weights_stdev = 2; */\n        if (message.weightsStdev)\n            UnitStats.internalBinaryWrite(message.weightsStdev, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats ep_values = 3; */\n        if (message.epValues)\n            UnitStats.internalBinaryWrite(message.epValues, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats ep_values_stdev = 4; */\n        if (message.epValuesStdev)\n            UnitStats.internalBinaryWrite(message.epValuesStdev, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.StatWeightValues\n */\nexport const StatWeightValues = new StatWeightValues$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AsyncAPIResult$Type extends MessageType<AsyncAPIResult> {\n    constructor() {\n        super(\"proto.AsyncAPIResult\", [\n            { no: 1, name: \"progress_id\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<AsyncAPIResult>): AsyncAPIResult {\n        const message = { progressId: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<AsyncAPIResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AsyncAPIResult): AsyncAPIResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string progress_id */ 1:\n                    message.progressId = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: AsyncAPIResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string progress_id = 1; */\n        if (message.progressId !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.progressId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.AsyncAPIResult\n */\nexport const AsyncAPIResult = new AsyncAPIResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ProgressMetrics$Type extends MessageType<ProgressMetrics> {\n    constructor() {\n        super(\"proto.ProgressMetrics\", [\n            { no: 1, name: \"completed_iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"total_iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"completed_sims\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"total_sims\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"presim_running\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"dps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"hps\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"final_raid_result\", kind: \"message\", T: () => RaidSimResult },\n            { no: 7, name: \"final_weight_result\", kind: \"message\", T: () => StatWeightsResult },\n            { no: 10, name: \"final_bulk_result\", kind: \"message\", T: () => BulkSimResult }\n        ]);\n    }\n    create(value?: PartialMessage<ProgressMetrics>): ProgressMetrics {\n        const message = { completedIterations: 0, totalIterations: 0, completedSims: 0, totalSims: 0, presimRunning: false, dps: 0, hps: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ProgressMetrics>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ProgressMetrics): ProgressMetrics {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 completed_iterations */ 1:\n                    message.completedIterations = reader.int32();\n                    break;\n                case /* int32 total_iterations */ 2:\n                    message.totalIterations = reader.int32();\n                    break;\n                case /* int32 completed_sims */ 3:\n                    message.completedSims = reader.int32();\n                    break;\n                case /* int32 total_sims */ 4:\n                    message.totalSims = reader.int32();\n                    break;\n                case /* bool presim_running */ 8:\n                    message.presimRunning = reader.bool();\n                    break;\n                case /* double dps */ 5:\n                    message.dps = reader.double();\n                    break;\n                case /* double hps */ 9:\n                    message.hps = reader.double();\n                    break;\n                case /* proto.RaidSimResult final_raid_result */ 6:\n                    message.finalRaidResult = RaidSimResult.internalBinaryRead(reader, reader.uint32(), options, message.finalRaidResult);\n                    break;\n                case /* proto.StatWeightsResult final_weight_result */ 7:\n                    message.finalWeightResult = StatWeightsResult.internalBinaryRead(reader, reader.uint32(), options, message.finalWeightResult);\n                    break;\n                case /* proto.BulkSimResult final_bulk_result */ 10:\n                    message.finalBulkResult = BulkSimResult.internalBinaryRead(reader, reader.uint32(), options, message.finalBulkResult);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ProgressMetrics, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 completed_iterations = 1; */\n        if (message.completedIterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.completedIterations);\n        /* int32 total_iterations = 2; */\n        if (message.totalIterations !== 0)\n            writer.tag(2, WireType.Varint).int32(message.totalIterations);\n        /* int32 completed_sims = 3; */\n        if (message.completedSims !== 0)\n            writer.tag(3, WireType.Varint).int32(message.completedSims);\n        /* int32 total_sims = 4; */\n        if (message.totalSims !== 0)\n            writer.tag(4, WireType.Varint).int32(message.totalSims);\n        /* bool presim_running = 8; */\n        if (message.presimRunning !== false)\n            writer.tag(8, WireType.Varint).bool(message.presimRunning);\n        /* double dps = 5; */\n        if (message.dps !== 0)\n            writer.tag(5, WireType.Bit64).double(message.dps);\n        /* double hps = 9; */\n        if (message.hps !== 0)\n            writer.tag(9, WireType.Bit64).double(message.hps);\n        /* proto.RaidSimResult final_raid_result = 6; */\n        if (message.finalRaidResult)\n            RaidSimResult.internalBinaryWrite(message.finalRaidResult, writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* proto.StatWeightsResult final_weight_result = 7; */\n        if (message.finalWeightResult)\n            StatWeightsResult.internalBinaryWrite(message.finalWeightResult, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BulkSimResult final_bulk_result = 10; */\n        if (message.finalBulkResult)\n            BulkSimResult.internalBinaryWrite(message.finalBulkResult, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ProgressMetrics\n */\nexport const ProgressMetrics = new ProgressMetrics$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BulkSimRequest$Type extends MessageType<BulkSimRequest> {\n    constructor() {\n        super(\"proto.BulkSimRequest\", [\n            { no: 1, name: \"base_settings\", kind: \"message\", T: () => RaidSimRequest },\n            { no: 2, name: \"bulk_settings\", kind: \"message\", T: () => BulkSettings }\n        ]);\n    }\n    create(value?: PartialMessage<BulkSimRequest>): BulkSimRequest {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BulkSimRequest>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkSimRequest): BulkSimRequest {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidSimRequest base_settings */ 1:\n                    message.baseSettings = RaidSimRequest.internalBinaryRead(reader, reader.uint32(), options, message.baseSettings);\n                    break;\n                case /* proto.BulkSettings bulk_settings */ 2:\n                    message.bulkSettings = BulkSettings.internalBinaryRead(reader, reader.uint32(), options, message.bulkSettings);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BulkSimRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidSimRequest base_settings = 1; */\n        if (message.baseSettings)\n            RaidSimRequest.internalBinaryWrite(message.baseSettings, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BulkSettings bulk_settings = 2; */\n        if (message.bulkSettings)\n            BulkSettings.internalBinaryWrite(message.bulkSettings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BulkSimRequest\n */\nexport const BulkSimRequest = new BulkSimRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TalentLoadout$Type extends MessageType<TalentLoadout> {\n    constructor() {\n        super(\"proto.TalentLoadout\", [\n            { no: 1, name: \"talents_string\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"glyphs\", kind: \"message\", T: () => Glyphs },\n            { no: 3, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<TalentLoadout>): TalentLoadout {\n        const message = { talentsString: \"\", name: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<TalentLoadout>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TalentLoadout): TalentLoadout {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string talents_string */ 1:\n                    message.talentsString = reader.string();\n                    break;\n                case /* proto.Glyphs glyphs */ 2:\n                    message.glyphs = Glyphs.internalBinaryRead(reader, reader.uint32(), options, message.glyphs);\n                    break;\n                case /* string name */ 3:\n                    message.name = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: TalentLoadout, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string talents_string = 1; */\n        if (message.talentsString !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.talentsString);\n        /* proto.Glyphs glyphs = 2; */\n        if (message.glyphs)\n            Glyphs.internalBinaryWrite(message.glyphs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* string name = 3; */\n        if (message.name !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.name);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.TalentLoadout\n */\nexport const TalentLoadout = new TalentLoadout$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BulkSettings$Type extends MessageType<BulkSettings> {\n    constructor() {\n        super(\"proto.BulkSettings\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemSpec },\n            { no: 2, name: \"combinations\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 3, name: \"fast_mode\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"auto_enchant\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"auto_gem\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 6, name: \"default_red_gem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"default_blue_gem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 8, name: \"default_yellow_gem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 9, name: \"default_meta_gem\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"ensure_meta_req_met\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"iterations_per_combo\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"sim_talents\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 13, name: \"talents_to_sim\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => TalentLoadout }\n        ]);\n    }\n    create(value?: PartialMessage<BulkSettings>): BulkSettings {\n        const message = { items: [], combinations: false, fastMode: false, autoEnchant: false, autoGem: false, defaultRedGem: 0, defaultBlueGem: 0, defaultYellowGem: 0, defaultMetaGem: 0, ensureMetaReqMet: false, iterationsPerCombo: 0, simTalents: false, talentsToSim: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BulkSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkSettings): BulkSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.ItemSpec items */ 1:\n                    message.items.push(ItemSpec.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* bool combinations */ 2:\n                    message.combinations = reader.bool();\n                    break;\n                case /* bool fast_mode */ 3:\n                    message.fastMode = reader.bool();\n                    break;\n                case /* bool auto_enchant */ 4:\n                    message.autoEnchant = reader.bool();\n                    break;\n                case /* bool auto_gem */ 5:\n                    message.autoGem = reader.bool();\n                    break;\n                case /* int32 default_red_gem */ 6:\n                    message.defaultRedGem = reader.int32();\n                    break;\n                case /* int32 default_blue_gem */ 7:\n                    message.defaultBlueGem = reader.int32();\n                    break;\n                case /* int32 default_yellow_gem */ 8:\n                    message.defaultYellowGem = reader.int32();\n                    break;\n                case /* int32 default_meta_gem */ 9:\n                    message.defaultMetaGem = reader.int32();\n                    break;\n                case /* bool ensure_meta_req_met */ 10:\n                    message.ensureMetaReqMet = reader.bool();\n                    break;\n                case /* int32 iterations_per_combo */ 11:\n                    message.iterationsPerCombo = reader.int32();\n                    break;\n                case /* bool sim_talents */ 12:\n                    message.simTalents = reader.bool();\n                    break;\n                case /* repeated proto.TalentLoadout talents_to_sim */ 13:\n                    message.talentsToSim.push(TalentLoadout.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BulkSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.ItemSpec items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            ItemSpec.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* bool combinations = 2; */\n        if (message.combinations !== false)\n            writer.tag(2, WireType.Varint).bool(message.combinations);\n        /* bool fast_mode = 3; */\n        if (message.fastMode !== false)\n            writer.tag(3, WireType.Varint).bool(message.fastMode);\n        /* bool auto_enchant = 4; */\n        if (message.autoEnchant !== false)\n            writer.tag(4, WireType.Varint).bool(message.autoEnchant);\n        /* bool auto_gem = 5; */\n        if (message.autoGem !== false)\n            writer.tag(5, WireType.Varint).bool(message.autoGem);\n        /* int32 default_red_gem = 6; */\n        if (message.defaultRedGem !== 0)\n            writer.tag(6, WireType.Varint).int32(message.defaultRedGem);\n        /* int32 default_blue_gem = 7; */\n        if (message.defaultBlueGem !== 0)\n            writer.tag(7, WireType.Varint).int32(message.defaultBlueGem);\n        /* int32 default_yellow_gem = 8; */\n        if (message.defaultYellowGem !== 0)\n            writer.tag(8, WireType.Varint).int32(message.defaultYellowGem);\n        /* int32 default_meta_gem = 9; */\n        if (message.defaultMetaGem !== 0)\n            writer.tag(9, WireType.Varint).int32(message.defaultMetaGem);\n        /* bool ensure_meta_req_met = 10; */\n        if (message.ensureMetaReqMet !== false)\n            writer.tag(10, WireType.Varint).bool(message.ensureMetaReqMet);\n        /* int32 iterations_per_combo = 11; */\n        if (message.iterationsPerCombo !== 0)\n            writer.tag(11, WireType.Varint).int32(message.iterationsPerCombo);\n        /* bool sim_talents = 12; */\n        if (message.simTalents !== false)\n            writer.tag(12, WireType.Varint).bool(message.simTalents);\n        /* repeated proto.TalentLoadout talents_to_sim = 13; */\n        for (let i = 0; i < message.talentsToSim.length; i++)\n            TalentLoadout.internalBinaryWrite(message.talentsToSim[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BulkSettings\n */\nexport const BulkSettings = new BulkSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BulkSimResult$Type extends MessageType<BulkSimResult> {\n    constructor() {\n        super(\"proto.BulkSimResult\", [\n            { no: 1, name: \"results\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BulkComboResult },\n            { no: 2, name: \"equipped_gear_result\", kind: \"message\", T: () => BulkComboResult },\n            { no: 3, name: \"error_result\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<BulkSimResult>): BulkSimResult {\n        const message = { results: [], errorResult: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BulkSimResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkSimResult): BulkSimResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.BulkComboResult results */ 1:\n                    message.results.push(BulkComboResult.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.BulkComboResult equipped_gear_result */ 2:\n                    message.equippedGearResult = BulkComboResult.internalBinaryRead(reader, reader.uint32(), options, message.equippedGearResult);\n                    break;\n                case /* string error_result */ 3:\n                    message.errorResult = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BulkSimResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.BulkComboResult results = 1; */\n        for (let i = 0; i < message.results.length; i++)\n            BulkComboResult.internalBinaryWrite(message.results[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BulkComboResult equipped_gear_result = 2; */\n        if (message.equippedGearResult)\n            BulkComboResult.internalBinaryWrite(message.equippedGearResult, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* string error_result = 3; */\n        if (message.errorResult !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.errorResult);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BulkSimResult\n */\nexport const BulkSimResult = new BulkSimResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BulkComboResult$Type extends MessageType<BulkComboResult> {\n    constructor() {\n        super(\"proto.BulkComboResult\", [\n            { no: 1, name: \"items_added\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemSpecWithSlot },\n            { no: 2, name: \"unit_metrics\", kind: \"message\", T: () => UnitMetrics },\n            { no: 3, name: \"talent_loadout\", kind: \"message\", T: () => TalentLoadout }\n        ]);\n    }\n    create(value?: PartialMessage<BulkComboResult>): BulkComboResult {\n        const message = { itemsAdded: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BulkComboResult>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BulkComboResult): BulkComboResult {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.ItemSpecWithSlot items_added */ 1:\n                    message.itemsAdded.push(ItemSpecWithSlot.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.UnitMetrics unit_metrics */ 2:\n                    message.unitMetrics = UnitMetrics.internalBinaryRead(reader, reader.uint32(), options, message.unitMetrics);\n                    break;\n                case /* proto.TalentLoadout talent_loadout */ 3:\n                    message.talentLoadout = TalentLoadout.internalBinaryRead(reader, reader.uint32(), options, message.talentLoadout);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BulkComboResult, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.ItemSpecWithSlot items_added = 1; */\n        for (let i = 0; i < message.itemsAdded.length; i++)\n            ItemSpecWithSlot.internalBinaryWrite(message.itemsAdded[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitMetrics unit_metrics = 2; */\n        if (message.unitMetrics)\n            UnitMetrics.internalBinaryWrite(message.unitMetrics, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.TalentLoadout talent_loadout = 3; */\n        if (message.talentLoadout)\n            TalentLoadout.internalBinaryWrite(message.talentLoadout, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BulkComboResult\n */\nexport const BulkComboResult = new BulkComboResult$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ItemSpecWithSlot$Type extends MessageType<ItemSpecWithSlot> {\n    constructor() {\n        super(\"proto.ItemSpecWithSlot\", [\n            { no: 1, name: \"item\", kind: \"message\", T: () => ItemSpec },\n            { no: 2, name: \"slot\", kind: \"enum\", T: () => [\"proto.ItemSlot\", ItemSlot] }\n        ]);\n    }\n    create(value?: PartialMessage<ItemSpecWithSlot>): ItemSpecWithSlot {\n        const message = { slot: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<ItemSpecWithSlot>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemSpecWithSlot): ItemSpecWithSlot {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.ItemSpec item */ 1:\n                    message.item = ItemSpec.internalBinaryRead(reader, reader.uint32(), options, message.item);\n                    break;\n                case /* proto.ItemSlot slot */ 2:\n                    message.slot = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: ItemSpecWithSlot, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.ItemSpec item = 1; */\n        if (message.item)\n            ItemSpec.internalBinaryWrite(message.item, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.ItemSlot slot = 2; */\n        if (message.slot !== 0)\n            writer.tag(2, WireType.Varint).int32(message.slot);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.ItemSpecWithSlot\n */\nexport const ItemSpecWithSlot = new ItemSpecWithSlot$Type();\n","export enum Phase {\n\tPhase1 = 1,\n\tPhase2,\n\tPhase3,\n\tPhase4,\n\tPhase5,\n}\n\nexport const CURRENT_PHASE = Phase.Phase1;\n\n// Github pages serves our site under the /cata directory (because the repo name is cata)\nexport const REPO_NAME = 'cata';\n\n// Get 'elemental_shaman', the pathname part after the repo name\nconst pathnameParts = window.location.pathname.split('/');\nconst repoPartIdx = pathnameParts.findIndex(part => part == REPO_NAME);\nexport const SPEC_DIRECTORY = repoPartIdx == -1 ? '' : pathnameParts[repoPartIdx + 1];\n\nexport const LOCAL_STORAGE_PREFIX = '__cata';\n","import { PlayerSpec } from './player_spec';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from './proto/common.js';\nexport type IconSize = 'small' | 'medium' | 'large';\n\nexport interface EligibleWeaponType {\n\tweaponType: WeaponType;\n\tcanUseTwoHand?: boolean;\n}\n\nexport abstract class PlayerClass<ClassType extends Class> {\n\tstatic classID: Class;\n\tstatic friendlyName: string;\n\tstatic hexColor: string;\n\tstatic specs: Record<string, PlayerSpec<any>>;\n\tstatic races: Race[];\n\tstatic armorTypes: ArmorType[];\n\tstatic weaponTypes: EligibleWeaponType[];\n\tstatic rangedWeaponTypes: RangedWeaponType[];\n\n\tabstract readonly classID: ClassType;\n\tabstract readonly friendlyName: string;\n\tabstract readonly hexColor: string;\n\tabstract readonly specs: Record<string, PlayerSpec<any>>;\n\tabstract readonly races: Race[];\n\tabstract readonly armorTypes: ArmorType[];\n\tabstract readonly weaponTypes: EligibleWeaponType[];\n\tabstract readonly rangedWeaponTypes: RangedWeaponType[];\n\n\tabstract getIcon(size: IconSize): string;\n}\n","import { EligibleWeaponType, IconSize } from './player_class.js';\nimport { ArmorType, Class, Race, RangedWeaponType, Spec } from './proto/common.js';\nimport { SpecClasses } from './proto_utils/utils';\n\nexport abstract class PlayerSpec<SpecType extends Spec> {\n\tstatic specID: Spec;\n\tstatic classID: Class;\n\tstatic friendlyName: string;\n\tstatic hexColor: string;\n\tstatic races: Race[] = [];\n\tstatic armorTypes: ArmorType[] = [];\n\tstatic weaponTypes: EligibleWeaponType[];\n\tstatic rangedWeaponTypes: RangedWeaponType[];\n\n\tabstract readonly specID: SpecType;\n\tabstract readonly classID: SpecClasses<SpecType>;\n\tabstract readonly friendlyName: string;\n\tabstract readonly simLink: string;\n\n\tabstract readonly isTankSpec: boolean;\n\tabstract readonly isHealingSpec: boolean;\n\tabstract readonly isRangedDpsSpec: boolean;\n\tabstract readonly isMeleeDpsSpec: boolean;\n\n\tabstract readonly canDualWield: boolean;\n\n\tabstract getIcon(size: IconSize): string;\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class BloodDeathKnight extends PlayerSpec<Spec.SpecBloodDeathKnight> {\n\tstatic specID = Spec.SpecBloodDeathKnight as Spec.SpecBloodDeathKnight;\n\tstatic classID = Class.ClassDeathKnight as Class.ClassDeathKnight;\n\tstatic friendlyName = 'Blood';\n\tstatic simLink = getSpecSiteUrl('death_knight', 'blood');\n\n\tstatic isTankSpec = true;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = true;\n\n\treadonly specID = BloodDeathKnight.specID;\n\treadonly classID = BloodDeathKnight.classID;\n\treadonly friendlyName = BloodDeathKnight.friendlyName;\n\treadonly simLink = BloodDeathKnight.simLink;\n\n\treadonly isTankSpec = BloodDeathKnight.isTankSpec;\n\treadonly isHealingSpec = BloodDeathKnight.isHealingSpec;\n\treadonly isRangedDpsSpec = BloodDeathKnight.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = BloodDeathKnight.isMeleeDpsSpec;\n\n\treadonly canDualWield = BloodDeathKnight.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_deathknight_bloodpresence.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn BloodDeathKnight.getIcon(size);\n\t};\n}\n\nexport class FrostDeathKnight extends PlayerSpec<Spec.SpecFrostDeathKnight> {\n\tstatic specID = Spec.SpecFrostDeathKnight as Spec.SpecFrostDeathKnight;\n\tstatic classID = Class.ClassDeathKnight as Class.ClassDeathKnight;\n\tstatic friendlyName = 'Frost';\n\tstatic simLink = getSpecSiteUrl('death_knight', 'frost');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = true;\n\n\treadonly specID = FrostDeathKnight.specID;\n\treadonly classID = FrostDeathKnight.classID;\n\treadonly friendlyName = FrostDeathKnight.friendlyName;\n\treadonly simLink = FrostDeathKnight.simLink;\n\n\treadonly isTankSpec = FrostDeathKnight.isTankSpec;\n\treadonly isHealingSpec = FrostDeathKnight.isHealingSpec;\n\treadonly isRangedDpsSpec = FrostDeathKnight.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = FrostDeathKnight.isMeleeDpsSpec;\n\n\treadonly canDualWield = FrostDeathKnight.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_deathknight_frostpresence.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn FrostDeathKnight.getIcon(size);\n\t};\n}\n\nexport class UnholyDeathKnight extends PlayerSpec<Spec.SpecUnholyDeathKnight> {\n\tstatic specID = Spec.SpecUnholyDeathKnight as Spec.SpecUnholyDeathKnight;\n\tstatic classID = Class.ClassDeathKnight as Class.ClassDeathKnight;\n\tstatic friendlyName = 'Unholy';\n\tstatic simLink = getSpecSiteUrl('death_knight', 'unholy');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = true;\n\n\treadonly specID = UnholyDeathKnight.specID;\n\treadonly classID = UnholyDeathKnight.classID;\n\treadonly friendlyName = UnholyDeathKnight.friendlyName;\n\treadonly simLink = UnholyDeathKnight.simLink;\n\n\treadonly isTankSpec = UnholyDeathKnight.isTankSpec;\n\treadonly isHealingSpec = UnholyDeathKnight.isHealingSpec;\n\treadonly isRangedDpsSpec = UnholyDeathKnight.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = UnholyDeathKnight.isMeleeDpsSpec;\n\n\treadonly canDualWield = UnholyDeathKnight.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_deathknight_unholypresence.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn UnholyDeathKnight.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { BloodDeathKnight, FrostDeathKnight, UnholyDeathKnight } from '../player_specs/death_knight';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { DeathKnightSpecs } from '../proto_utils/utils';\n\nexport class DeathKnight extends PlayerClass<Class.ClassDeathKnight> {\n\tstatic classID = Class.ClassDeathKnight as Class.ClassDeathKnight;\n\tstatic friendlyName = 'Death Knight';\n\tstatic hexColor = '#c41e3a';\n\tstatic specs: Record<string, PlayerSpec<DeathKnightSpecs>> = {\n\t\t[BloodDeathKnight.friendlyName]: BloodDeathKnight,\n\t\t[FrostDeathKnight.friendlyName]: FrostDeathKnight,\n\t\t[UnholyDeathKnight.friendlyName]: UnholyDeathKnight,\n\t};\n\tstatic races: Race[] = [\n\t\tRace.RaceBloodElf,\n\t\tRace.RaceDraenei,\n\t\tRace.RaceDwarf,\n\t\tRace.RaceHuman,\n\t\tRace.RaceGnome,\n\t\tRace.RaceGoblin,\n\t\tRace.RaceNightElf,\n\t\tRace.RaceOrc,\n\t\tRace.RaceTauren,\n\t\tRace.RaceTroll,\n\t\tRace.RaceUndead,\n\t\tRace.RaceWorgen,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypePlate, ArmorType.ArmorTypeMail, ArmorType.ArmorTypeLeather, ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t\t// TODO: validate proficiencies\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [RangedWeaponType.RangedWeaponTypeSigil];\n\n\treadonly classID = DeathKnight.classID;\n\treadonly friendlyName = DeathKnight.name;\n\treadonly hexColor = DeathKnight.hexColor;\n\treadonly specs = DeathKnight.specs;\n\treadonly races = DeathKnight.races;\n\treadonly armorTypes = DeathKnight.armorTypes;\n\treadonly weaponTypes = DeathKnight.weaponTypes;\n\treadonly rangedWeaponTypes = DeathKnight.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_deathknight.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn DeathKnight.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class BalanceDruid extends PlayerSpec<Spec.SpecBalanceDruid> {\n\tstatic specID = Spec.SpecBalanceDruid as Spec.SpecBalanceDruid;\n\tstatic classID = Class.ClassDruid as Class.ClassDruid;\n\tstatic friendlyName = 'Balance';\n\tstatic simLink = getSpecSiteUrl('druid', 'balance');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = BalanceDruid.specID;\n\treadonly classID = BalanceDruid.classID;\n\treadonly friendlyName = BalanceDruid.friendlyName;\n\treadonly simLink = BalanceDruid.simLink;\n\n\treadonly isTankSpec = BalanceDruid.isTankSpec;\n\treadonly isHealingSpec = BalanceDruid.isHealingSpec;\n\treadonly isRangedDpsSpec = BalanceDruid.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = BalanceDruid.isMeleeDpsSpec;\n\n\treadonly canDualWield = BalanceDruid.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_nature_starfall.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn BalanceDruid.getIcon(size);\n\t};\n}\n\nexport class FeralDruid extends PlayerSpec<Spec.SpecFeralDruid> {\n\tstatic specID = Spec.SpecFeralDruid as Spec.SpecFeralDruid;\n\tstatic classID = Class.ClassDruid as Class.ClassDruid;\n\tstatic friendlyName = 'Feral';\n\tstatic simLink = getSpecSiteUrl('druid', 'feral');\n\n\tstatic isTankSpec = true;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = FeralDruid.specID;\n\treadonly classID = FeralDruid.classID;\n\treadonly friendlyName = FeralDruid.friendlyName;\n\treadonly simLink = FeralDruid.simLink;\n\n\treadonly isTankSpec = FeralDruid.isTankSpec;\n\treadonly isHealingSpec = FeralDruid.isHealingSpec;\n\treadonly isRangedDpsSpec = FeralDruid.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = FeralDruid.isMeleeDpsSpec;\n\n\treadonly canDualWield = FeralDruid.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_racial_bearform.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn FeralDruid.getIcon(size);\n\t};\n}\n\nexport class RestorationDruid extends PlayerSpec<Spec.SpecRestorationDruid> {\n\tstatic specID = Spec.SpecRestorationDruid as Spec.SpecRestorationDruid;\n\tstatic classID = Class.ClassDruid as Class.ClassDruid;\n\tstatic friendlyName = 'Restoration';\n\tstatic simLink = getSpecSiteUrl('druid', 'Restoration');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = true;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = RestorationDruid.specID;\n\treadonly classID = RestorationDruid.classID;\n\treadonly friendlyName = RestorationDruid.friendlyName;\n\treadonly simLink = RestorationDruid.simLink;\n\n\treadonly isTankSpec = RestorationDruid.isTankSpec;\n\treadonly isHealingSpec = RestorationDruid.isHealingSpec;\n\treadonly isRangedDpsSpec = RestorationDruid.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = RestorationDruid.isMeleeDpsSpec;\n\n\treadonly canDualWield = RestorationDruid.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_nature_healingtouch.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn RestorationDruid.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class BeastMasteryHunter extends PlayerSpec<Spec.SpecBeastMasteryHunter> {\n\tstatic specID = Spec.SpecBeastMasteryHunter as Spec.SpecBeastMasteryHunter;\n\tstatic classID = Class.ClassHunter as Class.ClassHunter;\n\tstatic friendlyName = 'Beast Mastery';\n\tstatic simLink = getSpecSiteUrl('hunter', 'beast_mastery');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = true;\n\n\treadonly specID = BeastMasteryHunter.specID;\n\treadonly classID = BeastMasteryHunter.classID;\n\treadonly friendlyName = BeastMasteryHunter.friendlyName;\n\treadonly simLink = BeastMasteryHunter.simLink;\n\n\treadonly isTankSpec = BeastMasteryHunter.isTankSpec;\n\treadonly isHealingSpec = BeastMasteryHunter.isHealingSpec;\n\treadonly isRangedDpsSpec = BeastMasteryHunter.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = BeastMasteryHunter.isMeleeDpsSpec;\n\n\treadonly canDualWield = BeastMasteryHunter.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_hunter_bestialdiscipline.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn BeastMasteryHunter.getIcon(size);\n\t};\n}\n\nexport class MarksmanshipHunter extends PlayerSpec<Spec.SpecMarksmanshipHunter> {\n\tstatic specID = Spec.SpecMarksmanshipHunter as Spec.SpecMarksmanshipHunter;\n\tstatic classID = Class.ClassHunter as Class.ClassHunter;\n\tstatic friendlyName = 'Marksmanship';\n\tstatic simLink = getSpecSiteUrl('hunter', 'marksmanship');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = true;\n\n\treadonly specID = MarksmanshipHunter.specID;\n\treadonly classID = MarksmanshipHunter.classID;\n\treadonly friendlyName = MarksmanshipHunter.friendlyName;\n\treadonly simLink = MarksmanshipHunter.simLink;\n\n\treadonly isTankSpec = MarksmanshipHunter.isTankSpec;\n\treadonly isHealingSpec = MarksmanshipHunter.isHealingSpec;\n\treadonly isRangedDpsSpec = MarksmanshipHunter.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = MarksmanshipHunter.isMeleeDpsSpec;\n\n\treadonly canDualWield = MarksmanshipHunter.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_hunter_focusedaim.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn MarksmanshipHunter.getIcon(size);\n\t};\n}\n\nexport class SurvivalHunter extends PlayerSpec<Spec.SpecSurvivalHunter> {\n\tstatic specID = Spec.SpecSurvivalHunter as Spec.SpecSurvivalHunter;\n\tstatic classID = Class.ClassHunter as Class.ClassHunter;\n\tstatic friendlyName = 'Survival';\n\tstatic simLink = getSpecSiteUrl('hunter', 'survival');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = true;\n\n\treadonly specID = SurvivalHunter.specID;\n\treadonly classID = SurvivalHunter.classID;\n\treadonly friendlyName = SurvivalHunter.friendlyName;\n\treadonly simLink = SurvivalHunter.simLink;\n\n\treadonly isTankSpec = SurvivalHunter.isTankSpec;\n\treadonly isHealingSpec = SurvivalHunter.isHealingSpec;\n\treadonly isRangedDpsSpec = SurvivalHunter.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = SurvivalHunter.isMeleeDpsSpec;\n\n\treadonly canDualWield = SurvivalHunter.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_hunter_camouflage.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn SurvivalHunter.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class ArcaneMage extends PlayerSpec<Spec.SpecArcaneMage> {\n\tstatic specID = Spec.SpecArcaneMage as Spec.SpecArcaneMage;\n\tstatic classID = Class.ClassMage as Class.ClassMage;\n\tstatic friendlyName = 'Arcane';\n\tstatic simLink = getSpecSiteUrl('mage', 'arcane');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = ArcaneMage.specID;\n\treadonly classID = ArcaneMage.classID;\n\treadonly friendlyName = ArcaneMage.friendlyName;\n\treadonly simLink = ArcaneMage.simLink;\n\n\treadonly isTankSpec = ArcaneMage.isTankSpec;\n\treadonly isHealingSpec = ArcaneMage.isHealingSpec;\n\treadonly isRangedDpsSpec = ArcaneMage.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = ArcaneMage.isMeleeDpsSpec;\n\n\treadonly canDualWield = ArcaneMage.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_holy_magicalsentry.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn ArcaneMage.getIcon(size);\n\t};\n}\n\nexport class FireMage extends PlayerSpec<Spec.SpecFireMage> {\n\tstatic specID = Spec.SpecFireMage as Spec.SpecFireMage;\n\tstatic classID = Class.ClassMage as Class.ClassMage;\n\tstatic friendlyName = 'Fire';\n\tstatic simLink = getSpecSiteUrl('mage', 'fire');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = FireMage.specID;\n\treadonly classID = FireMage.classID;\n\treadonly friendlyName = FireMage.friendlyName;\n\treadonly simLink = FireMage.simLink;\n\n\treadonly isTankSpec = FireMage.isTankSpec;\n\treadonly isHealingSpec = FireMage.isHealingSpec;\n\treadonly isRangedDpsSpec = FireMage.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = FireMage.isMeleeDpsSpec;\n\n\treadonly canDualWield = FireMage.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_fire_firebolt02.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn FireMage.getIcon(size);\n\t};\n}\n\nexport class FrostMage extends PlayerSpec<Spec.SpecFrostMage> {\n\tstatic specID = Spec.SpecFrostMage as Spec.SpecFrostMage;\n\tstatic classID = Class.ClassMage as Class.ClassMage;\n\tstatic friendlyName = 'Frost';\n\tstatic simLink = getSpecSiteUrl('mage', 'frost');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = FrostMage.specID;\n\treadonly classID = FrostMage.classID;\n\treadonly friendlyName = FrostMage.friendlyName;\n\treadonly simLink = FrostMage.simLink;\n\n\treadonly isTankSpec = FrostMage.isTankSpec;\n\treadonly isHealingSpec = FrostMage.isHealingSpec;\n\treadonly isRangedDpsSpec = FrostMage.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = FrostMage.isMeleeDpsSpec;\n\n\treadonly canDualWield = FrostMage.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_frost_frostbolt02.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn FrostMage.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class HolyPaladin extends PlayerSpec<Spec.SpecHolyPaladin> {\n\tstatic specID = Spec.SpecHolyPaladin as Spec.SpecHolyPaladin;\n\tstatic classID = Class.ClassPaladin as Class.ClassPaladin;\n\tstatic friendlyName = 'Holy';\n\tstatic simLink = getSpecSiteUrl('paladin', 'holy');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = true;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = HolyPaladin.specID;\n\treadonly classID = HolyPaladin.classID;\n\treadonly friendlyName = HolyPaladin.friendlyName;\n\treadonly simLink = HolyPaladin.simLink;\n\n\treadonly isTankSpec = HolyPaladin.isTankSpec;\n\treadonly isHealingSpec = HolyPaladin.isHealingSpec;\n\treadonly isRangedDpsSpec = HolyPaladin.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = HolyPaladin.isMeleeDpsSpec;\n\n\treadonly canDualWield = HolyPaladin.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_holy_holybolt.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn HolyPaladin.getIcon(size);\n\t};\n}\n\nexport class ProtectionPaladin extends PlayerSpec<Spec.SpecProtectionPaladin> {\n\tstatic specID = Spec.SpecProtectionPaladin as Spec.SpecProtectionPaladin;\n\tstatic classID = Class.ClassPaladin as Class.ClassPaladin;\n\tstatic friendlyName = 'Protection';\n\tstatic simLink = getSpecSiteUrl('paladin', 'protection');\n\n\tstatic isTankSpec = true;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = ProtectionPaladin.specID;\n\treadonly classID = ProtectionPaladin.classID;\n\treadonly friendlyName = ProtectionPaladin.friendlyName;\n\treadonly simLink = ProtectionPaladin.simLink;\n\n\treadonly isTankSpec = ProtectionPaladin.isTankSpec;\n\treadonly isHealingSpec = ProtectionPaladin.isHealingSpec;\n\treadonly isRangedDpsSpec = ProtectionPaladin.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = ProtectionPaladin.isMeleeDpsSpec;\n\n\treadonly canDualWield = ProtectionPaladin.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_paladin_shieldofthetemplar.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn ProtectionPaladin.getIcon(size);\n\t};\n}\n\nexport class RetributionPaladin extends PlayerSpec<Spec.SpecRetributionPaladin> {\n\tstatic specID = Spec.SpecRetributionPaladin as Spec.SpecRetributionPaladin;\n\tstatic classID = Class.ClassPaladin as Class.ClassPaladin;\n\tstatic friendlyName = 'Retribution';\n\tstatic simLink = getSpecSiteUrl('paladin', 'retribution');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = RetributionPaladin.specID;\n\treadonly classID = RetributionPaladin.classID;\n\treadonly friendlyName = RetributionPaladin.friendlyName;\n\treadonly simLink = RetributionPaladin.simLink;\n\n\treadonly isTankSpec = RetributionPaladin.isTankSpec;\n\treadonly isHealingSpec = RetributionPaladin.isHealingSpec;\n\treadonly isRangedDpsSpec = RetributionPaladin.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = RetributionPaladin.isMeleeDpsSpec;\n\n\treadonly canDualWield = RetributionPaladin.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_holy_auraoflight.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn RetributionPaladin.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class DisciplinePriest extends PlayerSpec<Spec.SpecDisciplinePriest> {\n\tstatic specID = Spec.SpecDisciplinePriest as Spec.SpecDisciplinePriest;\n\tstatic classID = Class.ClassPriest as Class.ClassPriest;\n\tstatic friendlyName = 'Discipline';\n\tstatic simLink = getSpecSiteUrl('priest', 'discipline');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = true;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = DisciplinePriest.specID;\n\treadonly classID = DisciplinePriest.classID;\n\treadonly friendlyName = DisciplinePriest.friendlyName;\n\treadonly simLink = DisciplinePriest.simLink;\n\n\treadonly isTankSpec = DisciplinePriest.isTankSpec;\n\treadonly isHealingSpec = DisciplinePriest.isHealingSpec;\n\treadonly isRangedDpsSpec = DisciplinePriest.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = DisciplinePriest.isMeleeDpsSpec;\n\n\treadonly canDualWield = DisciplinePriest.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_holy_powerwordshield.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn DisciplinePriest.getIcon(size);\n\t};\n}\n\nexport class HolyPriest extends PlayerSpec<Spec.SpecHolyPriest> {\n\tstatic specID = Spec.SpecHolyPriest as Spec.SpecHolyPriest;\n\tstatic classID = Class.ClassPriest as Class.ClassPriest;\n\tstatic friendlyName = 'Holy';\n\tstatic simLink = getSpecSiteUrl('priest', 'holy');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = true;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = HolyPriest.specID;\n\treadonly classID = HolyPriest.classID;\n\treadonly friendlyName = HolyPriest.friendlyName;\n\treadonly simLink = HolyPriest.simLink;\n\n\treadonly isTankSpec = HolyPriest.isTankSpec;\n\treadonly isHealingSpec = HolyPriest.isHealingSpec;\n\treadonly isRangedDpsSpec = HolyPriest.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = HolyPriest.isMeleeDpsSpec;\n\n\treadonly canDualWield = HolyPriest.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_holy_guardianspirit.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn HolyPriest.getIcon(size);\n\t};\n}\n\nexport class ShadowPriest extends PlayerSpec<Spec.SpecShadowPriest> {\n\tstatic specID = Spec.SpecShadowPriest as Spec.SpecShadowPriest;\n\tstatic classID = Class.ClassPriest as Class.ClassPriest;\n\tstatic friendlyName = 'Shadow';\n\tstatic simLink = getSpecSiteUrl('priest', 'shadow');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = ShadowPriest.specID;\n\treadonly classID = ShadowPriest.classID;\n\treadonly friendlyName = ShadowPriest.friendlyName;\n\treadonly simLink = ShadowPriest.simLink;\n\n\treadonly isTankSpec = ShadowPriest.isTankSpec;\n\treadonly isHealingSpec = ShadowPriest.isHealingSpec;\n\treadonly isRangedDpsSpec = ShadowPriest.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = ShadowPriest.isMeleeDpsSpec;\n\n\treadonly canDualWield = ShadowPriest.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_shadow_shadowwordpain.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn ShadowPriest.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class AssassinationRogue extends PlayerSpec<Spec.SpecAssassinationRogue> {\n\tstatic specID = Spec.SpecAssassinationRogue as Spec.SpecAssassinationRogue;\n\tstatic classID = Class.ClassRogue as Class.ClassRogue;\n\tstatic friendlyName = 'Assassination';\n\tstatic simLink = getSpecSiteUrl('rogue', 'assassination');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = true;\n\n\treadonly specID = AssassinationRogue.specID;\n\treadonly classID = AssassinationRogue.classID;\n\treadonly friendlyName = AssassinationRogue.friendlyName;\n\treadonly simLink = AssassinationRogue.simLink;\n\n\treadonly isTankSpec = AssassinationRogue.isTankSpec;\n\treadonly isHealingSpec = AssassinationRogue.isHealingSpec;\n\treadonly isRangedDpsSpec = AssassinationRogue.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = AssassinationRogue.isMeleeDpsSpec;\n\n\treadonly canDualWield = AssassinationRogue.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_rogue_eviscerate.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn AssassinationRogue.getIcon(size);\n\t};\n}\n\nexport class CombatRogue extends PlayerSpec<Spec.SpecCombatRogue> {\n\tstatic specID = Spec.SpecCombatRogue as Spec.SpecCombatRogue;\n\tstatic classID = Class.ClassRogue as Class.ClassRogue;\n\tstatic friendlyName = 'Combat';\n\tstatic simLink = getSpecSiteUrl('rogue', 'combat');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = true;\n\n\treadonly specID = CombatRogue.specID;\n\treadonly classID = CombatRogue.classID;\n\treadonly friendlyName = CombatRogue.friendlyName;\n\treadonly simLink = CombatRogue.simLink;\n\n\treadonly isTankSpec = CombatRogue.isTankSpec;\n\treadonly isHealingSpec = CombatRogue.isHealingSpec;\n\treadonly isRangedDpsSpec = CombatRogue.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = CombatRogue.isMeleeDpsSpec;\n\n\treadonly canDualWield = CombatRogue.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_backstab.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn CombatRogue.getIcon(size);\n\t};\n}\n\nexport class SubtletyRogue extends PlayerSpec<Spec.SpecSubtletyRogue> {\n\tstatic specID = Spec.SpecSubtletyRogue as Spec.SpecSubtletyRogue;\n\tstatic classID = Class.ClassRogue as Class.ClassRogue;\n\tstatic friendlyName = 'Subtlety';\n\tstatic simLink = getSpecSiteUrl('rogue', 'subtlety');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = true;\n\n\treadonly specID = SubtletyRogue.specID;\n\treadonly classID = SubtletyRogue.classID;\n\treadonly friendlyName = SubtletyRogue.friendlyName;\n\treadonly simLink = SubtletyRogue.simLink;\n\n\treadonly isTankSpec = SubtletyRogue.isTankSpec;\n\treadonly isHealingSpec = SubtletyRogue.isHealingSpec;\n\treadonly isRangedDpsSpec = SubtletyRogue.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = SubtletyRogue.isMeleeDpsSpec;\n\n\treadonly canDualWield = SubtletyRogue.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_stealth.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn SubtletyRogue.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class ElementalShaman extends PlayerSpec<Spec.SpecElementalShaman> {\n\tstatic specID = Spec.SpecElementalShaman as Spec.SpecElementalShaman;\n\tstatic classID = Class.ClassShaman as Class.ClassShaman;\n\tstatic friendlyName = 'Elemental';\n\tstatic simLink = getSpecSiteUrl('shaman', 'elemental');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = ElementalShaman.specID;\n\treadonly classID = ElementalShaman.classID;\n\treadonly friendlyName = ElementalShaman.friendlyName;\n\treadonly simLink = ElementalShaman.simLink;\n\n\treadonly isTankSpec = ElementalShaman.isTankSpec;\n\treadonly isHealingSpec = ElementalShaman.isHealingSpec;\n\treadonly isRangedDpsSpec = ElementalShaman.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = ElementalShaman.isMeleeDpsSpec;\n\n\treadonly canDualWield = ElementalShaman.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_nature_lightning.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn ElementalShaman.getIcon(size);\n\t};\n}\n\nexport class EnhancementShaman extends PlayerSpec<Spec.SpecEnhancementShaman> {\n\tstatic specID = Spec.SpecEnhancementShaman as Spec.SpecEnhancementShaman;\n\tstatic classID = Class.ClassShaman as Class.ClassShaman;\n\tstatic friendlyName = 'Enhancement';\n\tstatic simLink = getSpecSiteUrl('shaman', 'enhancement');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = true;\n\n\treadonly specID = EnhancementShaman.specID;\n\treadonly classID = EnhancementShaman.classID;\n\treadonly friendlyName = EnhancementShaman.friendlyName;\n\treadonly simLink = EnhancementShaman.simLink;\n\n\treadonly isTankSpec = EnhancementShaman.isTankSpec;\n\treadonly isHealingSpec = EnhancementShaman.isHealingSpec;\n\treadonly isRangedDpsSpec = EnhancementShaman.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = EnhancementShaman.isMeleeDpsSpec;\n\n\treadonly canDualWield = EnhancementShaman.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_nature_lightningshield.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn EnhancementShaman.getIcon(size);\n\t};\n}\n\nexport class RestorationShaman extends PlayerSpec<Spec.SpecRestorationShaman> {\n\tstatic specID = Spec.SpecRestorationShaman as Spec.SpecRestorationShaman;\n\tstatic classID = Class.ClassShaman as Class.ClassShaman;\n\tstatic friendlyName = 'Restoration';\n\tstatic simLink = getSpecSiteUrl('shaman', 'restoration');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = true;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = RestorationShaman.specID;\n\treadonly classID = RestorationShaman.classID;\n\treadonly friendlyName = RestorationShaman.friendlyName;\n\treadonly simLink = RestorationShaman.simLink;\n\n\treadonly isTankSpec = RestorationShaman.isTankSpec;\n\treadonly isHealingSpec = RestorationShaman.isHealingSpec;\n\treadonly isRangedDpsSpec = RestorationShaman.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = RestorationShaman.isMeleeDpsSpec;\n\n\treadonly canDualWield = RestorationShaman.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_nature_magicimmunity.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn RestorationShaman.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class AfflictionWarlock extends PlayerSpec<Spec.SpecAfflictionWarlock> {\n\tstatic specID = Spec.SpecAfflictionWarlock as Spec.SpecAfflictionWarlock;\n\tstatic classID = Class.ClassWarlock as Class.ClassWarlock;\n\tstatic friendlyName = 'Affliction';\n\tstatic simLink = getSpecSiteUrl('warlock', 'affliction');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = AfflictionWarlock.specID;\n\treadonly classID = AfflictionWarlock.classID;\n\treadonly friendlyName = AfflictionWarlock.friendlyName;\n\treadonly simLink = AfflictionWarlock.simLink;\n\n\treadonly isTankSpec = AfflictionWarlock.isTankSpec;\n\treadonly isHealingSpec = AfflictionWarlock.isHealingSpec;\n\treadonly isRangedDpsSpec = AfflictionWarlock.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = AfflictionWarlock.isMeleeDpsSpec;\n\n\treadonly canDualWield = AfflictionWarlock.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_shadow_deathcoil.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn AfflictionWarlock.getIcon(size);\n\t};\n}\n\nexport class DemonologyWarlock extends PlayerSpec<Spec.SpecDemonologyWarlock> {\n\tstatic specID = Spec.SpecDemonologyWarlock as Spec.SpecDemonologyWarlock;\n\tstatic classID = Class.ClassWarlock as Class.ClassWarlock;\n\tstatic friendlyName = 'Demonology';\n\tstatic simLink = getSpecSiteUrl('warlock', 'demonology');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = DemonologyWarlock.specID;\n\treadonly classID = DemonologyWarlock.classID;\n\treadonly friendlyName = DemonologyWarlock.friendlyName;\n\treadonly simLink = DemonologyWarlock.simLink;\n\n\treadonly isTankSpec = DemonologyWarlock.isTankSpec;\n\treadonly isHealingSpec = DemonologyWarlock.isHealingSpec;\n\treadonly isRangedDpsSpec = DemonologyWarlock.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = DemonologyWarlock.isMeleeDpsSpec;\n\n\treadonly canDualWield = DemonologyWarlock.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_shadow_metamorphosis.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn DemonologyWarlock.getIcon(size);\n\t};\n}\n\nexport class DestructionWarlock extends PlayerSpec<Spec.SpecDestructionWarlock> {\n\tstatic specID = Spec.SpecDestructionWarlock as Spec.SpecDestructionWarlock;\n\tstatic classID = Class.ClassWarlock as Class.ClassWarlock;\n\tstatic friendlyName = 'Destruction';\n\tstatic simLink = getSpecSiteUrl('warlock', 'destruction');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = true;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = false;\n\n\treadonly specID = DestructionWarlock.specID;\n\treadonly classID = DestructionWarlock.classID;\n\treadonly friendlyName = DestructionWarlock.friendlyName;\n\treadonly simLink = DestructionWarlock.simLink;\n\n\treadonly isTankSpec = DestructionWarlock.isTankSpec;\n\treadonly isHealingSpec = DestructionWarlock.isHealingSpec;\n\treadonly isRangedDpsSpec = DestructionWarlock.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = DestructionWarlock.isMeleeDpsSpec;\n\n\treadonly canDualWield = DestructionWarlock.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/spell_shadow_rainoffire.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn DestructionWarlock.getIcon(size);\n\t};\n}\n","import { IconSize } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { Class, Spec } from '../proto/common';\nimport { getSpecSiteUrl } from '../proto_utils/utils';\n\nexport class ArmsWarrior extends PlayerSpec<Spec.SpecArmsWarrior> {\n\tstatic specID = Spec.SpecArmsWarrior as Spec.SpecArmsWarrior;\n\tstatic classID = Class.ClassWarrior as Class.ClassWarrior;\n\tstatic friendlyName = 'Arms';\n\tstatic simLink = getSpecSiteUrl('warrior', 'arms');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = true;\n\n\treadonly specID = ArmsWarrior.specID;\n\treadonly classID = ArmsWarrior.classID;\n\treadonly friendlyName = ArmsWarrior.friendlyName;\n\treadonly simLink = ArmsWarrior.simLink;\n\n\treadonly isTankSpec = ArmsWarrior.isTankSpec;\n\treadonly isHealingSpec = ArmsWarrior.isHealingSpec;\n\treadonly isRangedDpsSpec = ArmsWarrior.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = ArmsWarrior.isMeleeDpsSpec;\n\n\treadonly canDualWield = ArmsWarrior.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_warrior_savageblow.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn ArmsWarrior.getIcon(size);\n\t};\n}\n\nexport class FuryWarrior extends PlayerSpec<Spec.SpecFuryWarrior> {\n\tstatic specID = Spec.SpecFuryWarrior as Spec.SpecFuryWarrior;\n\tstatic classID = Class.ClassWarrior as Class.ClassWarrior;\n\tstatic friendlyName = 'Fury';\n\tstatic simLink = getSpecSiteUrl('warrior', 'fury');\n\n\tstatic isTankSpec = false;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = true;\n\n\tstatic canDualWield = true;\n\n\treadonly specID = FuryWarrior.specID;\n\treadonly classID = FuryWarrior.classID;\n\treadonly friendlyName = FuryWarrior.friendlyName;\n\treadonly simLink = FuryWarrior.simLink;\n\n\treadonly isTankSpec = FuryWarrior.isTankSpec;\n\treadonly isHealingSpec = FuryWarrior.isHealingSpec;\n\treadonly isRangedDpsSpec = FuryWarrior.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = FuryWarrior.isMeleeDpsSpec;\n\n\treadonly canDualWield = FuryWarrior.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_warrior_innerrage.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn FuryWarrior.getIcon(size);\n\t};\n}\n\nexport class ProtectionWarrior extends PlayerSpec<Spec.SpecProtectionWarrior> {\n\tstatic specID = Spec.SpecProtectionWarrior as Spec.SpecProtectionWarrior;\n\tstatic classID = Class.ClassWarrior as Class.ClassWarrior;\n\tstatic friendlyName = 'Protection';\n\tstatic simLink = getSpecSiteUrl('warrior', 'protection');\n\n\tstatic isTankSpec = true;\n\tstatic isHealingSpec = false;\n\tstatic isRangedDpsSpec = false;\n\tstatic isMeleeDpsSpec = false;\n\n\tstatic canDualWield = true;\n\n\treadonly specID = ProtectionWarrior.specID;\n\treadonly classID = ProtectionWarrior.classID;\n\treadonly friendlyName = ProtectionWarrior.friendlyName;\n\treadonly simLink = ProtectionWarrior.simLink;\n\n\treadonly isTankSpec = ProtectionWarrior.isTankSpec;\n\treadonly isHealingSpec = ProtectionWarrior.isHealingSpec;\n\treadonly isRangedDpsSpec = ProtectionWarrior.isRangedDpsSpec;\n\treadonly isMeleeDpsSpec = ProtectionWarrior.isMeleeDpsSpec;\n\n\treadonly canDualWield = ProtectionWarrior.canDualWield;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/ability_warrior_defensivestance.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn ProtectionWarrior.getIcon(size);\n\t};\n}\n","import { LOCAL_STORAGE_PREFIX } from '../constants/other';\nimport { PlayerClass } from '../player_class';\nimport { PlayerClasses } from '../player_classes';\nimport { PlayerSpec } from '../player_spec';\nimport { Spec } from '../proto/common';\nimport { SpecClasses } from '../proto_utils/utils';\nimport * as DeathKnightSpecs from './death_knight';\nimport * as DruidSpecs from './druid';\nimport * as HunterSpecs from './hunter';\nimport * as MageSpecs from './mage';\nimport * as PaladinSpecs from './paladin';\nimport * as PriestSpecs from './priest';\nimport * as RogueSpecs from './rogue';\nimport * as ShamanSpecs from './shaman';\nimport * as WarlockSpecs from './warlock';\nimport * as WarriorSpecs from './warrior';\n\nconst specToPlayerSpec: Record<Spec, PlayerSpec<any> | undefined> = {\n\t[Spec.SpecUnknown]: undefined,\n\t// Death Knight\n\t[Spec.SpecBloodDeathKnight]: DeathKnightSpecs.BloodDeathKnight,\n\t[Spec.SpecFrostDeathKnight]: DeathKnightSpecs.FrostDeathKnight,\n\t[Spec.SpecUnholyDeathKnight]: DeathKnightSpecs.UnholyDeathKnight,\n\t// Druid\n\t[Spec.SpecBalanceDruid]: DruidSpecs.BalanceDruid,\n\t[Spec.SpecFeralDruid]: DruidSpecs.FeralDruid,\n\t[Spec.SpecRestorationDruid]: DruidSpecs.RestorationDruid,\n\t// Hunter\n\t[Spec.SpecBeastMasteryHunter]: HunterSpecs.BeastMasteryHunter,\n\t[Spec.SpecMarksmanshipHunter]: HunterSpecs.MarksmanshipHunter,\n\t[Spec.SpecSurvivalHunter]: HunterSpecs.SurvivalHunter,\n\t// Mage\n\t[Spec.SpecArcaneMage]: MageSpecs.ArcaneMage,\n\t[Spec.SpecFireMage]: MageSpecs.FireMage,\n\t[Spec.SpecFrostMage]: MageSpecs.FrostMage,\n\t// Paladin\n\t[Spec.SpecHolyPaladin]: PaladinSpecs.HolyPaladin,\n\t[Spec.SpecProtectionPaladin]: PaladinSpecs.ProtectionPaladin,\n\t[Spec.SpecRetributionPaladin]: PaladinSpecs.RetributionPaladin,\n\t// Priest\n\t[Spec.SpecDisciplinePriest]: PriestSpecs.DisciplinePriest,\n\t[Spec.SpecHolyPriest]: PriestSpecs.HolyPriest,\n\t[Spec.SpecShadowPriest]: PriestSpecs.ShadowPriest,\n\t// Rogue\n\t[Spec.SpecAssassinationRogue]: RogueSpecs.AssassinationRogue,\n\t[Spec.SpecCombatRogue]: RogueSpecs.CombatRogue,\n\t[Spec.SpecSubtletyRogue]: RogueSpecs.SubtletyRogue,\n\t// Shaman\n\t[Spec.SpecElementalShaman]: ShamanSpecs.ElementalShaman,\n\t[Spec.SpecEnhancementShaman]: ShamanSpecs.EnhancementShaman,\n\t[Spec.SpecRestorationShaman]: ShamanSpecs.RestorationShaman,\n\t// Warlock\n\t[Spec.SpecAfflictionWarlock]: WarlockSpecs.AfflictionWarlock,\n\t[Spec.SpecDemonologyWarlock]: WarlockSpecs.DemonologyWarlock,\n\t[Spec.SpecDestructionWarlock]: WarlockSpecs.DestructionWarlock,\n\t// Warrior\n\t[Spec.SpecArmsWarrior]: WarriorSpecs.ArmsWarrior,\n\t[Spec.SpecFuryWarrior]: WarriorSpecs.FuryWarrior,\n\t[Spec.SpecProtectionWarrior]: WarriorSpecs.ProtectionWarrior,\n};\n\nconst getPlayerClass = <SpecType extends Spec>(playerSpec: PlayerSpec<SpecType>): PlayerClass<SpecClasses<SpecType>> => {\n\tif (playerSpec.specID == Spec.SpecUnknown) {\n\t\tthrow new Error('Invalid Spec');\n\t}\n\n\treturn PlayerClasses.fromProto(playerSpec.classID);\n};\n\nexport const PlayerSpecs = {\n\t...DeathKnightSpecs,\n\t...DruidSpecs,\n\t...HunterSpecs,\n\t...MageSpecs,\n\t...PaladinSpecs,\n\t...PriestSpecs,\n\t...RogueSpecs,\n\t...ShamanSpecs,\n\t...WarlockSpecs,\n\t...WarriorSpecs,\n\tgetPlayerClass,\n\tgetFullSpecName: <SpecType extends Spec>(playerSpec: PlayerSpec<SpecType>): string => {\n\t\treturn `${playerSpec.friendlyName} ${getPlayerClass(playerSpec).friendlyName}`;\n\t},\n\tgetSpecNumber: <SpecType extends Spec>(playerSpec: PlayerSpec<SpecType>): number => {\n\t\treturn Object.values(getPlayerClass(playerSpec).specs).findIndex(spec => spec == playerSpec) ?? 0;\n\t},\n\t// Prefixes used for storing browser data for each site. Even if a Spec is\n\t// renamed, DO NOT change these values or people will lose their saved data.\n\tgetLocalStorageKey: <SpecType extends Spec>(playerSpec: PlayerSpec<SpecType>): string => {\n\t\treturn `${LOCAL_STORAGE_PREFIX}_${playerSpec.friendlyName.toLowerCase().replace(/\\s/, '_')}_${getPlayerClass(playerSpec)\n\t\t\t.friendlyName.toLowerCase()\n\t\t\t.replace(/\\s/, '_')}`;\n\t},\n\tfromProto: <SpecType extends Spec>(spec: SpecType): PlayerSpec<SpecType> => {\n\t\tif (spec == Spec.SpecUnknown) {\n\t\t\tthrow new Error('Invalid Spec');\n\t\t}\n\n\t\treturn specToPlayerSpec[spec] as PlayerSpec<SpecType>;\n\t},\n};\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { PlayerSpecs } from '../player_specs';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { DruidSpecs } from '../proto_utils/utils';\n\nexport class Druid extends PlayerClass<Class.ClassDruid> {\n\tstatic classID = Class.ClassDruid as Class.ClassDruid;\n\tstatic friendlyName = 'Druid';\n\tstatic hexColor = '#ff7d0a';\n\tstatic specs: Record<string, PlayerSpec<DruidSpecs>> = {\n\t\t[PlayerSpecs.BalanceDruid.friendlyName]: PlayerSpecs.BalanceDruid,\n\t\t[PlayerSpecs.FeralDruid.friendlyName]: PlayerSpecs.FeralDruid,\n\t\t[PlayerSpecs.RestorationDruid.friendlyName]: PlayerSpecs.RestorationDruid,\n\t};\n\t\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceNightElf,\n\t\tRace.RaceWorgen,\n\t\t// [H]\n\t\tRace.RaceTauren,\n\t\tRace.RaceTroll,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypeLeather, ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [RangedWeaponType.RangedWeaponTypeLibram];\n\n\treadonly classID = Druid.classID;\n\treadonly friendlyName = Druid.name;\n\treadonly hexColor = Druid.hexColor;\n\treadonly specs = Druid.specs;\n\treadonly races = Druid.races;\n\treadonly armorTypes = Druid.armorTypes;\n\treadonly weaponTypes = Druid.weaponTypes;\n\treadonly rangedWeaponTypes = Druid.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_druid.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Druid.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { PlayerSpecs } from '../player_specs';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { HunterSpecs } from '../proto_utils/utils';\n\nexport class Hunter extends PlayerClass<Class.ClassHunter> {\n\tstatic classID = Class.ClassHunter as Class.ClassHunter;\n\tstatic friendlyName = 'Hunter';\n\tstatic hexColor = '#abd473';\n\tstatic specs: Record<string, PlayerSpec<HunterSpecs>> = {\n\t\t[PlayerSpecs.BeastMasteryHunter.friendlyName]: PlayerSpecs.BeastMasteryHunter,\n\t\t[PlayerSpecs.MarksmanshipHunter.friendlyName]: PlayerSpecs.MarksmanshipHunter,\n\t\t[PlayerSpecs.SurvivalHunter.friendlyName]: PlayerSpecs.SurvivalHunter,\n\t};\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceHuman,\n\t\tRace.RaceDwarf,\n\t\tRace.RaceNightElf,\n\t\tRace.RaceDraenei,\n\t\t// [H]\n\t\tRace.RaceOrc,\n\t\tRace.RaceUndead,\n\t\tRace.RaceTauren,\n\t\tRace.RaceTroll,\n\t\tRace.RaceBloodElf,\n\t\tRace.RaceGoblin,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypeMail, ArmorType.ArmorTypeLeather, ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [\n\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t];\n\n\treadonly classID = Hunter.classID;\n\treadonly friendlyName = Hunter.name;\n\treadonly hexColor = Hunter.hexColor;\n\treadonly specs = Hunter.specs;\n\treadonly races = Hunter.races;\n\treadonly armorTypes = Hunter.armorTypes;\n\treadonly weaponTypes = Hunter.weaponTypes;\n\treadonly rangedWeaponTypes = Hunter.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_hunter.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Hunter.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { PlayerSpecs } from '../player_specs';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { MageSpecs } from '../proto_utils/utils';\n\nexport class Mage extends PlayerClass<Class.ClassMage> {\n\tstatic classID = Class.ClassMage as Class.ClassMage;\n\tstatic friendlyName = 'Mage';\n\tstatic hexColor = '#69ccf0';\n\tstatic specs: Record<string, PlayerSpec<MageSpecs>> = {\n\t\t[PlayerSpecs.ArcaneMage.friendlyName]: PlayerSpecs.ArcaneMage,\n\t\t[PlayerSpecs.FireMage.friendlyName]: PlayerSpecs.FireMage,\n\t\t[PlayerSpecs.FrostMage.friendlyName]: PlayerSpecs.FrostMage,\n\t};\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceHuman,\n\t\tRace.RaceDwarf,\n\t\tRace.RaceNightElf,\n\t\tRace.RaceGnome,\n\t\tRace.RaceDraenei,\n\t\tRace.RaceWorgen,\n\t\t// [H]\n\t\tRace.RaceOrc,\n\t\tRace.RaceUndead,\n\t\tRace.RaceTroll,\n\t\tRace.RaceBloodElf,\n\t\tRace.RaceGoblin,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [RangedWeaponType.RangedWeaponTypeWand];\n\n\treadonly classID = Mage.classID;\n\treadonly friendlyName = Mage.name;\n\treadonly hexColor = Mage.hexColor;\n\treadonly specs = Mage.specs;\n\treadonly races = Mage.races;\n\treadonly armorTypes = Mage.armorTypes;\n\treadonly weaponTypes = Mage.weaponTypes;\n\treadonly rangedWeaponTypes = Mage.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_mage.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Mage.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { PlayerSpecs } from '../player_specs';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { PaladinSpecs } from '../proto_utils/utils';\n\nexport class Paladin extends PlayerClass<Class.ClassPaladin> {\n\tstatic classID = Class.ClassPaladin as Class.ClassPaladin;\n\tstatic friendlyName = 'Paladin';\n\tstatic cssClass = 'paladin';\n\tstatic hexColor = '#f58cba';\n\tstatic specs: Record<string, PlayerSpec<PaladinSpecs>> = {\n\t\t[PlayerSpecs.HolyPaladin.friendlyName]: PlayerSpecs.HolyPaladin,\n\t\t[PlayerSpecs.ProtectionPaladin.friendlyName]: PlayerSpecs.ProtectionPaladin,\n\t\t[PlayerSpecs.RetributionPaladin.friendlyName]: PlayerSpecs.RetributionPaladin,\n\t};\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceHuman,\n\t\tRace.RaceDwarf,\n\t\tRace.RaceDraenei,\n\t\t// [H]\n\t\tRace.RaceTauren,\n\t\tRace.RaceBloodElf,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypePlate, ArmorType.ArmorTypeMail, ArmorType.ArmorTypeLeather, ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeShield },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [RangedWeaponType.RangedWeaponTypeLibram];\n\n\treadonly classID = Paladin.classID;\n\treadonly friendlyName = Paladin.name;\n\treadonly cssClass = Paladin.cssClass;\n\treadonly hexColor = Paladin.hexColor;\n\treadonly specs = Paladin.specs;\n\treadonly races = Paladin.races;\n\treadonly armorTypes = Paladin.armorTypes;\n\treadonly weaponTypes = Paladin.weaponTypes;\n\treadonly rangedWeaponTypes = Paladin.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_paladin.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Paladin.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { PlayerSpecs } from '../player_specs';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { PriestSpecs } from '../proto_utils/utils';\n\nexport class Priest extends PlayerClass<Class.ClassPriest> {\n\tstatic classID = Class.ClassPriest as Class.ClassPriest;\n\tstatic friendlyName = 'Priest';\n\tstatic hexColor = '#fff';\n\tstatic specs: Record<string, PlayerSpec<PriestSpecs>> = {\n\t\t[PlayerSpecs.DisciplinePriest.friendlyName]: PlayerSpecs.DisciplinePriest,\n\t\t[PlayerSpecs.HolyPriest.friendlyName]: PlayerSpecs.HolyPriest,\n\t\t[PlayerSpecs.ShadowPriest.friendlyName]: PlayerSpecs.ShadowPriest,\n\t};\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceHuman,\n\t\tRace.RaceDwarf,\n\t\tRace.RaceNightElf,\n\t\tRace.RaceGnome,\n\t\tRace.RaceDraenei,\n\t\tRace.RaceWorgen,\n\t\t// [H]\n\t\tRace.RaceUndead,\n\t\tRace.RaceTauren,\n\t\tRace.RaceTroll,\n\t\tRace.RaceBloodElf,\n\t\tRace.RaceGoblin,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeMace },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [RangedWeaponType.RangedWeaponTypeWand];\n\n\treadonly classID = Priest.classID;\n\treadonly friendlyName = Priest.name;\n\treadonly hexColor = Priest.hexColor;\n\treadonly specs = Priest.specs;\n\treadonly races = Priest.races;\n\treadonly armorTypes = Priest.armorTypes;\n\treadonly weaponTypes = Priest.weaponTypes;\n\treadonly rangedWeaponTypes = Priest.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_priest.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Priest.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { PlayerSpecs } from '../player_specs';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { RogueSpecs } from '../proto_utils/utils';\n\nexport class Rogue extends PlayerClass<Class.ClassRogue> {\n\tstatic classID = Class.ClassRogue as Class.ClassRogue;\n\tstatic friendlyName = 'Rogue';\n\tstatic hexColor = '#fff569';\n\tstatic specs: Record<string, PlayerSpec<RogueSpecs>> = {\n\t\t[PlayerSpecs.AssassinationRogue.friendlyName]: PlayerSpecs.AssassinationRogue,\n\t\t[PlayerSpecs.CombatRogue.friendlyName]: PlayerSpecs.CombatRogue,\n\t\t[PlayerSpecs.SubtletyRogue.friendlyName]: PlayerSpecs.SubtletyRogue,\n\t};\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceHuman,\n\t\tRace.RaceDwarf,\n\t\tRace.RaceNightElf,\n\t\tRace.RaceGnome,\n\t\tRace.RaceWorgen,\n\t\t// [H]\n\t\tRace.RaceOrc,\n\t\tRace.RaceUndead,\n\t\tRace.RaceTroll,\n\t\tRace.RaceBloodElf,\n\t\tRace.RaceGoblin,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypeLeather, ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: false },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeSword },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [\n\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t\tRangedWeaponType.RangedWeaponTypeThrown,\n\t];\n\n\treadonly classID = Rogue.classID;\n\treadonly friendlyName = Rogue.name;\n\treadonly hexColor = Rogue.hexColor;\n\treadonly specs = Rogue.specs;\n\treadonly races = Rogue.races;\n\treadonly armorTypes = Rogue.armorTypes;\n\treadonly weaponTypes = Rogue.weaponTypes;\n\treadonly rangedWeaponTypes = Rogue.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_rogue.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Rogue.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { PlayerSpecs } from '../player_specs';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { ShamanSpecs } from '../proto_utils/utils';\n\nexport class Shaman extends PlayerClass<Class.ClassShaman> {\n\tstatic classID = Class.ClassShaman as Class.ClassShaman;\n\tstatic friendlyName = 'Shaman';\n\tstatic hexColor = '#2459ff';\n\tstatic specs: Record<string, PlayerSpec<ShamanSpecs>> = {\n\t\t[PlayerSpecs.ElementalShaman.friendlyName]: PlayerSpecs.ElementalShaman,\n\t\t[PlayerSpecs.EnhancementShaman.friendlyName]: PlayerSpecs.EnhancementShaman,\n\t\t[PlayerSpecs.RestorationShaman.friendlyName]: PlayerSpecs.RestorationShaman,\n\t};\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceDwarf,\n\t\tRace.RaceDraenei,\n\t\t// [H]\n\t\tRace.RaceOrc,\n\t\tRace.RaceTauren,\n\t\tRace.RaceTroll,\n\t\tRace.RaceGoblin,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypeMail, ArmorType.ArmorTypeLeather, ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeShield },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [RangedWeaponType.RangedWeaponTypeTotem];\n\n\treadonly classID = Shaman.classID;\n\treadonly friendlyName = Shaman.name;\n\treadonly hexColor = Shaman.hexColor;\n\treadonly specs = Shaman.specs;\n\treadonly races = Shaman.races;\n\treadonly armorTypes = Shaman.armorTypes;\n\treadonly weaponTypes = Shaman.weaponTypes;\n\treadonly rangedWeaponTypes = Shaman.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_shaman.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Shaman.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { PlayerSpecs } from '../player_specs';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { WarlockSpecs } from '../proto_utils/utils';\n\nexport class Warlock extends PlayerClass<Class.ClassWarlock> {\n\tstatic classID = Class.ClassWarlock as Class.ClassWarlock;\n\tstatic friendlyName = 'Warlock';\n\tstatic hexColor = '#9482c9';\n\tstatic specs: Record<string, PlayerSpec<WarlockSpecs>> = {\n\t\t[PlayerSpecs.AfflictionWarlock.friendlyName]: PlayerSpecs.AfflictionWarlock,\n\t\t[PlayerSpecs.DemonologyWarlock.friendlyName]: PlayerSpecs.DemonologyWarlock,\n\t\t[PlayerSpecs.DestructionWarlock.friendlyName]: PlayerSpecs.DestructionWarlock,\n\t};\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceHuman,\n\t\tRace.RaceDwarf,\n\t\tRace.RaceGnome,\n\t\tRace.RaceWorgen,\n\t\t// [H]\n\t\tRace.RaceOrc,\n\t\tRace.RaceUndead,\n\t\tRace.RaceTroll,\n\t\tRace.RaceBloodElf,\n\t\tRace.RaceGoblin,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [RangedWeaponType.RangedWeaponTypeWand];\n\n\treadonly classID = Warlock.classID;\n\treadonly friendlyName = Warlock.name;\n\treadonly hexColor = Warlock.hexColor;\n\treadonly specs = Warlock.specs;\n\treadonly races = Warlock.races;\n\treadonly armorTypes = Warlock.armorTypes;\n\treadonly weaponTypes = Warlock.weaponTypes;\n\treadonly rangedWeaponTypes = Warlock.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_warlock.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Warlock.getIcon(size);\n\t};\n}\n","import { EligibleWeaponType, IconSize, PlayerClass } from '../player_class';\nimport { PlayerSpec } from '../player_spec';\nimport { PlayerSpecs } from '../player_specs';\nimport { ArmorType, Class, Race, RangedWeaponType, WeaponType } from '../proto/common';\nimport { WarriorSpecs } from '../proto_utils/utils';\n\nexport class Warrior extends PlayerClass<Class.ClassWarrior> {\n\tstatic classID = Class.ClassWarrior as Class.ClassWarrior;\n\tstatic friendlyName = 'Warrior';\n\tstatic hexColor = '#c79c6e';\n\tstatic specs: Record<string, PlayerSpec<WarriorSpecs>> = {\n\t\t[PlayerSpecs.ArmsWarrior.friendlyName]: PlayerSpecs.ArmsWarrior,\n\t\t[PlayerSpecs.FuryWarrior.friendlyName]: PlayerSpecs.FuryWarrior,\n\t\t[PlayerSpecs.ProtectionWarrior.friendlyName]: PlayerSpecs.ProtectionWarrior,\n\t};\n\tstatic races: Race[] = [\n\t\t// [A]\n\t\tRace.RaceHuman,\n\t\tRace.RaceDwarf,\n\t\tRace.RaceNightElf,\n\t\tRace.RaceGnome,\n\t\tRace.RaceDraenei,\n\t\tRace.RaceWorgen,\n\t\t// [H]\n\t\tRace.RaceOrc,\n\t\tRace.RaceUndead,\n\t\tRace.RaceTauren,\n\t\tRace.RaceTroll,\n\t\tRace.RaceBloodElf,\n\t\tRace.RaceGoblin,\n\t];\n\tstatic armorTypes: ArmorType[] = [ArmorType.ArmorTypePlate, ArmorType.ArmorTypeMail, ArmorType.ArmorTypeLeather, ArmorType.ArmorTypeCloth];\n\tstatic weaponTypes: EligibleWeaponType[] = [\n\t\t{ weaponType: WeaponType.WeaponTypeAxe, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeDagger },\n\t\t{ weaponType: WeaponType.WeaponTypeFist },\n\t\t{ weaponType: WeaponType.WeaponTypeMace, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeOffHand },\n\t\t{ weaponType: WeaponType.WeaponTypePolearm, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeShield },\n\t\t{ weaponType: WeaponType.WeaponTypeStaff, canUseTwoHand: true },\n\t\t{ weaponType: WeaponType.WeaponTypeSword, canUseTwoHand: true },\n\t];\n\tstatic rangedWeaponTypes: RangedWeaponType[] = [\n\t\tRangedWeaponType.RangedWeaponTypeBow,\n\t\tRangedWeaponType.RangedWeaponTypeCrossbow,\n\t\tRangedWeaponType.RangedWeaponTypeGun,\n\t\tRangedWeaponType.RangedWeaponTypeThrown,\n\t];\n\n\treadonly classID = Warrior.classID;\n\treadonly friendlyName = Warrior.name;\n\treadonly hexColor = Warrior.hexColor;\n\treadonly specs = Warrior.specs;\n\treadonly races = Warrior.races;\n\treadonly armorTypes = Warrior.armorTypes;\n\treadonly weaponTypes = Warrior.weaponTypes;\n\treadonly rangedWeaponTypes = Warrior.rangedWeaponTypes;\n\n\tstatic getIcon = (size: IconSize): string => {\n\t\treturn `https://wow.zamimg.com/images/wow/icons/${size}/class_warrior.jpg`;\n\t};\n\n\tgetIcon = (size: IconSize): string => {\n\t\treturn Warrior.getIcon(size);\n\t};\n}\n","import { PlayerClass } from '../player_class';\nimport { Class } from '../proto/common';\nimport { DeathKnight } from './death_knight';\nimport { Druid } from './druid';\nimport { Hunter } from './hunter';\nimport { Mage } from './mage';\nimport { Paladin } from './paladin';\nimport { Priest } from './priest';\nimport { Rogue } from './rogue';\nimport { Shaman } from './shaman';\nimport { Warlock } from './warlock';\nimport { Warrior } from './warrior';\n\nconst protoToPlayerClass: Record<Class, PlayerClass<Class> | undefined> = {\n\t[Class.ClassUnknown]: undefined,\n\t[Class.ClassDeathKnight]: DeathKnight,\n\t[Class.ClassDruid]: Druid,\n\t[Class.ClassHunter]: Hunter,\n\t[Class.ClassMage]: Mage,\n\t[Class.ClassPaladin]: Paladin,\n\t[Class.ClassPriest]: Priest,\n\t[Class.ClassRogue]: Rogue,\n\t[Class.ClassShaman]: Shaman,\n\t[Class.ClassWarlock]: Warlock,\n\t[Class.ClassWarrior]: Warrior,\n};\n\nexport const PlayerClasses = {\n\tDeathKnight,\n\tDruid,\n\tHunter,\n\tMage,\n\tPaladin,\n\tPriest,\n\tRogue,\n\tShaman,\n\tWarlock,\n\tWarrior,\n\tgetCssClass<ClassType extends Class>(playerClass: PlayerClass<ClassType>): string {\n\t\treturn playerClass.friendlyName.toLowerCase().replace(/\\s/g, '-');\n\t},\n\tfromProto: <ClassType extends Class>(protoId: ClassType): PlayerClass<ClassType> => {\n\t\tif (protoId == Class.ClassUnknown) {\n\t\t\tthrow new Error('Invalid Class');\n\t\t}\n\t\t\n\t\treturn protoToPlayerClass[protoId] as PlayerClass<ClassType>;\n\t},\n\tnaturalOrder: [DeathKnight, Druid, Hunter, Mage, Paladin, Priest, Rogue, Shaman, Warlock, Warrior],\n};\n","// @generated by protobuf-ts 2.9.1\n// @generated from protobuf file \"ui.proto\" (package \"proto\", syntax proto3)\n// tslint:disable\nimport type { BinaryWriteOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryWriter } from \"@protobuf-ts/runtime\";\nimport { WireType } from \"@protobuf-ts/runtime\";\nimport type { BinaryReadOptions } from \"@protobuf-ts/runtime\";\nimport type { IBinaryReader } from \"@protobuf-ts/runtime\";\nimport { UnknownFieldHandler } from \"@protobuf-ts/runtime\";\nimport type { PartialMessage } from \"@protobuf-ts/runtime\";\nimport { reflectionMergePartial } from \"@protobuf-ts/runtime\";\nimport { MESSAGE_TYPE } from \"@protobuf-ts/runtime\";\nimport { MessageType } from \"@protobuf-ts/runtime\";\nimport { RaidSimResult } from \"./api\";\nimport { RaidSimRequest } from \"./api\";\nimport { Raid } from \"./api\";\nimport { Blessings } from \"./paladin\";\nimport { APLRotation } from \"./apl\";\nimport { Glyphs } from \"./common\";\nimport { HealingModel } from \"./common\";\nimport { ItemSwap } from \"./common\";\nimport { Race } from \"./common\";\nimport { Consumes } from \"./common\";\nimport { IndividualBuffs } from \"./common\";\nimport { EquipmentSpec } from \"./common\";\nimport { Stat } from \"./common\";\nimport { UnitStats } from \"./common\";\nimport { Encounter } from \"./common\";\nimport { Player } from \"./api\";\nimport { PartyBuffs } from \"./common\";\nimport { UnitReference } from \"./common\";\nimport { Debuffs } from \"./common\";\nimport { RaidBuffs } from \"./common\";\nimport { Faction } from \"./common\";\nimport { EnchantType } from \"./common\";\nimport { Profession } from \"./common\";\nimport { Class } from \"./common\";\nimport { ItemQuality } from \"./common\";\nimport { GemColor } from \"./common\";\nimport { RangedWeaponType } from \"./common\";\nimport { HandType } from \"./common\";\nimport { WeaponType } from \"./common\";\nimport { ArmorType } from \"./common\";\nimport { ItemType } from \"./common\";\nimport { ReforgeStat } from \"./common\";\nimport { PresetEncounter } from \"./common\";\nimport { ItemRandomSuffix } from \"./common\";\n/**\n * Holds all WoW data for the UI.\n *\n * @generated from protobuf message proto.UIDatabase\n */\nexport interface UIDatabase {\n    /**\n     * @generated from protobuf field: repeated proto.UIItem items = 1;\n     */\n    items: UIItem[];\n    /**\n     * @generated from protobuf field: repeated proto.ItemRandomSuffix random_suffixes = 11;\n     */\n    randomSuffixes: ItemRandomSuffix[];\n    /**\n     * @generated from protobuf field: repeated proto.UIEnchant enchants = 2;\n     */\n    enchants: UIEnchant[];\n    /**\n     * @generated from protobuf field: repeated proto.UIGem gems = 3;\n     */\n    gems: UIGem[];\n    /**\n     * @generated from protobuf field: repeated proto.PresetEncounter encounters = 6;\n     */\n    encounters: PresetEncounter[];\n    /**\n     * @generated from protobuf field: repeated proto.UIZone zones = 8;\n     */\n    zones: UIZone[];\n    /**\n     * @generated from protobuf field: repeated proto.UINPC npcs = 9;\n     */\n    npcs: UINPC[];\n    /**\n     * Entities for which we just need a name/icon.\n     *\n     * @generated from protobuf field: repeated proto.IconData item_icons = 4;\n     */\n    itemIcons: IconData[];\n    /**\n     * @generated from protobuf field: repeated proto.IconData spell_icons = 5;\n     */\n    spellIcons: IconData[];\n    /**\n     * @generated from protobuf field: repeated proto.GlyphID glyph_ids = 7;\n     */\n    glyphIds: GlyphID[];\n    /**\n     * @generated from protobuf field: repeated proto.ReforgeStat reforge_stats = 12;\n     */\n    reforgeStats: ReforgeStat[];\n}\n/**\n * @generated from protobuf message proto.UIZone\n */\nexport interface UIZone {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: proto.Expansion expansion = 3;\n     */\n    expansion: Expansion;\n}\n/**\n * @generated from protobuf message proto.UINPC\n */\nexport interface UINPC {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: int32 zone_id = 3;\n     */\n    zoneId: number;\n}\n/**\n * Contains all information about an Item needed by the UI.\n * Generally this will include everything needed by the sim, plus some\n * additional data for displaying / filtering.\n * Next tag: 28.\n *\n * @generated from protobuf message proto.UIItem\n */\nexport interface UIItem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string icon = 3;\n     */\n    icon: string;\n    /**\n     * @generated from protobuf field: proto.ItemType type = 4;\n     */\n    type: ItemType;\n    /**\n     * @generated from protobuf field: proto.ArmorType armor_type = 5;\n     */\n    armorType: ArmorType;\n    /**\n     * @generated from protobuf field: proto.WeaponType weapon_type = 6;\n     */\n    weaponType: WeaponType;\n    /**\n     * @generated from protobuf field: proto.HandType hand_type = 7;\n     */\n    handType: HandType;\n    /**\n     * @generated from protobuf field: proto.RangedWeaponType ranged_weapon_type = 8;\n     */\n    rangedWeaponType: RangedWeaponType;\n    /**\n     * @generated from protobuf field: repeated double stats = 9;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: repeated proto.GemColor gem_sockets = 10;\n     */\n    gemSockets: GemColor[];\n    /**\n     * @generated from protobuf field: repeated double socketBonus = 11;\n     */\n    socketBonus: number[];\n    /**\n     * @generated from protobuf field: repeated int32 random_suffix_options = 26;\n     */\n    randomSuffixOptions: number[];\n    /**\n     * Weapon stats, needed for computing proper EP for melee weapons\n     *\n     * @generated from protobuf field: double weapon_damage_min = 12;\n     */\n    weaponDamageMin: number;\n    /**\n     * @generated from protobuf field: double weapon_damage_max = 13;\n     */\n    weaponDamageMax: number;\n    /**\n     * @generated from protobuf field: double weapon_speed = 14;\n     */\n    weaponSpeed: number;\n    /**\n     * @generated from protobuf field: int32 ilvl = 15;\n     */\n    ilvl: number;\n    /**\n     * @generated from protobuf field: int32 phase = 16;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 17;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: bool unique = 18;\n     */\n    unique: boolean;\n    /**\n     * @generated from protobuf field: bool heroic = 19;\n     */\n    heroic: boolean;\n    /**\n     * @generated from protobuf field: int32 rand_prop_points = 27;\n     */\n    randPropPoints: number;\n    /**\n     * Classes that are allowed to use the item. Empty indicates no special class restrictions.\n     *\n     * @generated from protobuf field: repeated proto.Class class_allowlist = 20;\n     */\n    classAllowlist: Class[];\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 21;\n     */\n    requiredProfession: Profession;\n    /**\n     * Name of the item set to which this item belongs, if any.\n     *\n     * @generated from protobuf field: string set_name = 22;\n     */\n    setName: string;\n    /**\n     * @generated from protobuf field: proto.Expansion expansion = 24;\n     */\n    expansion: Expansion;\n    /**\n     * @generated from protobuf field: repeated proto.UIItemSource sources = 23;\n     */\n    sources: UIItemSource[];\n    /**\n     * @generated from protobuf field: proto.UIItem.FactionRestriction faction_restriction = 25;\n     */\n    factionRestriction: UIItem_FactionRestriction;\n}\n/**\n * @generated from protobuf enum proto.UIItem.FactionRestriction\n */\nexport enum UIItem_FactionRestriction {\n    /**\n     * @generated from protobuf enum value: FACTION_RESTRICTION_UNSPECIFIED = 0;\n     */\n    UNSPECIFIED = 0,\n    /**\n     * @generated from protobuf enum value: FACTION_RESTRICTION_ALLIANCE_ONLY = 1;\n     */\n    ALLIANCE_ONLY = 1,\n    /**\n     * @generated from protobuf enum value: FACTION_RESTRICTION_HORDE_ONLY = 2;\n     */\n    HORDE_ONLY = 2\n}\n/**\n * @generated from protobuf message proto.UIItemSource\n */\nexport interface UIItemSource {\n    /**\n     * @generated from protobuf oneof: source\n     */\n    source: {\n        oneofKind: \"crafted\";\n        /**\n         * @generated from protobuf field: proto.CraftedSource crafted = 1;\n         */\n        crafted: CraftedSource;\n    } | {\n        oneofKind: \"drop\";\n        /**\n         * @generated from protobuf field: proto.DropSource drop = 2;\n         */\n        drop: DropSource;\n    } | {\n        oneofKind: \"quest\";\n        /**\n         * @generated from protobuf field: proto.QuestSource quest = 3;\n         */\n        quest: QuestSource;\n    } | {\n        oneofKind: \"soldBy\";\n        /**\n         * @generated from protobuf field: proto.SoldBySource sold_by = 4;\n         */\n        soldBy: SoldBySource;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf message proto.CraftedSource\n */\nexport interface CraftedSource {\n    /**\n     * @generated from protobuf field: proto.Profession profession = 1;\n     */\n    profession: Profession;\n    /**\n     * @generated from protobuf field: int32 spell_id = 2;\n     */\n    spellId: number;\n}\n/**\n * @generated from protobuf message proto.DropSource\n */\nexport interface DropSource {\n    /**\n     * @generated from protobuf field: proto.DungeonDifficulty difficulty = 1;\n     */\n    difficulty: DungeonDifficulty;\n    /**\n     * @generated from protobuf field: int32 npc_id = 2;\n     */\n    npcId: number;\n    /**\n     * @generated from protobuf field: int32 zone_id = 3;\n     */\n    zoneId: number;\n    /**\n     * @generated from protobuf field: string other_name = 4;\n     */\n    otherName: string; // For drops in zones from things other than NPCs, e.g. \"Trash\"\n    /**\n     * @generated from protobuf field: string category = 5;\n     */\n    category: string; // For conditions/categories of drops, e.g. 'Hard Mode' or 'Titan Rune'\n}\n/**\n * @generated from protobuf message proto.QuestSource\n */\nexport interface QuestSource {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n}\n/**\n * @generated from protobuf message proto.SoldBySource\n */\nexport interface SoldBySource {\n    /**\n     * @generated from protobuf field: int32 npc_id = 1;\n     */\n    npcId: number;\n    /**\n     * @generated from protobuf field: string npc_name = 2;\n     */\n    npcName: string;\n    /**\n     * @generated from protobuf field: int32 zone_id = 3;\n     */\n    zoneId: number;\n}\n/**\n * @generated from protobuf message proto.UIEnchant\n */\nexport interface UIEnchant {\n    /**\n     * All enchants have an effect ID. Some also have an item ID, others have a spell ID,\n     * and yet others have both item and spell IDs. No single ID alone is enough to\n     * uniquely identify an enchant. Uniqueness requires either effect ID + slot, or\n     * effect ID + item/spell ID.\n     *\n     * @generated from protobuf field: int32 effect_id = 1;\n     */\n    effectId: number; // ID of the effect.\n    /**\n     * @generated from protobuf field: int32 item_id = 2;\n     */\n    itemId: number; // ID of the enchant \"item\". Might be 0 if not available.\n    /**\n     * @generated from protobuf field: int32 spell_id = 3;\n     */\n    spellId: number; // ID of the enchant \"spell\". Might be 0 if not available.\n    /**\n     * @generated from protobuf field: string name = 4;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string icon = 5;\n     */\n    icon: string;\n    /**\n     * @generated from protobuf field: proto.ItemType type = 6;\n     */\n    type: ItemType; // Which type of item this enchant can be applied to.\n    /**\n     * @generated from protobuf field: repeated proto.ItemType extra_types = 13;\n     */\n    extraTypes: ItemType[]; // Extra types for enchants that can go in multiple slots (like armor kits).\n    /**\n     * @generated from protobuf field: proto.EnchantType enchant_type = 7;\n     */\n    enchantType: EnchantType;\n    /**\n     * @generated from protobuf field: repeated double stats = 8;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 9;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: int32 phase = 10;\n     */\n    phase: number;\n    /**\n     * Classes that are allowed to use the enchant. Empty indicates no special class restrictions.\n     *\n     * @generated from protobuf field: repeated proto.Class class_allowlist = 11;\n     */\n    classAllowlist: Class[];\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 12;\n     */\n    requiredProfession: Profession;\n}\n/**\n * @generated from protobuf message proto.UIGem\n */\nexport interface UIGem {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string icon = 3;\n     */\n    icon: string;\n    /**\n     * @generated from protobuf field: proto.GemColor color = 4;\n     */\n    color: GemColor;\n    /**\n     * @generated from protobuf field: repeated double stats = 5;\n     */\n    stats: number[];\n    /**\n     * @generated from protobuf field: int32 phase = 6;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: proto.ItemQuality quality = 7;\n     */\n    quality: ItemQuality;\n    /**\n     * @generated from protobuf field: bool unique = 8;\n     */\n    unique: boolean;\n    /**\n     * @generated from protobuf field: proto.Profession required_profession = 9;\n     */\n    requiredProfession: Profession;\n}\n/**\n * @generated from protobuf message proto.IconData\n */\nexport interface IconData {\n    /**\n     * @generated from protobuf field: int32 id = 1;\n     */\n    id: number;\n    /**\n     * @generated from protobuf field: string name = 2;\n     */\n    name: string;\n    /**\n     * @generated from protobuf field: string icon = 3;\n     */\n    icon: string;\n}\n/**\n * @generated from protobuf message proto.GlyphID\n */\nexport interface GlyphID {\n    /**\n     * @generated from protobuf field: int32 item_id = 1;\n     */\n    itemId: number;\n    /**\n     * @generated from protobuf field: int32 spell_id = 2;\n     */\n    spellId: number;\n}\n/**\n * Next tag: 20.\n *\n * @generated from protobuf message proto.DatabaseFilters\n */\nexport interface DatabaseFilters {\n    /**\n     * @generated from protobuf field: repeated proto.ArmorType armor_types = 1;\n     */\n    armorTypes: ArmorType[];\n    /**\n     * @generated from protobuf field: repeated proto.WeaponType weapon_types = 2;\n     */\n    weaponTypes: WeaponType[];\n    /**\n     * @generated from protobuf field: repeated proto.RangedWeaponType ranged_weapon_types = 16;\n     */\n    rangedWeaponTypes: RangedWeaponType[];\n    /**\n     * @generated from protobuf field: repeated proto.SourceFilterOption sources = 17;\n     */\n    sources: SourceFilterOption[];\n    /**\n     * @generated from protobuf field: repeated proto.RaidFilterOption raids = 18;\n     */\n    raids: RaidFilterOption[];\n    /**\n     * @generated from protobuf field: proto.UIItem.FactionRestriction faction_restriction = 19;\n     */\n    factionRestriction: UIItem_FactionRestriction;\n    /**\n     * @generated from protobuf field: double min_mh_weapon_speed = 4;\n     */\n    minMhWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double max_mh_weapon_speed = 5;\n     */\n    maxMhWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double min_oh_weapon_speed = 9;\n     */\n    minOhWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double max_oh_weapon_speed = 10;\n     */\n    maxOhWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double min_ranged_weapon_speed = 14;\n     */\n    minRangedWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: double max_ranged_weapon_speed = 15;\n     */\n    maxRangedWeaponSpeed: number;\n    /**\n     * @generated from protobuf field: bool one_handed_weapons = 6;\n     */\n    oneHandedWeapons: boolean;\n    /**\n     * @generated from protobuf field: bool two_handed_weapons = 7;\n     */\n    twoHandedWeapons: boolean;\n    /**\n     * @generated from protobuf field: bool matching_gems_only = 8;\n     */\n    matchingGemsOnly: boolean;\n    /**\n     * Item IDs for favorited items.\n     *\n     * @generated from protobuf field: repeated int32 favorite_items = 11;\n     */\n    favoriteItems: number[];\n    /**\n     * Item IDs for favorited gems.\n     *\n     * @generated from protobuf field: repeated int32 favorite_gems = 12;\n     */\n    favoriteGems: number[];\n    /**\n     * Uniquely-identifying strings for favorited enchants.\n     *\n     * @generated from protobuf field: repeated string favorite_enchants = 13;\n     */\n    favoriteEnchants: string[];\n}\n/**\n * @generated from protobuf message proto.SimSettings\n */\nexport interface SimSettings {\n    /**\n     * @generated from protobuf field: int32 iterations = 1;\n     */\n    iterations: number;\n    /**\n     * @generated from protobuf field: int32 phase = 2;\n     */\n    phase: number;\n    /**\n     * @generated from protobuf field: int64 fixed_rng_seed = 3;\n     */\n    fixedRngSeed: bigint;\n    /**\n     * @generated from protobuf field: bool show_damage_metrics = 8;\n     */\n    showDamageMetrics: boolean;\n    /**\n     * @generated from protobuf field: bool show_threat_metrics = 4;\n     */\n    showThreatMetrics: boolean;\n    /**\n     * @generated from protobuf field: bool show_healing_metrics = 7;\n     */\n    showHealingMetrics: boolean;\n    /**\n     * @generated from protobuf field: bool show_experimental = 5;\n     */\n    showExperimental: boolean;\n    /**\n     * @generated from protobuf field: bool show_ep_values = 11;\n     */\n    showEpValues: boolean;\n    /**\n     * @generated from protobuf field: string language = 9;\n     */\n    language: string;\n    /**\n     * @generated from protobuf field: proto.Faction faction = 6;\n     */\n    faction: Faction;\n    /**\n     * @generated from protobuf field: proto.DatabaseFilters filters = 10;\n     */\n    filters?: DatabaseFilters;\n}\n/**\n * Contains all information that is imported/exported from an individual sim.\n *\n * @generated from protobuf message proto.IndividualSimSettings\n */\nexport interface IndividualSimSettings {\n    /**\n     * @generated from protobuf field: proto.SimSettings settings = 5;\n     */\n    settings?: SimSettings;\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 1;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 8;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: repeated proto.UnitReference tanks = 7;\n     */\n    tanks: UnitReference[];\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 2;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Player player = 3;\n     */\n    player?: Player;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n    /**\n     * @generated from protobuf field: int32 target_dummies = 9;\n     */\n    targetDummies: number;\n    /**\n     * @generated from protobuf field: proto.UnitStats ep_weights_stats = 10;\n     */\n    epWeightsStats?: UnitStats;\n    /**\n     * @generated from protobuf field: repeated double ep_ratios = 11;\n     */\n    epRatios: number[];\n    /**\n     * @generated from protobuf field: proto.Stat dps_ref_stat = 12;\n     */\n    dpsRefStat: Stat;\n    /**\n     * @generated from protobuf field: proto.Stat heal_ref_stat = 13;\n     */\n    healRefStat: Stat;\n    /**\n     * @generated from protobuf field: proto.Stat tank_ref_stat = 14;\n     */\n    tankRefStat: Stat;\n}\n/**\n * Local storage data for gear settings.\n *\n * @generated from protobuf message proto.SavedGearSet\n */\nexport interface SavedGearSet {\n    /**\n     * @generated from protobuf field: proto.EquipmentSpec gear = 1;\n     */\n    gear?: EquipmentSpec;\n    /**\n     * @generated from protobuf field: proto.UnitStats bonus_stats_stats = 3;\n     */\n    bonusStatsStats?: UnitStats;\n}\n/**\n * Local storage data for other settings.\n *\n * @generated from protobuf message proto.SavedSettings\n */\nexport interface SavedSettings {\n    /**\n     * @generated from protobuf field: proto.RaidBuffs raid_buffs = 1;\n     */\n    raidBuffs?: RaidBuffs;\n    /**\n     * @generated from protobuf field: proto.PartyBuffs party_buffs = 2;\n     */\n    partyBuffs?: PartyBuffs;\n    /**\n     * @generated from protobuf field: proto.Debuffs debuffs = 7;\n     */\n    debuffs?: Debuffs;\n    /**\n     * @generated from protobuf field: proto.IndividualBuffs player_buffs = 3;\n     */\n    playerBuffs?: IndividualBuffs;\n    /**\n     * @generated from protobuf field: proto.Consumes consumes = 4;\n     */\n    consumes?: Consumes;\n    /**\n     * @generated from protobuf field: proto.Race race = 5;\n     */\n    race: Race;\n    /**\n     * @generated from protobuf field: repeated proto.Profession professions = 9;\n     */\n    professions: Profession[];\n    /**\n     * @generated from protobuf field: bool enable_item_swap = 18;\n     */\n    enableItemSwap: boolean;\n    /**\n     * @generated from protobuf field: proto.ItemSwap item_swap = 17;\n     */\n    itemSwap?: ItemSwap;\n    /**\n     * @generated from protobuf field: int32 reaction_time_ms = 10;\n     */\n    reactionTimeMs: number;\n    /**\n     * @generated from protobuf field: int32 channel_clip_delay_ms = 14;\n     */\n    channelClipDelayMs: number;\n    /**\n     * @generated from protobuf field: bool in_front_of_target = 11;\n     */\n    inFrontOfTarget: boolean;\n    /**\n     * @generated from protobuf field: double distance_from_target = 12;\n     */\n    distanceFromTarget: number;\n    /**\n     * @generated from protobuf field: proto.HealingModel healing_model = 13;\n     */\n    healingModel?: HealingModel;\n}\n/**\n * @generated from protobuf message proto.SavedTalents\n */\nexport interface SavedTalents {\n    /**\n     * @generated from protobuf field: string talents_string = 1;\n     */\n    talentsString: string;\n    /**\n     * @generated from protobuf field: proto.Glyphs glyphs = 2;\n     */\n    glyphs?: Glyphs;\n}\n/**\n * @generated from protobuf message proto.SavedRotation\n */\nexport interface SavedRotation {\n    /**\n     * @generated from protobuf field: proto.APLRotation rotation = 1;\n     */\n    rotation?: APLRotation;\n}\n/**\n * @generated from protobuf message proto.BlessingsAssignment\n */\nexport interface BlessingsAssignment {\n    /**\n     * Index corresponds to Spec that the blessing should be applied to.\n     *\n     * @generated from protobuf field: repeated proto.Blessings blessings = 1;\n     */\n    blessings: Blessings[];\n}\n/**\n * @generated from protobuf message proto.BlessingsAssignments\n */\nexport interface BlessingsAssignments {\n    /**\n     * Assignments for each paladin.\n     *\n     * @generated from protobuf field: repeated proto.BlessingsAssignment paladins = 1;\n     */\n    paladins: BlessingsAssignment[];\n}\n/**\n * Local storage data for a saved encounter.\n *\n * @generated from protobuf message proto.SavedEncounter\n */\nexport interface SavedEncounter {\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 1;\n     */\n    encounter?: Encounter;\n}\n/**\n * Local storage data for raid sim settings.\n *\n * @generated from protobuf message proto.SavedRaid\n */\nexport interface SavedRaid {\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: proto.BlessingsAssignments blessings = 3;\n     */\n    blessings?: BlessingsAssignments;\n    /**\n     * @generated from protobuf field: proto.Faction faction = 4;\n     */\n    faction: Faction;\n    /**\n     * @generated from protobuf field: int32 phase = 5;\n     */\n    phase: number;\n}\n/**\n * Contains all information that is imported/exported from a raid sim.\n *\n * @generated from protobuf message proto.RaidSimSettings\n */\nexport interface RaidSimSettings {\n    /**\n     * @generated from protobuf field: proto.SimSettings settings = 5;\n     */\n    settings?: SimSettings;\n    /**\n     * @generated from protobuf field: proto.Raid raid = 1;\n     */\n    raid?: Raid;\n    /**\n     * @generated from protobuf field: proto.BlessingsAssignments blessings = 3;\n     */\n    blessings?: BlessingsAssignments;\n    /**\n     * @generated from protobuf field: proto.Encounter encounter = 4;\n     */\n    encounter?: Encounter;\n}\n/**\n * All the data related to running the sim once.\n *\n * @generated from protobuf message proto.SimRun\n */\nexport interface SimRun {\n    /**\n     * @generated from protobuf field: proto.RaidSimRequest request = 1;\n     */\n    request?: RaidSimRequest;\n    /**\n     * @generated from protobuf field: proto.RaidSimResult result = 2;\n     */\n    result?: RaidSimResult;\n}\n/**\n * Contains a sim run and also other context data.\n *\n * @generated from protobuf message proto.SimRunData\n */\nexport interface SimRunData {\n    /**\n     * @generated from protobuf field: proto.SimRun run = 1;\n     */\n    run?: SimRun;\n    /**\n     * The run stored as a reference, for comparison to the current run.\n     *\n     * @generated from protobuf field: proto.SimRun reference_run = 2;\n     */\n    referenceRun?: SimRun;\n}\n/**\n * Sent by the sim to the detailed results page.\n *\n * @generated from protobuf message proto.DetailedResultsUpdate\n */\nexport interface DetailedResultsUpdate {\n    /**\n     * @generated from protobuf oneof: data\n     */\n    data: {\n        oneofKind: \"runData\";\n        /**\n         * Show results from a run.\n         *\n         * @generated from protobuf field: proto.SimRunData run_data = 1;\n         */\n        runData: SimRunData;\n    } | {\n        oneofKind: \"settings\";\n        /**\n         * Update sim settings.\n         *\n         * @generated from protobuf field: proto.SimSettings settings = 2;\n         */\n        settings: SimSettings;\n    } | {\n        oneofKind: undefined;\n    };\n}\n/**\n * @generated from protobuf enum proto.Expansion\n */\nexport enum Expansion {\n    /**\n     * @generated from protobuf enum value: ExpansionUnknown = 0;\n     */\n    ExpansionUnknown = 0,\n    /**\n     * @generated from protobuf enum value: ExpansionVanilla = 1;\n     */\n    ExpansionVanilla = 1,\n    /**\n     * @generated from protobuf enum value: ExpansionTbc = 2;\n     */\n    ExpansionTbc = 2,\n    /**\n     * @generated from protobuf enum value: ExpansionWotlk = 3;\n     */\n    ExpansionWotlk = 3\n}\n/**\n * @generated from protobuf enum proto.DungeonDifficulty\n */\nexport enum DungeonDifficulty {\n    /**\n     * @generated from protobuf enum value: DifficultyUnknown = 0;\n     */\n    DifficultyUnknown = 0,\n    /**\n     * @generated from protobuf enum value: DifficultyNormal = 1;\n     */\n    DifficultyNormal = 1,\n    /**\n     * @generated from protobuf enum value: DifficultyHeroic = 2;\n     */\n    DifficultyHeroic = 2,\n    /**\n     * @generated from protobuf enum value: DifficultyTitanRuneAlpha = 7;\n     */\n    DifficultyTitanRuneAlpha = 7,\n    /**\n     * @generated from protobuf enum value: DifficultyTitanRuneBeta = 8;\n     */\n    DifficultyTitanRuneBeta = 8,\n    /**\n     * @generated from protobuf enum value: DifficultyRaid10 = 3;\n     */\n    DifficultyRaid10 = 3,\n    /**\n     * @generated from protobuf enum value: DifficultyRaid10H = 4;\n     */\n    DifficultyRaid10H = 4,\n    /**\n     * @generated from protobuf enum value: DifficultyRaid25 = 5;\n     */\n    DifficultyRaid25 = 5,\n    /**\n     * @generated from protobuf enum value: DifficultyRaid25H = 6;\n     */\n    DifficultyRaid25H = 6\n}\n/**\n * @generated from protobuf enum proto.SourceFilterOption\n */\nexport enum SourceFilterOption {\n    /**\n     * @generated from protobuf enum value: SourceUnknown = 0;\n     */\n    SourceUnknown = 0,\n    /**\n     * @generated from protobuf enum value: SourceCrafting = 1;\n     */\n    SourceCrafting = 1,\n    /**\n     * @generated from protobuf enum value: SourceQuest = 2;\n     */\n    SourceQuest = 2,\n    /**\n     * @generated from protobuf enum value: SourceDungeon = 3;\n     */\n    SourceDungeon = 3,\n    /**\n     * @generated from protobuf enum value: SourceDungeonH = 4;\n     */\n    SourceDungeonH = 4,\n    /**\n     * @generated from protobuf enum value: SourceDungeonTRA = 9;\n     */\n    SourceDungeonTRA = 9,\n    /**\n     * @generated from protobuf enum value: SourceDungeonTRB = 10;\n     */\n    SourceDungeonTRB = 10,\n    /**\n     * @generated from protobuf enum value: SourceRaid10 = 5;\n     */\n    SourceRaid10 = 5,\n    /**\n     * @generated from protobuf enum value: SourceRaid10H = 6;\n     */\n    SourceRaid10H = 6,\n    /**\n     * @generated from protobuf enum value: SourceRaid25 = 7;\n     */\n    SourceRaid25 = 7,\n    /**\n     * @generated from protobuf enum value: SourceRaid25H = 8;\n     */\n    SourceRaid25H = 8\n}\n/**\n * @generated from protobuf enum proto.RaidFilterOption\n */\nexport enum RaidFilterOption {\n    /**\n     * @generated from protobuf enum value: RaidUnknown = 0;\n     */\n    RaidUnknown = 0,\n    /**\n     * @generated from protobuf enum value: RaidVanilla = 1;\n     */\n    RaidVanilla = 1,\n    /**\n     * @generated from protobuf enum value: RaidTbc = 2;\n     */\n    RaidTbc = 2,\n    /**\n     * @generated from protobuf enum value: RaidNaxxramas = 3;\n     */\n    RaidNaxxramas = 3,\n    /**\n     * @generated from protobuf enum value: RaidEyeOfEternity = 4;\n     */\n    RaidEyeOfEternity = 4,\n    /**\n     * @generated from protobuf enum value: RaidObsidianSanctum = 5;\n     */\n    RaidObsidianSanctum = 5,\n    /**\n     * @generated from protobuf enum value: RaidVaultOfArchavon = 6;\n     */\n    RaidVaultOfArchavon = 6,\n    /**\n     * @generated from protobuf enum value: RaidUlduar = 7;\n     */\n    RaidUlduar = 7,\n    /**\n     * @generated from protobuf enum value: RaidTrialOfTheCrusader = 8;\n     */\n    RaidTrialOfTheCrusader = 8,\n    /**\n     * @generated from protobuf enum value: RaidOnyxiasLair = 9;\n     */\n    RaidOnyxiasLair = 9,\n    /**\n     * @generated from protobuf enum value: RaidIcecrownCitadel = 10;\n     */\n    RaidIcecrownCitadel = 10,\n    /**\n     * @generated from protobuf enum value: RaidRubySanctum = 11;\n     */\n    RaidRubySanctum = 11\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIDatabase$Type extends MessageType<UIDatabase> {\n    constructor() {\n        super(\"proto.UIDatabase\", [\n            { no: 1, name: \"items\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIItem },\n            { no: 11, name: \"random_suffixes\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemRandomSuffix },\n            { no: 2, name: \"enchants\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIEnchant },\n            { no: 3, name: \"gems\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIGem },\n            { no: 6, name: \"encounters\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => PresetEncounter },\n            { no: 8, name: \"zones\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIZone },\n            { no: 9, name: \"npcs\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UINPC },\n            { no: 4, name: \"item_icons\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => IconData },\n            { no: 5, name: \"spell_icons\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => IconData },\n            { no: 7, name: \"glyph_ids\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => GlyphID },\n            { no: 12, name: \"reforge_stats\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => ReforgeStat }\n        ]);\n    }\n    create(value?: PartialMessage<UIDatabase>): UIDatabase {\n        const message = { items: [], randomSuffixes: [], enchants: [], gems: [], encounters: [], zones: [], npcs: [], itemIcons: [], spellIcons: [], glyphIds: [], reforgeStats: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIDatabase>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIDatabase): UIDatabase {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.UIItem items */ 1:\n                    message.items.push(UIItem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.ItemRandomSuffix random_suffixes */ 11:\n                    message.randomSuffixes.push(ItemRandomSuffix.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UIEnchant enchants */ 2:\n                    message.enchants.push(UIEnchant.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UIGem gems */ 3:\n                    message.gems.push(UIGem.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.PresetEncounter encounters */ 6:\n                    message.encounters.push(PresetEncounter.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UIZone zones */ 8:\n                    message.zones.push(UIZone.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.UINPC npcs */ 9:\n                    message.npcs.push(UINPC.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.IconData item_icons */ 4:\n                    message.itemIcons.push(IconData.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.IconData spell_icons */ 5:\n                    message.spellIcons.push(IconData.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.GlyphID glyph_ids */ 7:\n                    message.glyphIds.push(GlyphID.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* repeated proto.ReforgeStat reforge_stats */ 12:\n                    message.reforgeStats.push(ReforgeStat.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIDatabase, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.UIItem items = 1; */\n        for (let i = 0; i < message.items.length; i++)\n            UIItem.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ItemRandomSuffix random_suffixes = 11; */\n        for (let i = 0; i < message.randomSuffixes.length; i++)\n            ItemRandomSuffix.internalBinaryWrite(message.randomSuffixes[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UIEnchant enchants = 2; */\n        for (let i = 0; i < message.enchants.length; i++)\n            UIEnchant.internalBinaryWrite(message.enchants[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UIGem gems = 3; */\n        for (let i = 0; i < message.gems.length; i++)\n            UIGem.internalBinaryWrite(message.gems[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.PresetEncounter encounters = 6; */\n        for (let i = 0; i < message.encounters.length; i++)\n            PresetEncounter.internalBinaryWrite(message.encounters[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UIZone zones = 8; */\n        for (let i = 0; i < message.zones.length; i++)\n            UIZone.internalBinaryWrite(message.zones[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UINPC npcs = 9; */\n        for (let i = 0; i < message.npcs.length; i++)\n            UINPC.internalBinaryWrite(message.npcs[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.IconData item_icons = 4; */\n        for (let i = 0; i < message.itemIcons.length; i++)\n            IconData.internalBinaryWrite(message.itemIcons[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.IconData spell_icons = 5; */\n        for (let i = 0; i < message.spellIcons.length; i++)\n            IconData.internalBinaryWrite(message.spellIcons[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.GlyphID glyph_ids = 7; */\n        for (let i = 0; i < message.glyphIds.length; i++)\n            GlyphID.internalBinaryWrite(message.glyphIds[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.ReforgeStat reforge_stats = 12; */\n        for (let i = 0; i < message.reforgeStats.length; i++)\n            ReforgeStat.internalBinaryWrite(message.reforgeStats[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIDatabase\n */\nexport const UIDatabase = new UIDatabase$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIZone$Type extends MessageType<UIZone> {\n    constructor() {\n        super(\"proto.UIZone\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"expansion\", kind: \"enum\", T: () => [\"proto.Expansion\", Expansion] }\n        ]);\n    }\n    create(value?: PartialMessage<UIZone>): UIZone {\n        const message = { id: 0, name: \"\", expansion: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIZone>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIZone): UIZone {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* proto.Expansion expansion */ 3:\n                    message.expansion = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIZone, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* proto.Expansion expansion = 3; */\n        if (message.expansion !== 0)\n            writer.tag(3, WireType.Varint).int32(message.expansion);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIZone\n */\nexport const UIZone = new UIZone$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UINPC$Type extends MessageType<UINPC> {\n    constructor() {\n        super(\"proto.UINPC\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"zone_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<UINPC>): UINPC {\n        const message = { id: 0, name: \"\", zoneId: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UINPC>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UINPC): UINPC {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* int32 zone_id */ 3:\n                    message.zoneId = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UINPC, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* int32 zone_id = 3; */\n        if (message.zoneId !== 0)\n            writer.tag(3, WireType.Varint).int32(message.zoneId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UINPC\n */\nexport const UINPC = new UINPC$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIItem$Type extends MessageType<UIItem> {\n    constructor() {\n        super(\"proto.UIItem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"icon\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"type\", kind: \"enum\", T: () => [\"proto.ItemType\", ItemType] },\n            { no: 5, name: \"armor_type\", kind: \"enum\", T: () => [\"proto.ArmorType\", ArmorType] },\n            { no: 6, name: \"weapon_type\", kind: \"enum\", T: () => [\"proto.WeaponType\", WeaponType] },\n            { no: 7, name: \"hand_type\", kind: \"enum\", T: () => [\"proto.HandType\", HandType] },\n            { no: 8, name: \"ranged_weapon_type\", kind: \"enum\", T: () => [\"proto.RangedWeaponType\", RangedWeaponType] },\n            { no: 9, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"gem_sockets\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.GemColor\", GemColor] },\n            { no: 11, name: \"socketBonus\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 26, name: \"random_suffix_options\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"weapon_damage_min\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"weapon_damage_max\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 15, name: \"ilvl\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 16, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 17, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 18, name: \"unique\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 19, name: \"heroic\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 27, name: \"rand_prop_points\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 20, name: \"class_allowlist\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Class\", Class] },\n            { no: 21, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 22, name: \"set_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 24, name: \"expansion\", kind: \"enum\", T: () => [\"proto.Expansion\", Expansion] },\n            { no: 23, name: \"sources\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UIItemSource },\n            { no: 25, name: \"faction_restriction\", kind: \"enum\", T: () => [\"proto.UIItem.FactionRestriction\", UIItem_FactionRestriction, \"FACTION_RESTRICTION_\"] }\n        ]);\n    }\n    create(value?: PartialMessage<UIItem>): UIItem {\n        const message = { id: 0, name: \"\", icon: \"\", type: 0, armorType: 0, weaponType: 0, handType: 0, rangedWeaponType: 0, stats: [], gemSockets: [], socketBonus: [], randomSuffixOptions: [], weaponDamageMin: 0, weaponDamageMax: 0, weaponSpeed: 0, ilvl: 0, phase: 0, quality: 0, unique: false, heroic: false, randPropPoints: 0, classAllowlist: [], requiredProfession: 0, setName: \"\", expansion: 0, sources: [], factionRestriction: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIItem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIItem): UIItem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string icon */ 3:\n                    message.icon = reader.string();\n                    break;\n                case /* proto.ItemType type */ 4:\n                    message.type = reader.int32();\n                    break;\n                case /* proto.ArmorType armor_type */ 5:\n                    message.armorType = reader.int32();\n                    break;\n                case /* proto.WeaponType weapon_type */ 6:\n                    message.weaponType = reader.int32();\n                    break;\n                case /* proto.HandType hand_type */ 7:\n                    message.handType = reader.int32();\n                    break;\n                case /* proto.RangedWeaponType ranged_weapon_type */ 8:\n                    message.rangedWeaponType = reader.int32();\n                    break;\n                case /* repeated double stats */ 9:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* repeated proto.GemColor gem_sockets */ 10:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.gemSockets.push(reader.int32());\n                    else\n                        message.gemSockets.push(reader.int32());\n                    break;\n                case /* repeated double socketBonus */ 11:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.socketBonus.push(reader.double());\n                    else\n                        message.socketBonus.push(reader.double());\n                    break;\n                case /* repeated int32 random_suffix_options */ 26:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.randomSuffixOptions.push(reader.int32());\n                    else\n                        message.randomSuffixOptions.push(reader.int32());\n                    break;\n                case /* double weapon_damage_min */ 12:\n                    message.weaponDamageMin = reader.double();\n                    break;\n                case /* double weapon_damage_max */ 13:\n                    message.weaponDamageMax = reader.double();\n                    break;\n                case /* double weapon_speed */ 14:\n                    message.weaponSpeed = reader.double();\n                    break;\n                case /* int32 ilvl */ 15:\n                    message.ilvl = reader.int32();\n                    break;\n                case /* int32 phase */ 16:\n                    message.phase = reader.int32();\n                    break;\n                case /* proto.ItemQuality quality */ 17:\n                    message.quality = reader.int32();\n                    break;\n                case /* bool unique */ 18:\n                    message.unique = reader.bool();\n                    break;\n                case /* bool heroic */ 19:\n                    message.heroic = reader.bool();\n                    break;\n                case /* int32 rand_prop_points */ 27:\n                    message.randPropPoints = reader.int32();\n                    break;\n                case /* repeated proto.Class class_allowlist */ 20:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.classAllowlist.push(reader.int32());\n                    else\n                        message.classAllowlist.push(reader.int32());\n                    break;\n                case /* proto.Profession required_profession */ 21:\n                    message.requiredProfession = reader.int32();\n                    break;\n                case /* string set_name */ 22:\n                    message.setName = reader.string();\n                    break;\n                case /* proto.Expansion expansion */ 24:\n                    message.expansion = reader.int32();\n                    break;\n                case /* repeated proto.UIItemSource sources */ 23:\n                    message.sources.push(UIItemSource.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.UIItem.FactionRestriction faction_restriction */ 25:\n                    message.factionRestriction = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* string icon = 3; */\n        if (message.icon !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.icon);\n        /* proto.ItemType type = 4; */\n        if (message.type !== 0)\n            writer.tag(4, WireType.Varint).int32(message.type);\n        /* proto.ArmorType armor_type = 5; */\n        if (message.armorType !== 0)\n            writer.tag(5, WireType.Varint).int32(message.armorType);\n        /* proto.WeaponType weapon_type = 6; */\n        if (message.weaponType !== 0)\n            writer.tag(6, WireType.Varint).int32(message.weaponType);\n        /* proto.HandType hand_type = 7; */\n        if (message.handType !== 0)\n            writer.tag(7, WireType.Varint).int32(message.handType);\n        /* proto.RangedWeaponType ranged_weapon_type = 8; */\n        if (message.rangedWeaponType !== 0)\n            writer.tag(8, WireType.Varint).int32(message.rangedWeaponType);\n        /* repeated double stats = 9; */\n        if (message.stats.length) {\n            writer.tag(9, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* repeated proto.GemColor gem_sockets = 10; */\n        if (message.gemSockets.length) {\n            writer.tag(10, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.gemSockets.length; i++)\n                writer.int32(message.gemSockets[i]);\n            writer.join();\n        }\n        /* repeated double socketBonus = 11; */\n        if (message.socketBonus.length) {\n            writer.tag(11, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.socketBonus.length; i++)\n                writer.double(message.socketBonus[i]);\n            writer.join();\n        }\n        /* repeated int32 random_suffix_options = 26; */\n        if (message.randomSuffixOptions.length) {\n            writer.tag(26, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.randomSuffixOptions.length; i++)\n                writer.int32(message.randomSuffixOptions[i]);\n            writer.join();\n        }\n        /* double weapon_damage_min = 12; */\n        if (message.weaponDamageMin !== 0)\n            writer.tag(12, WireType.Bit64).double(message.weaponDamageMin);\n        /* double weapon_damage_max = 13; */\n        if (message.weaponDamageMax !== 0)\n            writer.tag(13, WireType.Bit64).double(message.weaponDamageMax);\n        /* double weapon_speed = 14; */\n        if (message.weaponSpeed !== 0)\n            writer.tag(14, WireType.Bit64).double(message.weaponSpeed);\n        /* int32 ilvl = 15; */\n        if (message.ilvl !== 0)\n            writer.tag(15, WireType.Varint).int32(message.ilvl);\n        /* int32 phase = 16; */\n        if (message.phase !== 0)\n            writer.tag(16, WireType.Varint).int32(message.phase);\n        /* proto.ItemQuality quality = 17; */\n        if (message.quality !== 0)\n            writer.tag(17, WireType.Varint).int32(message.quality);\n        /* bool unique = 18; */\n        if (message.unique !== false)\n            writer.tag(18, WireType.Varint).bool(message.unique);\n        /* bool heroic = 19; */\n        if (message.heroic !== false)\n            writer.tag(19, WireType.Varint).bool(message.heroic);\n        /* int32 rand_prop_points = 27; */\n        if (message.randPropPoints !== 0)\n            writer.tag(27, WireType.Varint).int32(message.randPropPoints);\n        /* repeated proto.Class class_allowlist = 20; */\n        if (message.classAllowlist.length) {\n            writer.tag(20, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.classAllowlist.length; i++)\n                writer.int32(message.classAllowlist[i]);\n            writer.join();\n        }\n        /* proto.Profession required_profession = 21; */\n        if (message.requiredProfession !== 0)\n            writer.tag(21, WireType.Varint).int32(message.requiredProfession);\n        /* string set_name = 22; */\n        if (message.setName !== \"\")\n            writer.tag(22, WireType.LengthDelimited).string(message.setName);\n        /* proto.Expansion expansion = 24; */\n        if (message.expansion !== 0)\n            writer.tag(24, WireType.Varint).int32(message.expansion);\n        /* repeated proto.UIItemSource sources = 23; */\n        for (let i = 0; i < message.sources.length; i++)\n            UIItemSource.internalBinaryWrite(message.sources[i], writer.tag(23, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UIItem.FactionRestriction faction_restriction = 25; */\n        if (message.factionRestriction !== 0)\n            writer.tag(25, WireType.Varint).int32(message.factionRestriction);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIItem\n */\nexport const UIItem = new UIItem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIItemSource$Type extends MessageType<UIItemSource> {\n    constructor() {\n        super(\"proto.UIItemSource\", [\n            { no: 1, name: \"crafted\", kind: \"message\", oneof: \"source\", T: () => CraftedSource },\n            { no: 2, name: \"drop\", kind: \"message\", oneof: \"source\", T: () => DropSource },\n            { no: 3, name: \"quest\", kind: \"message\", oneof: \"source\", T: () => QuestSource },\n            { no: 4, name: \"sold_by\", kind: \"message\", oneof: \"source\", T: () => SoldBySource }\n        ]);\n    }\n    create(value?: PartialMessage<UIItemSource>): UIItemSource {\n        const message = { source: { oneofKind: undefined } };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIItemSource>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIItemSource): UIItemSource {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.CraftedSource crafted */ 1:\n                    message.source = {\n                        oneofKind: \"crafted\",\n                        crafted: CraftedSource.internalBinaryRead(reader, reader.uint32(), options, (message.source as any).crafted)\n                    };\n                    break;\n                case /* proto.DropSource drop */ 2:\n                    message.source = {\n                        oneofKind: \"drop\",\n                        drop: DropSource.internalBinaryRead(reader, reader.uint32(), options, (message.source as any).drop)\n                    };\n                    break;\n                case /* proto.QuestSource quest */ 3:\n                    message.source = {\n                        oneofKind: \"quest\",\n                        quest: QuestSource.internalBinaryRead(reader, reader.uint32(), options, (message.source as any).quest)\n                    };\n                    break;\n                case /* proto.SoldBySource sold_by */ 4:\n                    message.source = {\n                        oneofKind: \"soldBy\",\n                        soldBy: SoldBySource.internalBinaryRead(reader, reader.uint32(), options, (message.source as any).soldBy)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIItemSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.CraftedSource crafted = 1; */\n        if (message.source.oneofKind === \"crafted\")\n            CraftedSource.internalBinaryWrite(message.source.crafted, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.DropSource drop = 2; */\n        if (message.source.oneofKind === \"drop\")\n            DropSource.internalBinaryWrite(message.source.drop, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.QuestSource quest = 3; */\n        if (message.source.oneofKind === \"quest\")\n            QuestSource.internalBinaryWrite(message.source.quest, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SoldBySource sold_by = 4; */\n        if (message.source.oneofKind === \"soldBy\")\n            SoldBySource.internalBinaryWrite(message.source.soldBy, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIItemSource\n */\nexport const UIItemSource = new UIItemSource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CraftedSource$Type extends MessageType<CraftedSource> {\n    constructor() {\n        super(\"proto.CraftedSource\", [\n            { no: 1, name: \"profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] },\n            { no: 2, name: \"spell_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<CraftedSource>): CraftedSource {\n        const message = { profession: 0, spellId: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<CraftedSource>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CraftedSource): CraftedSource {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Profession profession */ 1:\n                    message.profession = reader.int32();\n                    break;\n                case /* int32 spell_id */ 2:\n                    message.spellId = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: CraftedSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Profession profession = 1; */\n        if (message.profession !== 0)\n            writer.tag(1, WireType.Varint).int32(message.profession);\n        /* int32 spell_id = 2; */\n        if (message.spellId !== 0)\n            writer.tag(2, WireType.Varint).int32(message.spellId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.CraftedSource\n */\nexport const CraftedSource = new CraftedSource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DropSource$Type extends MessageType<DropSource> {\n    constructor() {\n        super(\"proto.DropSource\", [\n            { no: 1, name: \"difficulty\", kind: \"enum\", T: () => [\"proto.DungeonDifficulty\", DungeonDifficulty] },\n            { no: 2, name: \"npc_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"zone_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"other_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"category\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DropSource>): DropSource {\n        const message = { difficulty: 0, npcId: 0, zoneId: 0, otherName: \"\", category: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DropSource>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DropSource): DropSource {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.DungeonDifficulty difficulty */ 1:\n                    message.difficulty = reader.int32();\n                    break;\n                case /* int32 npc_id */ 2:\n                    message.npcId = reader.int32();\n                    break;\n                case /* int32 zone_id */ 3:\n                    message.zoneId = reader.int32();\n                    break;\n                case /* string other_name */ 4:\n                    message.otherName = reader.string();\n                    break;\n                case /* string category */ 5:\n                    message.category = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DropSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.DungeonDifficulty difficulty = 1; */\n        if (message.difficulty !== 0)\n            writer.tag(1, WireType.Varint).int32(message.difficulty);\n        /* int32 npc_id = 2; */\n        if (message.npcId !== 0)\n            writer.tag(2, WireType.Varint).int32(message.npcId);\n        /* int32 zone_id = 3; */\n        if (message.zoneId !== 0)\n            writer.tag(3, WireType.Varint).int32(message.zoneId);\n        /* string other_name = 4; */\n        if (message.otherName !== \"\")\n            writer.tag(4, WireType.LengthDelimited).string(message.otherName);\n        /* string category = 5; */\n        if (message.category !== \"\")\n            writer.tag(5, WireType.LengthDelimited).string(message.category);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DropSource\n */\nexport const DropSource = new DropSource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass QuestSource$Type extends MessageType<QuestSource> {\n    constructor() {\n        super(\"proto.QuestSource\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<QuestSource>): QuestSource {\n        const message = { id: 0, name: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<QuestSource>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QuestSource): QuestSource {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: QuestSource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.QuestSource\n */\nexport const QuestSource = new QuestSource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SoldBySource$Type extends MessageType<SoldBySource> {\n    constructor() {\n        super(\"proto.SoldBySource\", [\n            { no: 1, name: \"npc_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"npc_name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"zone_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SoldBySource>): SoldBySource {\n        const message = { npcId: 0, npcName: \"\", zoneId: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SoldBySource>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SoldBySource): SoldBySource {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 npc_id */ 1:\n                    message.npcId = reader.int32();\n                    break;\n                case /* string npc_name */ 2:\n                    message.npcName = reader.string();\n                    break;\n                case /* int32 zone_id */ 3:\n                    message.zoneId = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SoldBySource, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 npc_id = 1; */\n        if (message.npcId !== 0)\n            writer.tag(1, WireType.Varint).int32(message.npcId);\n        /* string npc_name = 2; */\n        if (message.npcName !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.npcName);\n        /* int32 zone_id = 3; */\n        if (message.zoneId !== 0)\n            writer.tag(3, WireType.Varint).int32(message.zoneId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SoldBySource\n */\nexport const SoldBySource = new SoldBySource$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIEnchant$Type extends MessageType<UIEnchant> {\n    constructor() {\n        super(\"proto.UIEnchant\", [\n            { no: 1, name: \"effect_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"item_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"spell_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 4, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 5, name: \"icon\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 6, name: \"type\", kind: \"enum\", T: () => [\"proto.ItemType\", ItemType] },\n            { no: 13, name: \"extra_types\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.ItemType\", ItemType] },\n            { no: 7, name: \"enchant_type\", kind: \"enum\", T: () => [\"proto.EnchantType\", EnchantType] },\n            { no: 8, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 10, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"class_allowlist\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Class\", Class] },\n            { no: 12, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] }\n        ]);\n    }\n    create(value?: PartialMessage<UIEnchant>): UIEnchant {\n        const message = { effectId: 0, itemId: 0, spellId: 0, name: \"\", icon: \"\", type: 0, extraTypes: [], enchantType: 0, stats: [], quality: 0, phase: 0, classAllowlist: [], requiredProfession: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIEnchant>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIEnchant): UIEnchant {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 effect_id */ 1:\n                    message.effectId = reader.int32();\n                    break;\n                case /* int32 item_id */ 2:\n                    message.itemId = reader.int32();\n                    break;\n                case /* int32 spell_id */ 3:\n                    message.spellId = reader.int32();\n                    break;\n                case /* string name */ 4:\n                    message.name = reader.string();\n                    break;\n                case /* string icon */ 5:\n                    message.icon = reader.string();\n                    break;\n                case /* proto.ItemType type */ 6:\n                    message.type = reader.int32();\n                    break;\n                case /* repeated proto.ItemType extra_types */ 13:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.extraTypes.push(reader.int32());\n                    else\n                        message.extraTypes.push(reader.int32());\n                    break;\n                case /* proto.EnchantType enchant_type */ 7:\n                    message.enchantType = reader.int32();\n                    break;\n                case /* repeated double stats */ 8:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* proto.ItemQuality quality */ 9:\n                    message.quality = reader.int32();\n                    break;\n                case /* int32 phase */ 10:\n                    message.phase = reader.int32();\n                    break;\n                case /* repeated proto.Class class_allowlist */ 11:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.classAllowlist.push(reader.int32());\n                    else\n                        message.classAllowlist.push(reader.int32());\n                    break;\n                case /* proto.Profession required_profession */ 12:\n                    message.requiredProfession = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIEnchant, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 effect_id = 1; */\n        if (message.effectId !== 0)\n            writer.tag(1, WireType.Varint).int32(message.effectId);\n        /* int32 item_id = 2; */\n        if (message.itemId !== 0)\n            writer.tag(2, WireType.Varint).int32(message.itemId);\n        /* int32 spell_id = 3; */\n        if (message.spellId !== 0)\n            writer.tag(3, WireType.Varint).int32(message.spellId);\n        /* string name = 4; */\n        if (message.name !== \"\")\n            writer.tag(4, WireType.LengthDelimited).string(message.name);\n        /* string icon = 5; */\n        if (message.icon !== \"\")\n            writer.tag(5, WireType.LengthDelimited).string(message.icon);\n        /* proto.ItemType type = 6; */\n        if (message.type !== 0)\n            writer.tag(6, WireType.Varint).int32(message.type);\n        /* repeated proto.ItemType extra_types = 13; */\n        if (message.extraTypes.length) {\n            writer.tag(13, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.extraTypes.length; i++)\n                writer.int32(message.extraTypes[i]);\n            writer.join();\n        }\n        /* proto.EnchantType enchant_type = 7; */\n        if (message.enchantType !== 0)\n            writer.tag(7, WireType.Varint).int32(message.enchantType);\n        /* repeated double stats = 8; */\n        if (message.stats.length) {\n            writer.tag(8, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* proto.ItemQuality quality = 9; */\n        if (message.quality !== 0)\n            writer.tag(9, WireType.Varint).int32(message.quality);\n        /* int32 phase = 10; */\n        if (message.phase !== 0)\n            writer.tag(10, WireType.Varint).int32(message.phase);\n        /* repeated proto.Class class_allowlist = 11; */\n        if (message.classAllowlist.length) {\n            writer.tag(11, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.classAllowlist.length; i++)\n                writer.int32(message.classAllowlist[i]);\n            writer.join();\n        }\n        /* proto.Profession required_profession = 12; */\n        if (message.requiredProfession !== 0)\n            writer.tag(12, WireType.Varint).int32(message.requiredProfession);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIEnchant\n */\nexport const UIEnchant = new UIEnchant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UIGem$Type extends MessageType<UIGem> {\n    constructor() {\n        super(\"proto.UIGem\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"icon\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 4, name: \"color\", kind: \"enum\", T: () => [\"proto.GemColor\", GemColor] },\n            { no: 5, name: \"stats\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 7, name: \"quality\", kind: \"enum\", T: () => [\"proto.ItemQuality\", ItemQuality] },\n            { no: 8, name: \"unique\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"required_profession\", kind: \"enum\", T: () => [\"proto.Profession\", Profession] }\n        ]);\n    }\n    create(value?: PartialMessage<UIGem>): UIGem {\n        const message = { id: 0, name: \"\", icon: \"\", color: 0, stats: [], phase: 0, quality: 0, unique: false, requiredProfession: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<UIGem>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UIGem): UIGem {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string icon */ 3:\n                    message.icon = reader.string();\n                    break;\n                case /* proto.GemColor color */ 4:\n                    message.color = reader.int32();\n                    break;\n                case /* repeated double stats */ 5:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.stats.push(reader.double());\n                    else\n                        message.stats.push(reader.double());\n                    break;\n                case /* int32 phase */ 6:\n                    message.phase = reader.int32();\n                    break;\n                case /* proto.ItemQuality quality */ 7:\n                    message.quality = reader.int32();\n                    break;\n                case /* bool unique */ 8:\n                    message.unique = reader.bool();\n                    break;\n                case /* proto.Profession required_profession */ 9:\n                    message.requiredProfession = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: UIGem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* string icon = 3; */\n        if (message.icon !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.icon);\n        /* proto.GemColor color = 4; */\n        if (message.color !== 0)\n            writer.tag(4, WireType.Varint).int32(message.color);\n        /* repeated double stats = 5; */\n        if (message.stats.length) {\n            writer.tag(5, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.stats.length; i++)\n                writer.double(message.stats[i]);\n            writer.join();\n        }\n        /* int32 phase = 6; */\n        if (message.phase !== 0)\n            writer.tag(6, WireType.Varint).int32(message.phase);\n        /* proto.ItemQuality quality = 7; */\n        if (message.quality !== 0)\n            writer.tag(7, WireType.Varint).int32(message.quality);\n        /* bool unique = 8; */\n        if (message.unique !== false)\n            writer.tag(8, WireType.Varint).bool(message.unique);\n        /* proto.Profession required_profession = 9; */\n        if (message.requiredProfession !== 0)\n            writer.tag(9, WireType.Varint).int32(message.requiredProfession);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.UIGem\n */\nexport const UIGem = new UIGem$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IconData$Type extends MessageType<IconData> {\n    constructor() {\n        super(\"proto.IconData\", [\n            { no: 1, name: \"id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"name\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 3, name: \"icon\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<IconData>): IconData {\n        const message = { id: 0, name: \"\", icon: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<IconData>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IconData): IconData {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 id */ 1:\n                    message.id = reader.int32();\n                    break;\n                case /* string name */ 2:\n                    message.name = reader.string();\n                    break;\n                case /* string icon */ 3:\n                    message.icon = reader.string();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: IconData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 id = 1; */\n        if (message.id !== 0)\n            writer.tag(1, WireType.Varint).int32(message.id);\n        /* string name = 2; */\n        if (message.name !== \"\")\n            writer.tag(2, WireType.LengthDelimited).string(message.name);\n        /* string icon = 3; */\n        if (message.icon !== \"\")\n            writer.tag(3, WireType.LengthDelimited).string(message.icon);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.IconData\n */\nexport const IconData = new IconData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GlyphID$Type extends MessageType<GlyphID> {\n    constructor() {\n        super(\"proto.GlyphID\", [\n            { no: 1, name: \"item_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"spell_id\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<GlyphID>): GlyphID {\n        const message = { itemId: 0, spellId: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<GlyphID>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GlyphID): GlyphID {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 item_id */ 1:\n                    message.itemId = reader.int32();\n                    break;\n                case /* int32 spell_id */ 2:\n                    message.spellId = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: GlyphID, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 item_id = 1; */\n        if (message.itemId !== 0)\n            writer.tag(1, WireType.Varint).int32(message.itemId);\n        /* int32 spell_id = 2; */\n        if (message.spellId !== 0)\n            writer.tag(2, WireType.Varint).int32(message.spellId);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.GlyphID\n */\nexport const GlyphID = new GlyphID$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DatabaseFilters$Type extends MessageType<DatabaseFilters> {\n    constructor() {\n        super(\"proto.DatabaseFilters\", [\n            { no: 1, name: \"armor_types\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.ArmorType\", ArmorType] },\n            { no: 2, name: \"weapon_types\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.WeaponType\", WeaponType] },\n            { no: 16, name: \"ranged_weapon_types\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.RangedWeaponType\", RangedWeaponType] },\n            { no: 17, name: \"sources\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.SourceFilterOption\", SourceFilterOption] },\n            { no: 18, name: \"raids\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.RaidFilterOption\", RaidFilterOption] },\n            { no: 19, name: \"faction_restriction\", kind: \"enum\", T: () => [\"proto.UIItem.FactionRestriction\", UIItem_FactionRestriction, \"FACTION_RESTRICTION_\"] },\n            { no: 4, name: \"min_mh_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 5, name: \"max_mh_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 9, name: \"min_oh_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 10, name: \"max_oh_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 14, name: \"min_ranged_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 15, name: \"max_ranged_weapon_speed\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 6, name: \"one_handed_weapons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"two_handed_weapons\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 8, name: \"matching_gems_only\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"favorite_items\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },\n            { no: 12, name: \"favorite_gems\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },\n            { no: 13, name: \"favorite_enchants\", kind: \"scalar\", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }\n        ]);\n    }\n    create(value?: PartialMessage<DatabaseFilters>): DatabaseFilters {\n        const message = { armorTypes: [], weaponTypes: [], rangedWeaponTypes: [], sources: [], raids: [], factionRestriction: 0, minMhWeaponSpeed: 0, maxMhWeaponSpeed: 0, minOhWeaponSpeed: 0, maxOhWeaponSpeed: 0, minRangedWeaponSpeed: 0, maxRangedWeaponSpeed: 0, oneHandedWeapons: false, twoHandedWeapons: false, matchingGemsOnly: false, favoriteItems: [], favoriteGems: [], favoriteEnchants: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DatabaseFilters>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DatabaseFilters): DatabaseFilters {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.ArmorType armor_types */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.armorTypes.push(reader.int32());\n                    else\n                        message.armorTypes.push(reader.int32());\n                    break;\n                case /* repeated proto.WeaponType weapon_types */ 2:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.weaponTypes.push(reader.int32());\n                    else\n                        message.weaponTypes.push(reader.int32());\n                    break;\n                case /* repeated proto.RangedWeaponType ranged_weapon_types */ 16:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.rangedWeaponTypes.push(reader.int32());\n                    else\n                        message.rangedWeaponTypes.push(reader.int32());\n                    break;\n                case /* repeated proto.SourceFilterOption sources */ 17:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.sources.push(reader.int32());\n                    else\n                        message.sources.push(reader.int32());\n                    break;\n                case /* repeated proto.RaidFilterOption raids */ 18:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.raids.push(reader.int32());\n                    else\n                        message.raids.push(reader.int32());\n                    break;\n                case /* proto.UIItem.FactionRestriction faction_restriction */ 19:\n                    message.factionRestriction = reader.int32();\n                    break;\n                case /* double min_mh_weapon_speed */ 4:\n                    message.minMhWeaponSpeed = reader.double();\n                    break;\n                case /* double max_mh_weapon_speed */ 5:\n                    message.maxMhWeaponSpeed = reader.double();\n                    break;\n                case /* double min_oh_weapon_speed */ 9:\n                    message.minOhWeaponSpeed = reader.double();\n                    break;\n                case /* double max_oh_weapon_speed */ 10:\n                    message.maxOhWeaponSpeed = reader.double();\n                    break;\n                case /* double min_ranged_weapon_speed */ 14:\n                    message.minRangedWeaponSpeed = reader.double();\n                    break;\n                case /* double max_ranged_weapon_speed */ 15:\n                    message.maxRangedWeaponSpeed = reader.double();\n                    break;\n                case /* bool one_handed_weapons */ 6:\n                    message.oneHandedWeapons = reader.bool();\n                    break;\n                case /* bool two_handed_weapons */ 7:\n                    message.twoHandedWeapons = reader.bool();\n                    break;\n                case /* bool matching_gems_only */ 8:\n                    message.matchingGemsOnly = reader.bool();\n                    break;\n                case /* repeated int32 favorite_items */ 11:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.favoriteItems.push(reader.int32());\n                    else\n                        message.favoriteItems.push(reader.int32());\n                    break;\n                case /* repeated int32 favorite_gems */ 12:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.favoriteGems.push(reader.int32());\n                    else\n                        message.favoriteGems.push(reader.int32());\n                    break;\n                case /* repeated string favorite_enchants */ 13:\n                    message.favoriteEnchants.push(reader.string());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DatabaseFilters, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.ArmorType armor_types = 1; */\n        if (message.armorTypes.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.armorTypes.length; i++)\n                writer.int32(message.armorTypes[i]);\n            writer.join();\n        }\n        /* repeated proto.WeaponType weapon_types = 2; */\n        if (message.weaponTypes.length) {\n            writer.tag(2, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.weaponTypes.length; i++)\n                writer.int32(message.weaponTypes[i]);\n            writer.join();\n        }\n        /* repeated proto.RangedWeaponType ranged_weapon_types = 16; */\n        if (message.rangedWeaponTypes.length) {\n            writer.tag(16, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.rangedWeaponTypes.length; i++)\n                writer.int32(message.rangedWeaponTypes[i]);\n            writer.join();\n        }\n        /* repeated proto.SourceFilterOption sources = 17; */\n        if (message.sources.length) {\n            writer.tag(17, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.sources.length; i++)\n                writer.int32(message.sources[i]);\n            writer.join();\n        }\n        /* repeated proto.RaidFilterOption raids = 18; */\n        if (message.raids.length) {\n            writer.tag(18, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.raids.length; i++)\n                writer.int32(message.raids[i]);\n            writer.join();\n        }\n        /* proto.UIItem.FactionRestriction faction_restriction = 19; */\n        if (message.factionRestriction !== 0)\n            writer.tag(19, WireType.Varint).int32(message.factionRestriction);\n        /* double min_mh_weapon_speed = 4; */\n        if (message.minMhWeaponSpeed !== 0)\n            writer.tag(4, WireType.Bit64).double(message.minMhWeaponSpeed);\n        /* double max_mh_weapon_speed = 5; */\n        if (message.maxMhWeaponSpeed !== 0)\n            writer.tag(5, WireType.Bit64).double(message.maxMhWeaponSpeed);\n        /* double min_oh_weapon_speed = 9; */\n        if (message.minOhWeaponSpeed !== 0)\n            writer.tag(9, WireType.Bit64).double(message.minOhWeaponSpeed);\n        /* double max_oh_weapon_speed = 10; */\n        if (message.maxOhWeaponSpeed !== 0)\n            writer.tag(10, WireType.Bit64).double(message.maxOhWeaponSpeed);\n        /* double min_ranged_weapon_speed = 14; */\n        if (message.minRangedWeaponSpeed !== 0)\n            writer.tag(14, WireType.Bit64).double(message.minRangedWeaponSpeed);\n        /* double max_ranged_weapon_speed = 15; */\n        if (message.maxRangedWeaponSpeed !== 0)\n            writer.tag(15, WireType.Bit64).double(message.maxRangedWeaponSpeed);\n        /* bool one_handed_weapons = 6; */\n        if (message.oneHandedWeapons !== false)\n            writer.tag(6, WireType.Varint).bool(message.oneHandedWeapons);\n        /* bool two_handed_weapons = 7; */\n        if (message.twoHandedWeapons !== false)\n            writer.tag(7, WireType.Varint).bool(message.twoHandedWeapons);\n        /* bool matching_gems_only = 8; */\n        if (message.matchingGemsOnly !== false)\n            writer.tag(8, WireType.Varint).bool(message.matchingGemsOnly);\n        /* repeated int32 favorite_items = 11; */\n        if (message.favoriteItems.length) {\n            writer.tag(11, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.favoriteItems.length; i++)\n                writer.int32(message.favoriteItems[i]);\n            writer.join();\n        }\n        /* repeated int32 favorite_gems = 12; */\n        if (message.favoriteGems.length) {\n            writer.tag(12, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.favoriteGems.length; i++)\n                writer.int32(message.favoriteGems[i]);\n            writer.join();\n        }\n        /* repeated string favorite_enchants = 13; */\n        for (let i = 0; i < message.favoriteEnchants.length; i++)\n            writer.tag(13, WireType.LengthDelimited).string(message.favoriteEnchants[i]);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DatabaseFilters\n */\nexport const DatabaseFilters = new DatabaseFilters$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimSettings$Type extends MessageType<SimSettings> {\n    constructor() {\n        super(\"proto.SimSettings\", [\n            { no: 1, name: \"iterations\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 2, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 3, name: \"fixed_rng_seed\", kind: \"scalar\", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },\n            { no: 8, name: \"show_damage_metrics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 4, name: \"show_threat_metrics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 7, name: \"show_healing_metrics\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 5, name: \"show_experimental\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 11, name: \"show_ep_values\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 9, name: \"language\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 6, name: \"faction\", kind: \"enum\", T: () => [\"proto.Faction\", Faction] },\n            { no: 10, name: \"filters\", kind: \"message\", T: () => DatabaseFilters }\n        ]);\n    }\n    create(value?: PartialMessage<SimSettings>): SimSettings {\n        const message = { iterations: 0, phase: 0, fixedRngSeed: 0n, showDamageMetrics: false, showThreatMetrics: false, showHealingMetrics: false, showExperimental: false, showEpValues: false, language: \"\", faction: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimSettings): SimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* int32 iterations */ 1:\n                    message.iterations = reader.int32();\n                    break;\n                case /* int32 phase */ 2:\n                    message.phase = reader.int32();\n                    break;\n                case /* int64 fixed_rng_seed */ 3:\n                    message.fixedRngSeed = reader.int64().toBigInt();\n                    break;\n                case /* bool show_damage_metrics */ 8:\n                    message.showDamageMetrics = reader.bool();\n                    break;\n                case /* bool show_threat_metrics */ 4:\n                    message.showThreatMetrics = reader.bool();\n                    break;\n                case /* bool show_healing_metrics */ 7:\n                    message.showHealingMetrics = reader.bool();\n                    break;\n                case /* bool show_experimental */ 5:\n                    message.showExperimental = reader.bool();\n                    break;\n                case /* bool show_ep_values */ 11:\n                    message.showEpValues = reader.bool();\n                    break;\n                case /* string language */ 9:\n                    message.language = reader.string();\n                    break;\n                case /* proto.Faction faction */ 6:\n                    message.faction = reader.int32();\n                    break;\n                case /* proto.DatabaseFilters filters */ 10:\n                    message.filters = DatabaseFilters.internalBinaryRead(reader, reader.uint32(), options, message.filters);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* int32 iterations = 1; */\n        if (message.iterations !== 0)\n            writer.tag(1, WireType.Varint).int32(message.iterations);\n        /* int32 phase = 2; */\n        if (message.phase !== 0)\n            writer.tag(2, WireType.Varint).int32(message.phase);\n        /* int64 fixed_rng_seed = 3; */\n        if (message.fixedRngSeed !== 0n)\n            writer.tag(3, WireType.Varint).int64(message.fixedRngSeed);\n        /* bool show_damage_metrics = 8; */\n        if (message.showDamageMetrics !== false)\n            writer.tag(8, WireType.Varint).bool(message.showDamageMetrics);\n        /* bool show_threat_metrics = 4; */\n        if (message.showThreatMetrics !== false)\n            writer.tag(4, WireType.Varint).bool(message.showThreatMetrics);\n        /* bool show_healing_metrics = 7; */\n        if (message.showHealingMetrics !== false)\n            writer.tag(7, WireType.Varint).bool(message.showHealingMetrics);\n        /* bool show_experimental = 5; */\n        if (message.showExperimental !== false)\n            writer.tag(5, WireType.Varint).bool(message.showExperimental);\n        /* bool show_ep_values = 11; */\n        if (message.showEpValues !== false)\n            writer.tag(11, WireType.Varint).bool(message.showEpValues);\n        /* string language = 9; */\n        if (message.language !== \"\")\n            writer.tag(9, WireType.LengthDelimited).string(message.language);\n        /* proto.Faction faction = 6; */\n        if (message.faction !== 0)\n            writer.tag(6, WireType.Varint).int32(message.faction);\n        /* proto.DatabaseFilters filters = 10; */\n        if (message.filters)\n            DatabaseFilters.internalBinaryWrite(message.filters, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimSettings\n */\nexport const SimSettings = new SimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass IndividualSimSettings$Type extends MessageType<IndividualSimSettings> {\n    constructor() {\n        super(\"proto.IndividualSimSettings\", [\n            { no: 5, name: \"settings\", kind: \"message\", T: () => SimSettings },\n            { no: 1, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 8, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 7, name: \"tanks\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => UnitReference },\n            { no: 2, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 3, name: \"player\", kind: \"message\", T: () => Player },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter },\n            { no: 9, name: \"target_dummies\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 10, name: \"ep_weights_stats\", kind: \"message\", T: () => UnitStats },\n            { no: 11, name: \"ep_ratios\", kind: \"scalar\", repeat: 1 /*RepeatType.PACKED*/, T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 12, name: \"dps_ref_stat\", kind: \"enum\", T: () => [\"proto.Stat\", Stat] },\n            { no: 13, name: \"heal_ref_stat\", kind: \"enum\", T: () => [\"proto.Stat\", Stat] },\n            { no: 14, name: \"tank_ref_stat\", kind: \"enum\", T: () => [\"proto.Stat\", Stat] }\n        ]);\n    }\n    create(value?: PartialMessage<IndividualSimSettings>): IndividualSimSettings {\n        const message = { tanks: [], targetDummies: 0, epRatios: [], dpsRefStat: 0, healRefStat: 0, tankRefStat: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<IndividualSimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IndividualSimSettings): IndividualSimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimSettings settings */ 5:\n                    message.settings = SimSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);\n                    break;\n                case /* proto.RaidBuffs raid_buffs */ 1:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 8:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* repeated proto.UnitReference tanks */ 7:\n                    message.tanks.push(UnitReference.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 2:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Player player */ 3:\n                    message.player = Player.internalBinaryRead(reader, reader.uint32(), options, message.player);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                case /* int32 target_dummies */ 9:\n                    message.targetDummies = reader.int32();\n                    break;\n                case /* proto.UnitStats ep_weights_stats */ 10:\n                    message.epWeightsStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.epWeightsStats);\n                    break;\n                case /* repeated double ep_ratios */ 11:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.epRatios.push(reader.double());\n                    else\n                        message.epRatios.push(reader.double());\n                    break;\n                case /* proto.Stat dps_ref_stat */ 12:\n                    message.dpsRefStat = reader.int32();\n                    break;\n                case /* proto.Stat heal_ref_stat */ 13:\n                    message.healRefStat = reader.int32();\n                    break;\n                case /* proto.Stat tank_ref_stat */ 14:\n                    message.tankRefStat = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: IndividualSimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimSettings settings = 5; */\n        if (message.settings)\n            SimSettings.internalBinaryWrite(message.settings, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidBuffs raid_buffs = 1; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 8; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(8, WireType.LengthDelimited).fork(), options).join();\n        /* repeated proto.UnitReference tanks = 7; */\n        for (let i = 0; i < message.tanks.length; i++)\n            UnitReference.internalBinaryWrite(message.tanks[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 2; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Player player = 3; */\n        if (message.player)\n            Player.internalBinaryWrite(message.player, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* int32 target_dummies = 9; */\n        if (message.targetDummies !== 0)\n            writer.tag(9, WireType.Varint).int32(message.targetDummies);\n        /* proto.UnitStats ep_weights_stats = 10; */\n        if (message.epWeightsStats)\n            UnitStats.internalBinaryWrite(message.epWeightsStats, writer.tag(10, WireType.LengthDelimited).fork(), options).join();\n        /* repeated double ep_ratios = 11; */\n        if (message.epRatios.length) {\n            writer.tag(11, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.epRatios.length; i++)\n                writer.double(message.epRatios[i]);\n            writer.join();\n        }\n        /* proto.Stat dps_ref_stat = 12; */\n        if (message.dpsRefStat !== 0)\n            writer.tag(12, WireType.Varint).int32(message.dpsRefStat);\n        /* proto.Stat heal_ref_stat = 13; */\n        if (message.healRefStat !== 0)\n            writer.tag(13, WireType.Varint).int32(message.healRefStat);\n        /* proto.Stat tank_ref_stat = 14; */\n        if (message.tankRefStat !== 0)\n            writer.tag(14, WireType.Varint).int32(message.tankRefStat);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.IndividualSimSettings\n */\nexport const IndividualSimSettings = new IndividualSimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedGearSet$Type extends MessageType<SavedGearSet> {\n    constructor() {\n        super(\"proto.SavedGearSet\", [\n            { no: 1, name: \"gear\", kind: \"message\", T: () => EquipmentSpec },\n            { no: 3, name: \"bonus_stats_stats\", kind: \"message\", T: () => UnitStats }\n        ]);\n    }\n    create(value?: PartialMessage<SavedGearSet>): SavedGearSet {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedGearSet>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedGearSet): SavedGearSet {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.EquipmentSpec gear */ 1:\n                    message.gear = EquipmentSpec.internalBinaryRead(reader, reader.uint32(), options, message.gear);\n                    break;\n                case /* proto.UnitStats bonus_stats_stats */ 3:\n                    message.bonusStatsStats = UnitStats.internalBinaryRead(reader, reader.uint32(), options, message.bonusStatsStats);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedGearSet, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.EquipmentSpec gear = 1; */\n        if (message.gear)\n            EquipmentSpec.internalBinaryWrite(message.gear, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.UnitStats bonus_stats_stats = 3; */\n        if (message.bonusStatsStats)\n            UnitStats.internalBinaryWrite(message.bonusStatsStats, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedGearSet\n */\nexport const SavedGearSet = new SavedGearSet$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedSettings$Type extends MessageType<SavedSettings> {\n    constructor() {\n        super(\"proto.SavedSettings\", [\n            { no: 1, name: \"raid_buffs\", kind: \"message\", T: () => RaidBuffs },\n            { no: 2, name: \"party_buffs\", kind: \"message\", T: () => PartyBuffs },\n            { no: 7, name: \"debuffs\", kind: \"message\", T: () => Debuffs },\n            { no: 3, name: \"player_buffs\", kind: \"message\", T: () => IndividualBuffs },\n            { no: 4, name: \"consumes\", kind: \"message\", T: () => Consumes },\n            { no: 5, name: \"race\", kind: \"enum\", T: () => [\"proto.Race\", Race] },\n            { no: 9, name: \"professions\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Profession\", Profession] },\n            { no: 18, name: \"enable_item_swap\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 17, name: \"item_swap\", kind: \"message\", T: () => ItemSwap },\n            { no: 10, name: \"reaction_time_ms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 14, name: \"channel_clip_delay_ms\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ },\n            { no: 11, name: \"in_front_of_target\", kind: \"scalar\", T: 8 /*ScalarType.BOOL*/ },\n            { no: 12, name: \"distance_from_target\", kind: \"scalar\", T: 1 /*ScalarType.DOUBLE*/ },\n            { no: 13, name: \"healing_model\", kind: \"message\", T: () => HealingModel }\n        ]);\n    }\n    create(value?: PartialMessage<SavedSettings>): SavedSettings {\n        const message = { race: 0, professions: [], enableItemSwap: false, reactionTimeMs: 0, channelClipDelayMs: 0, inFrontOfTarget: false, distanceFromTarget: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedSettings): SavedSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidBuffs raid_buffs */ 1:\n                    message.raidBuffs = RaidBuffs.internalBinaryRead(reader, reader.uint32(), options, message.raidBuffs);\n                    break;\n                case /* proto.PartyBuffs party_buffs */ 2:\n                    message.partyBuffs = PartyBuffs.internalBinaryRead(reader, reader.uint32(), options, message.partyBuffs);\n                    break;\n                case /* proto.Debuffs debuffs */ 7:\n                    message.debuffs = Debuffs.internalBinaryRead(reader, reader.uint32(), options, message.debuffs);\n                    break;\n                case /* proto.IndividualBuffs player_buffs */ 3:\n                    message.playerBuffs = IndividualBuffs.internalBinaryRead(reader, reader.uint32(), options, message.playerBuffs);\n                    break;\n                case /* proto.Consumes consumes */ 4:\n                    message.consumes = Consumes.internalBinaryRead(reader, reader.uint32(), options, message.consumes);\n                    break;\n                case /* proto.Race race */ 5:\n                    message.race = reader.int32();\n                    break;\n                case /* repeated proto.Profession professions */ 9:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.professions.push(reader.int32());\n                    else\n                        message.professions.push(reader.int32());\n                    break;\n                case /* bool enable_item_swap */ 18:\n                    message.enableItemSwap = reader.bool();\n                    break;\n                case /* proto.ItemSwap item_swap */ 17:\n                    message.itemSwap = ItemSwap.internalBinaryRead(reader, reader.uint32(), options, message.itemSwap);\n                    break;\n                case /* int32 reaction_time_ms */ 10:\n                    message.reactionTimeMs = reader.int32();\n                    break;\n                case /* int32 channel_clip_delay_ms */ 14:\n                    message.channelClipDelayMs = reader.int32();\n                    break;\n                case /* bool in_front_of_target */ 11:\n                    message.inFrontOfTarget = reader.bool();\n                    break;\n                case /* double distance_from_target */ 12:\n                    message.distanceFromTarget = reader.double();\n                    break;\n                case /* proto.HealingModel healing_model */ 13:\n                    message.healingModel = HealingModel.internalBinaryRead(reader, reader.uint32(), options, message.healingModel);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidBuffs raid_buffs = 1; */\n        if (message.raidBuffs)\n            RaidBuffs.internalBinaryWrite(message.raidBuffs, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.PartyBuffs party_buffs = 2; */\n        if (message.partyBuffs)\n            PartyBuffs.internalBinaryWrite(message.partyBuffs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Debuffs debuffs = 7; */\n        if (message.debuffs)\n            Debuffs.internalBinaryWrite(message.debuffs, writer.tag(7, WireType.LengthDelimited).fork(), options).join();\n        /* proto.IndividualBuffs player_buffs = 3; */\n        if (message.playerBuffs)\n            IndividualBuffs.internalBinaryWrite(message.playerBuffs, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Consumes consumes = 4; */\n        if (message.consumes)\n            Consumes.internalBinaryWrite(message.consumes, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Race race = 5; */\n        if (message.race !== 0)\n            writer.tag(5, WireType.Varint).int32(message.race);\n        /* repeated proto.Profession professions = 9; */\n        if (message.professions.length) {\n            writer.tag(9, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.professions.length; i++)\n                writer.int32(message.professions[i]);\n            writer.join();\n        }\n        /* bool enable_item_swap = 18; */\n        if (message.enableItemSwap !== false)\n            writer.tag(18, WireType.Varint).bool(message.enableItemSwap);\n        /* proto.ItemSwap item_swap = 17; */\n        if (message.itemSwap)\n            ItemSwap.internalBinaryWrite(message.itemSwap, writer.tag(17, WireType.LengthDelimited).fork(), options).join();\n        /* int32 reaction_time_ms = 10; */\n        if (message.reactionTimeMs !== 0)\n            writer.tag(10, WireType.Varint).int32(message.reactionTimeMs);\n        /* int32 channel_clip_delay_ms = 14; */\n        if (message.channelClipDelayMs !== 0)\n            writer.tag(14, WireType.Varint).int32(message.channelClipDelayMs);\n        /* bool in_front_of_target = 11; */\n        if (message.inFrontOfTarget !== false)\n            writer.tag(11, WireType.Varint).bool(message.inFrontOfTarget);\n        /* double distance_from_target = 12; */\n        if (message.distanceFromTarget !== 0)\n            writer.tag(12, WireType.Bit64).double(message.distanceFromTarget);\n        /* proto.HealingModel healing_model = 13; */\n        if (message.healingModel)\n            HealingModel.internalBinaryWrite(message.healingModel, writer.tag(13, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedSettings\n */\nexport const SavedSettings = new SavedSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedTalents$Type extends MessageType<SavedTalents> {\n    constructor() {\n        super(\"proto.SavedTalents\", [\n            { no: 1, name: \"talents_string\", kind: \"scalar\", T: 9 /*ScalarType.STRING*/ },\n            { no: 2, name: \"glyphs\", kind: \"message\", T: () => Glyphs }\n        ]);\n    }\n    create(value?: PartialMessage<SavedTalents>): SavedTalents {\n        const message = { talentsString: \"\" };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedTalents>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedTalents): SavedTalents {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* string talents_string */ 1:\n                    message.talentsString = reader.string();\n                    break;\n                case /* proto.Glyphs glyphs */ 2:\n                    message.glyphs = Glyphs.internalBinaryRead(reader, reader.uint32(), options, message.glyphs);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedTalents, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* string talents_string = 1; */\n        if (message.talentsString !== \"\")\n            writer.tag(1, WireType.LengthDelimited).string(message.talentsString);\n        /* proto.Glyphs glyphs = 2; */\n        if (message.glyphs)\n            Glyphs.internalBinaryWrite(message.glyphs, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedTalents\n */\nexport const SavedTalents = new SavedTalents$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedRotation$Type extends MessageType<SavedRotation> {\n    constructor() {\n        super(\"proto.SavedRotation\", [\n            { no: 1, name: \"rotation\", kind: \"message\", T: () => APLRotation }\n        ]);\n    }\n    create(value?: PartialMessage<SavedRotation>): SavedRotation {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedRotation>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedRotation): SavedRotation {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.APLRotation rotation */ 1:\n                    message.rotation = APLRotation.internalBinaryRead(reader, reader.uint32(), options, message.rotation);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedRotation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.APLRotation rotation = 1; */\n        if (message.rotation)\n            APLRotation.internalBinaryWrite(message.rotation, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedRotation\n */\nexport const SavedRotation = new SavedRotation$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlessingsAssignment$Type extends MessageType<BlessingsAssignment> {\n    constructor() {\n        super(\"proto.BlessingsAssignment\", [\n            { no: 1, name: \"blessings\", kind: \"enum\", repeat: 1 /*RepeatType.PACKED*/, T: () => [\"proto.Blessings\", Blessings] }\n        ]);\n    }\n    create(value?: PartialMessage<BlessingsAssignment>): BlessingsAssignment {\n        const message = { blessings: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BlessingsAssignment>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingsAssignment): BlessingsAssignment {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.Blessings blessings */ 1:\n                    if (wireType === WireType.LengthDelimited)\n                        for (let e = reader.int32() + reader.pos; reader.pos < e;)\n                            message.blessings.push(reader.int32());\n                    else\n                        message.blessings.push(reader.int32());\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BlessingsAssignment, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.Blessings blessings = 1; */\n        if (message.blessings.length) {\n            writer.tag(1, WireType.LengthDelimited).fork();\n            for (let i = 0; i < message.blessings.length; i++)\n                writer.int32(message.blessings[i]);\n            writer.join();\n        }\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BlessingsAssignment\n */\nexport const BlessingsAssignment = new BlessingsAssignment$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass BlessingsAssignments$Type extends MessageType<BlessingsAssignments> {\n    constructor() {\n        super(\"proto.BlessingsAssignments\", [\n            { no: 1, name: \"paladins\", kind: \"message\", repeat: 1 /*RepeatType.PACKED*/, T: () => BlessingsAssignment }\n        ]);\n    }\n    create(value?: PartialMessage<BlessingsAssignments>): BlessingsAssignments {\n        const message = { paladins: [] };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<BlessingsAssignments>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingsAssignments): BlessingsAssignments {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* repeated proto.BlessingsAssignment paladins */ 1:\n                    message.paladins.push(BlessingsAssignment.internalBinaryRead(reader, reader.uint32(), options));\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: BlessingsAssignments, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* repeated proto.BlessingsAssignment paladins = 1; */\n        for (let i = 0; i < message.paladins.length; i++)\n            BlessingsAssignment.internalBinaryWrite(message.paladins[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.BlessingsAssignments\n */\nexport const BlessingsAssignments = new BlessingsAssignments$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedEncounter$Type extends MessageType<SavedEncounter> {\n    constructor() {\n        super(\"proto.SavedEncounter\", [\n            { no: 1, name: \"encounter\", kind: \"message\", T: () => Encounter }\n        ]);\n    }\n    create(value?: PartialMessage<SavedEncounter>): SavedEncounter {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedEncounter>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedEncounter): SavedEncounter {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Encounter encounter */ 1:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedEncounter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Encounter encounter = 1; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedEncounter\n */\nexport const SavedEncounter = new SavedEncounter$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SavedRaid$Type extends MessageType<SavedRaid> {\n    constructor() {\n        super(\"proto.SavedRaid\", [\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 3, name: \"blessings\", kind: \"message\", T: () => BlessingsAssignments },\n            { no: 4, name: \"faction\", kind: \"enum\", T: () => [\"proto.Faction\", Faction] },\n            { no: 5, name: \"phase\", kind: \"scalar\", T: 5 /*ScalarType.INT32*/ }\n        ]);\n    }\n    create(value?: PartialMessage<SavedRaid>): SavedRaid {\n        const message = { faction: 0, phase: 0 };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SavedRaid>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SavedRaid): SavedRaid {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* proto.BlessingsAssignments blessings */ 3:\n                    message.blessings = BlessingsAssignments.internalBinaryRead(reader, reader.uint32(), options, message.blessings);\n                    break;\n                case /* proto.Faction faction */ 4:\n                    message.faction = reader.int32();\n                    break;\n                case /* int32 phase */ 5:\n                    message.phase = reader.int32();\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SavedRaid, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BlessingsAssignments blessings = 3; */\n        if (message.blessings)\n            BlessingsAssignments.internalBinaryWrite(message.blessings, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Faction faction = 4; */\n        if (message.faction !== 0)\n            writer.tag(4, WireType.Varint).int32(message.faction);\n        /* int32 phase = 5; */\n        if (message.phase !== 0)\n            writer.tag(5, WireType.Varint).int32(message.phase);\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SavedRaid\n */\nexport const SavedRaid = new SavedRaid$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass RaidSimSettings$Type extends MessageType<RaidSimSettings> {\n    constructor() {\n        super(\"proto.RaidSimSettings\", [\n            { no: 5, name: \"settings\", kind: \"message\", T: () => SimSettings },\n            { no: 1, name: \"raid\", kind: \"message\", T: () => Raid },\n            { no: 3, name: \"blessings\", kind: \"message\", T: () => BlessingsAssignments },\n            { no: 4, name: \"encounter\", kind: \"message\", T: () => Encounter }\n        ]);\n    }\n    create(value?: PartialMessage<RaidSimSettings>): RaidSimSettings {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<RaidSimSettings>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RaidSimSettings): RaidSimSettings {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimSettings settings */ 5:\n                    message.settings = SimSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);\n                    break;\n                case /* proto.Raid raid */ 1:\n                    message.raid = Raid.internalBinaryRead(reader, reader.uint32(), options, message.raid);\n                    break;\n                case /* proto.BlessingsAssignments blessings */ 3:\n                    message.blessings = BlessingsAssignments.internalBinaryRead(reader, reader.uint32(), options, message.blessings);\n                    break;\n                case /* proto.Encounter encounter */ 4:\n                    message.encounter = Encounter.internalBinaryRead(reader, reader.uint32(), options, message.encounter);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: RaidSimSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimSettings settings = 5; */\n        if (message.settings)\n            SimSettings.internalBinaryWrite(message.settings, writer.tag(5, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Raid raid = 1; */\n        if (message.raid)\n            Raid.internalBinaryWrite(message.raid, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.BlessingsAssignments blessings = 3; */\n        if (message.blessings)\n            BlessingsAssignments.internalBinaryWrite(message.blessings, writer.tag(3, WireType.LengthDelimited).fork(), options).join();\n        /* proto.Encounter encounter = 4; */\n        if (message.encounter)\n            Encounter.internalBinaryWrite(message.encounter, writer.tag(4, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.RaidSimSettings\n */\nexport const RaidSimSettings = new RaidSimSettings$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimRun$Type extends MessageType<SimRun> {\n    constructor() {\n        super(\"proto.SimRun\", [\n            { no: 1, name: \"request\", kind: \"message\", T: () => RaidSimRequest },\n            { no: 2, name: \"result\", kind: \"message\", T: () => RaidSimResult }\n        ]);\n    }\n    create(value?: PartialMessage<SimRun>): SimRun {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimRun>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimRun): SimRun {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.RaidSimRequest request */ 1:\n                    message.request = RaidSimRequest.internalBinaryRead(reader, reader.uint32(), options, message.request);\n                    break;\n                case /* proto.RaidSimResult result */ 2:\n                    message.result = RaidSimResult.internalBinaryRead(reader, reader.uint32(), options, message.result);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimRun, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.RaidSimRequest request = 1; */\n        if (message.request)\n            RaidSimRequest.internalBinaryWrite(message.request, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.RaidSimResult result = 2; */\n        if (message.result)\n            RaidSimResult.internalBinaryWrite(message.result, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimRun\n */\nexport const SimRun = new SimRun$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SimRunData$Type extends MessageType<SimRunData> {\n    constructor() {\n        super(\"proto.SimRunData\", [\n            { no: 1, name: \"run\", kind: \"message\", T: () => SimRun },\n            { no: 2, name: \"reference_run\", kind: \"message\", T: () => SimRun }\n        ]);\n    }\n    create(value?: PartialMessage<SimRunData>): SimRunData {\n        const message = {};\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<SimRunData>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SimRunData): SimRunData {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimRun run */ 1:\n                    message.run = SimRun.internalBinaryRead(reader, reader.uint32(), options, message.run);\n                    break;\n                case /* proto.SimRun reference_run */ 2:\n                    message.referenceRun = SimRun.internalBinaryRead(reader, reader.uint32(), options, message.referenceRun);\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: SimRunData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimRun run = 1; */\n        if (message.run)\n            SimRun.internalBinaryWrite(message.run, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimRun reference_run = 2; */\n        if (message.referenceRun)\n            SimRun.internalBinaryWrite(message.referenceRun, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.SimRunData\n */\nexport const SimRunData = new SimRunData$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DetailedResultsUpdate$Type extends MessageType<DetailedResultsUpdate> {\n    constructor() {\n        super(\"proto.DetailedResultsUpdate\", [\n            { no: 1, name: \"run_data\", kind: \"message\", oneof: \"data\", T: () => SimRunData },\n            { no: 2, name: \"settings\", kind: \"message\", oneof: \"data\", T: () => SimSettings }\n        ]);\n    }\n    create(value?: PartialMessage<DetailedResultsUpdate>): DetailedResultsUpdate {\n        const message = { data: { oneofKind: undefined } };\n        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });\n        if (value !== undefined)\n            reflectionMergePartial<DetailedResultsUpdate>(this, message, value);\n        return message;\n    }\n    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DetailedResultsUpdate): DetailedResultsUpdate {\n        let message = target ?? this.create(), end = reader.pos + length;\n        while (reader.pos < end) {\n            let [fieldNo, wireType] = reader.tag();\n            switch (fieldNo) {\n                case /* proto.SimRunData run_data */ 1:\n                    message.data = {\n                        oneofKind: \"runData\",\n                        runData: SimRunData.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).runData)\n                    };\n                    break;\n                case /* proto.SimSettings settings */ 2:\n                    message.data = {\n                        oneofKind: \"settings\",\n                        settings: SimSettings.internalBinaryRead(reader, reader.uint32(), options, (message.data as any).settings)\n                    };\n                    break;\n                default:\n                    let u = options.readUnknownField;\n                    if (u === \"throw\")\n                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);\n                    let d = reader.skip(wireType);\n                    if (u !== false)\n                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);\n            }\n        }\n        return message;\n    }\n    internalBinaryWrite(message: DetailedResultsUpdate, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {\n        /* proto.SimRunData run_data = 1; */\n        if (message.data.oneofKind === \"runData\")\n            SimRunData.internalBinaryWrite(message.data.runData, writer.tag(1, WireType.LengthDelimited).fork(), options).join();\n        /* proto.SimSettings settings = 2; */\n        if (message.data.oneofKind === \"settings\")\n            SimSettings.internalBinaryWrite(message.data.settings, writer.tag(2, WireType.LengthDelimited).fork(), options).join();\n        let u = options.writeUnknownFields;\n        if (u !== false)\n            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);\n        return writer;\n    }\n}\n/**\n * @generated MessageType for protobuf message proto.DetailedResultsUpdate\n */\nexport const DetailedResultsUpdate = new DetailedResultsUpdate$Type();\n","// Returns if the two items are equal, or if both are null / undefined.\nexport function equalsOrBothNull<T>(a: T, b: T, comparator?: (_a: NonNullable<T>, _b: NonNullable<T>) => boolean): boolean {\n\tif (a == null && b == null)\n\t\treturn true;\n\n\tif (a == null || b == null)\n\t\treturn false;\n\n\treturn (comparator || ((_a: NonNullable<T>, _b: NonNullable<T>) => a == b))(a!, b!);\n}\n\n// Default comparator function for strings. Used with functions like Array.sort().\nexport function stringComparator(a: string, b: string): number {\n\tif (a < b) {\n\t\treturn -1;\n\t} else if (b < a) {\n\t\treturn 1;\n\t} else {\n\t\treturn 0;\n\t}\n}\n\n// Sorts an objectArray by a property. Returns a new array.\n// Can be called recursively.\nexport function sortByProperty(objArray: any[], prop: string) {\n\tif (!Array.isArray(objArray)) throw new Error('FIRST ARGUMENT NOT AN ARRAY');\n\tconst clone = objArray.slice(0);\n\tconst direct = arguments.length > 2 ? arguments[2] : 1; //Default to ascending\n\tconst propPath = (prop.constructor === Array) ? prop : prop.split('.');\n\tclone.sort(function(a, b) {\n\t\tfor (const p in propPath) {\n\t\t\tif (a[propPath[p]] && b[propPath[p]]) {\n\t\t\t\ta = a[propPath[p]];\n\t\t\t\tb = b[propPath[p]];\n\t\t\t}\n\t\t}\n\t\t// convert numeric strings to integers\n\t\ta = a.toString().match(/^\\d+$/) ? +a : a;\n\t\tb = b.toString().match(/^\\d+$/) ? +b : b;\n\t\treturn ((a < b) ? -1 * direct : ((a > b) ? 1 * direct : 0));\n\t});\n\treturn clone;\n}\n\nexport function sum(arr: Array<number>): number {\n\treturn arr.reduce((total, cur) => total + cur, 0);\n}\n\n// Returns the index of maximum value, or null if empty.\nexport function maxIndex(arr: Array<number>): number | null {\n\treturn arr.reduce((cur, v, i, arr) => v > arr[cur] ? i : cur, 0);\n}\n\n// Swaps two elements in the given array.\nexport function swap<T>(arr: Array<T>, i: number, j: number) {\n\t[arr[i], arr[j]] = [arr[j], arr[i]];\n}\n\n// Returns a new array containing only elements present in both a and b.\nexport function arrayEquals<T>(a: Array<T>, b: Array<T>, comparator?: (a: T, b: T) => boolean): boolean {\n\tcomparator = comparator || ((a: T, b: T) => a == b);\n\treturn a.length == b.length && a.every((val, i) => comparator!(val, b[i]));\n}\n\n// Returns a new array containing only elements present in both a and b.\nexport function intersection<T>(a: Array<T>, b: Array<T>): Array<T> {\n\treturn a.filter(value => b.includes(value));\n}\n\n// Returns a new array containing only distinct elements of arr.\n// comparator should return true if the two elements are considered equal, and false otherwise.\nexport function distinct<T>(arr: Array<T>, comparator?: (a: T, b: T) => boolean): Array<T> {\n\tcomparator = comparator || ((a: T, b: T) => a == b);\n\tconst distinctArr: Array<T> = [];\n\tarr.forEach(val => {\n\t\tif (distinctArr.find(dVal => comparator!(dVal, val)) == null) {\n\t\t\tdistinctArr.push(val);\n\t\t}\n\t});\n\treturn distinctArr;\n}\n\n// Splits an array into buckets, where elements are placed in the same bucket if the\n// toString function returns the same value.\nexport function bucket<T>(arr: Array<T>, toString: (val: T) => string): Record<string, Array<T>> {\n\tconst buckets: Record<string, Array<T>> = {};\n\tarr.forEach(val => {\n\t\tconst valString = toString(val);\n\t\tif (buckets[valString]) {\n\t\t\tbuckets[valString].push(val);\n\t\t} else {\n\t\t\tbuckets[valString] = [val];\n\t\t}\n\t});\n\treturn buckets;\n}\n\nexport function stDevToConf90(stDev: number, N: number) {\n\treturn 1.645 * stDev / Math.sqrt(N);\n}\n\nexport async function wait(ms: number): Promise<void> {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// Only works for numeric enums\nexport function getEnumValues<E>(enumType: any): Array<E> {\n\treturn Object.keys(enumType)\n\t\t.filter(key => !isNaN(Number(enumType[key])))\n\t\t.map(key => parseInt(enumType[key]) as unknown as E);\n}\n\n// Whether a click event was a right click.\nexport function isRightClick(event: MouseEvent): boolean {\n\treturn event.button == 2;\n}\n\n// Converts from '#ffffff' --> 'rgba(255, 255, 255, alpha)'\nexport function hexToRgba(hex: string, alpha: number): string {\n\tif (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n\t\tlet parts = hex.substring(1).split('');\n\t\tif (parts.length == 3) {\n\t\t\tparts = [parts[0], parts[0], parts[1], parts[1], parts[2], parts[2]];\n\t\t}\n\t\tconst c: any = '0x' + parts.join('');\n\t\treturn 'rgba(' + [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',') + ',' + alpha + ')';\n\t}\n\tthrow new Error('Invalid hex color: ' + hex);\n}\n\nexport function camelToSnakeCase(str: string): string {\n\tlet result = str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n\tif (result.startsWith('_')) {\n\t\tresult = result.substring(1);\n\t}\n\treturn result;\n}\n\nexport function downloadJson(json: any, fileName: string) {\n\tdownloadString(JSON.stringify(json, null, 2), fileName);\n}\nexport function downloadString(data: string, fileName: string) {\n\tconst dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(data);\n\tconst downloadAnchorNode = document.createElement('a');\n\tdownloadAnchorNode.setAttribute(\"href\", dataStr);\n\tdownloadAnchorNode.setAttribute(\"download\", fileName);\n\tdocument.body.appendChild(downloadAnchorNode); // required for firefox\n\tdownloadAnchorNode.click();\n\tdownloadAnchorNode.remove();\n}\n\nexport function formatDeltaTextElem(elem: HTMLElement, before: number, after: number, precision: number, lowerIsBetter?: boolean, noColor?: boolean) {\n\tconst delta = after - before;\n\tlet deltaStr = delta.toFixed(precision);\n\tif (delta >= 0) {\n\t\tdeltaStr = '+' + deltaStr;\n\t}\n\telem.textContent = deltaStr;\n\n\tif (noColor || delta == 0) {\n\t\telem.classList.remove('positive');\n\t\telem.classList.remove('negative');\n\t} else if (delta > 0 != Boolean(lowerIsBetter)) {\n\t\telem.classList.remove('negative');\n\t\telem.classList.add('positive');\n\t} else {\n\t\telem.classList.remove('positive');\n\t\telem.classList.add('negative');\n\t}\n}\n\n// Returns all N pick K permutations of the elements in arr of size N.\nexport function permutations<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tif (k == 0) {\n\t\treturn [];\n\t} else if (k == 1) {\n\t\treturn arr.map(v => [v]);\n\t} else {\n\t\treturn arr.map((v, i) => {\n\t\t\tconst withoutThisElem = arr.slice();\n\t\t\twithoutThisElem.splice(i, 1);\n\t\t\tconst permutationsWithoutThisElem = permutations(withoutThisElem, k - 1);\n\t\t\treturn permutationsWithoutThisElem.map(perm => [v].concat(perm));\n\t\t}).flat();\n\t}\n}\n\n// Returns all N choose K combinations of the elements in arr of size N.\nexport function combinations<T>(arr: Array<T>, k: number, comparator?: (_a: T, _b: T) => number): Array<Array<T>> {\n\tconst perms = permutations(arr, k);\n\tconst sorted = perms.map(permutation => permutation.sort(comparator));\n\n\tconst equals: ((_a: T, _b: T) => boolean) = comparator ? ((a, b) => comparator(a, b) == 0) : ((a, b) => a == b);\n\treturn distinct(sorted, (permutationA, permutationB) => permutationA.every((elem, i) => equals(elem, permutationB[i])));\n}\n\n// Returns all N pick K permutations of the elements in arr of size N, allowing duplicates.\nexport function permutationsWithDups<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tif (k == 0) {\n\t\treturn [];\n\t} else if (k == 1) {\n\t\treturn arr.map(v => [v]);\n\t} else {\n\t\tconst smaller = permutationsWithDups(arr, k - 1);\n\t\treturn arr.map(v => {\n\t\t\treturn smaller.map(permutation => {\n\t\t\t\tconst newPerm = permutation.slice();\n\t\t\t\tnewPerm.push(v);\n\t\t\t\treturn newPerm;\n\t\t\t});\n\t\t}).flat();\n\t}\n}\n\n// Returns all N choose K combinations of the elements in arr of size N, allowing duplicates.\nexport function combinationsWithDups<T>(arr: Array<T>, k: number): Array<Array<T>> {\n\tconst perms = permutationsWithDups(arr, k);\n\tconst sorted = perms.map(permutation => permutation.sort());\n\treturn distinct(sorted, (permutationA, permutationB) => permutationA.every((elem, i) => elem == permutationB[i]));\n}\n\n// Converts a Uint8Array into a hex string.\nexport function buf2hex(data: Uint8Array): string {\n\treturn [...data]\n\t\t.map(x => x.toString(16).padStart(2, '0'))\n\t\t.join('');\n}\n\nconst randomStringChars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_+';\nexport function randomString(len?: number): string {\n\tlet str = '';\n\tconst strLen = len || 10;\n\tfor (let i = 0; i < strLen; i++) {\n\t\tstr += randomStringChars[Math.floor(Math.random() * randomStringChars.length)];\n\t}\n\treturn str;\n}\n\n// Allows replacement of stringified objects based on the key and path.\n// If handler returns a string, that string is used. Otherwise, the normal JSON.stringify result is returned.\nexport function jsonStringifyCustom(value: any, indent: number, handler: (value: any, path: Array<string>) => string | undefined | void): string {\n\tconst indentStr = ' '.repeat(indent);\n\treturn jsonStringifyCustomHelper(value, indentStr, [], handler);\n}\nfunction jsonStringifyCustomHelper(value: any, indentStr: string, path: Array<string>, handler: (value: any, path: Array<string>) => string | undefined | void): string {\n\tconst handlerResult = handler(value, path);\n\tif (handlerResult != null) {\n\t\treturn handlerResult;\n\t}\n\n\tif (!(value instanceof Object)) {\n\t\treturn JSON.stringify(value);\n\t} else if (value instanceof Array) {\n\t\tlet str = '[\\n';\n\t\tconst lines = value.map((e, i) => `${indentStr.repeat(path.length + 1)}${jsonStringifyCustomHelper(e, indentStr, path.slice().concat([i + '']), handler)}${i == value.length - 1 ? '' : ','}\\n`);\n\t\tstr += lines.join('');\n\t\tstr += indentStr.repeat(path.length) + ']';\n\t\treturn str;\n\t} else { // Object\n\t\tlet str = '{\\n';\n\t\tconst len = Object.keys(value).length;\n\t\tconst lines = Object.entries(value).map(([fieldKey, fieldValue], i) => `${indentStr.repeat(path.length + 1)}\"${fieldKey}\": ${jsonStringifyCustomHelper(fieldValue, indentStr, path.slice().concat([fieldKey]), handler)}${i == len - 1 ? '' : ','}\\n`);\n\t\tstr += lines.join('');\n\t\tstr += indentStr.repeat(path.length) + '}';\n\t\treturn str;\n\t}\n}\n\n// Pretty-prints the value in JSON form, but does not prettify (flattens) sub-values where handler returns true.\nexport function jsonStringifyWithFlattenedPaths(value: any, indent: number, handler: (value: any, path: Array<string>) => boolean): string {\n\treturn jsonStringifyCustom(value, indent, (value, path) => handler(value, path) ? JSON.stringify(value) : undefined);\n}\n\nexport function htmlDecode(input: string) {\n\tconst doc = new DOMParser().parseFromString(input, \"text/html\");\n\treturn doc.documentElement.textContent;\n}\n","import { REPO_NAME } from '../constants/other.js';\nimport { PlayerClass } from '../player_class.js';\nimport { PlayerClasses } from '../player_classes';\nimport { PlayerSpec } from '../player_spec.js';\nimport { PlayerSpecs } from '../player_specs';\nimport { Player, ResourceType } from '../proto/api.js';\nimport {\n\tClass,\n\tEnchantType,\n\tFaction,\n\tHandType,\n\tItemSlot,\n\tItemType,\n\tRace,\n\tRangedWeaponType,\n\tSpec,\n\tUnitReference,\n\tUnitReference_Type,\n\tWeaponType,\n} from '../proto/common.js';\nimport {\n\tBloodDeathKnight,\n\tBloodDeathKnight_Options,\n\tBloodDeathKnight_Rotation,\n\tDeathKnightOptions,\n\tDeathKnightTalents,\n\tFrostDeathKnight,\n\tFrostDeathKnight_Options,\n\tFrostDeathKnight_Rotation,\n\tUnholyDeathKnight,\n\tUnholyDeathKnight_Options,\n\tUnholyDeathKnight_Rotation,\n} from '../proto/death_knight.js';\nimport {\n\tBalanceDruid,\n\tBalanceDruid_Options,\n\tBalanceDruid_Rotation,\n\tDruidOptions,\n\tDruidTalents,\n\tFeralDruid,\n\tFeralDruid_Options,\n\tFeralDruid_Rotation,\n\tRestorationDruid,\n\tRestorationDruid_Options,\n\tRestorationDruid_Rotation,\n} from '../proto/druid.js';\nimport {\n\tBeastMasteryHunter,\n\tBeastMasteryHunter_Options,\n\tBeastMasteryHunter_Rotation,\n\tHunterOptions,\n\tHunterTalents,\n\tMarksmanshipHunter,\n\tMarksmanshipHunter_Options,\n\tMarksmanshipHunter_Rotation,\n\tSurvivalHunter,\n\tSurvivalHunter_Options,\n\tSurvivalHunter_Rotation,\n} from '../proto/hunter.js';\nimport {\n\tArcaneMage,\n\tArcaneMage_Options,\n\tArcaneMage_Rotation,\n\tFireMage,\n\tFireMage_Options,\n\tFireMage_Rotation,\n\tFrostMage,\n\tFrostMage_Options,\n\tFrostMage_Rotation,\n\tMageOptions,\n\tMageTalents,\n} from '../proto/mage.js';\nimport {\n\tBlessings,\n\tHolyPaladin,\n\tHolyPaladin_Options,\n\tHolyPaladin_Rotation,\n\tPaladinOptions,\n\tPaladinTalents,\n\tProtectionPaladin,\n\tProtectionPaladin_Options,\n\tProtectionPaladin_Rotation,\n\tRetributionPaladin,\n\tRetributionPaladin_Options,\n\tRetributionPaladin_Rotation,\n} from '../proto/paladin.js';\nimport {\n\tDisciplinePriest,\n\tDisciplinePriest_Options,\n\tDisciplinePriest_Rotation,\n\tHolyPriest,\n\tHolyPriest_Options,\n\tHolyPriest_Rotation,\n\tPriestOptions,\n\tPriestTalents,\n\tShadowPriest,\n\tShadowPriest_Options,\n\tShadowPriest_Rotation,\n} from '../proto/priest.js';\nimport {\n\tAssassinationRogue,\n\tAssassinationRogue_Options,\n\tAssassinationRogue_Rotation,\n\tCombatRogue,\n\tCombatRogue_Options,\n\tCombatRogue_Rotation,\n\tRogueOptions,\n\tRogueTalents,\n\tSubtletyRogue,\n\tSubtletyRogue_Options,\n\tSubtletyRogue_Rotation,\n} from '../proto/rogue.js';\nimport {\n\tElementalShaman,\n\tElementalShaman_Options,\n\tElementalShaman_Rotation,\n\tEnhancementShaman,\n\tEnhancementShaman_Options,\n\tEnhancementShaman_Rotation,\n\tRestorationShaman,\n\tRestorationShaman_Options,\n\tRestorationShaman_Rotation,\n\tShamanOptions,\n\tShamanTalents,\n} from '../proto/shaman.js';\nimport { BlessingsAssignment, BlessingsAssignments, UIEnchant as Enchant, UIGem as Gem, UIItem as Item } from '../proto/ui.js';\nimport {\n\tAfflictionWarlock,\n\tAfflictionWarlock_Options,\n\tAfflictionWarlock_Rotation,\n\tDemonologyWarlock,\n\tDemonologyWarlock_Options,\n\tDemonologyWarlock_Rotation,\n\tDestructionWarlock,\n\tDestructionWarlock_Options,\n\tDestructionWarlock_Rotation,\n\tWarlockOptions,\n\tWarlockTalents,\n} from '../proto/warlock.js';\nimport {\n\tArmsWarrior,\n\tArmsWarrior_Options,\n\tArmsWarrior_Rotation,\n\tFuryWarrior,\n\tFuryWarrior_Options,\n\tFuryWarrior_Rotation,\n\tProtectionWarrior,\n\tProtectionWarrior_Options,\n\tProtectionWarrior_Rotation,\n\tWarriorOptions,\n\tWarriorTalents,\n} from '../proto/warrior.js';\nimport { getEnumValues, intersection, maxIndex, sum } from '../utils.js';\nimport { Stats } from './stats.js';\n\nexport const NUM_SPECS = getEnumValues(Spec).length;\n\nexport const raidSimIcon = '/cata/assets/img/raid_icon.png';\nexport const raidSimLabel = 'Full Raid Sim';\n\n// Converts '1231321-12313123-0' to [40, 21, 0].\nexport function getTalentTreePoints(talentsString: string): Array<number> {\n\tconst trees = talentsString.split('-');\n\tif (trees.length == 2) {\n\t\ttrees.push('0');\n\t}\n\treturn trees.map(tree => sum([...tree].map(char => parseInt(char) || 0)));\n}\n\nexport function getTalentPoints(talentsString: string): number {\n\treturn sum(getTalentTreePoints(talentsString));\n}\n\n// Returns the index of the talent tree (0, 1, or 2) that has the most points.\nexport function getTalentTree(talentsString: string): number {\n\tconst points = getTalentTreePoints(talentsString);\n\treturn maxIndex(points) || 0;\n}\n\n// Gets the URL for the individual sim corresponding to the given spec.\nexport function getSpecSiteUrl(classString: string, specString: string): string {\n\tconst specSiteUrlTemplate = new URL(`${window.location.protocol}//${window.location.host}/${REPO_NAME}/CLASS/SPEC/`).toString();\n\treturn specSiteUrlTemplate.replace('CLASS', classString).replace('SPEC', specString);\n}\nexport const raidSimSiteUrl = new URL(`${window.location.protocol}//${window.location.host}/${REPO_NAME}/raid/`).toString();\n\nexport function textCssClassForClass<ClassType extends Class>(playerClass: PlayerClass<ClassType>): string {\n\treturn `text-${PlayerClasses.getCssClass(playerClass)}`;\n}\nexport function textCssClassForSpec<SpecType extends Spec>(playerSpec: PlayerSpec<SpecType>): string {\n\treturn textCssClassForClass(PlayerSpecs.getPlayerClass(playerSpec));\n}\n\n// Placeholder classes to fill the Unknown Spec Type Functions entry below\ntype UnknownSpecs = Spec.SpecUnknown;\nclass UnknownRotation {\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\tconstructor() {}\n}\nclass UnknownTalents {\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\tconstructor() {}\n}\nclass UnknownClassOptions {\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\tconstructor() {}\n}\nclass UnknownSpecOptions {\n\tclassOptions: UnknownClassOptions;\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\tconstructor() {\n\t\tthis.classOptions = new UnknownClassOptions();\n\t}\n}\n\nexport type DeathKnightSpecs = Spec.SpecBloodDeathKnight | Spec.SpecFrostDeathKnight | Spec.SpecUnholyDeathKnight;\nexport type DruidSpecs = Spec.SpecBalanceDruid | Spec.SpecFeralDruid | Spec.SpecRestorationDruid;\nexport type HunterSpecs = Spec.SpecBeastMasteryHunter | Spec.SpecMarksmanshipHunter | Spec.SpecSurvivalHunter;\nexport type MageSpecs = Spec.SpecArcaneMage | Spec.SpecFireMage | Spec.SpecFrostMage;\nexport type PaladinSpecs = Spec.SpecHolyPaladin | Spec.SpecRetributionPaladin | Spec.SpecProtectionPaladin;\nexport type PriestSpecs = Spec.SpecDisciplinePriest | Spec.SpecHolyPriest | Spec.SpecShadowPriest;\nexport type RogueSpecs = Spec.SpecAssassinationRogue | Spec.SpecCombatRogue | Spec.SpecSubtletyRogue;\nexport type ShamanSpecs = Spec.SpecElementalShaman | Spec.SpecEnhancementShaman | Spec.SpecRestorationShaman;\nexport type WarlockSpecs = Spec.SpecAfflictionWarlock | Spec.SpecDemonologyWarlock | Spec.SpecDestructionWarlock;\nexport type WarriorSpecs = Spec.SpecArmsWarrior | Spec.SpecFuryWarrior | Spec.SpecProtectionWarrior;\n\nexport type ClassSpecs<T extends Class> = T extends Class.ClassDeathKnight\n\t? DeathKnightSpecs\n\t: T extends Class.ClassDruid\n\t? DruidSpecs\n\t: T extends Class.ClassHunter\n\t? HunterSpecs\n\t: T extends Class.ClassMage\n\t? MageSpecs\n\t: T extends Class.ClassPaladin\n\t? PaladinSpecs\n\t: T extends Class.ClassPriest\n\t? PriestSpecs\n\t: T extends Class.ClassRogue\n\t? RogueSpecs\n\t: T extends Class.ClassShaman\n\t? ShamanSpecs\n\t: T extends Class.ClassWarlock\n\t? WarlockSpecs\n\t: T extends Class.ClassWarrior\n\t? WarriorSpecs\n\t: // Should never reach this case\n\t  UnknownSpecs;\n\nexport type SpecClasses<T extends Spec> = T extends DeathKnightSpecs\n\t? Class.ClassDeathKnight\n\t: // Druid\n\tT extends DruidSpecs\n\t? Class.ClassDruid\n\t: // Hunter\n\tT extends HunterSpecs\n\t? Class.ClassHunter\n\t: // Mage\n\tT extends MageSpecs\n\t? Class.ClassMage\n\t: // Paladin\n\tT extends PaladinSpecs\n\t? Class.ClassPaladin\n\t: // Priest\n\tT extends PriestSpecs\n\t? Class.ClassPriest\n\t: // Rogue\n\tT extends RogueSpecs\n\t? Class.ClassRogue\n\t: // Shaman\n\tT extends ShamanSpecs\n\t? Class.ClassShaman\n\t: // Warlock\n\tT extends WarlockSpecs\n\t? Class.ClassWarlock\n\t: // Warrior\n\tT extends WarriorSpecs\n\t? Class.ClassWarrior\n\t: // Should never reach this case\n\t  Class.ClassUnknown;\n\nexport type SpecRotation<T extends Spec> =\n\t// Death Knight\n\tT extends Spec.SpecBloodDeathKnight\n\t\t? BloodDeathKnight_Rotation\n\t\t: T extends Spec.SpecFrostDeathKnight\n\t\t? FrostDeathKnight_Rotation\n\t\t: T extends Spec.SpecUnholyDeathKnight\n\t\t? UnholyDeathKnight_Rotation\n\t\t: // Druid\n\t\tT extends Spec.SpecBalanceDruid\n\t\t? BalanceDruid_Rotation\n\t\t: T extends Spec.SpecFeralDruid\n\t\t? FeralDruid_Rotation\n\t\t: T extends Spec.SpecRestorationDruid\n\t\t? RestorationDruid_Rotation\n\t\t: // Hunter\n\t\tT extends Spec.SpecBeastMasteryHunter\n\t\t? BeastMasteryHunter_Rotation\n\t\t: T extends Spec.SpecMarksmanshipHunter\n\t\t? MarksmanshipHunter_Rotation\n\t\t: T extends Spec.SpecSurvivalHunter\n\t\t? SurvivalHunter_Rotation\n\t\t: // Mage\n\t\tT extends Spec.SpecArcaneMage\n\t\t? ArcaneMage_Rotation\n\t\t: T extends Spec.SpecFireMage\n\t\t? FireMage_Rotation\n\t\t: T extends Spec.SpecFrostMage\n\t\t? FrostMage_Rotation\n\t\t: // Paladin\n\t\tT extends Spec.SpecHolyPaladin\n\t\t? HolyPaladin_Rotation\n\t\t: T extends Spec.SpecProtectionPaladin\n\t\t? ProtectionPaladin_Rotation\n\t\t: T extends Spec.SpecRetributionPaladin\n\t\t? RetributionPaladin_Rotation\n\t\t: // Priest\n\t\tT extends Spec.SpecDisciplinePriest\n\t\t? DisciplinePriest_Rotation\n\t\t: T extends Spec.SpecHolyPriest\n\t\t? HolyPriest_Rotation\n\t\t: T extends Spec.SpecShadowPriest\n\t\t? ShadowPriest_Rotation\n\t\t: // Rogue\n\t\tT extends Spec.SpecAssassinationRogue\n\t\t? AssassinationRogue_Rotation\n\t\t: T extends Spec.SpecCombatRogue\n\t\t? CombatRogue_Rotation\n\t\t: T extends Spec.SpecSubtletyRogue\n\t\t? SubtletyRogue_Rotation\n\t\t: // Shaman\n\t\tT extends Spec.SpecElementalShaman\n\t\t? ElementalShaman_Rotation\n\t\t: T extends Spec.SpecEnhancementShaman\n\t\t? EnhancementShaman_Rotation\n\t\t: T extends Spec.SpecRestorationShaman\n\t\t? RestorationShaman_Rotation\n\t\t: // Warlock\n\t\tT extends Spec.SpecAfflictionWarlock\n\t\t? AfflictionWarlock_Rotation\n\t\t: T extends Spec.SpecDemonologyWarlock\n\t\t? DemonologyWarlock_Rotation\n\t\t: T extends Spec.SpecDestructionWarlock\n\t\t? DestructionWarlock_Rotation\n\t\t: // Warrior\n\t\tT extends Spec.SpecArmsWarrior\n\t\t? ArmsWarrior_Rotation\n\t\t: T extends Spec.SpecFuryWarrior\n\t\t? FuryWarrior_Rotation\n\t\t: T extends Spec.SpecProtectionWarrior\n\t\t? ProtectionWarrior_Rotation\n\t\t: // Should never reach this case\n\t\t  UnknownRotation;\n\nexport type SpecTalents<T extends Spec> =\n\t// Death Knight\n\tT extends DeathKnightSpecs\n\t\t? DeathKnightTalents\n\t\t: // Druid\n\t\tT extends DruidSpecs\n\t\t? DruidTalents\n\t\t: // Hunter\n\t\tT extends HunterSpecs\n\t\t? HunterTalents\n\t\t: // Mage\n\t\tT extends MageSpecs\n\t\t? MageTalents\n\t\t: // Paladin\n\t\tT extends PaladinSpecs\n\t\t? PaladinTalents\n\t\t: // Priest\n\t\tT extends PriestSpecs\n\t\t? PriestTalents\n\t\t: // Rogue\n\t\tT extends RogueSpecs\n\t\t? RogueTalents\n\t\t: // Shaman\n\t\tT extends ShamanSpecs\n\t\t? ShamanTalents\n\t\t: // Warlock\n\t\tT extends WarlockSpecs\n\t\t? WarlockTalents\n\t\t: // Warrior\n\t\tT extends WarriorSpecs\n\t\t? WarriorTalents\n\t\t: // Should never reach this case\n\t\t  UnknownTalents;\n\nexport type ClassOptions<T extends Spec> =\n\t// Death Knight\n\tT extends DeathKnightSpecs\n\t\t? DeathKnightOptions\n\t\t: // Druid\n\t\tT extends DruidSpecs\n\t\t? DruidOptions\n\t\t: // Hunter\n\t\tT extends HunterSpecs\n\t\t? HunterOptions\n\t\t: // Mage\n\t\tT extends MageSpecs\n\t\t? MageOptions\n\t\t: // Paladin\n\t\tT extends PaladinSpecs\n\t\t? PaladinOptions\n\t\t: // Priest\n\t\tT extends PriestSpecs\n\t\t? PriestOptions\n\t\t: // Rogue\n\t\tT extends RogueSpecs\n\t\t? RogueOptions\n\t\t: // Shaman\n\t\tT extends ShamanSpecs\n\t\t? ShamanOptions\n\t\t: // Warlock\n\t\tT extends WarlockSpecs\n\t\t? WarlockOptions\n\t\t: // Warrior\n\t\tT extends WarriorSpecs\n\t\t? WarriorOptions\n\t\t: // Should never reach this case\n\t\t  UnknownClassOptions;\n\nexport type SpecOptions<T extends Spec> =\n\t// Death Knight\n\tT extends Spec.SpecBloodDeathKnight\n\t\t? BloodDeathKnight_Options\n\t\t: T extends Spec.SpecFrostDeathKnight\n\t\t? FrostDeathKnight_Options\n\t\t: T extends Spec.SpecUnholyDeathKnight\n\t\t? UnholyDeathKnight_Options\n\t\t: // Druid\n\t\tT extends Spec.SpecBalanceDruid\n\t\t? BalanceDruid_Options\n\t\t: T extends Spec.SpecFeralDruid\n\t\t? FeralDruid_Options\n\t\t: T extends Spec.SpecRestorationDruid\n\t\t? RestorationDruid_Options\n\t\t: // Hunter\n\t\tT extends Spec.SpecBeastMasteryHunter\n\t\t? BeastMasteryHunter_Options\n\t\t: T extends Spec.SpecMarksmanshipHunter\n\t\t? MarksmanshipHunter_Options\n\t\t: T extends Spec.SpecSurvivalHunter\n\t\t? SurvivalHunter_Options\n\t\t: // Mage\n\t\tT extends Spec.SpecArcaneMage\n\t\t? ArcaneMage_Options\n\t\t: T extends Spec.SpecFireMage\n\t\t? FireMage_Options\n\t\t: T extends Spec.SpecFrostMage\n\t\t? FrostMage_Options\n\t\t: // Paladin\n\t\tT extends Spec.SpecHolyPaladin\n\t\t? HolyPaladin_Options\n\t\t: T extends Spec.SpecProtectionPaladin\n\t\t? ProtectionPaladin_Options\n\t\t: T extends Spec.SpecRetributionPaladin\n\t\t? RetributionPaladin_Options\n\t\t: // Priest\n\t\tT extends Spec.SpecDisciplinePriest\n\t\t? DisciplinePriest_Options\n\t\t: T extends Spec.SpecHolyPriest\n\t\t? HolyPriest_Options\n\t\t: T extends Spec.SpecShadowPriest\n\t\t? ShadowPriest_Options\n\t\t: // Rogue\n\t\tT extends Spec.SpecAssassinationRogue\n\t\t? AssassinationRogue_Options\n\t\t: T extends Spec.SpecCombatRogue\n\t\t? CombatRogue_Options\n\t\t: T extends Spec.SpecSubtletyRogue\n\t\t? SubtletyRogue_Options\n\t\t: // Shaman\n\t\tT extends Spec.SpecElementalShaman\n\t\t? ElementalShaman_Options\n\t\t: T extends Spec.SpecEnhancementShaman\n\t\t? EnhancementShaman_Options\n\t\t: T extends Spec.SpecRestorationShaman\n\t\t? RestorationShaman_Options\n\t\t: // Warlock\n\t\tT extends Spec.SpecAfflictionWarlock\n\t\t? AfflictionWarlock_Options\n\t\t: T extends Spec.SpecDemonologyWarlock\n\t\t? DemonologyWarlock_Options\n\t\t: T extends Spec.SpecDestructionWarlock\n\t\t? DestructionWarlock_Options\n\t\t: // Warrior\n\t\tT extends Spec.SpecArmsWarrior\n\t\t? ArmsWarrior_Options\n\t\t: T extends Spec.SpecFuryWarrior\n\t\t? FuryWarrior_Options\n\t\t: T extends Spec.SpecProtectionWarrior\n\t\t? ProtectionWarrior_Options\n\t\t: // Should never reach this case\n\t\t  UnknownSpecOptions;\n\nexport type SpecType<T extends Spec> =\n\t// Death Knight\n\tT extends Spec.SpecBloodDeathKnight\n\t\t? BloodDeathKnight\n\t\t: T extends Spec.SpecFrostDeathKnight\n\t\t? FrostDeathKnight\n\t\t: T extends Spec.SpecUnholyDeathKnight\n\t\t? UnholyDeathKnight\n\t\t: // Druid\n\t\tT extends Spec.SpecBalanceDruid\n\t\t? BalanceDruid\n\t\t: T extends Spec.SpecFeralDruid\n\t\t? FeralDruid\n\t\t: T extends Spec.SpecRestorationDruid\n\t\t? RestorationDruid\n\t\t: // Hunter\n\t\tT extends Spec.SpecBeastMasteryHunter\n\t\t? BeastMasteryHunter\n\t\t: T extends Spec.SpecMarksmanshipHunter\n\t\t? MarksmanshipHunter\n\t\t: T extends Spec.SpecSurvivalHunter\n\t\t? SurvivalHunter\n\t\t: // Mage\n\t\tT extends Spec.SpecArcaneMage\n\t\t? ArcaneMage\n\t\t: T extends Spec.SpecFireMage\n\t\t? FireMage\n\t\t: T extends Spec.SpecFrostMage\n\t\t? FrostMage\n\t\t: // Paladin\n\t\tT extends Spec.SpecHolyPaladin\n\t\t? HolyPaladin\n\t\t: T extends Spec.SpecProtectionPaladin\n\t\t? ProtectionPaladin\n\t\t: T extends Spec.SpecRetributionPaladin\n\t\t? RetributionPaladin\n\t\t: // Priest\n\t\tT extends Spec.SpecDisciplinePriest\n\t\t? DisciplinePriest\n\t\t: T extends Spec.SpecHolyPriest\n\t\t? HolyPriest\n\t\t: T extends Spec.SpecShadowPriest\n\t\t? ShadowPriest\n\t\t: // Rogue\n\t\tT extends Spec.SpecAssassinationRogue\n\t\t? AssassinationRogue\n\t\t: T extends Spec.SpecCombatRogue\n\t\t? CombatRogue\n\t\t: T extends Spec.SpecSubtletyRogue\n\t\t? SubtletyRogue\n\t\t: // Shaman\n\t\tT extends Spec.SpecElementalShaman\n\t\t? ElementalShaman\n\t\t: T extends Spec.SpecEnhancementShaman\n\t\t? EnhancementShaman\n\t\t: T extends Spec.SpecRestorationShaman\n\t\t? RestorationShaman\n\t\t: // Warlock\n\t\tT extends Spec.SpecAfflictionWarlock\n\t\t? AfflictionWarlock\n\t\t: T extends Spec.SpecDemonologyWarlock\n\t\t? DemonologyWarlock\n\t\t: T extends Spec.SpecDestructionWarlock\n\t\t? DestructionWarlock\n\t\t: // Warrior\n\t\tT extends Spec.SpecArmsWarrior\n\t\t? ArmsWarrior\n\t\t: T extends Spec.SpecFuryWarrior\n\t\t? FuryWarrior\n\t\t: T extends Spec.SpecProtectionWarrior\n\t\t? ProtectionWarrior\n\t\t: // Should never reach this case\n\t\t  Spec.SpecUnknown;\n\nexport type SpecTypeFunctions<SpecType extends Spec> = {\n\trotationCreate: () => SpecRotation<SpecType>;\n\trotationEquals: (a: SpecRotation<SpecType>, b: SpecRotation<SpecType>) => boolean;\n\trotationCopy: (a: SpecRotation<SpecType>) => SpecRotation<SpecType>;\n\trotationToJson: (a: SpecRotation<SpecType>) => any;\n\trotationFromJson: (obj: any) => SpecRotation<SpecType>;\n\n\ttalentsCreate: () => SpecTalents<SpecType>;\n\ttalentsEquals: (a: SpecTalents<SpecType>, b: SpecTalents<SpecType>) => boolean;\n\ttalentsCopy: (a: SpecTalents<SpecType>) => SpecTalents<SpecType>;\n\ttalentsToJson: (a: SpecTalents<SpecType>) => any;\n\ttalentsFromJson: (obj: any) => SpecTalents<SpecType>;\n\n\toptionsCreate: () => SpecOptions<SpecType>;\n\toptionsEquals: (a: SpecOptions<SpecType>, b: SpecOptions<SpecType>) => boolean;\n\toptionsCopy: (a: SpecOptions<SpecType>) => SpecOptions<SpecType>;\n\toptionsToJson: (a: SpecOptions<SpecType>) => any;\n\toptionsFromJson: (obj: any) => SpecOptions<SpecType>;\n\toptionsFromPlayer: (player: Player) => SpecOptions<SpecType>;\n};\n\nexport const specTypeFunctions: Record<Spec, SpecTypeFunctions<any>> = {\n\t[Spec.SpecUnknown]: {\n\t\trotationCreate: () => new UnknownRotation(),\n\t\trotationEquals: (_a, _b) => true,\n\t\trotationCopy: _a => new UnknownRotation(),\n\t\trotationToJson: _a => undefined,\n\t\trotationFromJson: _obj => new UnknownRotation(),\n\n\t\ttalentsCreate: () => new UnknownTalents(),\n\t\ttalentsEquals: (_a, _b) => true,\n\t\ttalentsCopy: _a => new UnknownTalents(),\n\t\ttalentsToJson: _a => undefined,\n\t\ttalentsFromJson: _obj => new UnknownTalents(),\n\n\t\toptionsCreate: () => new UnknownSpecOptions(),\n\t\toptionsEquals: (_a, _b) => true,\n\t\toptionsCopy: _a => new UnknownSpecOptions(),\n\t\toptionsToJson: _a => undefined,\n\t\toptionsFromJson: _obj => new UnknownSpecOptions(),\n\t\toptionsFromPlayer: _player => new UnknownSpecOptions(),\n\t},\n\n\t// Death Knight\n\t[Spec.SpecBloodDeathKnight]: {\n\t\trotationCreate: () => BloodDeathKnight_Rotation.create(),\n\t\trotationEquals: (a, b) => BloodDeathKnight_Rotation.equals(a as BloodDeathKnight_Rotation, b as BloodDeathKnight_Rotation),\n\t\trotationCopy: a => BloodDeathKnight_Rotation.clone(a as BloodDeathKnight_Rotation),\n\t\trotationToJson: a => BloodDeathKnight_Rotation.toJson(a as BloodDeathKnight_Rotation),\n\t\trotationFromJson: obj => BloodDeathKnight_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => DeathKnightTalents.create(),\n\t\ttalentsEquals: (a, b) => DeathKnightTalents.equals(a as DeathKnightTalents, b as DeathKnightTalents),\n\t\ttalentsCopy: a => DeathKnightTalents.clone(a as DeathKnightTalents),\n\t\ttalentsToJson: a => DeathKnightTalents.toJson(a as DeathKnightTalents),\n\t\ttalentsFromJson: obj => DeathKnightTalents.fromJson(obj),\n\n\t\toptionsCreate: () => BloodDeathKnight_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => BloodDeathKnight_Options.equals(a as BloodDeathKnight_Options, b as BloodDeathKnight_Options),\n\t\toptionsCopy: a => BloodDeathKnight_Options.clone(a as BloodDeathKnight_Options),\n\t\toptionsToJson: a => BloodDeathKnight_Options.toJson(a as BloodDeathKnight_Options),\n\t\toptionsFromJson: obj => BloodDeathKnight_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'bloodDeathKnight'\n\t\t\t\t? player.spec.bloodDeathKnight.options || BloodDeathKnight_Options.create()\n\t\t\t\t: BloodDeathKnight_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecFrostDeathKnight]: {\n\t\trotationCreate: () => FrostDeathKnight_Rotation.create(),\n\t\trotationEquals: (a, b) => FrostDeathKnight_Rotation.equals(a as FrostDeathKnight_Rotation, b as FrostDeathKnight_Rotation),\n\t\trotationCopy: a => FrostDeathKnight_Rotation.clone(a as FrostDeathKnight_Rotation),\n\t\trotationToJson: a => FrostDeathKnight_Rotation.toJson(a as FrostDeathKnight_Rotation),\n\t\trotationFromJson: obj => FrostDeathKnight_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => DeathKnightTalents.create(),\n\t\ttalentsEquals: (a, b) => DeathKnightTalents.equals(a as DeathKnightTalents, b as DeathKnightTalents),\n\t\ttalentsCopy: a => DeathKnightTalents.clone(a as DeathKnightTalents),\n\t\ttalentsToJson: a => DeathKnightTalents.toJson(a as DeathKnightTalents),\n\t\ttalentsFromJson: obj => DeathKnightTalents.fromJson(obj),\n\n\t\toptionsCreate: () => FrostDeathKnight_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => FrostDeathKnight_Options.equals(a as FrostDeathKnight_Options, b as FrostDeathKnight_Options),\n\t\toptionsCopy: a => FrostDeathKnight_Options.clone(a as FrostDeathKnight_Options),\n\t\toptionsToJson: a => FrostDeathKnight_Options.toJson(a as FrostDeathKnight_Options),\n\t\toptionsFromJson: obj => FrostDeathKnight_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'frostDeathKnight'\n\t\t\t\t? player.spec.frostDeathKnight.options || FrostDeathKnight_Options.create()\n\t\t\t\t: FrostDeathKnight_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecUnholyDeathKnight]: {\n\t\trotationCreate: () => UnholyDeathKnight_Rotation.create(),\n\t\trotationEquals: (a, b) => UnholyDeathKnight_Rotation.equals(a as UnholyDeathKnight_Rotation, b as UnholyDeathKnight_Rotation),\n\t\trotationCopy: a => UnholyDeathKnight_Rotation.clone(a as UnholyDeathKnight_Rotation),\n\t\trotationToJson: a => UnholyDeathKnight_Rotation.toJson(a as UnholyDeathKnight_Rotation),\n\t\trotationFromJson: obj => UnholyDeathKnight_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => DeathKnightTalents.create(),\n\t\ttalentsEquals: (a, b) => DeathKnightTalents.equals(a as DeathKnightTalents, b as DeathKnightTalents),\n\t\ttalentsCopy: a => DeathKnightTalents.clone(a as DeathKnightTalents),\n\t\ttalentsToJson: a => DeathKnightTalents.toJson(a as DeathKnightTalents),\n\t\ttalentsFromJson: obj => DeathKnightTalents.fromJson(obj),\n\n\t\toptionsCreate: () => UnholyDeathKnight_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => UnholyDeathKnight_Options.equals(a as UnholyDeathKnight_Options, b as UnholyDeathKnight_Options),\n\t\toptionsCopy: a => UnholyDeathKnight_Options.clone(a as UnholyDeathKnight_Options),\n\t\toptionsToJson: a => UnholyDeathKnight_Options.toJson(a as UnholyDeathKnight_Options),\n\t\toptionsFromJson: obj => UnholyDeathKnight_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'unholyDeathKnight'\n\t\t\t\t? player.spec.unholyDeathKnight.options || UnholyDeathKnight_Options.create()\n\t\t\t\t: UnholyDeathKnight_Options.create({ classOptions: {} }),\n\t},\n\t// Druid\n\t[Spec.SpecBalanceDruid]: {\n\t\trotationCreate: () => BalanceDruid_Rotation.create(),\n\t\trotationEquals: (a, b) => BalanceDruid_Rotation.equals(a as BalanceDruid_Rotation, b as BalanceDruid_Rotation),\n\t\trotationCopy: a => BalanceDruid_Rotation.clone(a as BalanceDruid_Rotation),\n\t\trotationToJson: a => BalanceDruid_Rotation.toJson(a as BalanceDruid_Rotation),\n\t\trotationFromJson: obj => BalanceDruid_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => DruidTalents.create(),\n\t\ttalentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n\t\ttalentsCopy: a => DruidTalents.clone(a as DruidTalents),\n\t\ttalentsToJson: a => DruidTalents.toJson(a as DruidTalents),\n\t\ttalentsFromJson: obj => DruidTalents.fromJson(obj),\n\n\t\toptionsCreate: () => BalanceDruid_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => BalanceDruid_Options.equals(a as BalanceDruid_Options, b as BalanceDruid_Options),\n\t\toptionsCopy: a => BalanceDruid_Options.clone(a as BalanceDruid_Options),\n\t\toptionsToJson: a => BalanceDruid_Options.toJson(a as BalanceDruid_Options),\n\t\toptionsFromJson: obj => BalanceDruid_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'balanceDruid'\n\t\t\t\t? player.spec.balanceDruid.options || BalanceDruid_Options.create()\n\t\t\t\t: BalanceDruid_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecFeralDruid]: {\n\t\trotationCreate: () => FeralDruid_Rotation.create(),\n\t\trotationEquals: (a, b) => FeralDruid_Rotation.equals(a as FeralDruid_Rotation, b as FeralDruid_Rotation),\n\t\trotationCopy: a => FeralDruid_Rotation.clone(a as FeralDruid_Rotation),\n\t\trotationToJson: a => FeralDruid_Rotation.toJson(a as FeralDruid_Rotation),\n\t\trotationFromJson: obj => FeralDruid_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => DruidTalents.create(),\n\t\ttalentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n\t\ttalentsCopy: a => DruidTalents.clone(a as DruidTalents),\n\t\ttalentsToJson: a => DruidTalents.toJson(a as DruidTalents),\n\t\ttalentsFromJson: obj => DruidTalents.fromJson(obj),\n\n\t\toptionsCreate: () => FeralDruid_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => FeralDruid_Options.equals(a as FeralDruid_Options, b as FeralDruid_Options),\n\t\toptionsCopy: a => FeralDruid_Options.clone(a as FeralDruid_Options),\n\t\toptionsToJson: a => FeralDruid_Options.toJson(a as FeralDruid_Options),\n\t\toptionsFromJson: obj => FeralDruid_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'feralDruid'\n\t\t\t\t? player.spec.feralDruid.options || FeralDruid_Options.create()\n\t\t\t\t: FeralDruid_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecRestorationDruid]: {\n\t\trotationCreate: () => RestorationDruid_Rotation.create(),\n\t\trotationEquals: (a, b) => RestorationDruid_Rotation.equals(a as RestorationDruid_Rotation, b as RestorationDruid_Rotation),\n\t\trotationCopy: a => RestorationDruid_Rotation.clone(a as RestorationDruid_Rotation),\n\t\trotationToJson: a => RestorationDruid_Rotation.toJson(a as RestorationDruid_Rotation),\n\t\trotationFromJson: obj => RestorationDruid_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => DruidTalents.create(),\n\t\ttalentsEquals: (a, b) => DruidTalents.equals(a as DruidTalents, b as DruidTalents),\n\t\ttalentsCopy: a => DruidTalents.clone(a as DruidTalents),\n\t\ttalentsToJson: a => DruidTalents.toJson(a as DruidTalents),\n\t\ttalentsFromJson: obj => DruidTalents.fromJson(obj),\n\n\t\toptionsCreate: () => RestorationDruid_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => RestorationDruid_Options.equals(a as RestorationDruid_Options, b as RestorationDruid_Options),\n\t\toptionsCopy: a => RestorationDruid_Options.clone(a as RestorationDruid_Options),\n\t\toptionsToJson: a => RestorationDruid_Options.toJson(a as RestorationDruid_Options),\n\t\toptionsFromJson: obj => RestorationDruid_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'restorationDruid'\n\t\t\t\t? player.spec.restorationDruid.options || RestorationDruid_Options.create()\n\t\t\t\t: RestorationDruid_Options.create({ classOptions: {} }),\n\t},\n\t// Hunter\n\t[Spec.SpecBeastMasteryHunter]: {\n\t\trotationCreate: () => BeastMasteryHunter_Rotation.create(),\n\t\trotationEquals: (a, b) => BeastMasteryHunter_Rotation.equals(a as BeastMasteryHunter_Rotation, b as BeastMasteryHunter_Rotation),\n\t\trotationCopy: a => BeastMasteryHunter_Rotation.clone(a as BeastMasteryHunter_Rotation),\n\t\trotationToJson: a => BeastMasteryHunter_Rotation.toJson(a as BeastMasteryHunter_Rotation),\n\t\trotationFromJson: obj => BeastMasteryHunter_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => HunterTalents.create(),\n\t\ttalentsEquals: (a, b) => HunterTalents.equals(a as HunterTalents, b as HunterTalents),\n\t\ttalentsCopy: a => HunterTalents.clone(a as HunterTalents),\n\t\ttalentsToJson: a => HunterTalents.toJson(a as HunterTalents),\n\t\ttalentsFromJson: obj => HunterTalents.fromJson(obj),\n\n\t\toptionsCreate: () => BeastMasteryHunter_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => BeastMasteryHunter_Options.equals(a as BeastMasteryHunter_Options, b as BeastMasteryHunter_Options),\n\t\toptionsCopy: a => BeastMasteryHunter_Options.clone(a as BeastMasteryHunter_Options),\n\t\toptionsToJson: a => BeastMasteryHunter_Options.toJson(a as BeastMasteryHunter_Options),\n\t\toptionsFromJson: obj => BeastMasteryHunter_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'beastMasteryHunter'\n\t\t\t\t? player.spec.beastMasteryHunter.options || BeastMasteryHunter_Options.create()\n\t\t\t\t: BeastMasteryHunter_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecMarksmanshipHunter]: {\n\t\trotationCreate: () => MarksmanshipHunter_Rotation.create(),\n\t\trotationEquals: (a, b) => MarksmanshipHunter_Rotation.equals(a as MarksmanshipHunter_Rotation, b as MarksmanshipHunter_Rotation),\n\t\trotationCopy: a => MarksmanshipHunter_Rotation.clone(a as MarksmanshipHunter_Rotation),\n\t\trotationToJson: a => MarksmanshipHunter_Rotation.toJson(a as MarksmanshipHunter_Rotation),\n\t\trotationFromJson: obj => MarksmanshipHunter_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => HunterTalents.create(),\n\t\ttalentsEquals: (a, b) => HunterTalents.equals(a as HunterTalents, b as HunterTalents),\n\t\ttalentsCopy: a => HunterTalents.clone(a as HunterTalents),\n\t\ttalentsToJson: a => HunterTalents.toJson(a as HunterTalents),\n\t\ttalentsFromJson: obj => HunterTalents.fromJson(obj),\n\n\t\toptionsCreate: () => MarksmanshipHunter_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => MarksmanshipHunter_Options.equals(a as MarksmanshipHunter_Options, b as MarksmanshipHunter_Options),\n\t\toptionsCopy: a => MarksmanshipHunter_Options.clone(a as MarksmanshipHunter_Options),\n\t\toptionsToJson: a => MarksmanshipHunter_Options.toJson(a as MarksmanshipHunter_Options),\n\t\toptionsFromJson: obj => MarksmanshipHunter_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'marksmanshipHunter'\n\t\t\t\t? player.spec.marksmanshipHunter.options || MarksmanshipHunter_Options.create()\n\t\t\t\t: MarksmanshipHunter_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecSurvivalHunter]: {\n\t\trotationCreate: () => SurvivalHunter_Rotation.create(),\n\t\trotationEquals: (a, b) => SurvivalHunter_Rotation.equals(a as SurvivalHunter_Rotation, b as SurvivalHunter_Rotation),\n\t\trotationCopy: a => SurvivalHunter_Rotation.clone(a as SurvivalHunter_Rotation),\n\t\trotationToJson: a => SurvivalHunter_Rotation.toJson(a as SurvivalHunter_Rotation),\n\t\trotationFromJson: obj => SurvivalHunter_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => HunterTalents.create(),\n\t\ttalentsEquals: (a, b) => HunterTalents.equals(a as HunterTalents, b as HunterTalents),\n\t\ttalentsCopy: a => HunterTalents.clone(a as HunterTalents),\n\t\ttalentsToJson: a => HunterTalents.toJson(a as HunterTalents),\n\t\ttalentsFromJson: obj => HunterTalents.fromJson(obj),\n\n\t\toptionsCreate: () => SurvivalHunter_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => SurvivalHunter_Options.equals(a as SurvivalHunter_Options, b as SurvivalHunter_Options),\n\t\toptionsCopy: a => SurvivalHunter_Options.clone(a as SurvivalHunter_Options),\n\t\toptionsToJson: a => SurvivalHunter_Options.toJson(a as SurvivalHunter_Options),\n\t\toptionsFromJson: obj => SurvivalHunter_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'survivalHunter'\n\t\t\t\t? player.spec.survivalHunter.options || SurvivalHunter_Options.create()\n\t\t\t\t: SurvivalHunter_Options.create({ classOptions: {} }),\n\t},\n\t// Mage\n\t[Spec.SpecArcaneMage]: {\n\t\trotationCreate: () => ArcaneMage_Rotation.create(),\n\t\trotationEquals: (a, b) => ArcaneMage_Rotation.equals(a as ArcaneMage_Rotation, b as ArcaneMage_Rotation),\n\t\trotationCopy: a => ArcaneMage_Rotation.clone(a as ArcaneMage_Rotation),\n\t\trotationToJson: a => ArcaneMage_Rotation.toJson(a as ArcaneMage_Rotation),\n\t\trotationFromJson: obj => ArcaneMage_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => MageTalents.create(),\n\t\ttalentsEquals: (a, b) => MageTalents.equals(a as MageTalents, b as MageTalents),\n\t\ttalentsCopy: a => MageTalents.clone(a as MageTalents),\n\t\ttalentsToJson: a => MageTalents.toJson(a as MageTalents),\n\t\ttalentsFromJson: obj => MageTalents.fromJson(obj),\n\n\t\toptionsCreate: () => ArcaneMage_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => ArcaneMage_Options.equals(a as ArcaneMage_Options, b as ArcaneMage_Options),\n\t\toptionsCopy: a => ArcaneMage_Options.clone(a as ArcaneMage_Options),\n\t\toptionsToJson: a => ArcaneMage_Options.toJson(a as ArcaneMage_Options),\n\t\toptionsFromJson: obj => ArcaneMage_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'arcaneMage'\n\t\t\t\t? player.spec.arcaneMage.options || ArcaneMage_Options.create()\n\t\t\t\t: ArcaneMage_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecFireMage]: {\n\t\trotationCreate: () => FireMage_Rotation.create(),\n\t\trotationEquals: (a, b) => FireMage_Rotation.equals(a as FireMage_Rotation, b as FireMage_Rotation),\n\t\trotationCopy: a => FireMage_Rotation.clone(a as FireMage_Rotation),\n\t\trotationToJson: a => FireMage_Rotation.toJson(a as FireMage_Rotation),\n\t\trotationFromJson: obj => FireMage_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => MageTalents.create(),\n\t\ttalentsEquals: (a, b) => MageTalents.equals(a as MageTalents, b as MageTalents),\n\t\ttalentsCopy: a => MageTalents.clone(a as MageTalents),\n\t\ttalentsToJson: a => MageTalents.toJson(a as MageTalents),\n\t\ttalentsFromJson: obj => MageTalents.fromJson(obj),\n\n\t\toptionsCreate: () => FireMage_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => FireMage_Options.equals(a as FireMage_Options, b as FireMage_Options),\n\t\toptionsCopy: a => FireMage_Options.clone(a as FireMage_Options),\n\t\toptionsToJson: a => FireMage_Options.toJson(a as FireMage_Options),\n\t\toptionsFromJson: obj => FireMage_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'fireMage' ? player.spec.fireMage.options || FireMage_Options.create() : FireMage_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecFrostMage]: {\n\t\trotationCreate: () => FrostMage_Rotation.create(),\n\t\trotationEquals: (a, b) => FrostMage_Rotation.equals(a as FrostMage_Rotation, b as FrostMage_Rotation),\n\t\trotationCopy: a => FrostMage_Rotation.clone(a as FrostMage_Rotation),\n\t\trotationToJson: a => FrostMage_Rotation.toJson(a as FrostMage_Rotation),\n\t\trotationFromJson: obj => FrostMage_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => MageTalents.create(),\n\t\ttalentsEquals: (a, b) => MageTalents.equals(a as MageTalents, b as MageTalents),\n\t\ttalentsCopy: a => MageTalents.clone(a as MageTalents),\n\t\ttalentsToJson: a => MageTalents.toJson(a as MageTalents),\n\t\ttalentsFromJson: obj => MageTalents.fromJson(obj),\n\n\t\toptionsCreate: () => FrostMage_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => FrostMage_Options.equals(a as FrostMage_Options, b as FrostMage_Options),\n\t\toptionsCopy: a => FrostMage_Options.clone(a as FrostMage_Options),\n\t\toptionsToJson: a => FrostMage_Options.toJson(a as FrostMage_Options),\n\t\toptionsFromJson: obj => FrostMage_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'frostMage' ? player.spec.frostMage.options || FrostMage_Options.create() : FrostMage_Options.create({ classOptions: {} }),\n\t},\n\t// Paladin\n\t[Spec.SpecHolyPaladin]: {\n\t\trotationCreate: () => HolyPaladin_Rotation.create(),\n\t\trotationEquals: (a, b) => HolyPaladin_Rotation.equals(a as HolyPaladin_Rotation, b as HolyPaladin_Rotation),\n\t\trotationCopy: a => HolyPaladin_Rotation.clone(a as HolyPaladin_Rotation),\n\t\trotationToJson: a => HolyPaladin_Rotation.toJson(a as HolyPaladin_Rotation),\n\t\trotationFromJson: obj => HolyPaladin_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => PaladinTalents.create(),\n\t\ttalentsEquals: (a, b) => PaladinTalents.equals(a as PaladinTalents, b as PaladinTalents),\n\t\ttalentsCopy: a => PaladinTalents.clone(a as PaladinTalents),\n\t\ttalentsToJson: a => PaladinTalents.toJson(a as PaladinTalents),\n\t\ttalentsFromJson: obj => PaladinTalents.fromJson(obj),\n\n\t\toptionsCreate: () => HolyPaladin_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => HolyPaladin_Options.equals(a as HolyPaladin_Options, b as HolyPaladin_Options),\n\t\toptionsCopy: a => HolyPaladin_Options.clone(a as HolyPaladin_Options),\n\t\toptionsToJson: a => HolyPaladin_Options.toJson(a as HolyPaladin_Options),\n\t\toptionsFromJson: obj => HolyPaladin_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'holyPaladin'\n\t\t\t\t? player.spec.holyPaladin.options || HolyPaladin_Options.create()\n\t\t\t\t: HolyPaladin_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecProtectionPaladin]: {\n\t\trotationCreate: () => ProtectionPaladin_Rotation.create(),\n\t\trotationEquals: (a, b) => ProtectionPaladin_Rotation.equals(a as ProtectionPaladin_Rotation, b as ProtectionPaladin_Rotation),\n\t\trotationCopy: a => ProtectionPaladin_Rotation.clone(a as ProtectionPaladin_Rotation),\n\t\trotationToJson: a => ProtectionPaladin_Rotation.toJson(a as ProtectionPaladin_Rotation),\n\t\trotationFromJson: obj => ProtectionPaladin_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => PaladinTalents.create(),\n\t\ttalentsEquals: (a, b) => PaladinTalents.equals(a as PaladinTalents, b as PaladinTalents),\n\t\ttalentsCopy: a => PaladinTalents.clone(a as PaladinTalents),\n\t\ttalentsToJson: a => PaladinTalents.toJson(a as PaladinTalents),\n\t\ttalentsFromJson: obj => PaladinTalents.fromJson(obj),\n\n\t\toptionsCreate: () => ProtectionPaladin_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => ProtectionPaladin_Options.equals(a as ProtectionPaladin_Options, b as ProtectionPaladin_Options),\n\t\toptionsCopy: a => ProtectionPaladin_Options.clone(a as ProtectionPaladin_Options),\n\t\toptionsToJson: a => ProtectionPaladin_Options.toJson(a as ProtectionPaladin_Options),\n\t\toptionsFromJson: obj => ProtectionPaladin_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'protectionPaladin'\n\t\t\t\t? player.spec.protectionPaladin.options || ProtectionPaladin_Options.create()\n\t\t\t\t: ProtectionPaladin_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecRetributionPaladin]: {\n\t\trotationCreate: () => RetributionPaladin_Rotation.create(),\n\t\trotationEquals: (a, b) => RetributionPaladin_Rotation.equals(a as RetributionPaladin_Rotation, b as RetributionPaladin_Rotation),\n\t\trotationCopy: a => RetributionPaladin_Rotation.clone(a as RetributionPaladin_Rotation),\n\t\trotationToJson: a => RetributionPaladin_Rotation.toJson(a as RetributionPaladin_Rotation),\n\t\trotationFromJson: obj => RetributionPaladin_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => PaladinTalents.create(),\n\t\ttalentsEquals: (a, b) => PaladinTalents.equals(a as PaladinTalents, b as PaladinTalents),\n\t\ttalentsCopy: a => PaladinTalents.clone(a as PaladinTalents),\n\t\ttalentsToJson: a => PaladinTalents.toJson(a as PaladinTalents),\n\t\ttalentsFromJson: obj => PaladinTalents.fromJson(obj),\n\n\t\toptionsCreate: () => RetributionPaladin_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => RetributionPaladin_Options.equals(a as RetributionPaladin_Options, b as RetributionPaladin_Options),\n\t\toptionsCopy: a => RetributionPaladin_Options.clone(a as RetributionPaladin_Options),\n\t\toptionsToJson: a => RetributionPaladin_Options.toJson(a as RetributionPaladin_Options),\n\t\toptionsFromJson: obj => RetributionPaladin_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'retributionPaladin'\n\t\t\t\t? player.spec.retributionPaladin.options || RetributionPaladin_Options.create()\n\t\t\t\t: RetributionPaladin_Options.create({ classOptions: {} }),\n\t},\n\t// Priest\n\t[Spec.SpecDisciplinePriest]: {\n\t\trotationCreate: () => DisciplinePriest_Rotation.create(),\n\t\trotationEquals: (a, b) => DisciplinePriest_Rotation.equals(a as DisciplinePriest_Rotation, b as DisciplinePriest_Rotation),\n\t\trotationCopy: a => DisciplinePriest_Rotation.clone(a as DisciplinePriest_Rotation),\n\t\trotationToJson: a => DisciplinePriest_Rotation.toJson(a as DisciplinePriest_Rotation),\n\t\trotationFromJson: obj => DisciplinePriest_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => PriestTalents.create(),\n\t\ttalentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n\t\ttalentsCopy: a => PriestTalents.clone(a as PriestTalents),\n\t\ttalentsToJson: a => PriestTalents.toJson(a as PriestTalents),\n\t\ttalentsFromJson: obj => PriestTalents.fromJson(obj),\n\n\t\toptionsCreate: () => DisciplinePriest_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => DisciplinePriest_Options.equals(a as DisciplinePriest_Options, b as DisciplinePriest_Options),\n\t\toptionsCopy: a => DisciplinePriest_Options.clone(a as DisciplinePriest_Options),\n\t\toptionsToJson: a => DisciplinePriest_Options.toJson(a as DisciplinePriest_Options),\n\t\toptionsFromJson: obj => DisciplinePriest_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'disciplinePriest'\n\t\t\t\t? player.spec.disciplinePriest.options || DisciplinePriest_Options.create()\n\t\t\t\t: DisciplinePriest_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecHolyPriest]: {\n\t\trotationCreate: () => HolyPriest_Rotation.create(),\n\t\trotationEquals: (a, b) => HolyPriest_Rotation.equals(a as HolyPriest_Rotation, b as HolyPriest_Rotation),\n\t\trotationCopy: a => HolyPriest_Rotation.clone(a as HolyPriest_Rotation),\n\t\trotationToJson: a => HolyPriest_Rotation.toJson(a as HolyPriest_Rotation),\n\t\trotationFromJson: obj => HolyPriest_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => PriestTalents.create(),\n\t\ttalentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n\t\ttalentsCopy: a => PriestTalents.clone(a as PriestTalents),\n\t\ttalentsToJson: a => PriestTalents.toJson(a as PriestTalents),\n\t\ttalentsFromJson: obj => PriestTalents.fromJson(obj),\n\n\t\toptionsCreate: () => HolyPriest_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => HolyPriest_Options.equals(a as HolyPriest_Options, b as HolyPriest_Options),\n\t\toptionsCopy: a => HolyPriest_Options.clone(a as HolyPriest_Options),\n\t\toptionsToJson: a => HolyPriest_Options.toJson(a as HolyPriest_Options),\n\t\toptionsFromJson: obj => HolyPriest_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'holyPriest'\n\t\t\t\t? player.spec.holyPriest.options || HolyPriest_Options.create()\n\t\t\t\t: HolyPriest_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecShadowPriest]: {\n\t\trotationCreate: () => ShadowPriest_Rotation.create(),\n\t\trotationEquals: (a, b) => ShadowPriest_Rotation.equals(a as ShadowPriest_Rotation, b as ShadowPriest_Rotation),\n\t\trotationCopy: a => ShadowPriest_Rotation.clone(a as ShadowPriest_Rotation),\n\t\trotationToJson: a => ShadowPriest_Rotation.toJson(a as ShadowPriest_Rotation),\n\t\trotationFromJson: obj => ShadowPriest_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => PriestTalents.create(),\n\t\ttalentsEquals: (a, b) => PriestTalents.equals(a as PriestTalents, b as PriestTalents),\n\t\ttalentsCopy: a => PriestTalents.clone(a as PriestTalents),\n\t\ttalentsToJson: a => PriestTalents.toJson(a as PriestTalents),\n\t\ttalentsFromJson: obj => PriestTalents.fromJson(obj),\n\n\t\toptionsCreate: () => ShadowPriest_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => ShadowPriest_Options.equals(a as ShadowPriest_Options, b as ShadowPriest_Options),\n\t\toptionsCopy: a => ShadowPriest_Options.clone(a as ShadowPriest_Options),\n\t\toptionsToJson: a => ShadowPriest_Options.toJson(a as ShadowPriest_Options),\n\t\toptionsFromJson: obj => ShadowPriest_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'shadowPriest'\n\t\t\t\t? player.spec.shadowPriest.options || ShadowPriest_Options.create()\n\t\t\t\t: ShadowPriest_Options.create({ classOptions: {} }),\n\t},\n\t// Rogue\n\t[Spec.SpecAssassinationRogue]: {\n\t\trotationCreate: () => AssassinationRogue_Rotation.create(),\n\t\trotationEquals: (a, b) => AssassinationRogue_Rotation.equals(a as AssassinationRogue_Rotation, b as AssassinationRogue_Rotation),\n\t\trotationCopy: a => AssassinationRogue_Rotation.clone(a as AssassinationRogue_Rotation),\n\t\trotationToJson: a => AssassinationRogue_Rotation.toJson(a as AssassinationRogue_Rotation),\n\t\trotationFromJson: obj => AssassinationRogue_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => RogueTalents.create(),\n\t\ttalentsEquals: (a, b) => RogueTalents.equals(a as RogueTalents, b as RogueTalents),\n\t\ttalentsCopy: a => RogueTalents.clone(a as RogueTalents),\n\t\ttalentsToJson: a => RogueTalents.toJson(a as RogueTalents),\n\t\ttalentsFromJson: obj => RogueTalents.fromJson(obj),\n\n\t\toptionsCreate: () => AssassinationRogue_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => AssassinationRogue_Options.equals(a as AssassinationRogue_Options, b as AssassinationRogue_Options),\n\t\toptionsCopy: a => AssassinationRogue_Options.clone(a as AssassinationRogue_Options),\n\t\toptionsToJson: a => AssassinationRogue_Options.toJson(a as AssassinationRogue_Options),\n\t\toptionsFromJson: obj => AssassinationRogue_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'assassinationRogue'\n\t\t\t\t? player.spec.assassinationRogue.options || AssassinationRogue_Options.create()\n\t\t\t\t: AssassinationRogue_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecCombatRogue]: {\n\t\trotationCreate: () => CombatRogue_Rotation.create(),\n\t\trotationEquals: (a, b) => CombatRogue_Rotation.equals(a as CombatRogue_Rotation, b as CombatRogue_Rotation),\n\t\trotationCopy: a => CombatRogue_Rotation.clone(a as CombatRogue_Rotation),\n\t\trotationToJson: a => CombatRogue_Rotation.toJson(a as CombatRogue_Rotation),\n\t\trotationFromJson: obj => CombatRogue_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => RogueTalents.create(),\n\t\ttalentsEquals: (a, b) => RogueTalents.equals(a as RogueTalents, b as RogueTalents),\n\t\ttalentsCopy: a => RogueTalents.clone(a as RogueTalents),\n\t\ttalentsToJson: a => RogueTalents.toJson(a as RogueTalents),\n\t\ttalentsFromJson: obj => RogueTalents.fromJson(obj),\n\n\t\toptionsCreate: () => CombatRogue_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => CombatRogue_Options.equals(a as CombatRogue_Options, b as CombatRogue_Options),\n\t\toptionsCopy: a => CombatRogue_Options.clone(a as CombatRogue_Options),\n\t\toptionsToJson: a => CombatRogue_Options.toJson(a as CombatRogue_Options),\n\t\toptionsFromJson: obj => CombatRogue_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'combatRogue'\n\t\t\t\t? player.spec.combatRogue.options || CombatRogue_Options.create()\n\t\t\t\t: CombatRogue_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecSubtletyRogue]: {\n\t\trotationCreate: () => SubtletyRogue_Rotation.create(),\n\t\trotationEquals: (a, b) => SubtletyRogue_Rotation.equals(a as SubtletyRogue_Rotation, b as SubtletyRogue_Rotation),\n\t\trotationCopy: a => SubtletyRogue_Rotation.clone(a as SubtletyRogue_Rotation),\n\t\trotationToJson: a => SubtletyRogue_Rotation.toJson(a as SubtletyRogue_Rotation),\n\t\trotationFromJson: obj => SubtletyRogue_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => RogueTalents.create(),\n\t\ttalentsEquals: (a, b) => RogueTalents.equals(a as RogueTalents, b as RogueTalents),\n\t\ttalentsCopy: a => RogueTalents.clone(a as RogueTalents),\n\t\ttalentsToJson: a => RogueTalents.toJson(a as RogueTalents),\n\t\ttalentsFromJson: obj => RogueTalents.fromJson(obj),\n\n\t\toptionsCreate: () => SubtletyRogue_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => SubtletyRogue_Options.equals(a as SubtletyRogue_Options, b as SubtletyRogue_Options),\n\t\toptionsCopy: a => SubtletyRogue_Options.clone(a as SubtletyRogue_Options),\n\t\toptionsToJson: a => SubtletyRogue_Options.toJson(a as SubtletyRogue_Options),\n\t\toptionsFromJson: obj => SubtletyRogue_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'subtletyRogue'\n\t\t\t\t? player.spec.subtletyRogue.options || SubtletyRogue_Options.create()\n\t\t\t\t: SubtletyRogue_Options.create({ classOptions: {} }),\n\t},\n\t// Shaman\n\t[Spec.SpecElementalShaman]: {\n\t\trotationCreate: () => ElementalShaman_Rotation.create(),\n\t\trotationEquals: (a, b) => ElementalShaman_Rotation.equals(a as ElementalShaman_Rotation, b as ElementalShaman_Rotation),\n\t\trotationCopy: a => ElementalShaman_Rotation.clone(a as ElementalShaman_Rotation),\n\t\trotationToJson: a => ElementalShaman_Rotation.toJson(a as ElementalShaman_Rotation),\n\t\trotationFromJson: obj => ElementalShaman_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => ShamanTalents.create(),\n\t\ttalentsEquals: (a, b) => ShamanTalents.equals(a as ShamanTalents, b as ShamanTalents),\n\t\ttalentsCopy: a => ShamanTalents.clone(a as ShamanTalents),\n\t\ttalentsToJson: a => ShamanTalents.toJson(a as ShamanTalents),\n\t\ttalentsFromJson: obj => ShamanTalents.fromJson(obj),\n\n\t\toptionsCreate: () => ElementalShaman_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => ElementalShaman_Options.equals(a as ElementalShaman_Options, b as ElementalShaman_Options),\n\t\toptionsCopy: a => ElementalShaman_Options.clone(a as ElementalShaman_Options),\n\t\toptionsToJson: a => ElementalShaman_Options.toJson(a as ElementalShaman_Options),\n\t\toptionsFromJson: obj => ElementalShaman_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'elementalShaman'\n\t\t\t\t? player.spec.elementalShaman.options || ElementalShaman_Options.create()\n\t\t\t\t: ElementalShaman_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecEnhancementShaman]: {\n\t\trotationCreate: () => EnhancementShaman_Rotation.create(),\n\t\trotationEquals: (a, b) => EnhancementShaman_Rotation.equals(a as EnhancementShaman_Rotation, b as EnhancementShaman_Rotation),\n\t\trotationCopy: a => EnhancementShaman_Rotation.clone(a as EnhancementShaman_Rotation),\n\t\trotationToJson: a => EnhancementShaman_Rotation.toJson(a as EnhancementShaman_Rotation),\n\t\trotationFromJson: obj => EnhancementShaman_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => ShamanTalents.create(),\n\t\ttalentsEquals: (a, b) => ShamanTalents.equals(a as ShamanTalents, b as ShamanTalents),\n\t\ttalentsCopy: a => ShamanTalents.clone(a as ShamanTalents),\n\t\ttalentsToJson: a => ShamanTalents.toJson(a as ShamanTalents),\n\t\ttalentsFromJson: obj => ShamanTalents.fromJson(obj),\n\n\t\toptionsCreate: () => EnhancementShaman_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => EnhancementShaman_Options.equals(a as EnhancementShaman_Options, b as EnhancementShaman_Options),\n\t\toptionsCopy: a => EnhancementShaman_Options.clone(a as EnhancementShaman_Options),\n\t\toptionsToJson: a => EnhancementShaman_Options.toJson(a as EnhancementShaman_Options),\n\t\toptionsFromJson: obj => EnhancementShaman_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'enhancementShaman'\n\t\t\t\t? player.spec.enhancementShaman.options || EnhancementShaman_Options.create()\n\t\t\t\t: EnhancementShaman_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecRestorationShaman]: {\n\t\trotationCreate: () => RestorationShaman_Rotation.create(),\n\t\trotationEquals: (a, b) => RestorationShaman_Rotation.equals(a as RestorationShaman_Rotation, b as RestorationShaman_Rotation),\n\t\trotationCopy: a => RestorationShaman_Rotation.clone(a as RestorationShaman_Rotation),\n\t\trotationToJson: a => RestorationShaman_Rotation.toJson(a as RestorationShaman_Rotation),\n\t\trotationFromJson: obj => RestorationShaman_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => ShamanTalents.create(),\n\t\ttalentsEquals: (a, b) => ShamanTalents.equals(a as ShamanTalents, b as ShamanTalents),\n\t\ttalentsCopy: a => ShamanTalents.clone(a as ShamanTalents),\n\t\ttalentsToJson: a => ShamanTalents.toJson(a as ShamanTalents),\n\t\ttalentsFromJson: obj => ShamanTalents.fromJson(obj),\n\n\t\toptionsCreate: () => RestorationShaman_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => RestorationShaman_Options.equals(a as RestorationShaman_Options, b as RestorationShaman_Options),\n\t\toptionsCopy: a => RestorationShaman_Options.clone(a as RestorationShaman_Options),\n\t\toptionsToJson: a => RestorationShaman_Options.toJson(a as RestorationShaman_Options),\n\t\toptionsFromJson: obj => RestorationShaman_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'restorationShaman'\n\t\t\t\t? player.spec.restorationShaman.options || RestorationShaman_Options.create()\n\t\t\t\t: RestorationShaman_Options.create({ classOptions: {} }),\n\t},\n\t// Warlock\n\t[Spec.SpecAfflictionWarlock]: {\n\t\trotationCreate: () => AfflictionWarlock_Rotation.create(),\n\t\trotationEquals: (a, b) => AfflictionWarlock_Rotation.equals(a as AfflictionWarlock_Rotation, b as AfflictionWarlock_Rotation),\n\t\trotationCopy: a => AfflictionWarlock_Rotation.clone(a as AfflictionWarlock_Rotation),\n\t\trotationToJson: a => AfflictionWarlock_Rotation.toJson(a as AfflictionWarlock_Rotation),\n\t\trotationFromJson: obj => AfflictionWarlock_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => WarlockTalents.create(),\n\t\ttalentsEquals: (a, b) => WarlockTalents.equals(a as WarlockTalents, b as WarlockTalents),\n\t\ttalentsCopy: a => WarlockTalents.clone(a as WarlockTalents),\n\t\ttalentsToJson: a => WarlockTalents.toJson(a as WarlockTalents),\n\t\ttalentsFromJson: obj => WarlockTalents.fromJson(obj),\n\n\t\toptionsCreate: () => AfflictionWarlock_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => AfflictionWarlock_Options.equals(a as AfflictionWarlock_Options, b as AfflictionWarlock_Options),\n\t\toptionsCopy: a => AfflictionWarlock_Options.clone(a as AfflictionWarlock_Options),\n\t\toptionsToJson: a => AfflictionWarlock_Options.toJson(a as AfflictionWarlock_Options),\n\t\toptionsFromJson: obj => AfflictionWarlock_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'afflictionWarlock'\n\t\t\t\t? player.spec.afflictionWarlock.options || AfflictionWarlock_Options.create()\n\t\t\t\t: AfflictionWarlock_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecDemonologyWarlock]: {\n\t\trotationCreate: () => DemonologyWarlock_Rotation.create(),\n\t\trotationEquals: (a, b) => DemonologyWarlock_Rotation.equals(a as DemonologyWarlock_Rotation, b as DemonologyWarlock_Rotation),\n\t\trotationCopy: a => DemonologyWarlock_Rotation.clone(a as DemonologyWarlock_Rotation),\n\t\trotationToJson: a => DemonologyWarlock_Rotation.toJson(a as DemonologyWarlock_Rotation),\n\t\trotationFromJson: obj => DemonologyWarlock_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => WarlockTalents.create(),\n\t\ttalentsEquals: (a, b) => WarlockTalents.equals(a as WarlockTalents, b as WarlockTalents),\n\t\ttalentsCopy: a => WarlockTalents.clone(a as WarlockTalents),\n\t\ttalentsToJson: a => WarlockTalents.toJson(a as WarlockTalents),\n\t\ttalentsFromJson: obj => WarlockTalents.fromJson(obj),\n\n\t\toptionsCreate: () => DemonologyWarlock_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => DemonologyWarlock_Options.equals(a as DemonologyWarlock_Options, b as DemonologyWarlock_Options),\n\t\toptionsCopy: a => DemonologyWarlock_Options.clone(a as DemonologyWarlock_Options),\n\t\toptionsToJson: a => DemonologyWarlock_Options.toJson(a as DemonologyWarlock_Options),\n\t\toptionsFromJson: obj => DemonologyWarlock_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'demonologyWarlock'\n\t\t\t\t? player.spec.demonologyWarlock.options || DemonologyWarlock_Options.create()\n\t\t\t\t: DemonologyWarlock_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecDestructionWarlock]: {\n\t\trotationCreate: () => DestructionWarlock_Rotation.create(),\n\t\trotationEquals: (a, b) => DestructionWarlock_Rotation.equals(a as DestructionWarlock_Rotation, b as DestructionWarlock_Rotation),\n\t\trotationCopy: a => DestructionWarlock_Rotation.clone(a as DestructionWarlock_Rotation),\n\t\trotationToJson: a => DestructionWarlock_Rotation.toJson(a as DestructionWarlock_Rotation),\n\t\trotationFromJson: obj => DestructionWarlock_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => WarlockTalents.create(),\n\t\ttalentsEquals: (a, b) => WarlockTalents.equals(a as WarlockTalents, b as WarlockTalents),\n\t\ttalentsCopy: a => WarlockTalents.clone(a as WarlockTalents),\n\t\ttalentsToJson: a => WarlockTalents.toJson(a as WarlockTalents),\n\t\ttalentsFromJson: obj => WarlockTalents.fromJson(obj),\n\n\t\toptionsCreate: () => DestructionWarlock_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => DestructionWarlock_Options.equals(a as DestructionWarlock_Options, b as DestructionWarlock_Options),\n\t\toptionsCopy: a => DestructionWarlock_Options.clone(a as DestructionWarlock_Options),\n\t\toptionsToJson: a => DestructionWarlock_Options.toJson(a as DestructionWarlock_Options),\n\t\toptionsFromJson: obj => DestructionWarlock_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'destructionWarlock'\n\t\t\t\t? player.spec.destructionWarlock.options || DestructionWarlock_Options.create()\n\t\t\t\t: DestructionWarlock_Options.create({ classOptions: {} }),\n\t},\n\t// Warrior\n\t[Spec.SpecArmsWarrior]: {\n\t\trotationCreate: () => ArmsWarrior_Rotation.create(),\n\t\trotationEquals: (a, b) => ArmsWarrior_Rotation.equals(a as ArmsWarrior_Rotation, b as ArmsWarrior_Rotation),\n\t\trotationCopy: a => ArmsWarrior_Rotation.clone(a as ArmsWarrior_Rotation),\n\t\trotationToJson: a => ArmsWarrior_Rotation.toJson(a as ArmsWarrior_Rotation),\n\t\trotationFromJson: obj => ArmsWarrior_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => WarriorTalents.create(),\n\t\ttalentsEquals: (a, b) => WarriorTalents.equals(a as WarriorTalents, b as WarriorTalents),\n\t\ttalentsCopy: a => WarriorTalents.clone(a as WarriorTalents),\n\t\ttalentsToJson: a => WarriorTalents.toJson(a as WarriorTalents),\n\t\ttalentsFromJson: obj => WarriorTalents.fromJson(obj),\n\n\t\toptionsCreate: () => ArmsWarrior_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => ArmsWarrior_Options.equals(a as ArmsWarrior_Options, b as ArmsWarrior_Options),\n\t\toptionsCopy: a => ArmsWarrior_Options.clone(a as ArmsWarrior_Options),\n\t\toptionsToJson: a => ArmsWarrior_Options.toJson(a as ArmsWarrior_Options),\n\t\toptionsFromJson: obj => ArmsWarrior_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'armsWarrior'\n\t\t\t\t? player.spec.armsWarrior.options || ArmsWarrior_Options.create()\n\t\t\t\t: ArmsWarrior_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecFuryWarrior]: {\n\t\trotationCreate: () => FuryWarrior_Rotation.create(),\n\t\trotationEquals: (a, b) => FuryWarrior_Rotation.equals(a as FuryWarrior_Rotation, b as FuryWarrior_Rotation),\n\t\trotationCopy: a => FuryWarrior_Rotation.clone(a as FuryWarrior_Rotation),\n\t\trotationToJson: a => FuryWarrior_Rotation.toJson(a as FuryWarrior_Rotation),\n\t\trotationFromJson: obj => FuryWarrior_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => WarriorTalents.create(),\n\t\ttalentsEquals: (a, b) => WarriorTalents.equals(a as WarriorTalents, b as WarriorTalents),\n\t\ttalentsCopy: a => WarriorTalents.clone(a as WarriorTalents),\n\t\ttalentsToJson: a => WarriorTalents.toJson(a as WarriorTalents),\n\t\ttalentsFromJson: obj => WarriorTalents.fromJson(obj),\n\n\t\toptionsCreate: () => FuryWarrior_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => FuryWarrior_Options.equals(a as FuryWarrior_Options, b as FuryWarrior_Options),\n\t\toptionsCopy: a => FuryWarrior_Options.clone(a as FuryWarrior_Options),\n\t\toptionsToJson: a => FuryWarrior_Options.toJson(a as FuryWarrior_Options),\n\t\toptionsFromJson: obj => FuryWarrior_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'furyWarrior'\n\t\t\t\t? player.spec.furyWarrior.options || FuryWarrior_Options.create()\n\t\t\t\t: FuryWarrior_Options.create({ classOptions: {} }),\n\t},\n\t[Spec.SpecProtectionWarrior]: {\n\t\trotationCreate: () => ProtectionWarrior_Rotation.create(),\n\t\trotationEquals: (a, b) => ProtectionWarrior_Rotation.equals(a as ProtectionWarrior_Rotation, b as ProtectionWarrior_Rotation),\n\t\trotationCopy: a => ProtectionWarrior_Rotation.clone(a as ProtectionWarrior_Rotation),\n\t\trotationToJson: a => ProtectionWarrior_Rotation.toJson(a as ProtectionWarrior_Rotation),\n\t\trotationFromJson: obj => ProtectionWarrior_Rotation.fromJson(obj),\n\n\t\ttalentsCreate: () => WarriorTalents.create(),\n\t\ttalentsEquals: (a, b) => WarriorTalents.equals(a as WarriorTalents, b as WarriorTalents),\n\t\ttalentsCopy: a => WarriorTalents.clone(a as WarriorTalents),\n\t\ttalentsToJson: a => WarriorTalents.toJson(a as WarriorTalents),\n\t\ttalentsFromJson: obj => WarriorTalents.fromJson(obj),\n\n\t\toptionsCreate: () => ProtectionWarrior_Options.create({ classOptions: {} }),\n\t\toptionsEquals: (a, b) => ProtectionWarrior_Options.equals(a as ProtectionWarrior_Options, b as ProtectionWarrior_Options),\n\t\toptionsCopy: a => ProtectionWarrior_Options.clone(a as ProtectionWarrior_Options),\n\t\toptionsToJson: a => ProtectionWarrior_Options.toJson(a as ProtectionWarrior_Options),\n\t\toptionsFromJson: obj => ProtectionWarrior_Options.fromJson(obj),\n\t\toptionsFromPlayer: player =>\n\t\t\tplayer.spec.oneofKind == 'protectionWarrior'\n\t\t\t\t? player.spec.protectionWarrior.options || ProtectionWarrior_Options.create()\n\t\t\t\t: ProtectionWarrior_Options.create(),\n\t},\n};\n\nexport const raceToFaction: Record<Race, Faction> = {\n\t[Race.RaceUnknown]: Faction.Unknown,\n\n\t[Race.RaceDraenei]: Faction.Alliance,\n\t[Race.RaceDwarf]: Faction.Alliance,\n\t[Race.RaceGnome]: Faction.Alliance,\n\t[Race.RaceHuman]: Faction.Alliance,\n\t[Race.RaceNightElf]: Faction.Alliance,\n\t[Race.RaceWorgen]: Faction.Alliance,\n\n\t[Race.RaceBloodElf]: Faction.Horde,\n\t[Race.RaceGoblin]: Faction.Horde,\n\t[Race.RaceOrc]: Faction.Horde,\n\t[Race.RaceTauren]: Faction.Horde,\n\t[Race.RaceTroll]: Faction.Horde,\n\t[Race.RaceUndead]: Faction.Horde,\n};\n\n// Returns a copy of playerOptions, with the class field set.\nexport function withSpec<SpecType extends Spec>(spec: Spec, player: Player, specOptions: SpecOptions<SpecType>): Player {\n\tconst copy = Player.clone(player);\n\n\tswitch (spec) {\n\t\t// Death Knight\n\t\tcase Spec.SpecBloodDeathKnight:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'bloodDeathKnight',\n\t\t\t\tbloodDeathKnight: BloodDeathKnight.create({\n\t\t\t\t\toptions: specOptions as BloodDeathKnight_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecFrostDeathKnight:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'frostDeathKnight',\n\t\t\t\tfrostDeathKnight: FrostDeathKnight.create({\n\t\t\t\t\toptions: specOptions as FrostDeathKnight_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecUnholyDeathKnight:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'unholyDeathKnight',\n\t\t\t\tunholyDeathKnight: UnholyDeathKnight.create({\n\t\t\t\t\toptions: specOptions as UnholyDeathKnight_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Druid\n\t\tcase Spec.SpecBalanceDruid:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'balanceDruid',\n\t\t\t\tbalanceDruid: BalanceDruid.create({\n\t\t\t\t\toptions: specOptions as BalanceDruid_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecFeralDruid:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'feralDruid',\n\t\t\t\tferalDruid: FeralDruid.create({\n\t\t\t\t\toptions: specOptions as FeralDruid_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecRestorationDruid:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'restorationDruid',\n\t\t\t\trestorationDruid: RestorationDruid.create({\n\t\t\t\t\toptions: specOptions as RestorationDruid_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Hunter\n\t\tcase Spec.SpecBeastMasteryHunter:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'beastMasteryHunter',\n\t\t\t\tbeastMasteryHunter: BeastMasteryHunter.create({\n\t\t\t\t\toptions: specOptions as BeastMasteryHunter_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecMarksmanshipHunter:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'marksmanshipHunter',\n\t\t\t\tmarksmanshipHunter: MarksmanshipHunter.create({\n\t\t\t\t\toptions: specOptions as MarksmanshipHunter_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecSurvivalHunter:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'survivalHunter',\n\t\t\t\tsurvivalHunter: SurvivalHunter.create({\n\t\t\t\t\toptions: specOptions as SurvivalHunter_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Mage\n\t\tcase Spec.SpecArcaneMage:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'arcaneMage',\n\t\t\t\tarcaneMage: ArcaneMage.create({\n\t\t\t\t\toptions: specOptions as ArcaneMage_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecFireMage:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'fireMage',\n\t\t\t\tfireMage: FireMage.create({\n\t\t\t\t\toptions: specOptions as FireMage_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecFrostMage:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'frostMage',\n\t\t\t\tfrostMage: FrostMage.create({\n\t\t\t\t\toptions: specOptions as FrostMage_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Paladin\n\t\tcase Spec.SpecHolyPaladin:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'holyPaladin',\n\t\t\t\tholyPaladin: HolyPaladin.create({\n\t\t\t\t\toptions: specOptions as HolyPaladin_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecProtectionPaladin:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'protectionPaladin',\n\t\t\t\tprotectionPaladin: ProtectionPaladin.create({\n\t\t\t\t\toptions: specOptions as ProtectionPaladin_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecRetributionPaladin:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'retributionPaladin',\n\t\t\t\tretributionPaladin: RetributionPaladin.create({\n\t\t\t\t\toptions: specOptions as RetributionPaladin_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Priest\n\t\tcase Spec.SpecDisciplinePriest:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'disciplinePriest',\n\t\t\t\tdisciplinePriest: DisciplinePriest.create({\n\t\t\t\t\toptions: specOptions as DisciplinePriest_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecHolyPriest:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'holyPriest',\n\t\t\t\tholyPriest: HolyPriest.create({\n\t\t\t\t\toptions: specOptions as HolyPriest_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecShadowPriest:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'shadowPriest',\n\t\t\t\tshadowPriest: ShadowPriest.create({\n\t\t\t\t\toptions: specOptions as ShadowPriest_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Rogue\n\t\tcase Spec.SpecAssassinationRogue:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'assassinationRogue',\n\t\t\t\tassassinationRogue: AssassinationRogue.create({\n\t\t\t\t\toptions: specOptions as AssassinationRogue_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecCombatRogue:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'combatRogue',\n\t\t\t\tcombatRogue: CombatRogue.create({\n\t\t\t\t\toptions: specOptions as CombatRogue_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecSubtletyRogue:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'subtletyRogue',\n\t\t\t\tsubtletyRogue: SubtletyRogue.create({\n\t\t\t\t\toptions: specOptions as SubtletyRogue_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Shaman\n\t\tcase Spec.SpecElementalShaman:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'elementalShaman',\n\t\t\t\telementalShaman: ElementalShaman.create({\n\t\t\t\t\toptions: specOptions as ElementalShaman_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecEnhancementShaman:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'enhancementShaman',\n\t\t\t\tenhancementShaman: EnhancementShaman.create({\n\t\t\t\t\toptions: specOptions as EnhancementShaman_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecRestorationShaman:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'restorationShaman',\n\t\t\t\trestorationShaman: RestorationShaman.create({\n\t\t\t\t\toptions: specOptions as RestorationShaman_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Warlock\n\t\tcase Spec.SpecAfflictionWarlock:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'afflictionWarlock',\n\t\t\t\tafflictionWarlock: AfflictionWarlock.create({\n\t\t\t\t\toptions: specOptions as AfflictionWarlock_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecDemonologyWarlock:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'demonologyWarlock',\n\t\t\t\tdemonologyWarlock: DemonologyWarlock.create({\n\t\t\t\t\toptions: specOptions as DemonologyWarlock_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecDestructionWarlock:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'destructionWarlock',\n\t\t\t\tdestructionWarlock: DestructionWarlock.create({\n\t\t\t\t\toptions: specOptions as DestructionWarlock_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\t// Warrior\n\t\tcase Spec.SpecArmsWarrior:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'armsWarrior',\n\t\t\t\tarmsWarrior: ArmsWarrior.create({\n\t\t\t\t\toptions: specOptions as ArmsWarrior_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecFuryWarrior:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'furyWarrior',\n\t\t\t\tfuryWarrior: FuryWarrior.create({\n\t\t\t\t\toptions: specOptions as FuryWarrior_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tcase Spec.SpecProtectionWarrior:\n\t\t\tcopy.spec = {\n\t\t\t\toneofKind: 'protectionWarrior',\n\t\t\t\tprotectionWarrior: ProtectionWarrior.create({\n\t\t\t\t\toptions: specOptions as ProtectionWarrior_Options,\n\t\t\t\t}),\n\t\t\t};\n\t\t\treturn copy;\n\t\tdefault:\n\t\t\treturn copy;\n\t}\n}\n\nexport function getPlayerSpecFromPlayer<SpecType extends Spec>(player: Player): PlayerSpec<SpecType> {\n\tconst specValues = getEnumValues(Spec);\n\tfor (let i = 0; i < specValues.length; i++) {\n\t\tconst spec = specValues[i] as SpecType;\n\t\tlet specString = Spec[spec]; // Returns 'SpecBalanceDruid' for BalanceDruid.\n\t\tspecString = specString.substring('Spec'.length); // 'BalanceDruid'\n\t\tspecString = specString.charAt(0).toLowerCase() + specString.slice(1); // 'balanceDruid'\n\n\t\tif (player.spec.oneofKind == specString) {\n\t\t\treturn PlayerSpecs.fromProto(spec);\n\t\t}\n\t}\n\n\tthrow new Error('Unable to parse spec from player proto: ' + JSON.stringify(Player.toJson(player), null, 2));\n}\n\nexport function isSharpWeaponType(weaponType: WeaponType): boolean {\n\treturn [WeaponType.WeaponTypeAxe, WeaponType.WeaponTypeDagger, WeaponType.WeaponTypePolearm, WeaponType.WeaponTypeSword].includes(weaponType);\n}\n\nexport function isBluntWeaponType(weaponType: WeaponType): boolean {\n\treturn [WeaponType.WeaponTypeFist, WeaponType.WeaponTypeMace, WeaponType.WeaponTypeStaff].includes(weaponType);\n}\n\n// Custom functions for determining the EP value of meta gem effects.\n// Default meta effect EP value is 0, so just handle the ones relevant to your spec.\nconst metaGemEffectEPs: Partial<Record<Spec, (gem: Gem, playerStats: Stats) => number>> = {};\n\nexport function getMetaGemEffectEP<SpecType extends Spec>(playerSpec: PlayerSpec<SpecType>, gem: Gem, playerStats: Stats) {\n\tif (metaGemEffectEPs[playerSpec.specID]) {\n\t\treturn metaGemEffectEPs[playerSpec.specID]!(gem, playerStats);\n\t} else {\n\t\treturn 0;\n\t}\n}\n\n// Returns true if this item may be equipped in at least 1 slot for the given Spec.\nexport function canEquipItem<SpecType extends Spec>(item: Item, playerSpec: PlayerSpec<SpecType>, slot: ItemSlot | undefined): boolean {\n\tconst playerClass = PlayerSpecs.getPlayerClass(playerSpec);\n\tif (item.classAllowlist.length > 0 && !item.classAllowlist.includes(playerClass.classID)) {\n\t\treturn false;\n\t}\n\n\tif ([ItemType.ItemTypeFinger, ItemType.ItemTypeTrinket].includes(item.type)) {\n\t\treturn true;\n\t}\n\n\tif (item.type == ItemType.ItemTypeWeapon) {\n\t\tconst eligibleWeaponType = playerClass.weaponTypes.find(wt => wt.weaponType == item.weaponType);\n\t\tif (!eligibleWeaponType) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (\n\t\t\t(item.handType == HandType.HandTypeOffHand || (item.handType == HandType.HandTypeOneHand && slot == ItemSlot.ItemSlotOffHand)) &&\n\t\t\t![WeaponType.WeaponTypeShield, WeaponType.WeaponTypeOffHand].includes(item.weaponType) &&\n\t\t\t!playerSpec.canDualWield\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (item.handType == HandType.HandTypeTwoHand && !eligibleWeaponType.canUseTwoHand) {\n\t\t\treturn false;\n\t\t}\n\t\tif (item.handType == HandType.HandTypeTwoHand && slot == ItemSlot.ItemSlotOffHand && playerSpec.specID != Spec.SpecFuryWarrior) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tif (item.type == ItemType.ItemTypeRanged) {\n\t\treturn playerClass.rangedWeaponTypes.includes(item.rangedWeaponType);\n\t}\n\n\t// At this point, we know the item is an armor piece (feet, chest, legs, etc).\n\treturn playerClass.armorTypes[0] >= item.armorType;\n}\n\nconst itemTypeToSlotsMap: Partial<Record<ItemType, Array<ItemSlot>>> = {\n\t[ItemType.ItemTypeUnknown]: [],\n\t[ItemType.ItemTypeHead]: [ItemSlot.ItemSlotHead],\n\t[ItemType.ItemTypeNeck]: [ItemSlot.ItemSlotNeck],\n\t[ItemType.ItemTypeShoulder]: [ItemSlot.ItemSlotShoulder],\n\t[ItemType.ItemTypeBack]: [ItemSlot.ItemSlotBack],\n\t[ItemType.ItemTypeChest]: [ItemSlot.ItemSlotChest],\n\t[ItemType.ItemTypeWrist]: [ItemSlot.ItemSlotWrist],\n\t[ItemType.ItemTypeHands]: [ItemSlot.ItemSlotHands],\n\t[ItemType.ItemTypeWaist]: [ItemSlot.ItemSlotWaist],\n\t[ItemType.ItemTypeLegs]: [ItemSlot.ItemSlotLegs],\n\t[ItemType.ItemTypeFeet]: [ItemSlot.ItemSlotFeet],\n\t[ItemType.ItemTypeFinger]: [ItemSlot.ItemSlotFinger1, ItemSlot.ItemSlotFinger2],\n\t[ItemType.ItemTypeTrinket]: [ItemSlot.ItemSlotTrinket1, ItemSlot.ItemSlotTrinket2],\n\t[ItemType.ItemTypeRanged]: [ItemSlot.ItemSlotRanged],\n};\n\nexport function getEligibleItemSlots(item: Item): Array<ItemSlot> {\n\tif (itemTypeToSlotsMap[item.type]) {\n\t\treturn itemTypeToSlotsMap[item.type]!;\n\t}\n\n\tif (item.type == ItemType.ItemTypeWeapon) {\n\t\tif (item.handType == HandType.HandTypeMainHand) {\n\t\t\treturn [ItemSlot.ItemSlotMainHand];\n\t\t} else if (item.handType == HandType.HandTypeOffHand) {\n\t\t\treturn [ItemSlot.ItemSlotOffHand];\n\t\t\t// Missing HandTypeTwoHand\n\t\t\t// We allow 2H weapons to be wielded in mainhand and offhand for Fury Warriors\n\t\t} else {\n\t\t\treturn [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand];\n\t\t}\n\t}\n\n\t// Should never reach here\n\tthrow new Error('Could not find item slots for item: ' + Item.toJsonString(item));\n}\n\n// Returns whether the given main-hand and off-hand items can be worn at the\n// same time.\nexport function validWeaponCombo(mainHand: Item | null | undefined, offHand: Item | null | undefined, canDW2h: boolean): boolean {\n\tif (mainHand == null || offHand == null) {\n\t\treturn true;\n\t}\n\n\tif (mainHand.handType == HandType.HandTypeTwoHand && !canDW2h) {\n\t\treturn false;\n\t} else if (\n\t\tmainHand.handType == HandType.HandTypeTwoHand &&\n\t\t(mainHand.weaponType == WeaponType.WeaponTypePolearm || mainHand.weaponType == WeaponType.WeaponTypeStaff)\n\t) {\n\t\treturn false;\n\t}\n\n\tif (offHand.handType == HandType.HandTypeTwoHand && !canDW2h) {\n\t\treturn false;\n\t} else if (\n\t\toffHand.handType == HandType.HandTypeTwoHand &&\n\t\t(offHand.weaponType == WeaponType.WeaponTypePolearm || offHand.weaponType == WeaponType.WeaponTypeStaff)\n\t) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\n// Returns all item slots to which the enchant might be applied.\n//\n// Note that this alone is not enough; some items have further restrictions,\n// e.g. some weapon enchants may only be applied to 2H weapons.\nexport function getEligibleEnchantSlots(enchant: Enchant): Array<ItemSlot> {\n\treturn [enchant.type]\n\t\t.concat(enchant.extraTypes || [])\n\t\t.map(type => {\n\t\t\tif (itemTypeToSlotsMap[type]) {\n\t\t\t\treturn itemTypeToSlotsMap[type]!;\n\t\t\t}\n\n\t\t\tif (type == ItemType.ItemTypeWeapon) {\n\t\t\t\treturn [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand];\n\t\t\t}\n\n\t\t\t// Should never reach here\n\t\t\tthrow new Error('Could not find item slots for enchant: ' + Enchant.toJsonString(enchant));\n\t\t})\n\t\t.flat();\n}\n\nexport function enchantAppliesToItem(enchant: Enchant, item: Item): boolean {\n\tconst sharedSlots = intersection(getEligibleEnchantSlots(enchant), getEligibleItemSlots(item));\n\tif (sharedSlots.length == 0) return false;\n\n\tif (enchant.enchantType == EnchantType.EnchantTypeTwoHand && item.handType != HandType.HandTypeTwoHand) return false;\n\n\tif ((enchant.enchantType == EnchantType.EnchantTypeShield) != (item.weaponType == WeaponType.WeaponTypeShield)) return false;\n\n\tif (enchant.enchantType == EnchantType.EnchantTypeStaff && item.weaponType != WeaponType.WeaponTypeStaff) return false;\n\n\tif (item.weaponType == WeaponType.WeaponTypeOffHand) return false;\n\n\tif (sharedSlots.includes(ItemSlot.ItemSlotRanged)) {\n\t\tif (\n\t\t\t![RangedWeaponType.RangedWeaponTypeBow, RangedWeaponType.RangedWeaponTypeCrossbow, RangedWeaponType.RangedWeaponTypeGun].includes(\n\t\t\t\titem.rangedWeaponType,\n\t\t\t)\n\t\t)\n\t\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport function canEquipEnchant<SpecType extends Spec>(enchant: Enchant, playerSpec: PlayerSpec<SpecType>): boolean {\n\tif (enchant.classAllowlist.length > 0 && !enchant.classAllowlist.includes(playerSpec.classID)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n\nexport function newUnitReference(raidIndex: number): UnitReference {\n\treturn UnitReference.create({\n\t\ttype: UnitReference_Type.Player,\n\t\tindex: raidIndex,\n\t});\n}\n\nexport function emptyUnitReference(): UnitReference {\n\treturn UnitReference.create();\n}\n\n// Makes a new set of assignments with everything 0'd out.\nexport function makeBlankBlessingsAssignments(numPaladins: number): BlessingsAssignments {\n\tconst assignments = BlessingsAssignments.create();\n\tfor (let i = 0; i < numPaladins; i++) {\n\t\tassignments.paladins.push(\n\t\t\tBlessingsAssignment.create({\n\t\t\t\tblessings: new Array(NUM_SPECS).fill(Blessings.BlessingUnknown),\n\t\t\t}),\n\t\t);\n\t}\n\treturn assignments;\n}\n\nexport function makeBlessingsAssignments(numPaladins: number, data: Array<{ spec: Spec; blessings: Array<Blessings> }>): BlessingsAssignments {\n\tconst assignments = makeBlankBlessingsAssignments(numPaladins);\n\tfor (let i = 0; i < data.length; i++) {\n\t\tconst spec = data[i].spec;\n\t\tconst blessings = data[i].blessings;\n\t\tfor (let j = 0; j < blessings.length; j++) {\n\t\t\tif (j >= assignments.paladins.length) {\n\t\t\t\t// Can't assign more blessings since we ran out of paladins\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tassignments.paladins[j].blessings[spec] = blessings[j];\n\t\t}\n\t}\n\treturn assignments;\n}\n\n// Default blessings settings in the raid sim UI.\nexport function makeDefaultBlessings(numPaladins: number): BlessingsAssignments {\n\treturn makeBlessingsAssignments(numPaladins, [\n\t\t// Death Knight\n\t\t{\n\t\t\tspec: Spec.SpecBloodDeathKnight,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfSanctuary],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecFrostDeathKnight,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecUnholyDeathKnight,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight],\n\t\t},\n\t\t// Druid\n\t\t{\n\t\t\tspec: Spec.SpecBalanceDruid,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecFeralDruid,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom, Blessings.BlessingOfSanctuary],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecRestorationDruid,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t// Hunter\n\t\t{\n\t\t\tspec: Spec.SpecBeastMasteryHunter,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecMarksmanshipHunter,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecSurvivalHunter,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t// Mage\n\t\t{\n\t\t\tspec: Spec.SpecArcaneMage,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecFireMage,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecFrostMage,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t// Paladin\n\t\t{\n\t\t\tspec: Spec.SpecHolyPaladin,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecProtectionPaladin,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfSanctuary, Blessings.BlessingOfWisdom, Blessings.BlessingOfMight],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecRetributionPaladin,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t// Priest\n\t\t{\n\t\t\tspec: Spec.SpecDisciplinePriest,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecHolyPriest,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecShadowPriest,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t// Rogue\n\t\t{\n\t\t\tspec: Spec.SpecAssassinationRogue,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecCombatRogue,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecSubtletyRogue,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight],\n\t\t},\n\t\t// Shaman\n\t\t{\n\t\t\tspec: Spec.SpecElementalShaman,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecEnhancementShaman,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecRestorationShaman,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t// Warlock\n\t\t{\n\t\t\tspec: Spec.SpecAfflictionWarlock,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecDemonologyWarlock,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecDestructionWarlock,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfWisdom],\n\t\t},\n\t\t// Warrior\n\t\t{\n\t\t\tspec: Spec.SpecArmsWarrior,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecFuryWarrior,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight],\n\t\t},\n\t\t{\n\t\t\tspec: Spec.SpecProtectionWarrior,\n\t\t\tblessings: [Blessings.BlessingOfKings, Blessings.BlessingOfMight, Blessings.BlessingOfSanctuary],\n\t\t},\n\t]);\n}\n\nexport const orderedResourceTypes: Array<ResourceType> = [\n\tResourceType.ResourceTypeHealth,\n\tResourceType.ResourceTypeMana,\n\tResourceType.ResourceTypeEnergy,\n\tResourceType.ResourceTypeRage,\n\tResourceType.ResourceTypeComboPoints,\n\tResourceType.ResourceTypeFocus,\n\tResourceType.ResourceTypeRunicPower,\n\tResourceType.ResourceTypeBloodRune,\n\tResourceType.ResourceTypeFrostRune,\n\tResourceType.ResourceTypeUnholyRune,\n\tResourceType.ResourceTypeDeathRune,\n];\n\nexport const AL_CATEGORY_HARD_MODE = 'Hard Mode';\nexport const AL_CATEGORY_TITAN_RUNE = 'Titan Rune';\n","// An event ID uniquely identifies a single event that occurred, usually due to\n// some user action like changing a piece of gear.\n//\n// Event IDs allow us to make sure that hierarchies of TypedEvents fire only once,\n// for a given event. This is very important for certain features, like undo/redo.\nexport type EventID = number;\n\nexport interface Disposable {\n\tdispose(): void;\n}\n\nexport interface Listener<T> {\n\t(eventID: EventID, event: T): any;\n}\n\ninterface FiredEventData {\n\teventID: EventID,\n\terror: Error,\n}\n\ninterface FrozenEventData<T> {\n\teventID: EventID,\n\tevent: T,\n}\n\n/** Provides a type-safe event interface. */\nexport class TypedEvent<T> {\n\t// Optional label to help debug.\n\tprivate label: string;\n\n\tconstructor(label?: string) {\n\t\tthis.label = label || '';\n\t}\n\n\tprivate listeners: Array<Listener<T>> = [];\n\n\t// The events which have already been fired from this TypedEvent.\n\tprivate firedEvents: Array<FiredEventData> = [];\n\n\t// Currently frozen events pending on this TypedEvent. See freezeAll()\n\t// for more details.\n\tprivate frozenEvents: Array<FrozenEventData<T>> = [];\n\n\t// Registers a new listener to this event.\n\ton(listener: Listener<T>): Disposable {\n\t\tthis.listeners.push(listener);\n\t\treturn {\n\t\t\tdispose: () => this.off(listener),\n\t\t};\n\t}\n\n\t// Removes a listener from this event.\n\toff(listener: Listener<T>) {\n\t\tconst idx = this.listeners.indexOf(listener);\n\t\tif (idx != -1) {\n\t\t\tthis.listeners.splice(idx, 1);\n\t\t}\n\t}\n\n\t// Convenience for on() which calls off() autmatically after firing once.\n\tonce(listener: Listener<T>): Disposable {\n\t\tconst onceListener = (eventID: EventID, event: T) => {\n\t\t\tthis.off(onceListener);\n\t\t\tlistener(eventID, event);\n\t\t};\n\n\t\treturn this.on(onceListener);\n\t}\n\n\temit(eventID: EventID, event: T) {\n\t\tconst originalEvent = this.firedEvents.find(fe => fe.eventID == eventID);\n\t\tif (originalEvent) {\n\t\t\tif (!thawing) {\n\t\t\t\t// Uncomment this for debugging TypedEvent stuff. There are a few legitimate\n\t\t\t\t// cases where it fires though and it can be very noisy.\n\t\t\t\t//console.warn('EventID collision outside of thawing, original event: ' + (originalEvent.error.stack || originalEvent.error));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis.firedEvents.push({\n\t\t\teventID: eventID,\n\t\t\terror: new Error('Original event'),\n\t\t});\n\n\t\tif (freezeCount > 0) {\n\t\t\tif (this.frozenEvents.length == 0) {\n\t\t\t\tfrozenTypedEvents.push(this);\n\t\t\t}\n\t\t\tthis.frozenEvents.push({\n\t\t\t\teventID: eventID,\n\t\t\t\tevent: event,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.fireEventInternal(eventID, event);\n\t\t}\n\t}\n\n\tprivate fireEventInternal(eventID: EventID, event: T) {\n\t\tthis.listeners.forEach(listener => listener(eventID, event));\n\t}\n\n\t// Executes the provided callback while all TypedEvents are frozen.\n\t// Freezes all TypedEvent objects so that new calls to emit() do not fire the event.\n\t// Instead, the events will be held until the execution is finishd, at which point\n\t// all TypedEvents will fire all of the events that were frozen.\n\t//\n\t// This is used when a single user action activates multiple separate events, to ensure\n\t// none of them fire until all changes have been applied.\n\t//\n\t// This function is very similar to a locking mechanism.\n\tstatic freezeAllAndDo(func: () => void) {\n\t\tfreezeCount++;\n\n\t\ttry {\n\t\t\tfunc();\n\t\t} catch (e) {\n\t\t\tconsole.error('Caught error in freezeAllAndDo: ' + e);\n\t\t} finally {\n\t\t\tfreezeCount--;\n\t\t\tif (freezeCount > 0) {\n\t\t\t\t// Don't do anything until things are fully unfrozen.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthawing = true;\n\t\t\tconst typedEvents = frozenTypedEvents.slice();\n\t\t\tfrozenTypedEvents = [];\n\n\t\t\ttypedEvents.forEach(typedEvent => {\n\t\t\t\tconst frozenEvents = typedEvent.frozenEvents.slice();\n\t\t\t\ttypedEvent.frozenEvents = [];\n\n\t\t\t\tfrozenEvents.forEach(frozenEvent => typedEvent.fireEventInternal(frozenEvent.eventID, frozenEvent.event));\n\t\t\t});\n\t\t\tthawing = false;\n\t\t}\n\t}\n\n\tstatic nextEventID(): EventID {\n\t\treturn nextEventID++;\n\t}\n\n\tstatic onAny(events: Array<TypedEvent<any>>, label?: string): TypedEvent<void> {\n\t\tconst newEvent = new TypedEvent<void>(label);\n\t\tevents.forEach(emitter => emitter.on(eventID => newEvent.emit(eventID)));\n\t\treturn newEvent;\n\t}\n}\n\n// If this is > 0 then events are frozen.\nlet freezeCount = 0;\n\n// Indicates whether we are currently in the process of unfreezing. Just used to add a warning.\nlet thawing = false;\n\nlet frozenTypedEvents: Array<TypedEvent<any>> = [];\nlet nextEventID: EventID = 0;\n","import { GemColor } from '../proto/common.js';\nimport { Profession } from '../proto/common.js';\nimport { getEnumValues } from '../utils.js';\nimport {\n\tUIGem as Gem,\n} from '../proto/ui.js';\n\nexport const GEM_COLORS = (getEnumValues(GemColor) as Array<GemColor>).filter(color => color != GemColor.GemColorUnknown);\nexport const PRIMARY_COLORS = [GemColor.GemColorRed, GemColor.GemColorYellow, GemColor.GemColorBlue];\n// Secondary is intentionally ordered so that it matches the inverse of PRIMARY_COLORS.\nexport const SECONDARY_COLORS = [GemColor.GemColorGreen, GemColor.GemColorPurple, GemColor.GemColorOrange];\n\nexport const socketToMatchingColors = new Map<GemColor, Array<GemColor>>();\nsocketToMatchingColors.set(GemColor.GemColorMeta, [GemColor.GemColorMeta]);\nsocketToMatchingColors.set(GemColor.GemColorBlue, [GemColor.GemColorBlue, GemColor.GemColorPurple, GemColor.GemColorGreen, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorRed, [GemColor.GemColorRed, GemColor.GemColorPurple, GemColor.GemColorOrange, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorYellow, [GemColor.GemColorYellow, GemColor.GemColorOrange, GemColor.GemColorGreen, GemColor.GemColorPrismatic]);\nsocketToMatchingColors.set(GemColor.GemColorPrismatic, [\n\tGemColor.GemColorRed,\n\tGemColor.GemColorOrange,\n\tGemColor.GemColorYellow,\n\tGemColor.GemColorGreen,\n\tGemColor.GemColorBlue,\n\tGemColor.GemColorPurple,\n\tGemColor.GemColorPrismatic,\n]);\n\nexport function gemColorMatchesSocket(gemColor: GemColor, socketColor: GemColor) {\n\treturn gemColor == socketColor || (socketToMatchingColors.has(socketColor) && socketToMatchingColors.get(socketColor)!.includes(gemColor));\n}\n\n// Whether the gem matches the given socket color, for the purposes of gaining the socket bonuses.\nexport function gemMatchesSocket(gem: Gem, socketColor: GemColor) {\n\treturn gemColorMatchesSocket(gem.color, socketColor);\n}\n\n// Whether the gem is capable of slotting into a socket of the given color.\nexport function gemEligibleForSocket(gem: Gem, socketColor: GemColor) {\n\treturn (gem.color == GemColor.GemColorMeta) == (socketColor == GemColor.GemColorMeta);\n}\n\nexport function isUnrestrictedGem(gem: Gem, phase?: number): boolean {\n\treturn !gem.unique &&\n\t\tgem.requiredProfession == Profession.ProfessionUnknown &&\n\t\t(phase == null || gem.phase <= phase);\n}\n\n\nexport class MetaGemCondition {\n\treadonly id: number;\n\treadonly description: string;\n\n\treadonly minRed: number;\n\treadonly minYellow: number;\n\treadonly minBlue: number;\n\n\treadonly compareColorGreater: GemColor;\n\treadonly compareColorLesser: GemColor;\n\n\tconstructor(id: number, description: string, minRed: number, minYellow: number, minBlue: number, compareColorGreater: GemColor, compareColorLesser: GemColor) {\n\t\tthis.id = id;\n\t\tthis.description = description;\n\t\tthis.minRed = minRed;\n\t\tthis.minYellow = minYellow;\n\t\tthis.minBlue = minBlue;\n\t\tthis.compareColorGreater = compareColorGreater;\n\t\tthis.compareColorLesser = compareColorLesser;\n\n\t\tmetaGemConditions.set(this.id, this);\n\t}\n\n\t// Whether the condition is met, i.e. the meta gem is activated.\n\tisMet(numRed: number, numYellow: number, numBlue: number): boolean {\n\t\tif (!(numRed >= this.minRed && numYellow >= this.minYellow && numBlue >= this.minBlue)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.compareColorGreater == GemColor.GemColorUnknown) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst numGreater = MetaGemCondition.getNumInCategory(this.compareColorGreater, numRed, numYellow, numBlue);\n\t\tconst numLesser = MetaGemCondition.getNumInCategory(this.compareColorLesser, numRed, numYellow, numBlue);\n\t\treturn numGreater > numLesser;\n\t}\n\n\tisCompareColorCondition(): boolean {\n\t\treturn this.minRed == 0 && this.minYellow == 0 && this.minBlue == 0;\n\t}\n\n\tisOneOfEach(): boolean {\n\t\treturn this.minRed == 1 && this.minYellow == 1 && this.minBlue == 1;\n\t}\n\n\tisTwoAndOne(): boolean {\n\t\treturn [this.minRed, this.minYellow, this.minBlue].includes(2);\n\t}\n\n\tisThreeOfAColor(): boolean {\n\t\treturn this.minRed == 3 || this.minYellow == 3 || this.minBlue == 3;\n\t}\n\n\tprivate static getNumInCategory(gemColor: GemColor, numRed: number, numYellow: number, numBlue: number): number {\n\t\tif (gemColor == GemColor.GemColorRed) {\n\t\t\treturn numRed;\n\t\t} else if (gemColor == GemColor.GemColorYellow) {\n\t\t\treturn numYellow;\n\t\t} else if (gemColor == GemColor.GemColorBlue) {\n\t\t\treturn numBlue;\n\t\t} else {\n\t\t\tthrow new Error('Invalid gem color for category check: ' + gemColor);\n\t\t}\n\t}\n\n\tstatic fromMinColors(id: number, description: string, minRed: number, minYellow: number, minBlue: number): MetaGemCondition {\n\t\treturn new MetaGemCondition(id, description, minRed, minYellow, minBlue, GemColor.GemColorUnknown, GemColor.GemColorUnknown);\n\t}\n\n\tstatic fromCompareColors(id: number, description: string, compareColorGreater: GemColor, compareColorLesser: GemColor): MetaGemCondition {\n\t\treturn new MetaGemCondition(id, description, 0, 0, 0, compareColorGreater, compareColorLesser);\n\t}\n}\n\nconst metaGemConditions = new Map<number, MetaGemCondition>();\n\nexport function getMetaGemCondition(id: number): MetaGemCondition {\n\tif (!metaGemConditions.has(id)) {\n\t\tthrow new Error('Missing meta gem condition for gem: ' + id);\n\t}\n\n\treturn metaGemConditions.get(id)!;\n}\n\nexport function isMetaGemActive(metaGem: Gem, numRed: number, numYellow: number, numBlue: number): boolean {\n\treturn getMetaGemCondition(metaGem.id).isMet(numRed, numYellow, numBlue);\n}\n\nexport function getMetaGemConditionDescription(metaGem: Gem): string {\n\treturn getMetaGemCondition(metaGem.id).description;\n}\n\n// Keep these lists in order by item ID.\nexport const CHAOTIC_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41285, 'Requires at least 2 Blue Gems.', 0, 0, 2);\nexport const DESTRUCTIVE_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41307, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const EMBER_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41333, 'Requires at least 3 Red Gems.', 3, 0, 0);\nexport const ENIGMATIC_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41335, 'Requires at least 2 Red Gems and at least 1 Yellow Gem.', 2, 1, 0);\nexport const EFFULGENT_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41377, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const SWIFT_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41339, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TIRELESS_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41375, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const REVITALIZING_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41376, 'Requires at least 2 Red Gems.', 2, 0, 0);\nexport const FORLORN_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41378, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const IMPASSIVE_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41379, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\n\nexport const AUSTERE_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41380, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const PERSISTENT_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41381, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const TRENCHANT_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41382, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const INVIGORATING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41385, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const BEAMING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41389, 'Requires at least 2 Red Gems and at least 1 Yellow Gem.', 2, 1, 0);\nexport const BRACING_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41395, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const ETERNAL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41396, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const POWERFUL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41397, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const RELENTLESS_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41398, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const THUNDERING_SKYFLARE_DIAMOND = MetaGemCondition.fromMinColors(41400, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const INSIGHTFUL_EARTHSIEGE_DIAMOND = MetaGemCondition.fromMinColors(41401, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const SWIFT_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44076, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TIRELESS_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44078, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\nexport const ENIGMATIC_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44081, 'Requires at least 2 Red Gems and at least 1 Blue Gem.', 2, 0, 1);\nexport const IMPASSIVE_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44082, 'Requires at least 2 Blue Gems and at least 1 Red Gem.', 1, 0, 2);\nexport const FORLORN_STARFLARE_DIAMOND = MetaGemCondition.fromMinColors(44084, 'Requires at least 2 Yellow Gems and at least 1 Blue Gem.', 0, 2, 1);\nexport const PERSISTENT_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44087, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const POWERFUL_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44088, 'Requires at least 2 Blue Gems and at least 1 Yellow Gem.', 0, 1, 2);\nexport const TRENCHANT_EARTHSHATTER_DIAMOND = MetaGemCondition.fromMinColors(44089, 'Requires at least 1 Red Gem, at least 1 Yellow Gem, and at least 1 Blue Gem.', 1, 1, 1);\n\n// TBC GEMS\nexport const BRUTAL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25899, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const CHAOTIC_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(34220, 'Requires at least 2 Blue Gems.', 0, 0, 2);\nexport const DESTRUCTIVE_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(25890, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const EMBER_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(35503, 'Requires at least 3 Red Gems.', 3, 0, 0);\nexport const ETERNAL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(35501, 'Requires at least 2 Blue Gems and at least 1 Yellow Gem.', 0, 1, 2);\nexport const IMBUED_UNSTABLE_DIAMOND = MetaGemCondition.fromMinColors(32641, 'Requires at least 3 Yellow Gems.', 0, 3, 0);\nexport const INSIGHTFUL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25901, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const POWERFUL_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25896, 'Requires at least 3 Blue Gems.', 0, 0, 3);\nexport const RELENTLESS_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(32409, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\nexport const SWIFT_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(25894, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const SWIFT_STARFIRE_DIAMOND = MetaGemCondition.fromMinColors(28557, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const SWIFT_WINDFIRE_DIAMOND = MetaGemCondition.fromMinColors(28556, 'Requires at least 2 Yellow Gems and at least 1 Red Gem.', 1, 2, 0);\nexport const TENACIOUS_EARTHSTORM_DIAMOND = MetaGemCondition.fromMinColors(25898, 'Requires at least 5 Blue Gems.', 0, 0, 5);\nexport const THUNDERING_SKYFIRE_DIAMOND = MetaGemCondition.fromMinColors(32410, 'Requires at least 2 Red Gems, at least 2 Yellow Gems, and at least 2 Blue Gems.', 2, 2, 2);\n\nexport const BRACING_EARTHSTORM_DIAMOND = MetaGemCondition.fromCompareColors(25897, 'Requires more Red Gems than Blue Gems.', GemColor.GemColorRed, GemColor.GemColorBlue);\nexport const ENIGMATIC_SKYFIRE_DIAMOND = MetaGemCondition.fromCompareColors(25895, 'Requires more Red Gems than Yellow Gems.', GemColor.GemColorRed, GemColor.GemColorYellow);\nexport const MYSTICAL_SKYFIRE_DIAMOND = MetaGemCondition.fromCompareColors(25893, 'Requires more Blue Gems than Yellow Gems.', GemColor.GemColorBlue, GemColor.GemColorYellow);\nexport const POTENT_UNSTABLE_DIAMOND = MetaGemCondition.fromCompareColors(32640, 'Requires more Blue Gems than Yellow Gems.', GemColor.GemColorBlue, GemColor.GemColorYellow);\n\nconst emptyGemSocketIcons: Partial<Record<GemColor, string>> = {\n\t[GemColor.GemColorBlue]: 'https://wow.zamimg.com/images/icons/socket-blue.gif',\n\t[GemColor.GemColorMeta]: 'https://wow.zamimg.com/images/icons/socket-meta.gif',\n\t[GemColor.GemColorRed]: 'https://wow.zamimg.com/images/icons/socket-red.gif',\n\t[GemColor.GemColorYellow]: 'https://wow.zamimg.com/images/icons/socket-yellow.gif',\n\t[GemColor.GemColorPrismatic]: 'https://wow.zamimg.com/images/icons/socket-prismatic.gif',\n};\nexport function getEmptyGemSocketIconUrl(color: GemColor): string {\n\tif (emptyGemSocketIcons[color])\n\t\treturn emptyGemSocketIcons[color] as string;\n\n\tthrow new Error('No empty socket url for gem socket color: ' + color);\n}\n","import { ResourceType } from '../proto/api.js';\nimport { ArmorType, Class, ItemSlot, Profession, PseudoStat, Race, RangedWeaponType, Spec, Stat, WeaponType } from '../proto/common.js';\nimport { DungeonDifficulty, RaidFilterOption, SourceFilterOption } from '../proto/ui.js';\n\nexport const armorTypeNames: Map<ArmorType, string> = new Map([\n\t[ArmorType.ArmorTypeUnknown, 'Unknown'],\n\t[ArmorType.ArmorTypeCloth, 'Cloth'],\n\t[ArmorType.ArmorTypeLeather, 'Leather'],\n\t[ArmorType.ArmorTypeMail, 'Mail'],\n\t[ArmorType.ArmorTypePlate, 'Plate'],\n]);\n\nexport const weaponTypeNames: Map<WeaponType, string> = new Map([\n\t[WeaponType.WeaponTypeUnknown, 'Unknown'],\n\t[WeaponType.WeaponTypeAxe, 'Axe'],\n\t[WeaponType.WeaponTypeDagger, 'Dagger'],\n\t[WeaponType.WeaponTypeFist, 'Fist'],\n\t[WeaponType.WeaponTypeMace, 'Mace'],\n\t[WeaponType.WeaponTypeOffHand, 'Misc'],\n\t[WeaponType.WeaponTypePolearm, 'Polearm'],\n\t[WeaponType.WeaponTypeShield, 'Shield'],\n\t[WeaponType.WeaponTypeStaff, 'Staff'],\n\t[WeaponType.WeaponTypeSword, 'Sword'],\n]);\n\nexport const rangedWeaponTypeNames: Map<RangedWeaponType, string> = new Map([\n\t[RangedWeaponType.RangedWeaponTypeUnknown, 'Unknown'],\n\t[RangedWeaponType.RangedWeaponTypeBow, 'Bow'],\n\t[RangedWeaponType.RangedWeaponTypeCrossbow, 'Crossbow'],\n\t[RangedWeaponType.RangedWeaponTypeGun, 'Gun'],\n\t[RangedWeaponType.RangedWeaponTypeIdol, 'Idol'],\n\t[RangedWeaponType.RangedWeaponTypeLibram, 'Libram'],\n\t[RangedWeaponType.RangedWeaponTypeSigil, 'Sigil'],\n\t[RangedWeaponType.RangedWeaponTypeThrown, 'Thrown'],\n\t[RangedWeaponType.RangedWeaponTypeTotem, 'Totem'],\n\t[RangedWeaponType.RangedWeaponTypeWand, 'Wand'],\n]);\n\nexport const raceNames: Map<Race, string> = new Map([\n\t[Race.RaceUnknown, 'None'],\n\t[Race.RaceBloodElf, 'Blood Elf'],\n\t[Race.RaceDraenei, 'Draenei'],\n\t[Race.RaceDwarf, 'Dwarf'],\n\t[Race.RaceGnome, 'Gnome'],\n\t[Race.RaceHuman, 'Human'],\n\t[Race.RaceNightElf, 'Night Elf'],\n\t[Race.RaceOrc, 'Orc'],\n\t[Race.RaceTauren, 'Tauren'],\n\t[Race.RaceTroll, 'Troll'],\n\t[Race.RaceUndead, 'Undead'],\n]);\n\nexport function nameToRace(name: string): Race {\n\tconst normalized = name.toLowerCase().replaceAll(' ', '');\n\tfor (const [key, value] of raceNames) {\n\t\tif (value.toLowerCase().replaceAll(' ', '') == normalized) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn Race.RaceUnknown;\n}\n\nexport const classNames: Map<Class, string> = new Map([\n\t[Class.ClassUnknown, 'None'],\n\t[Class.ClassDruid, 'Druid'],\n\t[Class.ClassHunter, 'Hunter'],\n\t[Class.ClassMage, 'Mage'],\n\t[Class.ClassPaladin, 'Paladin'],\n\t[Class.ClassPriest, 'Priest'],\n\t[Class.ClassRogue, 'Rogue'],\n\t[Class.ClassShaman, 'Shaman'],\n\t[Class.ClassWarlock, 'Warlock'],\n\t[Class.ClassWarrior, 'Warrior'],\n\t[Class.ClassDeathKnight, 'Death Knight'],\n]);\n\nexport function nameToClass(name: string): Class {\n\tconst lower = name.toLowerCase();\n\tfor (const [key, value] of classNames) {\n\t\tif (value.toLowerCase().replace(/\\s+/g, '') == lower) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn Class.ClassUnknown;\n}\n\nexport const professionNames: Map<Profession, string> = new Map([\n\t[Profession.ProfessionUnknown, 'None'],\n\t[Profession.Alchemy, 'Alchemy'],\n\t[Profession.Blacksmithing, 'Blacksmithing'],\n\t[Profession.Enchanting, 'Enchanting'],\n\t[Profession.Engineering, 'Engineering'],\n\t[Profession.Herbalism, 'Herbalism'],\n\t[Profession.Inscription, 'Inscription'],\n\t[Profession.Jewelcrafting, 'Jewelcrafting'],\n\t[Profession.Leatherworking, 'Leatherworking'],\n\t[Profession.Mining, 'Mining'],\n\t[Profession.Skinning, 'Skinning'],\n\t[Profession.Tailoring, 'Tailoring'],\n]);\n\nexport function nameToProfession(name: string): Profession {\n\tconst lower = name.toLowerCase();\n\tfor (const [key, value] of professionNames) {\n\t\tif (value.toLowerCase() == lower) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn Profession.ProfessionUnknown;\n}\n\nexport const statOrder: Array<Stat> = [\n\tStat.StatHealth,\n\tStat.StatMana,\n\tStat.StatArmor,\n\tStat.StatBonusArmor,\n\tStat.StatStamina,\n\tStat.StatStrength,\n\tStat.StatAgility,\n\tStat.StatIntellect,\n\tStat.StatSpirit,\n\tStat.StatSpellPower,\n\tStat.StatSpellHit,\n\tStat.StatSpellCrit,\n\tStat.StatSpellHaste,\n\tStat.StatSpellPenetration,\n\tStat.StatMP5,\n\tStat.StatAttackPower,\n\tStat.StatRangedAttackPower,\n\tStat.StatMeleeHit,\n\tStat.StatMeleeCrit,\n\tStat.StatMeleeHaste,\n\tStat.StatArmorPenetration,\n\tStat.StatExpertise,\n\tStat.StatMastery,\n\tStat.StatDefense,\n\tStat.StatBlock,\n\tStat.StatBlockValue,\n\tStat.StatDodge,\n\tStat.StatParry,\n\tStat.StatResilience,\n\tStat.StatArcaneResistance,\n\tStat.StatFireResistance,\n\tStat.StatFrostResistance,\n\tStat.StatNatureResistance,\n\tStat.StatShadowResistance,\n];\n\nexport const statNames: Map<Stat, string> = new Map([\n\t[Stat.StatStrength, 'Strength'],\n\t[Stat.StatAgility, 'Agility'],\n\t[Stat.StatStamina, 'Stamina'],\n\t[Stat.StatIntellect, 'Intellect'],\n\t[Stat.StatSpirit, 'Spirit'],\n\t[Stat.StatSpellPower, 'Spell Power'],\n\t[Stat.StatMP5, 'MP5'],\n\t[Stat.StatSpellHit, 'Spell Hit'],\n\t[Stat.StatSpellCrit, 'Spell Crit'],\n\t[Stat.StatSpellHaste, 'Spell Haste'],\n\t[Stat.StatSpellPenetration, 'Spell Pen'],\n\t[Stat.StatAttackPower, 'Attack Power'],\n\t[Stat.StatMeleeHit, 'Melee Hit'],\n\t[Stat.StatMeleeCrit, 'Melee Crit'],\n\t[Stat.StatMeleeHaste, 'Melee Haste'],\n\t[Stat.StatArmorPenetration, 'Armor Pen'],\n\t[Stat.StatMastery, 'Mastery'],\n\t[Stat.StatExpertise, 'Expertise'],\n\t[Stat.StatMana, 'Mana'],\n\t[Stat.StatArmor, 'Armor'],\n\t[Stat.StatRangedAttackPower, 'Ranged AP'],\n\t[Stat.StatDefense, 'Defense'],\n\t[Stat.StatBlock, 'Block'],\n\t[Stat.StatBlockValue, 'Block Value'],\n\t[Stat.StatDodge, 'Dodge'],\n\t[Stat.StatParry, 'Parry'],\n\t[Stat.StatResilience, 'Resilience'],\n\t[Stat.StatHealth, 'Health'],\n\t[Stat.StatArcaneResistance, 'Arcane Resistance'],\n\t[Stat.StatFireResistance, 'Fire Resistance'],\n\t[Stat.StatFrostResistance, 'Frost Resistance'],\n\t[Stat.StatNatureResistance, 'Nature Resistance'],\n\t[Stat.StatShadowResistance, 'Shadow Resistance'],\n\t[Stat.StatBonusArmor, 'Bonus Armor'],\n\t[Stat.StatMastery, 'Mastery'],\n]);\n\nexport const shortSecondaryStatNames: Map<Stat, string> = new Map([\n\t[Stat.StatSpirit, 'Spirit'],\n\t[Stat.StatSpellHit, 'Hit'],\n\t[Stat.StatSpellCrit, 'Crit'],\n\t[Stat.StatSpellHaste, 'Haste'],\n\t[Stat.StatMeleeHit, 'Hit'],\n\t[Stat.StatMeleeCrit, 'Crit'],\n\t[Stat.StatMeleeHaste, 'Haste'],\n\t[Stat.StatExpertise, 'Expertise'],\n\t[Stat.StatMastery, 'Mastery'],\n\t[Stat.StatDefense, 'Defense'],\n\t[Stat.StatBlock, 'Block'],\n\t[Stat.StatBlockValue, 'Block Value'],\n\t[Stat.StatDodge, 'Dodge'],\n\t[Stat.StatParry, 'Parry'],\n]);\n\nexport const pseudoStatOrder: Array<PseudoStat> = [\n\tPseudoStat.PseudoStatMainHandDps,\n\tPseudoStat.PseudoStatOffHandDps,\n\tPseudoStat.PseudoStatRangedDps,\n\tPseudoStat.PseudoStatBlockValueMultiplier,\n];\nexport const pseudoStatNames: Map<PseudoStat, string> = new Map([\n\t[PseudoStat.PseudoStatMainHandDps, 'Main Hand DPS'],\n\t[PseudoStat.PseudoStatOffHandDps, 'Off Hand DPS'],\n\t[PseudoStat.PseudoStatRangedDps, 'Ranged DPS'],\n\t[PseudoStat.PseudoStatBlockValueMultiplier, 'Block Value Multiplier'],\n\t[PseudoStat.PseudoStatDodge, 'Dodge Chance'],\n\t[PseudoStat.PseudoStatParry, 'Parry Chance'],\n]);\n\nexport function getClassStatName(stat: Stat, playerClass: Class): string {\n\tconst statName = statNames.get(stat);\n\tif (!statName) return 'UnknownStat';\n\tif (playerClass == Class.ClassHunter) {\n\t\treturn statName.replace('Melee', 'Ranged');\n\t} else {\n\t\treturn statName;\n\t}\n}\n\nexport const slotNames: Map<ItemSlot, string> = new Map([\n\t[ItemSlot.ItemSlotHead, 'Head'],\n\t[ItemSlot.ItemSlotNeck, 'Neck'],\n\t[ItemSlot.ItemSlotShoulder, 'Shoulders'],\n\t[ItemSlot.ItemSlotBack, 'Back'],\n\t[ItemSlot.ItemSlotChest, 'Chest'],\n\t[ItemSlot.ItemSlotWrist, 'Wrist'],\n\t[ItemSlot.ItemSlotHands, 'Hands'],\n\t[ItemSlot.ItemSlotWaist, 'Waist'],\n\t[ItemSlot.ItemSlotLegs, 'Legs'],\n\t[ItemSlot.ItemSlotFeet, 'Feet'],\n\t[ItemSlot.ItemSlotFinger1, 'Finger 1'],\n\t[ItemSlot.ItemSlotFinger2, 'Finger 2'],\n\t[ItemSlot.ItemSlotTrinket1, 'Trinket 1'],\n\t[ItemSlot.ItemSlotTrinket2, 'Trinket 2'],\n\t[ItemSlot.ItemSlotMainHand, 'Main Hand'],\n\t[ItemSlot.ItemSlotOffHand, 'Off Hand'],\n\t[ItemSlot.ItemSlotRanged, 'Ranged'],\n]);\n\nexport const resourceNames: Map<ResourceType, string> = new Map([\n\t[ResourceType.ResourceTypeNone, 'None'],\n\t[ResourceType.ResourceTypeHealth, 'Health'],\n\t[ResourceType.ResourceTypeMana, 'Mana'],\n\t[ResourceType.ResourceTypeEnergy, 'Energy'],\n\t[ResourceType.ResourceTypeRage, 'Rage'],\n\t[ResourceType.ResourceTypeComboPoints, 'Combo Points'],\n\t[ResourceType.ResourceTypeFocus, 'Focus'],\n\t[ResourceType.ResourceTypeRunicPower, 'Runic Power'],\n\t[ResourceType.ResourceTypeBloodRune, 'Blood Rune'],\n\t[ResourceType.ResourceTypeFrostRune, 'Frost Rune'],\n\t[ResourceType.ResourceTypeUnholyRune, 'Unholy Rune'],\n\t[ResourceType.ResourceTypeDeathRune, 'Death Rune'],\n]);\n\nexport const resourceColors: Map<ResourceType, string> = new Map([\n\t[ResourceType.ResourceTypeNone, '#ffffff'],\n\t[ResourceType.ResourceTypeHealth, '#22ba00'],\n\t[ResourceType.ResourceTypeMana, '#2e93fa'],\n\t[ResourceType.ResourceTypeEnergy, '#ffd700'],\n\t[ResourceType.ResourceTypeRage, '#ff0000'],\n\t[ResourceType.ResourceTypeComboPoints, '#ffa07a'],\n\t[ResourceType.ResourceTypeFocus, '#cd853f'],\n\t[ResourceType.ResourceTypeRunicPower, '#5b99ee'],\n\t[ResourceType.ResourceTypeBloodRune, '#ff0000'],\n\t[ResourceType.ResourceTypeFrostRune, '#0000ff'],\n\t[ResourceType.ResourceTypeUnholyRune, '#00ff00'],\n\t[ResourceType.ResourceTypeDeathRune, '#8b008b'],\n]);\n\nexport function stringToResourceType(str: string): ResourceType {\n\tfor (const [key, val] of resourceNames) {\n\t\tif (val.toLowerCase() == str.toLowerCase()) {\n\t\t\treturn key;\n\t\t}\n\t}\n\treturn ResourceType.ResourceTypeNone;\n}\n\nexport const sourceNames: Map<SourceFilterOption, string> = new Map([\n\t[SourceFilterOption.SourceUnknown, 'Unknown'],\n\t[SourceFilterOption.SourceCrafting, 'Crafting'],\n\t[SourceFilterOption.SourceQuest, 'Quest'],\n\t[SourceFilterOption.SourceDungeon, 'Dungeon'],\n\t[SourceFilterOption.SourceDungeonH, 'Dungeon (H)'],\n\t[SourceFilterOption.SourceDungeonTRA, 'Dungeon (TRA)'],\n\t[SourceFilterOption.SourceDungeonTRB, 'Dungeon (TRB)'],\n\t[SourceFilterOption.SourceRaid10, 'Raid (10N)'],\n\t[SourceFilterOption.SourceRaid10H, 'Raid (10H)'],\n\t[SourceFilterOption.SourceRaid25, 'Raid (25N)'],\n\t[SourceFilterOption.SourceRaid25H, 'Raid (25H)'],\n]);\nexport const raidNames: Map<RaidFilterOption, string> = new Map([\n\t[RaidFilterOption.RaidUnknown, 'Unknown'],\n\t[RaidFilterOption.RaidVanilla, 'Vanilla'],\n\t[RaidFilterOption.RaidTbc, 'TBC'],\n\t[RaidFilterOption.RaidNaxxramas, 'Naxxramas'],\n\t[RaidFilterOption.RaidEyeOfEternity, 'Eye of Eternity'],\n\t[RaidFilterOption.RaidObsidianSanctum, 'Obsidian Sanctum'],\n\t[RaidFilterOption.RaidVaultOfArchavon, 'Vault of Archavon'],\n\t[RaidFilterOption.RaidUlduar, 'Ulduar'],\n\t[RaidFilterOption.RaidTrialOfTheCrusader, 'Trial of the Crusader'],\n\t[RaidFilterOption.RaidOnyxiasLair, \"Onyxia's Lair\"],\n\t[RaidFilterOption.RaidIcecrownCitadel, 'Icecrown Citadel'],\n\t[RaidFilterOption.RaidRubySanctum, 'Ruby Sanctum'],\n]);\n\nexport const difficultyNames: Map<DungeonDifficulty, string> = new Map([\n\t[DungeonDifficulty.DifficultyUnknown, 'Unknown'],\n\t[DungeonDifficulty.DifficultyNormal, 'N'],\n\t[DungeonDifficulty.DifficultyHeroic, 'H'],\n\t[DungeonDifficulty.DifficultyTitanRuneAlpha, 'TRA'],\n\t[DungeonDifficulty.DifficultyTitanRuneBeta, 'TRB'],\n\t[DungeonDifficulty.DifficultyRaid10, '10N'],\n\t[DungeonDifficulty.DifficultyRaid10H, '10H'],\n\t[DungeonDifficulty.DifficultyRaid25, '25N'],\n\t[DungeonDifficulty.DifficultyRaid25H, '25H'],\n]);\n\nexport const masterySpellNames: Map<Spec, string> = new Map([\n\t[Spec.SpecAssassinationRogue, 'Potent Poisons'],\n\t[Spec.SpecCombatRogue, 'Main Gauche'],\n\t[Spec.SpecSubtletyRogue, 'Executioner'],\n\t[Spec.SpecBloodDeathKnight, 'Blood Shield'],\n\t[Spec.SpecFrostDeathKnight, 'Frozen Heart'],\n\t[Spec.SpecUnholyDeathKnight, 'Dreadblade'],\n\t[Spec.SpecBalanceDruid, 'Total Eclipse'],\n\t[Spec.SpecFeralDruid, 'No'],\n\t[Spec.SpecRestorationDruid, 'Harmony'],\n\t[Spec.SpecHolyPaladin, 'Illuminated Healing'],\n\t[Spec.SpecProtectionPaladin, 'Divine Bulwark'],\n\t[Spec.SpecRetributionPaladin, 'Hand of Light'],\n\t[Spec.SpecElementalShaman, 'Elemental Overload'],\n\t[Spec.SpecEnhancementShaman, 'Enhanced Elements'],\n\t[Spec.SpecRestorationShaman, 'Deep Healing'],\n\t[Spec.SpecBeastMasteryHunter, 'Master of Beasts'],\n\t[Spec.SpecMarksmanshipHunter, 'Wild Quiver'],\n\t[Spec.SpecSurvivalHunter, 'Essence of the Viper'],\n\t[Spec.SpecArmsWarrior, 'Strikes of Opportunity'],\n\t[Spec.SpecFuryWarrior, 'Unshackled Fury'],\n\t[Spec.SpecProtectionWarrior, 'Critical Block'],\n\t[Spec.SpecArcaneMage, 'Mana Adept'],\n\t[Spec.SpecFireMage, 'Flashburn'],\n\t[Spec.SpecFrostMage, 'Frostburn'],\n\t[Spec.SpecDisciplinePriest, 'Shield Discipline'],\n\t[Spec.SpecHolyPriest, 'Echo of Light'],\n\t[Spec.SpecShadowPriest, 'Shadow Orb Power'],\n\t[Spec.SpecAfflictionWarlock, 'Potent Afflictions'],\n\t[Spec.SpecDemonologyWarlock, 'Master Demonologist'],\n\t[Spec.SpecDestructionWarlock, 'Fiery Apocalypse'],\n]);\n\nexport const masterySpellIDs: Map<Spec, number> = new Map([\n\t[Spec.SpecAssassinationRogue, 76803],\n\t[Spec.SpecCombatRogue, 76806],\n\t[Spec.SpecSubtletyRogue, 76808],\n\t[Spec.SpecBloodDeathKnight, 77513],\n\t[Spec.SpecFrostDeathKnight, 77514],\n\t[Spec.SpecUnholyDeathKnight, 77515],\n\t[Spec.SpecBalanceDruid, 77492],\n\t[Spec.SpecFeralDruid, 0],\n\t[Spec.SpecRestorationDruid, 77495],\n\t[Spec.SpecHolyPaladin, 76669],\n\t[Spec.SpecProtectionPaladin, 76671],\n\t[Spec.SpecRetributionPaladin, 76672],\n\t[Spec.SpecElementalShaman, 77222],\n\t[Spec.SpecEnhancementShaman, 77223],\n\t[Spec.SpecRestorationShaman, 77226],\n\t[Spec.SpecBeastMasteryHunter, 76657],\n\t[Spec.SpecMarksmanshipHunter, 76659],\n\t[Spec.SpecSurvivalHunter, 76658],\n\t[Spec.SpecArmsWarrior, 76838],\n\t[Spec.SpecFuryWarrior, 76856],\n\t[Spec.SpecProtectionWarrior, 76857],\n\t[Spec.SpecArcaneMage, 76547],\n\t[Spec.SpecFireMage, 76595],\n\t[Spec.SpecFrostMage, 76613],\n\t[Spec.SpecDisciplinePriest, 77484],\n\t[Spec.SpecHolyPriest, 77485],\n\t[Spec.SpecShadowPriest, 77486],\n\t[Spec.SpecAfflictionWarlock, 77215],\n\t[Spec.SpecDemonologyWarlock, 77219],\n\t[Spec.SpecDestructionWarlock, 77220],\n]);\n","import { Class, PseudoStat, Stat, UnitStats } from '../proto/common.js';\nimport { getEnumValues } from '../utils.js';\nimport { getClassStatName, pseudoStatNames } from './names.js';\n\nconst STATS_LEN = getEnumValues(Stat).length;\nconst PSEUDOSTATS_LEN = getEnumValues(PseudoStat).length;\n\nexport class UnitStat {\n\tprivate readonly stat: Stat | null;\n\tprivate readonly pseudoStat: PseudoStat | null;\n\n\tprivate constructor(stat: Stat | null, pseudoStat: PseudoStat | null) {\n\t\tthis.stat = stat;\n\t\tthis.pseudoStat = pseudoStat;\n\t}\n\n\tisStat(): boolean {\n\t\treturn this.stat != null;\n\t}\n\tisPseudoStat(): boolean {\n\t\treturn this.pseudoStat != null;\n\t}\n\n\tgetStat(): Stat {\n\t\tif (!this.isStat()) {\n\t\t\tthrow new Error('Not a stat!');\n\t\t}\n\t\treturn this.stat!;\n\t}\n\tgetPseudoStat(): PseudoStat {\n\t\tif (!this.isPseudoStat()) {\n\t\t\tthrow new Error('Not a pseudo stat!');\n\t\t}\n\t\treturn this.pseudoStat!;\n\t}\n\n\tequals(other: UnitStat): boolean {\n\t\treturn this.stat == other.stat && this.pseudoStat == other.pseudoStat;\n\t}\n\n\tgetName(clazz: Class): string {\n\t\tif (this.isStat()) {\n\t\t\treturn getClassStatName(this.stat!, clazz);\n\t\t} else {\n\t\t\treturn pseudoStatNames.get(this.pseudoStat!)!;\n\t\t}\n\t}\n\n\tgetProtoValue(proto: UnitStats): number {\n\t\tif (this.isStat()) {\n\t\t\treturn proto.stats[this.stat!];\n\t\t} else {\n\t\t\treturn proto.pseudoStats[this.pseudoStat!];\n\t\t}\n\t}\n\n\tsetProtoValue(proto: UnitStats, val: number) {\n\t\tif (this.isStat()) {\n\t\t\tproto.stats[this.stat!] = val;\n\t\t} else {\n\t\t\tproto.pseudoStats[this.pseudoStat!] = val;\n\t\t}\n\t}\n\n\tstatic fromStat(stat: Stat): UnitStat {\n\t\treturn new UnitStat(stat, null);\n\t}\n\tstatic fromPseudoStat(pseudoStat: PseudoStat): UnitStat {\n\t\treturn new UnitStat(null, pseudoStat);\n\t}\n\n\tstatic getAll(): Array<UnitStat> {\n\t\tconst allStats = getEnumValues(Stat) as Array<Stat>;\n\t\tconst allPseudoStats = getEnumValues(PseudoStat) as Array<PseudoStat>;\n\t\treturn [allStats.map(stat => UnitStat.fromStat(stat)), allPseudoStats.map(stat => UnitStat.fromPseudoStat(stat))].flat();\n\t}\n}\n\n/**\n * Represents values for all character stats (stam, agi, spell power, hit raiting, etc).\n *\n * This is an immutable type.\n */\nexport class Stats {\n\tprivate readonly stats: Array<number>;\n\tprivate readonly pseudoStats: Array<number>;\n\n\tconstructor(stats?: Array<number>, pseudoStats?: Array<number>) {\n\t\tthis.stats = Stats.initStatsArray(STATS_LEN, stats);\n\t\tthis.pseudoStats = Stats.initStatsArray(PSEUDOSTATS_LEN, pseudoStats);\n\t}\n\n\tprivate static initStatsArray(expectedLen: number, newStats?: Array<number>): Array<number> {\n\t\tlet stats = newStats?.slice(0, expectedLen) || [];\n\n\t\tif (stats.length < expectedLen) {\n\t\t\tstats = stats.concat(new Array(expectedLen - (newStats?.length || 0)).fill(0));\n\t\t}\n\n\t\tfor (let i = 0; i < expectedLen; i++) {\n\t\t\tif (stats[i] == null) stats[i] = 0;\n\t\t}\n\t\treturn stats;\n\t}\n\n\tequals(other: Stats): boolean {\n\t\treturn (\n\t\t\tthis.stats.every((newStat, statIdx) => newStat == other.getStat(statIdx)) &&\n\t\t\tthis.pseudoStats.every((newStat, statIdx) => newStat == other.getPseudoStat(statIdx))\n\t\t);\n\t}\n\n\tgetStat(stat: Stat): number {\n\t\treturn this.stats[stat];\n\t}\n\tgetPseudoStat(stat: PseudoStat): number {\n\t\treturn this.pseudoStats[stat];\n\t}\n\tgetUnitStat(stat: UnitStat): number {\n\t\tif (stat.isStat()) {\n\t\t\treturn this.stats[stat.getStat()];\n\t\t} else {\n\t\t\treturn this.pseudoStats[stat.getPseudoStat()];\n\t\t}\n\t}\n\n\twithStat(stat: Stat, value: number): Stats {\n\t\tconst newStats = this.stats.slice();\n\t\tnewStats[stat] = value;\n\t\treturn new Stats(newStats, this.pseudoStats);\n\t}\n\twithPseudoStat(stat: PseudoStat, value: number): Stats {\n\t\tconst newStats = this.pseudoStats.slice();\n\t\tnewStats[stat] = value;\n\t\treturn new Stats(this.stats, newStats);\n\t}\n\twithUnitStat(stat: UnitStat, value: number): Stats {\n\t\tif (stat.isStat()) {\n\t\t\treturn this.withStat(stat.getStat(), value);\n\t\t} else {\n\t\t\treturn this.withPseudoStat(stat.getPseudoStat(), value);\n\t\t}\n\t}\n\n\taddStat(stat: Stat, value: number): Stats {\n\t\treturn this.withStat(stat, this.getStat(stat) + value);\n\t}\n\n\tadd(other: Stats): Stats {\n\t\treturn new Stats(\n\t\t\tthis.stats.map((value, stat) => value + other.stats[stat]),\n\t\t\tthis.pseudoStats.map((value, stat) => value + other.pseudoStats[stat]),\n\t\t);\n\t}\n\n\tsubtract(other: Stats): Stats {\n\t\treturn new Stats(\n\t\t\tthis.stats.map((value, stat) => value - other.stats[stat]),\n\t\t\tthis.pseudoStats.map((value, stat) => value - other.pseudoStats[stat]),\n\t\t);\n\t}\n\n\tscale(scalar: number): Stats {\n\t\treturn new Stats(\n\t\t\tthis.stats.map((value, _stat) => value * scalar),\n\t\t\tthis.pseudoStats.map((value, _stat) => value * scalar),\n\t\t);\n\t}\n\n\tcomputeEP(epWeights: Stats): number {\n\t\tlet total = 0;\n\t\tthis.stats.forEach((stat, idx) => {\n\t\t\ttotal += stat * epWeights.stats[idx];\n\t\t});\n\t\tthis.pseudoStats.forEach((stat, idx) => {\n\t\t\ttotal += stat * epWeights.pseudoStats[idx];\n\t\t});\n\t\treturn total;\n\t}\n\n\tbelowCaps(statCaps: Stats): boolean {\n\t\tfor (const [idx, stat] of this.stats.entries()) {\n\t\t\tif (statCaps.stats[idx] > 0 && stat > statCaps.stats[idx]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasArray(): Array<number> {\n\t\treturn this.stats.slice();\n\t}\n\n\ttoJson(): object {\n\t\treturn UnitStats.toJson(this.toProto()) as object;\n\t}\n\n\ttoProto(): UnitStats {\n\t\treturn UnitStats.create({\n\t\t\tstats: this.stats.slice(),\n\t\t\tpseudoStats: this.pseudoStats.slice(),\n\t\t});\n\t}\n\n\tstatic fromJson(obj: any): Stats {\n\t\treturn Stats.fromProto(UnitStats.fromJson(obj));\n\t}\n\n\tstatic fromMap(statsMap: Partial<Record<Stat, number>>, pseudoStatsMap?: Partial<Record<PseudoStat, number>>): Stats {\n\t\tconst statsArr = new Array(STATS_LEN).fill(0);\n\t\tObject.entries(statsMap).forEach(entry => {\n\t\t\tconst [statStr, value] = entry;\n\t\t\tstatsArr[Number(statStr)] = value;\n\t\t});\n\n\t\tconst pseudoStatsArr = new Array(PSEUDOSTATS_LEN).fill(0);\n\t\tif (pseudoStatsMap) {\n\t\t\tObject.entries(pseudoStatsMap).forEach(entry => {\n\t\t\t\tconst [pseudoStatstr, value] = entry;\n\t\t\t\tpseudoStatsArr[Number(pseudoStatstr)] = value;\n\t\t\t});\n\t\t}\n\n\t\treturn new Stats(statsArr, pseudoStatsArr);\n\t}\n\n\tstatic fromProto(unitStats?: UnitStats): Stats {\n\t\tif (unitStats) {\n\t\t\treturn new Stats(unitStats.stats, unitStats.pseudoStats);\n\t\t} else {\n\t\t\treturn new Stats();\n\t\t}\n\t}\n}\n","import { GemColor, ItemRandomSuffix, ItemSpec, ItemType, Profession } from '../proto/common.js';\nimport { UIEnchant as Enchant, UIGem as Gem, UIItem as Item } from '../proto/ui.js';\nimport { distinct } from '../utils.js';\nimport { ActionId } from './action_id.js';\nimport { gemEligibleForSocket, gemMatchesSocket } from './gems.js';\nimport { Stats } from './stats.js';\nimport { enchantAppliesToItem } from './utils.js';\n\nexport function getWeaponDPS(item: Item): number {\n\treturn (item.weaponDamageMin + item.weaponDamageMax) / 2 / (item.weaponSpeed || 1);\n}\n\n/**\n * Represents an equipped item along with enchants/gems attached to it.\n *\n * This is an immutable type.\n */\nexport class EquippedItem {\n\treadonly _item: Item;\n\treadonly _randomSuffix: ItemRandomSuffix | null;\n\treadonly _enchant: Enchant | null;\n\treadonly _gems: Array<Gem | null>;\n\treadonly _reforging: number;\n\n\treadonly numPossibleSockets: number;\n\n\tconstructor(item: Item, enchant?: Enchant | null, gems?: Array<Gem | null>, randomSuffix?: ItemRandomSuffix | null, reforging?: number) {\n\t\tthis._item = item;\n\t\tthis._enchant = enchant || null;\n\t\tthis._gems = gems || [];\n\t\tthis._randomSuffix = randomSuffix || null;\n\t\tthis._reforging = reforging || 0;\n\n\t\tthis.numPossibleSockets = this.numSockets(true);\n\n\t\t// Fill gems with null so we always have the same number of gems as gem slots.\n\t\tif (this._gems.length < this.numPossibleSockets) {\n\t\t\tthis._gems = this._gems.concat(new Array(this.numPossibleSockets - this._gems.length).fill(null));\n\t\t}\n\t}\n\n\tget item(): Item {\n\t\t// Make a defensive copy\n\t\treturn Item.clone(this._item);\n\t}\n\n\tget id(): number {\n\t\treturn this._item.id;\n\t}\n\n\tget randomSuffix(): ItemRandomSuffix | null {\n\t\treturn this._randomSuffix ? ItemRandomSuffix.clone(this._randomSuffix) : null;\n\t}\n\n\tget enchant(): Enchant | null {\n\t\t// Make a defensive copy\n\t\treturn this._enchant ? Enchant.clone(this._enchant) : null;\n\t}\n\tget reforging(): number {\n\t\treturn this._reforging;\n\t}\n\tget gems(): Array<Gem | null> {\n\t\t// Make a defensive copy\n\t\treturn this._gems.map(gem => (gem == null ? null : Gem.clone(gem)));\n\t}\n\n\tequals(other: EquippedItem) {\n\t\tif (!Item.equals(this._item, other.item)) return false;\n\n\t\tif ((this._randomSuffix == null) != (other.randomSuffix == null)) return false;\n\n\t\tif (this._randomSuffix && other.randomSuffix && !ItemRandomSuffix.equals(this._randomSuffix, other.randomSuffix)) return false;\n\n\t\tif ((this._enchant == null) != (other.enchant == null)) return false;\n\n\t\tif (this._reforging != other._reforging || this._reforging !== 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._enchant && other.enchant && !Enchant.equals(this._enchant, other.enchant)) return false;\n\n\t\tif (this._gems.length != other.gems.length) return false;\n\n\t\tfor (let i = 0; i < this._gems.length; i++) {\n\t\t\tif ((this._gems[i] == null) != (other.gems[i] == null)) return false;\n\n\t\t\tif (this._gems[i] && other.gems[i] && !Gem.equals(this._gems[i]!, other.gems[i]!)) return false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Replaces the item and tries to keep the existing enchants/gems if possible.\n\t */\n\twithItem(item: Item): EquippedItem {\n\t\tlet newEnchant = null;\n\t\tif (this._enchant && enchantAppliesToItem(this._enchant, item)) newEnchant = this._enchant;\n\n\t\t// Reorganize gems to match as many colors in the new item as possible.\n\t\tconst newGems = new Array(item.gemSockets.length).fill(null);\n\t\tthis._gems\n\t\t\t.slice(0, this._item.gemSockets.length)\n\t\t\t.filter(gem => gem != null)\n\t\t\t.forEach(gem => {\n\t\t\t\tconst firstMatchingIndex = item.gemSockets.findIndex((socketColor, socketIdx) => !newGems[socketIdx] && gemMatchesSocket(gem!, socketColor));\n\t\t\t\tconst firstEligibleIndex = item.gemSockets.findIndex(\n\t\t\t\t\t(socketColor, socketIdx) => !newGems[socketIdx] && gemEligibleForSocket(gem!, socketColor),\n\t\t\t\t);\n\t\t\t\tif (firstMatchingIndex != -1) {\n\t\t\t\t\tnewGems[firstMatchingIndex] = gem;\n\t\t\t\t} else if (firstEligibleIndex != -1) {\n\t\t\t\t\tnewGems[firstEligibleIndex] = gem;\n\t\t\t\t}\n\t\t\t});\n\n\t\t// Copy the extra socket gem directly.\n\t\tif (this.couldHaveExtraSocket()) {\n\t\t\tnewGems.push(this._gems[this._gems.length - 1]);\n\t\t}\n\n\t\treturn new EquippedItem(item, newEnchant, newGems);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given enchant applied.\n\t */\n\twithEnchant(enchant: Enchant | null): EquippedItem {\n\t\treturn new EquippedItem(this._item, enchant, this._gems, this._randomSuffix, this._reforging);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given enchant applied.\n\t */\n\twithReforge(reforge: number): EquippedItem {\n\t\treturn new EquippedItem(this._item, this._enchant, this._gems, this._randomSuffix, reforge);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given gem socketed.\n\t */\n\tprivate withGemHelper(gem: Gem | null, socketIdx: number): EquippedItem {\n\t\tif (this._gems.length <= socketIdx) {\n\t\t\tthrow new Error('No gem socket with index ' + socketIdx);\n\t\t}\n\n\t\tconst newGems = this._gems.slice();\n\t\tnewGems[socketIdx] = gem;\n\n\t\treturn new EquippedItem(this._item, this._enchant, newGems, this._randomSuffix, this._reforging);\n\t}\n\n\t/**\n\t * Returns a new EquippedItem with the given gem socketed.\n\t *\n\t * Also ensures validity of the item on its own. Currently this just means enforcing unique gems.\n\t */\n\twithGem(gem: Gem | null, socketIdx: number): EquippedItem {\n\t\tlet curItem: EquippedItem | null = this;\n\n\t\tif (gem && gem.unique) {\n\t\t\tcurItem = curItem.removeGemsWithId(gem.id);\n\t\t}\n\n\t\treturn curItem.withGemHelper(gem, socketIdx);\n\t}\n\n\tremoveGemsWithId(gemId: number): EquippedItem {\n\t\tlet curItem: EquippedItem | null = this;\n\t\t// Remove any currently socketed identical gems.\n\t\tfor (let i = 0; i < curItem._gems.length; i++) {\n\t\t\tif (curItem._gems[i]?.id == gemId) {\n\t\t\t\tcurItem = curItem.withGemHelper(null, i);\n\t\t\t}\n\t\t}\n\t\treturn curItem;\n\t}\n\n\tremoveAllGems(): EquippedItem {\n\t\tlet curItem: EquippedItem | null = this;\n\n\t\tfor (let i = 0; i < curItem._gems.length; i++) {\n\t\t\tcurItem = curItem.withGemHelper(null, i);\n\t\t}\n\n\t\treturn curItem;\n\t}\n\n\twithRandomSuffix(randomSuffix: ItemRandomSuffix | null): EquippedItem {\n\t\treturn new EquippedItem(this._item, this._enchant, this._gems, randomSuffix, this._reforging);\n\t}\n\n\tasActionId(): ActionId {\n\t\tif (this._randomSuffix) return ActionId.fromRandomSuffix(this._item, this._randomSuffix);\n\n\t\treturn ActionId.fromItemId(this._item.id);\n\t}\n\n\tasSpec(): ItemSpec {\n\t\treturn ItemSpec.create({\n\t\t\tid: this._item.id,\n\t\t\trandomSuffix: this._randomSuffix?.id,\n\t\t\tenchant: this._enchant?.effectId,\n\t\t\tgems: this._gems.map(gem => gem?.id || 0),\n\t\t\treforging: this._reforging,\n\t\t});\n\t}\n\n\tmeetsSocketBonus(): boolean {\n\t\treturn this._item.gemSockets.every((socketColor, i) => this._gems[i] && gemMatchesSocket(this._gems[i]!, socketColor));\n\t}\n\n\tsocketBonusStats(): Stats {\n\t\tif (this.meetsSocketBonus()) {\n\t\t\treturn new Stats(this._item.socketBonus);\n\t\t} else {\n\t\t\treturn new Stats();\n\t\t}\n\t}\n\n\t// Whether this item could have an extra socket, assuming Blacksmithing.\n\tcouldHaveExtraSocket(): boolean {\n\t\treturn [ItemType.ItemTypeWaist, ItemType.ItemTypeWrist, ItemType.ItemTypeHands].includes(this.item.type);\n\t}\n\n\trequiresExtraSocket(): boolean {\n\t\treturn [ItemType.ItemTypeWrist, ItemType.ItemTypeHands].includes(this.item.type) && this.hasExtraGem() && this._gems[this._gems.length - 1] != null;\n\t}\n\n\thasExtraSocket(isBlacksmithing: boolean): boolean {\n\t\treturn this.item.type == ItemType.ItemTypeWaist || (isBlacksmithing && [ItemType.ItemTypeWrist, ItemType.ItemTypeHands].includes(this.item.type));\n\t}\n\n\tnumSockets(isBlacksmithing: boolean): number {\n\t\treturn this._item.gemSockets.length + (this.hasExtraSocket(isBlacksmithing) ? 1 : 0);\n\t}\n\n\tnumSocketsOfColor(color: GemColor | null): number {\n\t\tlet numSockets = 0;\n\n\t\tfor (const socketColor of this._item.gemSockets) {\n\t\t\tif (socketColor == color) {\n\t\t\t\tnumSockets += 1;\n\t\t\t}\n\t\t}\n\n\t\treturn numSockets;\n\t}\n\n\thasExtraGem(): boolean {\n\t\treturn this._gems.length > this.item.gemSockets.length;\n\t}\n\n\thasSocketedGem(socketIdx: number): boolean {\n\t\treturn this._gems[socketIdx] != null;\n\t}\n\n\tallSocketColors(): Array<GemColor> {\n\t\treturn this.couldHaveExtraSocket() ? this._item.gemSockets.concat([GemColor.GemColorPrismatic]) : this._item.gemSockets;\n\t}\n\tcurSocketColors(isBlacksmithing: boolean): Array<GemColor> {\n\t\treturn this.hasExtraSocket(isBlacksmithing) ? this._item.gemSockets.concat([GemColor.GemColorPrismatic]) : this._item.gemSockets;\n\t}\n\n\tcurGems(isBlacksmithing: boolean): Array<Gem | null> {\n\t\treturn this._gems.slice(0, this.numSockets(isBlacksmithing));\n\t}\n\tcurEquippedGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.curGems(isBlacksmithing).filter(g => g != null) as Array<Gem>;\n\t}\n\n\tgetProfessionRequirements(): Array<Profession> {\n\t\tconst profs: Array<Profession> = [];\n\t\tif (this._item.requiredProfession != Profession.ProfessionUnknown) {\n\t\t\tprofs.push(this._item.requiredProfession);\n\t\t}\n\t\tif (this._enchant != null && this._enchant.requiredProfession != Profession.ProfessionUnknown) {\n\t\t\tprofs.push(this._enchant.requiredProfession);\n\t\t}\n\t\tthis._gems.forEach(gem => {\n\t\t\tif (gem != null && gem.requiredProfession != Profession.ProfessionUnknown) {\n\t\t\t\tprofs.push(gem.requiredProfession);\n\t\t\t}\n\t\t});\n\t\tif (this.requiresExtraSocket()) {\n\t\t\tprofs.push(Profession.Blacksmithing);\n\t\t}\n\t\treturn distinct(profs);\n\t}\n\tgetFailedProfessionRequirements(professions: Array<Profession>): Array<Item | Gem | Enchant> {\n\t\tconst failed: Array<Item | Gem | Enchant> = [];\n\t\tif (this._item.requiredProfession != Profession.ProfessionUnknown && !professions.includes(this._item.requiredProfession)) {\n\t\t\tfailed.push(this._item);\n\t\t}\n\t\tif (\n\t\t\tthis._enchant != null &&\n\t\t\tthis._enchant.requiredProfession != Profession.ProfessionUnknown &&\n\t\t\t!professions.includes(this._enchant.requiredProfession)\n\t\t) {\n\t\t\tfailed.push(this._enchant);\n\t\t}\n\t\tthis._gems.forEach(gem => {\n\t\t\tif (gem != null && gem.requiredProfession != Profession.ProfessionUnknown && !professions.includes(gem.requiredProfession)) {\n\t\t\t\tfailed.push(gem);\n\t\t\t}\n\t\t});\n\t\treturn failed;\n\t}\n}\n","import { EquipmentSpec, GemColor, ItemSlot, ItemSpec, ItemSwap, Profession, SimDatabase, SimEnchant, SimGem, SimItem } from '../proto/common.js';\nimport { UIEnchant as Enchant, UIGem as Gem, UIItem as Item } from '../proto/ui.js';\nimport { isBluntWeaponType, isSharpWeaponType } from '../proto_utils/utils.js';\nimport { Sim } from '../sim';\nimport { distinct, equalsOrBothNull, getEnumValues } from '../utils.js';\nimport { Database } from './database';\nimport { EquippedItem } from './equipped_item.js';\nimport { gemMatchesSocket, isMetaGemActive } from './gems.js';\nimport { Stats } from './stats.js';\nimport { validWeaponCombo } from './utils.js';\n\ntype InternalGear = Record<ItemSlot, EquippedItem | null>;\n\nabstract class BaseGear {\n\tprotected readonly gear: InternalGear;\n\n\tconstructor(gear: Partial<InternalGear>) {\n\t\tthis.getItemSlots().forEach(slot => {\n\t\t\tif (!gear[slot as ItemSlot]) gear[slot as ItemSlot] = null;\n\t\t});\n\t\tthis.gear = gear as InternalGear;\n\t}\n\n\tabstract getItemSlots(): ItemSlot[];\n\n\tequals(other: BaseGear): boolean {\n\t\tconst otherArray = other.asArray();\n\t\treturn this.asArray().every((thisItem, slot) => equalsOrBothNull(thisItem, otherArray[slot], (a, b) => a.equals(b)));\n\t}\n\n\tgetEquippedItem(slot: ItemSlot): EquippedItem | null {\n\t\treturn this.gear[slot] || null;\n\t}\n\n\tasArray(): Array<EquippedItem | null> {\n\t\treturn Object.values(this.gear);\n\t}\n\n\tasMap(): Partial<InternalGear> {\n\t\tconst newInternalGear: Partial<InternalGear> = {};\n\t\tthis.getItemSlots()\n\t\t\t.map(slot => Number(slot) as ItemSlot)\n\t\t\t.forEach(slot => {\n\t\t\t\tnewInternalGear[slot] = this.getEquippedItem(slot);\n\t\t\t});\n\t\treturn newInternalGear;\n\t}\n\n\t/**\n\t * Returns a new Gear set with the item equipped.\n\t *\n\t * Checks for validity and removes/exchanges items/gems as needed.\n\t */\n\tprotected withEquippedItemInternal(newSlot: ItemSlot, newItem: EquippedItem | null, canDualWield2H: boolean): Partial<InternalGear> {\n\t\t// Create a new identical set of gear\n\t\tconst newInternalGear = this.asMap();\n\n\t\tif (newItem) {\n\t\t\tthis.removeUniqueGems(newInternalGear, newItem);\n\t\t\tthis.removeUniqueItems(newInternalGear, newItem);\n\t\t}\n\n\t\t// Actually assign the new item.\n\t\tnewInternalGear[newSlot] = newItem;\n\n\t\tBaseGear.validateWeaponCombo(newInternalGear, newSlot, canDualWield2H);\n\n\t\treturn newInternalGear;\n\t}\n\n\tprivate removeUniqueGems(gear: Partial<InternalGear>, newItem: EquippedItem) {\n\t\t// If the new item has unique gems, remove matching.\n\t\tnewItem.gems\n\t\t\t.filter(gem => gem?.unique)\n\t\t\t.forEach(gem => {\n\t\t\t\tthis.getItemSlots()\n\t\t\t\t\t.map(slot => Number(slot) as ItemSlot)\n\t\t\t\t\t.forEach(slot => {\n\t\t\t\t\t\tgear[slot] = gear[slot]?.removeGemsWithId(gem!.id) || null;\n\t\t\t\t\t});\n\t\t\t});\n\t}\n\n\tprivate removeUniqueItems(gear: Partial<InternalGear>, newItem: EquippedItem) {\n\t\tif (newItem.item.unique) {\n\t\t\tthis.getItemSlots()\n\t\t\t\t.map(slot => Number(slot) as ItemSlot)\n\t\t\t\t.forEach(slot => {\n\t\t\t\t\tif (gear[slot]?.item.id == newItem.item.id) {\n\t\t\t\t\t\tgear[slot] = null;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t}\n\t}\n\n\tprivate static validateWeaponCombo(gear: Partial<InternalGear>, newSlot: ItemSlot, canDualWield2H: boolean) {\n\t\t// Check for valid weapon combos.\n\t\tif (!validWeaponCombo(gear[ItemSlot.ItemSlotMainHand]?.item, gear[ItemSlot.ItemSlotOffHand]?.item, canDualWield2H)) {\n\t\t\tif (newSlot == ItemSlot.ItemSlotOffHand) {\n\t\t\t\tgear[ItemSlot.ItemSlotMainHand] = null;\n\t\t\t} else {\n\t\t\t\tgear[ItemSlot.ItemSlotOffHand] = null;\n\t\t\t}\n\t\t}\n\t}\n\n\ttoDatabase(db: Database): SimDatabase {\n\t\tconst equippedItems = this.asArray().filter(ei => ei != null) as Array<EquippedItem>;\n\t\treturn SimDatabase.create({\n\t\t\titems: distinct(equippedItems.map(ei => BaseGear.itemToDB(ei.item))),\n\t\t\trandomSuffixes: distinct(equippedItems.filter(ei => ei.randomSuffix).map(ei => ei.randomSuffix!)),\n\t\t\treforgeStats: distinct(equippedItems.filter(ei => ei.reforging).map(ei => db.getReforge(ei.reforging) ?? {})),\n\t\t\tenchants: distinct(equippedItems.filter(ei => ei.enchant).map(ei => BaseGear.enchantToDB(ei.enchant!))),\n\t\t\tgems: distinct(equippedItems.map(ei => (ei._gems.filter(g => g != null) as Array<Gem>).map(gem => BaseGear.gemToDB(gem))).flat()),\n\t\t});\n\t}\n\n\tprivate static itemToDB(item: Item): SimItem {\n\t\treturn SimItem.fromJson(Item.toJson(item), { ignoreUnknownFields: true });\n\t}\n\n\tprivate static enchantToDB(enchant: Enchant): SimEnchant {\n\t\treturn SimEnchant.fromJson(Enchant.toJson(enchant), { ignoreUnknownFields: true });\n\t}\n\n\tprivate static gemToDB(gem: Gem): SimGem {\n\t\treturn SimGem.fromJson(Gem.toJson(gem), { ignoreUnknownFields: true });\n\t}\n}\n\n/**\n * Represents a full gear set, including items/enchants/gems for every slot.\n *\n * This is an immutable type.\n */\nexport class Gear extends BaseGear {\n\tconstructor(gear: Partial<InternalGear>) {\n\t\tsuper(gear);\n\t}\n\n\tgetItemSlots(): ItemSlot[] {\n\t\treturn getEnumValues(ItemSlot);\n\t}\n\n\twithEquippedItem(newSlot: ItemSlot, newItem: EquippedItem | null, canDualWield2H: boolean): Gear {\n\t\treturn new Gear(this.withEquippedItemInternal(newSlot, newItem, canDualWield2H));\n\t}\n\n\tgetTrinkets(): Array<EquippedItem | null> {\n\t\treturn [this.getEquippedItem(ItemSlot.ItemSlotTrinket1), this.getEquippedItem(ItemSlot.ItemSlotTrinket2)];\n\t}\n\n\thasTrinket(itemId: number): boolean {\n\t\treturn this.getTrinkets()\n\t\t\t.map(t => t?.item.id)\n\t\t\t.includes(itemId);\n\t}\n\n\thasRelic(itemId: number): boolean {\n\t\tconst relicItem = this.getEquippedItem(ItemSlot.ItemSlotRanged);\n\n\t\tif (!relicItem) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn relicItem!.item.id == itemId;\n\t}\n\n\tasSpec(): EquipmentSpec {\n\t\treturn EquipmentSpec.create({\n\t\t\titems: this.asArray().map(ei => (ei ? ei.asSpec() : ItemSpec.create())),\n\t\t});\n\t}\n\n\tgetAllGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.asArray()\n\t\t\t.map(ei => (ei == null ? [] : ei.curEquippedGems(isBlacksmithing)))\n\t\t\t.flat();\n\t}\n\n\tgetNonMetaGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.getAllGems(isBlacksmithing).filter(gem => gem.color != GemColor.GemColorMeta);\n\t}\n\n\tstatsFromGems(isBlacksmithing: boolean): Stats {\n\t\tlet stats = new Stats();\n\n\t\t// Stats from just the gems.\n\t\tconst gems = this.getAllGems(isBlacksmithing);\n\t\tfor (let i = 0; i < gems.length; i++) {\n\t\t\tstats = stats.add(new Stats(gems[i].stats));\n\t\t}\n\n\t\t// Stats from socket bonuses.\n\t\tconst items = this.asArray().filter(ei => ei != null) as Array<EquippedItem>;\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tstats = stats.add(items[i].socketBonusStats());\n\t\t}\n\n\t\treturn stats;\n\t}\n\n\tgetGemsOfColor(color: GemColor, isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.getAllGems(isBlacksmithing).filter(gem => gem.color == color);\n\t}\n\n\tgetJCGems(isBlacksmithing: boolean): Array<Gem> {\n\t\treturn this.getAllGems(isBlacksmithing).filter(gem => gem.requiredProfession == Profession.Jewelcrafting);\n\t}\n\n\tgetMetaGem(): Gem | null {\n\t\treturn this.getGemsOfColor(GemColor.GemColorMeta, true)[0] || null;\n\t}\n\n\tgemColorCounts(isBlacksmithing: boolean): { red: number; yellow: number; blue: number } {\n\t\tconst gems = this.getAllGems(isBlacksmithing);\n\t\treturn {\n\t\t\tred: gems.filter(gem => gemMatchesSocket(gem, GemColor.GemColorRed)).length,\n\t\t\tyellow: gems.filter(gem => gemMatchesSocket(gem, GemColor.GemColorYellow)).length,\n\t\t\tblue: gems.filter(gem => gemMatchesSocket(gem, GemColor.GemColorBlue)).length,\n\t\t};\n\t}\n\n\t// Returns true if this gear set has a meta gem AND the other gems meet the meta's conditions.\n\thasActiveMetaGem(isBlacksmithing: boolean): boolean {\n\t\tconst metaGem = this.getMetaGem();\n\t\tif (!metaGem) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst gemColorCounts = this.gemColorCounts(isBlacksmithing);\n\t\treturn isMetaGemActive(metaGem, gemColorCounts.red, gemColorCounts.yellow, gemColorCounts.blue);\n\t}\n\n\thasInactiveMetaGem(isBlacksmithing: boolean): boolean {\n\t\treturn this.getMetaGem() != null && !this.hasActiveMetaGem(isBlacksmithing);\n\t}\n\n\twithGem(itemSlot: ItemSlot, socketIdx: number, gem: Gem | null): Gear {\n\t\tconst item = this.getEquippedItem(itemSlot);\n\n\t\tif (item) {\n\t\t\treturn this.withEquippedItem(itemSlot, item.withGem(gem, socketIdx), true);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\twithSingleGemSubstitution(oldGem: Gem | null, newGem: Gem | null, isBlacksmithing: boolean): Gear {\n\t\tfor (const slot of this.getItemSlots()) {\n\t\t\tconst item = this.getEquippedItem(slot);\n\n\t\t\tif (!item) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst currentGems = item!.curGems(isBlacksmithing);\n\n\t\t\tif (currentGems.includes(oldGem)) {\n\t\t\t\tconst socketIdx = currentGems.indexOf(oldGem);\n\t\t\t\treturn this.withGem(slot, socketIdx, newGem);\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\twithMetaGem(metaGem: Gem | null): Gear {\n\t\tconst headItem = this.getEquippedItem(ItemSlot.ItemSlotHead);\n\n\t\tif (headItem) {\n\t\t\tfor (const [socketIdx, socketColor] of headItem.allSocketColors().entries()) {\n\t\t\t\tif (socketColor == GemColor.GemColorMeta) {\n\t\t\t\t\treturn this.withEquippedItem(ItemSlot.ItemSlotHead, headItem.withGem(metaGem, socketIdx), true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\twithoutMetaGem(): Gear {\n\t\tconst headItem = this.getEquippedItem(ItemSlot.ItemSlotHead);\n\t\tconst metaGem = this.getMetaGem();\n\t\tif (headItem && metaGem) {\n\t\t\treturn this.withEquippedItem(ItemSlot.ItemSlotHead, headItem.removeGemsWithId(metaGem.id), true);\n\t\t} else {\n\t\t\treturn this;\n\t\t}\n\t}\n\n\twithoutGems(): Gear {\n\t\tlet curGear: Gear = this;\n\n\t\tfor (const slot of this.getItemSlots()) {\n\t\t\tconst item = this.getEquippedItem(slot);\n\n\t\t\tif (item) {\n\t\t\t\tcurGear = curGear.withEquippedItem(slot, item.removeAllGems(), true);\n\t\t\t}\n\t\t}\n\n\t\treturn curGear;\n\t}\n\n\t// Removes bonus gems from blacksmith profession bonus.\n\twithoutBlacksmithSockets(): Gear {\n\t\tlet curGear: Gear = this;\n\n\t\tconst wristItem = this.getEquippedItem(ItemSlot.ItemSlotWrist);\n\t\tif (wristItem) {\n\t\t\tcurGear = curGear.withEquippedItem(ItemSlot.ItemSlotWrist, wristItem.withGem(null, wristItem.numPossibleSockets - 1), true);\n\t\t}\n\n\t\tconst handsItem = this.getEquippedItem(ItemSlot.ItemSlotHands);\n\t\tif (handsItem) {\n\t\t\tcurGear = curGear.withEquippedItem(ItemSlot.ItemSlotHands, handsItem.withGem(null, handsItem.numPossibleSockets - 1), true);\n\t\t}\n\n\t\treturn curGear;\n\t}\n\n\thasBluntMHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotMainHand);\n\t\treturn weapon != null && isBluntWeaponType(weapon.item.weaponType);\n\t}\n\thasSharpMHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotMainHand);\n\t\treturn weapon != null && isSharpWeaponType(weapon.item.weaponType);\n\t}\n\thasBluntOHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotOffHand);\n\t\treturn weapon != null && isBluntWeaponType(weapon.item.weaponType);\n\t}\n\thasSharpOHWeapon(): boolean {\n\t\tconst weapon = this.getEquippedItem(ItemSlot.ItemSlotOffHand);\n\t\treturn weapon != null && isSharpWeaponType(weapon.item.weaponType);\n\t}\n\n\tgetProfessionRequirements(): Array<Profession> {\n\t\treturn distinct((this.asArray().filter(ei => ei != null) as Array<EquippedItem>).map(ei => ei.getProfessionRequirements()).flat());\n\t}\n\tgetFailedProfessionRequirements(professions: Array<Profession>): Array<Item | Gem | Enchant> {\n\t\treturn (this.asArray().filter(ei => ei != null) as Array<EquippedItem>).map(ei => ei.getFailedProfessionRequirements(professions)).flat();\n\t}\n}\n\n/**\n * Represents a item swap gear set, including items/enchants/gems.\n *\n * This is an immutable type.\n */\nexport class ItemSwapGear extends BaseGear {\n\tconstructor(gear: Partial<InternalGear>) {\n\t\tsuper(gear);\n\t}\n\n\tgetItemSlots(): ItemSlot[] {\n\t\treturn [ItemSlot.ItemSlotMainHand, ItemSlot.ItemSlotOffHand, ItemSlot.ItemSlotRanged];\n\t}\n\n\twithEquippedItem(newSlot: ItemSlot, newItem: EquippedItem | null, canDualWield2H: boolean): ItemSwapGear {\n\t\treturn new ItemSwapGear(this.withEquippedItemInternal(newSlot, newItem, canDualWield2H));\n\t}\n\n\ttoProto(): ItemSwap {\n\t\treturn ItemSwap.create({\n\t\t\tmhItem: this.gear[ItemSlot.ItemSlotMainHand]?.asSpec(),\n\t\t\tohItem: this.gear[ItemSlot.ItemSlotOffHand]?.asSpec(),\n\t\t\trangedItem: this.gear[ItemSlot.ItemSlotRanged]?.asSpec(),\n\t\t});\n\t}\n}\n","import { CHARACTER_LEVEL } from '../constants/mechanics.js';\nimport {\n\tEquipmentSpec,\n\tGemColor,\n\tItemRandomSuffix,\n\tItemSlot,\n\tItemSpec,\n\tItemSwap,\n\tPresetEncounter,\n\tPresetTarget,\n\tReforgeStat,\n\tSimDatabase,\n} from '../proto/common.js';\nimport { GlyphID, IconData, UIDatabase, UIEnchant as Enchant, UIGem as Gem, UIItem as Item, UINPC as Npc, UIZone as Zone } from '../proto/ui.js';\nimport { distinct } from '../utils.js';\nimport { EquippedItem } from './equipped_item.js';\nimport { Gear, ItemSwapGear } from './gear.js';\nimport { gemEligibleForSocket, gemMatchesSocket } from './gems.js';\nimport { getEligibleEnchantSlots, getEligibleItemSlots } from './utils.js';\n\nconst dbUrlJson = '/cata/assets/database/db.json';\nconst dbUrlBin = '/cata/assets/database/db.bin';\nconst leftoversUrlJson = '/cata/assets/database/leftover_db.json';\nconst leftoversUrlBin = '/cata/assets/database/leftover_db.bin';\n// When changing this value, don't forget to change the html <link> for preloading!\nconst READ_JSON = true;\n\nexport class Database {\n\tprivate static loadPromise: Promise<Database> | null = null;\n\tstatic get(): Promise<Database> {\n\t\tif (Database.loadPromise == null) {\n\t\t\tif (READ_JSON) {\n\t\t\t\tDatabase.loadPromise = fetch(dbUrlJson)\n\t\t\t\t\t.then(response => response.json())\n\t\t\t\t\t.then(json => new Database(UIDatabase.fromJson(json)));\n\t\t\t} else {\n\t\t\t\tDatabase.loadPromise = fetch(dbUrlBin)\n\t\t\t\t\t.then(response => response.arrayBuffer())\n\t\t\t\t\t.then(buffer => new Database(UIDatabase.fromBinary(new Uint8Array(buffer))));\n\t\t\t}\n\t\t}\n\t\treturn Database.loadPromise;\n\t}\n\n\tstatic getLeftovers(): Promise<UIDatabase> {\n\t\tif (READ_JSON) {\n\t\t\treturn fetch(leftoversUrlJson)\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(json => UIDatabase.fromJson(json));\n\t\t} else {\n\t\t\treturn fetch(leftoversUrlBin)\n\t\t\t\t.then(response => response.arrayBuffer())\n\t\t\t\t.then(buffer => UIDatabase.fromBinary(new Uint8Array(buffer)));\n\t\t}\n\t}\n\n\t// Checks if any items in the equipment are missing from the current DB. If so, loads the leftover DB.\n\tstatic async loadLeftoversIfNecessary(equipment: EquipmentSpec): Promise<Database> {\n\t\tconst db = await Database.get();\n\t\tif (db.loadedLeftovers) {\n\t\t\treturn db;\n\t\t}\n\n\t\tconst shouldLoadLeftovers = equipment.items.some(item => item.id != 0 && !db.items.has(item.id));\n\t\tif (shouldLoadLeftovers) {\n\t\t\tconst leftoverDb = await Database.getLeftovers();\n\t\t\tdb.loadProto(leftoverDb);\n\t\t\tdb.loadedLeftovers = true;\n\t\t}\n\t\treturn db;\n\t}\n\n\tprivate readonly items = new Map<number, Item>();\n\tprivate readonly randomSuffixes = new Map<number, ItemRandomSuffix>();\n\tprivate readonly reforgeStats = new Map<number, ReforgeStat>();\n\tprivate readonly enchantsBySlot: Partial<Record<ItemSlot, Enchant[]>> = {};\n\tprivate readonly gems = new Map<number, Gem>();\n\tprivate readonly npcs = new Map<number, Npc>();\n\tprivate readonly zones = new Map<number, Zone>();\n\tprivate readonly presetEncounters = new Map<string, PresetEncounter>();\n\tprivate readonly presetTargets = new Map<string, PresetTarget>();\n\tprivate readonly itemIcons: Record<number, Promise<IconData>> = {};\n\tprivate readonly spellIcons: Record<number, Promise<IconData>> = {};\n\tprivate readonly glyphIds: Array<GlyphID> = [];\n\tprivate loadedLeftovers = false;\n\n\tprivate constructor(db: UIDatabase) {\n\t\tthis.loadProto(db);\n\t}\n\n\t// Add all data from the db proto into this database.\n\tprivate loadProto(db: UIDatabase) {\n\t\tdb.items.forEach(item => this.items.set(item.id, item));\n\t\tdb.randomSuffixes.forEach(randomSuffix => this.randomSuffixes.set(randomSuffix.id, randomSuffix));\n\t\tdb.reforgeStats.forEach(reforgeStat => this.reforgeStats.set(reforgeStat.id, reforgeStat));\n\t\tdb.enchants.forEach(enchant => {\n\t\t\tconst slots = getEligibleEnchantSlots(enchant);\n\t\t\tslots.forEach(slot => {\n\t\t\t\tif (!this.enchantsBySlot[slot]) {\n\t\t\t\t\tthis.enchantsBySlot[slot] = [];\n\t\t\t\t}\n\t\t\t\tthis.enchantsBySlot[slot]!.push(enchant);\n\t\t\t});\n\t\t});\n\t\tdb.gems.forEach(gem => this.gems.set(gem.id, gem));\n\n\t\tdb.npcs.forEach(npc => this.npcs.set(npc.id, npc));\n\t\tdb.zones.forEach(zone => this.zones.set(zone.id, zone));\n\t\tdb.encounters.forEach(encounter => this.presetEncounters.set(encounter.path, encounter));\n\t\tdb.encounters\n\t\t\t.map(e => e.targets)\n\t\t\t.flat()\n\t\t\t.forEach(target => this.presetTargets.set(target.path, target));\n\n\t\tdb.items.forEach(\n\t\t\titem =>\n\t\t\t\t(this.itemIcons[item.id] = Promise.resolve(\n\t\t\t\t\tIconData.create({\n\t\t\t\t\t\tid: item.id,\n\t\t\t\t\t\tname: item.name,\n\t\t\t\t\t\ticon: item.icon,\n\t\t\t\t\t}),\n\t\t\t\t)),\n\t\t);\n\t\tdb.gems.forEach(\n\t\t\tgem =>\n\t\t\t\t(this.itemIcons[gem.id] = Promise.resolve(\n\t\t\t\t\tIconData.create({\n\t\t\t\t\t\tid: gem.id,\n\t\t\t\t\t\tname: gem.name,\n\t\t\t\t\t\ticon: gem.icon,\n\t\t\t\t\t}),\n\t\t\t\t)),\n\t\t);\n\t\tdb.itemIcons.forEach(data => (this.itemIcons[data.id] = Promise.resolve(data)));\n\t\tdb.spellIcons.forEach(data => (this.spellIcons[data.id] = Promise.resolve(data)));\n\t\tdb.glyphIds.forEach(id => this.glyphIds.push(id));\n\t}\n\n\tgetAllItems(): Array<Item> {\n\t\treturn Array.from(this.items.values());\n\t}\n\n\tgetItems(slot: ItemSlot): Array<Item> {\n\t\treturn this.getAllItems().filter(item => getEligibleItemSlots(item).includes(slot));\n\t}\n\n\tgetItemById(id: number): Item | undefined {\n\t\treturn this.items.get(id);\n\t}\n\n\tgetRandomSuffixById(id: number): ItemRandomSuffix | undefined {\n\t\treturn this.randomSuffixes.get(id);\n\t}\n\n\tgetReforge(id: number): ReforgeStat | undefined {\n\t\treturn this.reforgeStats.get(id);\n\t}\n\n\tgetAvailableReforges(item: Item): ReforgeStat[] | undefined {\n\t\tconst availableReforges = Array.from(this.reforgeStats.values()).filter(reforgeStat => {\n\t\t\tfor (let i = 0; i < reforgeStat.fromStat.length; i++) {\n\t\t\t\tconst statIndex = reforgeStat.fromStat[i];\n\t\t\t\tif (item.stats[statIndex] > 0 && item.stats[reforgeStat.toStat[0]] <= 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\n\t\treturn availableReforges.length > 0 ? availableReforges : undefined;\n\t}\n\n\tgetEnchants(slot: ItemSlot): Array<Enchant> {\n\t\treturn this.enchantsBySlot[slot] || [];\n\t}\n\n\tgetGems(socketColor?: GemColor): Array<Gem> {\n\t\tif (!socketColor) return Array.from(this.gems.values());\n\n\t\tconst ret = [];\n\t\tfor (const g of this.gems.values()) {\n\t\t\tif (gemEligibleForSocket(g, socketColor)) ret.push(g);\n\t\t}\n\t\treturn ret;\n\t}\n\n\tgetNpc(npcId: number): Npc | null {\n\t\treturn this.npcs.get(npcId) || null;\n\t}\n\tgetZone(zoneId: number): Zone | null {\n\t\treturn this.zones.get(zoneId) || null;\n\t}\n\n\tgetMatchingGems(socketColor: GemColor): Array<Gem> {\n\t\tconst ret = [];\n\t\tfor (const g of this.gems.values()) {\n\t\t\tif (gemMatchesSocket(g, socketColor)) ret.push(g);\n\t\t}\n\t\treturn ret;\n\t}\n\n\tlookupGem(itemID: number): Gem | null {\n\t\treturn this.gems.get(itemID) || null;\n\t}\n\n\tlookupItemSpec(itemSpec: ItemSpec): EquippedItem | null {\n\t\tconst item = this.items.get(itemSpec.id);\n\t\tif (!item) return null;\n\n\t\tlet enchant: Enchant | null = null;\n\t\tif (itemSpec.enchant) {\n\t\t\tconst slots = getEligibleItemSlots(item);\n\t\t\tfor (let i = 0; i < slots.length; i++) {\n\t\t\t\tenchant =\n\t\t\t\t\t(this.enchantsBySlot[slots[i]] || []).find(enchant => [enchant.effectId, enchant.itemId, enchant.spellId].includes(itemSpec.enchant)) ||\n\t\t\t\t\tnull;\n\t\t\t\tif (enchant) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst gems = itemSpec.gems.map(gemId => this.lookupGem(gemId));\n\n\t\tlet randomSuffix: ItemRandomSuffix | null = null;\n\t\tif (itemSpec.randomSuffix && !!this.getRandomSuffixById(itemSpec.randomSuffix)) {\n\t\t\trandomSuffix = this.getRandomSuffixById(itemSpec.randomSuffix)!;\n\t\t}\n\n\t\treturn new EquippedItem(item, enchant, gems, randomSuffix, itemSpec.reforging);\n\t}\n\n\tlookupEquipmentSpec(equipSpec: EquipmentSpec): Gear {\n\t\t// EquipmentSpec is supposed to be indexed by slot, but here we assume\n\t\t// it isn't just in case.\n\t\tconst gearMap: Partial<Record<ItemSlot, EquippedItem | null>> = {};\n\t\tequipSpec.items.forEach(itemSpec => {\n\t\t\tconst item = this.lookupItemSpec(itemSpec);\n\t\t\tif (!item) return;\n\n\t\t\tconst itemSlots = getEligibleItemSlots(item.item);\n\n\t\t\tconst assignedSlot = itemSlots.find(slot => !gearMap[slot]);\n\t\t\tif (assignedSlot == null) throw new Error('No slots left to equip ' + Item.toJsonString(item.item));\n\n\t\t\tgearMap[assignedSlot] = item;\n\t\t});\n\n\t\treturn new Gear(gearMap);\n\t}\n\n\tlookupItemSwap(itemSwap: ItemSwap): ItemSwapGear {\n\t\treturn new ItemSwapGear({\n\t\t\t[ItemSlot.ItemSlotMainHand]: itemSwap.mhItem ? this.lookupItemSpec(itemSwap.mhItem) : null,\n\t\t\t[ItemSlot.ItemSlotOffHand]: itemSwap.ohItem ? this.lookupItemSpec(itemSwap.ohItem) : null,\n\t\t\t[ItemSlot.ItemSlotRanged]: itemSwap.rangedItem ? this.lookupItemSpec(itemSwap.rangedItem) : null,\n\t\t});\n\t}\n\n\tenchantSpellIdToEffectId(enchantSpellId: number): number {\n\t\tconst enchant = Object.values(this.enchantsBySlot)\n\t\t\t.flat()\n\t\t\t.find(enchant => enchant.spellId == enchantSpellId);\n\t\treturn enchant ? enchant.effectId : 0;\n\t}\n\n\tglyphItemToSpellId(itemId: number): number {\n\t\treturn this.glyphIds.find(gid => gid.itemId == itemId)?.spellId || 0;\n\t}\n\tglyphSpellToItemId(spellId: number): number {\n\t\treturn this.glyphIds.find(gid => gid.spellId == spellId)?.itemId || 0;\n\t}\n\n\tgetPresetEncounter(path: string): PresetEncounter | null {\n\t\treturn this.presetEncounters.get(path) || null;\n\t}\n\tgetPresetTarget(path: string): PresetTarget | null {\n\t\treturn this.presetTargets.get(path) || null;\n\t}\n\tgetAllPresetEncounters(): Array<PresetEncounter> {\n\t\treturn Array.from(this.presetEncounters.values());\n\t}\n\tgetAllPresetTargets(): Array<PresetTarget> {\n\t\treturn Array.from(this.presetTargets.values());\n\t}\n\n\tstatic async getItemIconData(itemId: number): Promise<IconData> {\n\t\tconst db = await Database.get();\n\t\tif (!db.itemIcons[itemId]) {\n\t\t\tdb.itemIcons[itemId] = Database.getWowheadItemTooltipData(itemId);\n\t\t}\n\t\treturn await db.itemIcons[itemId];\n\t}\n\n\tstatic async getSpellIconData(spellId: number): Promise<IconData> {\n\t\tconst db = await Database.get();\n\t\tif (!db.spellIcons[spellId]) {\n\t\t\tdb.spellIcons[spellId] = Database.getWowheadSpellTooltipData(spellId);\n\t\t}\n\t\treturn await db.spellIcons[spellId];\n\t}\n\n\tprivate static async getWowheadItemTooltipData(id: number): Promise<IconData> {\n\t\treturn Database.getWowheadTooltipData(id, 'item');\n\t}\n\tprivate static async getWowheadSpellTooltipData(id: number): Promise<IconData> {\n\t\treturn Database.getWowheadTooltipData(id, 'spell');\n\t}\n\tprivate static async getWowheadTooltipData(id: number, tooltipPostfix: string): Promise<IconData> {\n\t\tconst url = `https://nether.wowhead.com/cata/tooltip/${tooltipPostfix}/${id}?lvl=${CHARACTER_LEVEL}&dataEnv=11`;\n\t\ttry {\n\t\t\tconst response = await fetch(url);\n\t\t\tconst json = await response.json();\n\t\t\treturn IconData.create({\n\t\t\t\tid: id,\n\t\t\t\tname: json['name'],\n\t\t\t\ticon: json['icon'],\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconsole.error('Error while fetching url: ' + url + '\\n\\n' + e);\n\t\t\treturn IconData.create();\n\t\t}\n\t}\n\n\tpublic static mergeSimDatabases(db1: SimDatabase, db2: SimDatabase): SimDatabase {\n\t\treturn SimDatabase.create({\n\t\t\titems: distinct(db1.items.concat(db2.items), (a, b) => a.id == b.id),\n\t\t\trandomSuffixes: distinct(db1.randomSuffixes.concat(db2.randomSuffixes), (a, b) => a.id == b.id),\n\t\t\treforgeStats: distinct(db1.reforgeStats.concat(db2.reforgeStats), (a, b) => a.id == b.id),\n\t\t\tenchants: distinct(db1.enchants.concat(db2.enchants), (a, b) => a.effectId == b.effectId),\n\t\t\tgems: distinct(db1.gems.concat(db2.gems), (a, b) => a.id == b.id),\n\t\t});\n\t}\n}\n","import { getWowheadLanguagePrefix } from '../constants/lang.js';\nimport { CHARACTER_LEVEL } from '../constants/mechanics.js';\nimport { ResourceType } from '../proto/api.js';\nimport { ActionID as ActionIdProto, OtherAction, ItemRandomSuffix } from '../proto/common.js';\nimport { IconData, UIItem as Item } from '../proto/ui.js';\nimport { Database } from './database.js';\n\n// If true uses wotlkdb.com, else uses wowhead.com.\nexport const USE_WOTLK_DB = false;\n\n// Uniquely identifies a specific item / spell / thing in WoW. This object is immutable.\nexport class ActionId {\n\treadonly itemId: number;\n\treadonly randomSuffixId: number;\n\treadonly spellId: number;\n\treadonly otherId: OtherAction;\n\treadonly tag: number;\n\n\treadonly baseName: string; // The name without any tag additions.\n\treadonly name: string;\n\treadonly iconUrl: string;\n\n\tprivate constructor(itemId: number, spellId: number, otherId: OtherAction, tag: number, baseName: string, name: string, iconUrl: string, randomSuffixId?: number) {\n\t\tthis.itemId = itemId;\n\t\tthis.randomSuffixId = randomSuffixId || 0;\n\t\tthis.spellId = spellId;\n\t\tthis.otherId = otherId;\n\t\tthis.tag = tag;\n\n\t\tswitch (otherId) {\n\t\t\tcase OtherAction.OtherActionNone:\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionWait:\n\t\t\t\tbaseName = 'Wait';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_pocketwatch_01.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionManaRegen:\n\t\t\t\tname = 'Mana Tick';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeMana];\n\t\t\t\tif (tag == 1) {\n\t\t\t\t\tname += ' (Casting)';\n\t\t\t\t} else if (tag == 2) {\n\t\t\t\t\tname += ' (Not Casting)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionEnergyRegen:\n\t\t\t\tbaseName = 'Energy Tick';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeEnergy];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionFocusRegen:\n\t\t\t\tbaseName = 'Focus Tick';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeFocus];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionManaGain:\n\t\t\t\tbaseName = 'Mana Gain';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeMana];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionRageGain:\n\t\t\t\tbaseName = 'Rage Gain';\n\t\t\t\ticonUrl = resourceTypeToIcon[ResourceType.ResourceTypeRage];\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionAttack:\n\t\t\t\tname = 'Attack';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_sword_04.jpg';\n\t\t\t\tif (tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionShoot:\n\t\t\t\tname = 'Shoot';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/ability_marksmanship.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionPet:\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionRefund:\n\t\t\t\tbaseName = 'Refund';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_coin_01.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionDamageTaken:\n\t\t\t\tbaseName = 'Damage Taken';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_sword_04.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionHealingModel:\n\t\t\t\tbaseName = 'Incoming HPS';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/spell_holy_renew.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionBloodRuneGain:\n\t\t\t\tbaseName = 'Blood Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_deathstrike.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionFrostRuneGain:\n\t\t\t\tbaseName = 'Frost Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_deathstrike2.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionUnholyRuneGain:\n\t\t\t\tbaseName = 'Unholy Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_empowerruneblade.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionDeathRuneGain:\n\t\t\t\tbaseName = 'Death Rune Gain';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_empowerruneblade.jpg';\n\t\t\t\tbreak;\n\t\t\tcase OtherAction.OtherActionPotion:\n\t\t\t\tbaseName = 'Potion';\n\t\t\t\ticonUrl = 'https://wow.zamimg.com/images/wow/icons/large/inv_alchemy_elixir_04.jpg';\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.baseName = baseName;\n\t\tthis.name = name || baseName;\n\t\tthis.iconUrl = iconUrl;\n\t}\n\n\tanyId(): number {\n\t\treturn this.itemId || this.spellId || this.otherId;\n\t}\n\n\tequals(other: ActionId): boolean {\n\t\treturn this.equalsIgnoringTag(other) && this.tag == other.tag;\n\t}\n\n\tequalsIgnoringTag(other: ActionId): boolean {\n\t\treturn (\n\t\t\tthis.itemId == other.itemId\n\t\t\t&& this.randomSuffixId == other.randomSuffixId\n\t\t\t&& this.spellId == other.spellId\n\t\t\t&& this.otherId == other.otherId);\n\t}\n\n\tsetBackground(elem: HTMLElement) {\n\t\tif (this.iconUrl) {\n\t\t\telem.style.backgroundImage = `url('${this.iconUrl}')`;\n\t\t}\n\t}\n\n\tstatic makeItemUrl(id: number, randomSuffixId?: number): string {\n\t\tconst langPrefix = getWowheadLanguagePrefix();\n\t\treturn `https://wowhead.com/cata/${langPrefix}item=${id}?lvl=${CHARACTER_LEVEL}?rand=${randomSuffixId || 0}`;\n\t}\n\tstatic makeSpellUrl(id: number): string {\n\t\tconst langPrefix = getWowheadLanguagePrefix();\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn 'https://wotlkdb.com/?spell=' + id;\n\t\t} else {\n\t\t\treturn `https://wowhead.com/cata/${langPrefix}spell=${id}`;\n\t\t}\n\t}\n\tstatic makeQuestUrl(id: number): string {\n\t\tconst langPrefix = getWowheadLanguagePrefix();\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn 'https://wotlkdb.com/?quest=' + id;\n\t\t} else {\n\t\t\treturn `https://wowhead.com/cata/${langPrefix}quest=${id}`;\n\t\t}\n\t}\n\tstatic makeNpcUrl(id: number): string {\n\t\tconst langPrefix = getWowheadLanguagePrefix();\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn 'https://wotlkdb.com/?npc=' + id;\n\t\t} else {\n\t\t\treturn `https://wowhead.com/cata/${langPrefix}npc=${id}`;\n\t\t}\n\t}\n\tstatic makeZoneUrl(id: number): string {\n\t\tconst langPrefix = getWowheadLanguagePrefix();\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn 'https://wotlkdb.com/?zone=' + id;\n\t\t} else {\n\t\t\treturn `https://wowhead.com/cata/${langPrefix}zone=${id}`;\n\t\t}\n\t}\n\n\tsetWowheadHref(elem: HTMLAnchorElement) {\n\t\tif (this.itemId) {\n\t\t\telem.href = ActionId.makeItemUrl(this.itemId, this.randomSuffixId);\n\t\t} else if (this.spellId) {\n\t\t\telem.href = ActionId.makeSpellUrl(this.spellId);\n\t\t}\n\t}\n\n\tsetBackgroundAndHref(elem: HTMLAnchorElement) {\n\t\tthis.setBackground(elem);\n\t\tthis.setWowheadHref(elem);\n\t}\n\n\tasync fillAndSet(elem: HTMLAnchorElement, setHref: boolean, setBackground: boolean): Promise<ActionId> {\n\t\tconst filled = await this.fill();\n\t\tif (setHref) {\n\t\t\tfilled.setWowheadHref(elem);\n\t\t}\n\t\tif (setBackground) {\n\t\t\tfilled.setBackground(elem);\n\t\t}\n\t\treturn filled;\n\t}\n\n\t// Returns an ActionId with the name and iconUrl fields filled.\n\t// playerIndex is the optional index of the player to whom this ID corresponds.\n\tasync fill(playerIndex?: number): Promise<ActionId> {\n\t\tif (this.name || this.iconUrl) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (this.otherId) {\n\t\t\treturn this;\n\t\t}\n\n\t\tconst tooltipData = await ActionId.getTooltipData(this);\n\n\t\tconst baseName = tooltipData['name'];\n\t\tlet name = baseName;\n\t\tswitch (baseName) {\n\t\t\tcase 'Explosive Shot':\n\t\t\t\tif (this.spellId == 60053) {\n\t\t\t\t\tname += ' (R4)';\n\t\t\t\t} else if (this.spellId == 60052) {\n\t\t\t\t\tname += ' (R3)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Explosive Trap':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Weaving)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Arcane Blast':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (No Stacks)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ` (1 Stack)`;\n\t\t\t\t} else if (this.tag > 2) {\n\t\t\t\t\tname += ` (${this.tag - 1} Stacks)`;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Hot Streak':\n\t\t\t\tif (this.tag) name += ' (Crits)';\n\t\t\t\tbreak;\n\t\t\tcase 'Fireball':\n\t\t\tcase 'Flamestrike':\n\t\t\t\tif (this.tag == 8) {\n\t\t\t\t\tname += ' (Rank 8)';\n\t\t\t\t} else if (this.tag == 9) {\n\t\t\t\t\tname += ' (Rank 9)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Pyroblast':\n\t\t\t\tif (this.tag) name += ' (DoT)';\n\t\t\t\tbreak;\n\t\t\tcase 'Living Bomb':\n\t\t\t\tif (this.spellId == 55362) name += ' (Explosion)';\n\t\t\t\tbreak;\n\t\t\tcase 'Evocation':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (1 Tick)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (2 Tick)';\n\t\t\t\t} else if (this.tag == 3) {\n\t\t\t\t\tname += ' (3 Tick)';\n\t\t\t\t} else if (this.tag == 4) {\n\t\t\t\t\tname += ' (4 Tick)';\n\t\t\t\t} else if (this.tag == 5) {\n\t\t\t\t\tname += ' (5 Tick)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Mind Flay':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (1 Tick)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (2 Tick)';\n\t\t\t\t} else if (this.tag == 3) {\n\t\t\t\t\tname += ' (3 Tick)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Mind Sear':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (1 Tick)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (2 Tick)';\n\t\t\t\t} else if (this.tag == 3) {\n\t\t\t\t\tname += ' (3 Tick)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Shattering Throw':\n\t\t\t\tif (this.tag === playerIndex) {\n\t\t\t\t\tname += ` (self)`;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Envenom':\n\t\t\tcase 'Eviscerate':\n\t\t\tcase 'Expose Armor':\n\t\t\tcase 'Rupture':\n\t\t\tcase 'Slice and Dice':\n\t\t\tcase 'Recuperate':\n\t\t\t\tif (this.tag) name += ` (${this.tag} CP)`;\n\t\t\t\tbreak;\n\t\t\tcase 'Instant Poison':\n\t\t\tcase 'Wound Poison':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Deadly)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Shiv)';\n\t\t\t\t} else if (this.tag == 3) {\n\t\t\t\t\tname += ' (Fan of Knives)'\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Fan of Knives':\n\t\t\tcase 'Killing Spree':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Tricks of the Trade':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Not Self)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Mutilate':\n\t\t\t\tif (this.tag == 0) {\n\t\t\t\t\tname += \" (Cast)\";\n\t\t\t\t} else if (this.tag == 1) {\n\t\t\t\t\tname += \" (Main Hand)\";\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Chain Lightning':\n\t\t\tcase 'Lightning Bolt':\n\t\t\t\tif (this.tag == 6) {\n\t\t\t\t\tname += ' (LO)';\n\t\t\t\t} else if (this.tag) {\n\t\t\t\t\tname += ` (${this.tag} MW)`;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Holy Shield':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Proc)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Righteous Vengeance':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Application)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (DoT)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Holy Vengeance':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Application)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (DoT)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t// For targetted buffs, tag is the source player's raid index or -1 if none.\n\t\t\tcase 'Bloodlust':\n\t\t\tcase 'Ferocious Inspiration':\n\t\t\tcase 'Innervate':\n\t\t\tcase 'Focus Magic':\n\t\t\tcase 'Mana Tide Totem':\n\t\t\tcase 'Power Infusion':\n\t\t\t\tif (this.tag != -1) {\n\t\t\t\t\tif (this.tag === playerIndex || playerIndex == undefined) {\n\t\t\t\t\t\tname += ` (self)`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tname += ` (from #${this.tag + 1})`;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tname += ' (raid)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Darkmoon Card: Crusade':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Melee)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Spell)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Frozen Blows':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Physical)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Frost)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Scourge Strike':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Physical)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Shadow)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Heart Strike':\n\t\t\t\t/*if (this.tag == 1) {\n\t\t\t\t\tname += ' (Physical)';\n\t\t\t\t} else */ if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off-target)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Rune Strike':\n\t\t\t\tif (this.tag == 0) {\n\t\t\t\t\tname += ' (Queue)';\n\t\t\t\t} else if (this.tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Frost Strike':\n\t\t\tcase 'Plague Strike':\n\t\t\tcase 'Blood Strike':\n\t\t\tcase 'Death Strike':\n\t\t\tcase 'Obliterate':\n\t\t\tcase 'Blood-Caked Strike':\n\t\t\tcase 'Lightning Speed':\n\t\t\tcase 'Windfury Weapon':\n\t\t\tcase 'Berserk':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Main Hand)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (Off Hand)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Battle Shout':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Snapshot)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Heroic Strike':\n\t\t\tcase 'Cleave':\n\t\t\tcase 'Maul':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (Queue)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Whirlwind':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (OH)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Seed of Corruption':\n\t\t\t\tif (this.tag == 0) {\n\t\t\t\t\tname += ' (DoT)';\n\t\t\t\t} else if (this.tag == 1) {\n\t\t\t\t\tname += ' (Explosion)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 'Thunderfury':\n\t\t\t\tif (this.tag == 1) {\n\t\t\t\t\tname += ' (ST)';\n\t\t\t\t} else if (this.tag == 2) {\n\t\t\t\t\tname += ' (MT)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (this.tag) {\n\t\t\t\t\tname += ' (??)';\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst idString = this.toProtoString();\n\t\tconst iconOverrideId = idOverrides[idString] || null;\n\n\t\tlet iconUrl = ActionId.makeIconUrl(tooltipData['icon']);\n\t\tif (iconOverrideId) {\n\t\t\tconst overrideTooltipData = await ActionId.getTooltipData(iconOverrideId);\n\t\t\ticonUrl = ActionId.makeIconUrl(overrideTooltipData['icon']);\n\t\t}\n\n\t\treturn new ActionId(this.itemId, this.spellId, this.otherId, this.tag, baseName, name, iconUrl, this.randomSuffixId);\n\t}\n\n\ttoString(): string {\n\t\treturn this.toStringIgnoringTag() + (this.tag ? '-' + this.tag : '');\n\t}\n\n\ttoStringIgnoringTag(): string {\n\t\tif (this.itemId) {\n\t\t\treturn 'item-' + this.itemId;\n\t\t} else if (this.spellId) {\n\t\t\treturn 'spell-' + this.spellId;\n\t\t} else if (this.otherId) {\n\t\t\treturn 'other-' + this.otherId;\n\t\t} else {\n\t\t\tthrow new Error('Empty action id!');\n\t\t}\n\t}\n\n\ttoProto(): ActionIdProto {\n\t\tconst protoId = ActionIdProto.create({\n\t\t\ttag: this.tag,\n\t\t});\n\n\t\tif (this.itemId) {\n\t\t\tprotoId.rawId = {\n\t\t\t\toneofKind: 'itemId',\n\t\t\t\titemId: this.itemId,\n\t\t\t};\n\t\t} else if (this.spellId) {\n\t\t\tprotoId.rawId = {\n\t\t\t\toneofKind: 'spellId',\n\t\t\t\tspellId: this.spellId,\n\t\t\t};\n\t\t} else if (this.otherId) {\n\t\t\tprotoId.rawId = {\n\t\t\t\toneofKind: 'otherId',\n\t\t\t\totherId: this.otherId,\n\t\t\t};\n\t\t}\n\n\t\treturn protoId;\n\t}\n\n\ttoProtoString(): string {\n\t\treturn ActionIdProto.toJsonString(this.toProto());\n\t}\n\n\twithoutTag(): ActionId {\n\t\treturn new ActionId(this.itemId, this.spellId, this.otherId, 0, this.baseName, this.baseName, this.iconUrl, this.randomSuffixId);\n\t}\n\n\tstatic fromEmpty(): ActionId {\n\t\treturn new ActionId(0, 0, OtherAction.OtherActionNone, 0, '', '', '');\n\t}\n\n\tstatic fromItemId(itemId: number, tag?: number, randomSuffixId?: number): ActionId {\n\t\treturn new ActionId(itemId, 0, OtherAction.OtherActionNone, tag || 0, '', '', '', randomSuffixId || 0);\n\t}\n\n\tstatic fromSpellId(spellId: number, tag?: number): ActionId {\n\t\treturn new ActionId(0, spellId, OtherAction.OtherActionNone, tag || 0, '', '', '');\n\t}\n\n\tstatic fromOtherId(otherId: OtherAction, tag?: number): ActionId {\n\t\treturn new ActionId(0, 0, otherId, tag || 0, '', '', '');\n\t}\n\n\tstatic fromPetName(petName: string): ActionId {\n\t\treturn petNameToActionId[petName] || new ActionId(0, 0, OtherAction.OtherActionPet, 0, petName, petName, petNameToIcon[petName] || '');\n\t}\n\n\tstatic fromItem(item: Item): ActionId {\n\t\treturn ActionId.fromItemId(item.id);\n\t}\n\n\tstatic fromRandomSuffix(item: Item, randomSuffix: ItemRandomSuffix): ActionId {\n\t\treturn ActionId.fromItemId(item.id, 0, randomSuffix.id);\n\t}\n\n\tstatic fromProto(protoId: ActionIdProto): ActionId {\n\t\tif (protoId.rawId.oneofKind == 'spellId') {\n\t\t\treturn ActionId.fromSpellId(protoId.rawId.spellId, protoId.tag);\n\t\t} else if (protoId.rawId.oneofKind == 'itemId') {\n\t\t\treturn ActionId.fromItemId(protoId.rawId.itemId, protoId.tag);\n\t\t} else if (protoId.rawId.oneofKind == 'otherId') {\n\t\t\treturn ActionId.fromOtherId(protoId.rawId.otherId, protoId.tag);\n\t\t} else {\n\t\t\treturn ActionId.fromEmpty();\n\t\t}\n\t}\n\n\tprivate static readonly logRegex = /{((SpellID)|(ItemID)|(OtherID)): (\\d+)(, Tag: (-?\\d+))?}/;\n\tprivate static readonly logRegexGlobal = new RegExp(ActionId.logRegex, 'g');\n\tprivate static fromMatch(match: RegExpMatchArray): ActionId {\n\t\tconst idType = match[1];\n\t\tconst id = parseInt(match[5]);\n\t\treturn new ActionId(\n\t\t\tidType == 'ItemID' ? id : 0,\n\t\t\tidType == 'SpellID' ? id : 0,\n\t\t\tidType == 'OtherID' ? id : 0,\n\t\t\tmatch[7] ? parseInt(match[7]) : 0,\n\t\t\t'',\n\t\t\t'',\n\t\t\t'',\n\t\t);\n\t}\n\tstatic fromLogString(str: string): ActionId {\n\t\tconst match = str.match(ActionId.logRegex);\n\t\tif (match) {\n\t\t\treturn ActionId.fromMatch(match);\n\t\t} else {\n\t\t\tconsole.warn('Failed to parse action id from log: ' + str);\n\t\t\treturn ActionId.fromEmpty();\n\t\t}\n\t}\n\n\tstatic async replaceAllInString(str: string): Promise<string> {\n\t\tconst matches = [...str.matchAll(ActionId.logRegexGlobal)];\n\n\t\tconst replaceData = await Promise.all(\n\t\t\tmatches.map(async match => {\n\t\t\t\tconst actionId = ActionId.fromMatch(match);\n\t\t\t\tconst filledId = await actionId.fill();\n\t\t\t\treturn {\n\t\t\t\t\tfirstIndex: match.index || 0,\n\t\t\t\t\tlen: match[0].length,\n\t\t\t\t\tactionId: filledId,\n\t\t\t\t};\n\t\t\t}),\n\t\t);\n\n\t\t// Loop in reverse order so we can greedily apply the string replacements.\n\t\tfor (let i = replaceData.length - 1; i >= 0; i--) {\n\t\t\tconst data = replaceData[i];\n\t\t\tstr = str.substring(0, data.firstIndex) + data.actionId.name + str.substring(data.firstIndex + data.len);\n\t\t}\n\n\t\treturn str;\n\t}\n\n\tprivate static makeIconUrl(iconLabel: string): string {\n\t\tif (USE_WOTLK_DB) {\n\t\t\treturn `https://wotlkdb.com/static/images/wow/icons/large/${iconLabel}.jpg`;\n\t\t} else {\n\t\t\treturn `https://wow.zamimg.com/images/wow/icons/large/${iconLabel}.jpg`;\n\t\t}\n\t}\n\n\tstatic async getTooltipData(actionId: ActionId): Promise<IconData> {\n\t\tif (actionId.itemId) {\n\t\t\treturn await Database.getItemIconData(actionId.itemId);\n\t\t} else {\n\t\t\treturn await Database.getSpellIconData(actionId.spellId);\n\t\t}\n\t}\n}\n\n// Some items/spells have weird icons, so use this to show a different icon instead.\nconst idOverrides: Record<string, ActionId> = {};\nidOverrides[ActionId.fromSpellId(37212).toProtoString()] = ActionId.fromItemId(29035); // Improved Wrath of Air Totem\nidOverrides[ActionId.fromSpellId(37223).toProtoString()] = ActionId.fromItemId(29040); // Improved Strength of Earth Totem\nidOverrides[ActionId.fromSpellId(37447).toProtoString()] = ActionId.fromItemId(30720); // Serpent-Coil Braid\nidOverrides[ActionId.fromSpellId(37443).toProtoString()] = ActionId.fromItemId(30196); // Robes of Tirisfal (4pc bonus)\n\nexport const defaultTargetIcon = 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_metamorphosis.jpg';\n\nconst petNameToActionId: Record<string, ActionId> = {\n\t'Gnomish Flame Turret': ActionId.fromItemId(23841),\n\t'Mirror Image': ActionId.fromSpellId(55342),\n\t'Water Elemental': ActionId.fromSpellId(31687),\n\t'Greater Fire Elemental': ActionId.fromSpellId(2894),\n\tShadowfiend: ActionId.fromSpellId(34433),\n\t'Spirit Wolf 1': ActionId.fromSpellId(51533),\n\t'Spirit Wolf 2': ActionId.fromSpellId(51533),\n\t'Rune Weapon': ActionId.fromSpellId(49028),\n\tBloodworm: ActionId.fromSpellId(50452),\n\tGargoyle: ActionId.fromSpellId(49206),\n\tGhoul: ActionId.fromSpellId(46584),\n\t'Army of the Dead': ActionId.fromSpellId(42650),\n\tValkyr: ActionId.fromSpellId(71844),\n};\n\n// https://wowhead.com/cata/hunter-pets\nconst petNameToIcon: Record<string, string> = {\n\tBat: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_bat.jpg',\n\tBear: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_bear.jpg',\n\t'Bird of Prey': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_owl.jpg',\n\tBoar: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_boar.jpg',\n\t'Carrion Bird': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_vulture.jpg',\n\tCat: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_cat.jpg',\n\tChimaera: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_chimera.jpg',\n\t'Core Hound': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_corehound.jpg',\n\tCrab: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_crab.jpg',\n\tCrocolisk: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_crocolisk.jpg',\n\tDevilsaur: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_devilsaur.jpg',\n\tDragonhawk: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_dragonhawk.jpg',\n\tFelguard: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonfelguard.jpg',\n\tFelhunter: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonfelhunter.jpg',\n\tInfernal: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summoninfernal.jpg',\n\tGorilla: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_gorilla.jpg',\n\tHyena: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_hyena.jpg',\n\tImp: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonimp.jpg',\n\t'Mirror Image': 'https://wow.zamimg.com/images/wow/icons/large/spell_magic_lesserinvisibilty.jpg',\n\tMoth: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_moth.jpg',\n\t'Nether Ray': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_netherray.jpg',\n\tOwl: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_owl.jpg',\n\tRaptor: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_raptor.jpg',\n\tRavager: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_ravager.jpg',\n\tRhino: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_rhino.jpg',\n\tScorpid: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_scorpid.jpg',\n\tSerpent: 'https://wow.zamimg.com/images/wow/icons/medium/spell_nature_guardianward.jpg',\n\tSilithid: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_silithid.jpg',\n\tSpider: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_spider.jpg',\n\t'Spirit Beast': 'https://wow.zamimg.com/images/wow/icons/medium/ability_druid_primalprecision.jpg',\n\t'Spore Bat': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_sporebat.jpg',\n\tSuccubus: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_summonsuccubus.jpg',\n\tTallstrider: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_tallstrider.jpg',\n\tTurtle: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_turtle.jpg',\n\t'Warp Stalker': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_warpstalker.jpg',\n\tWasp: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_wasp.jpg',\n\t'Wind Serpent': 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_windserpent.jpg',\n\tWolf: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_wolf.jpg',\n\tWorm: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_pet_worm.jpg',\n};\n\nexport function getPetIconFromName(name: string): string | ActionId | undefined {\n\treturn petNameToActionId[name] || petNameToIcon[name];\n}\n\nexport const resourceTypeToIcon: Record<ResourceType, string> = {\n\t[ResourceType.ResourceTypeNone]: '',\n\t[ResourceType.ResourceTypeHealth]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_elemental_mote_life01.jpg',\n\t[ResourceType.ResourceTypeMana]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_elemental_mote_mana.jpg',\n\t[ResourceType.ResourceTypeEnergy]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_shadow_shadowworddominate.jpg',\n\t[ResourceType.ResourceTypeRage]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_misc_emotionangry.jpg',\n\t[ResourceType.ResourceTypeComboPoints]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_mace_2h_pvp410_c_01.jpg',\n\t[ResourceType.ResourceTypeFocus]: 'https://wow.zamimg.com/images/wow/icons/medium/ability_hunter_focusfire.jpg',\n\t[ResourceType.ResourceTypeRunicPower]: 'https://wow.zamimg.com/images/wow/icons/medium/inv_sword_62.jpg',\n\t[ResourceType.ResourceTypeBloodRune]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_bloodpresence.jpg',\n\t[ResourceType.ResourceTypeFrostRune]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_frostpresence.jpg',\n\t[ResourceType.ResourceTypeUnholyRune]: 'https://wow.zamimg.com/images/wow/icons/medium/spell_deathknight_unholypresence.jpg',\n\t[ResourceType.ResourceTypeDeathRune]: '/cata/assets/img/death_rune.png',\n};\n","function element(tagName, props, ...children) {\n    if (typeof tagName == \"string\") {\n        const el = tagMap[tagName]?.(tagName) || document.createElement(tagName);\n        appendChildren(props?.children != null ? [props.children] : children, props?.shadowRootOptions ? el.attachShadow(props.shadowRootOptions) : el);\n        if (props) {\n            const { attributes, style, dataset, ref } = props;\n            for (let prop in props) {\n                if (!specialProps.has(prop))\n                    el[prop] = props[prop];\n            }\n            if (attributes)\n                for (let attr in attributes)\n                    el.setAttribute(attr, attributes[attr]);\n            if (dataset)\n                Object.assign(el.dataset, dataset);\n            if (style) // @ts-ignore\n                typeof style == \"string\" ? el.style = style : addStyles(el.style, style);\n            if (ref)\n                typeof ref == \"function\" ? ref(el) : ref.value = el;\n        }\n        return el;\n    }\n    let l = children.length;\n    // If there are children they need to be passed to the component\n    // If there\"s only 1 child, children should not be an array\n    return tagName(l ? { children: l > 1 ? children : children[0], ...props } : props || {});\n}\nconst fragment = ({ children }) => {\n    const fragment = new DocumentFragment;\n    if (children)\n        appendChildren([children], fragment);\n    return fragment;\n};\nconst ref = (value) => ({ value });\nconst addStyles = (style, styles) => {\n    for (let name in styles) {\n        if (name.indexOf(\"--\"))\n            style[name] = styles[name];\n        else\n            style.setProperty(name, styles[name]);\n    }\n};\nconst appendChildren = (children, parent) => {\n    for (let child of children) {\n        if (child == null || typeof child == \"boolean\")\n            continue;\n        if (Array.isArray(child))\n            appendChildren(child, parent);\n        // Letting javascript convert numbers automatically\n        else\n            parent.append(child);\n    }\n};\n// SVG elements with the same name as an HTML element such as `a`, `script`, `style` and `title` are removed\n/** Adds SVG support. Must be called before creating any SVG elements with JSX. */\nconst addSVGSupport = () => {\n    let fn = (tagName) => document.createElementNS(\"http://www.w3.org/2000/svg\", tagName);\n    [\n        \"animate\", \"animateMotion\", \"animateTransform\", \"circle\", \"clipPath\", \"defs\", \"desc\",\n        \"ellipse\", \"feBlend\", \"feColorMatrix\", \"feComponentTransfer\", \"feDiffuseLighting\",\n        \"feDisplacementMap\", \"feDistanceLight\", \"feDropShadow\", \"feFlood\", \"feFuncA\", \"feFuncB\",\n        \"feFuncG\", \"feFuncR\", \"feGaussianBlur\", \"feImage\", \"feMerge\", \"feMergeNode\", \"feMorphology\",\n        \"feOffset\", \"fePointLight\", \"feSpecularLighting\", \"feSpotLight\", \"feTile\", \"feTurbulence\",\n        \"filter\", \"foreignObject\", \"g\", \"image\", \"line\", \"linearGradient\", \"marker\", \"mask\",\n        \"metadata\", \"mpath\", \"path\", \"pattern\", \"polygon\", \"polyline\", \"radialGradient\", \"rect\",\n        \"set\", \"stop\", \"svg\", \"switch\", \"symbol\", \"text\", \"textPath\", \"tspan\", \"use\", \"view\"\n    ].forEach(tag => tagMap[tag] = fn);\n};\n/** Adds MathML support. Must be called before creating any MathML elements with JSX. */\nconst addMathMLSupport = () => {\n    let fn = (tagName) => document.createElementNS(\"http://www.w3.org/1998/Math/MathML\", tagName);\n    [\n        \"annotation\", \"annotation-xml\", \"maction\", \"math\", \"merror\", \"mfrac\", \"mi\",\n        \"mmultiscripts\", \"mn\", \"mo\", \"mover\", \"mpadded\", \"mphantom\", \"mprescripts\",\n        \"mroot\", \"mrow\", \"ms\", \"mspace\", \"msqrt\", \"mstyle\", \"msub\", \"msubsup\", \"msup\",\n        \"mtable\", \"mtd\", \"mtext\", \"mtr\", \"munder\", \"munderover\", \"semantics\"\n    ].forEach(tag => tagMap[tag] = fn);\n};\nconst tagMap = {};\nconst specialProps = new Set([\"dataset\", \"style\", \"attributes\", \"ref\", \"children\"]);\nexport { element, fragment, ref, element as createElement, fragment as Fragment, element as h, appendChildren, addSVGSupport, addMathMLSupport };\n//# sourceMappingURL=index.js.map","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { element } from 'tsx-vanilla';\n\nimport { RaidSimResult, ResourceType } from '../proto/api.js';\nimport { bucket, getEnumValues, stringComparator, sum } from '../utils.js';\nimport { ActionId } from './action_id.js';\nimport { resourceNames, stringToResourceType } from './names.js';\n\nexport class Entity {\n\treadonly name: string;\n\treadonly ownerName: string; // Blank if not a pet.\n\n\t// Either target index, player index, or owner index depending on what kind\n\t// of entity this is.\n\treadonly index: number;\n\n\treadonly isTarget: boolean;\n\treadonly isPet: boolean;\n\n\tconstructor(name: string, ownerName: string, index: number, isTarget: boolean, isPet: boolean) {\n\t\tthis.name = name;\n\t\tthis.ownerName = ownerName;\n\t\tthis.index = index;\n\t\tthis.isTarget = isTarget;\n\t\tthis.isPet = isPet;\n\t}\n\n\tequals(other: Entity) {\n\t\treturn this.isTarget == other.isTarget && this.isPet == other.isPet && this.index == other.index && this.name == other.name;\n\t}\n\n\ttoString(): string {\n\t\tif (this.isTarget) {\n\t\t\treturn `Target ${this.index + 1}`;\n\t\t} else if (this.isPet) {\n\t\t\treturn `${this.ownerName} (#${this.index + 1}) - ${this.name}`;\n\t\t} else {\n\t\t\treturn `${this.name} (#${this.index + 1})`;\n\t\t}\n\t}\n\n\ttoHTMLString(): string {\n\t\tif (this.isTarget) {\n\t\t\treturn `<span class=\"text-danger\">[Target ${this.index + 1}]</span>`;\n\t\t} else if (this.isPet) {\n\t\t\treturn `<span class=\"text-primary\">[${this.ownerName} ${this.index + 1}]</span> - ${this.name}`;\n\t\t} else {\n\t\t\treturn `<span class=\"text-primary\">[${this.name} ${this.index + 1}]</span>`;\n\t\t}\n\t}\n\n\t// Parses one or more Entities from a string.\n\t// Each entity label should be one of:\n\t//   'Target 1' if a target,\n\t//   'PlayerName (#1)' if a player, or\n\t//   'PlayerName (#1) - PetName' if a pet.\n\tstatic parseRegex = /\\[(Target (\\d+))|(([a-zA-Z0-9]+) \\(#(\\d+)\\) - ([a-zA-Z0-9\\s]+))|(([a-zA-Z0-9\\s]+) \\(#(\\d+)\\))\\]/g;\n\tstatic parseAll(str: string): Array<Entity> {\n\t\treturn Array.from(str.matchAll(Entity.parseRegex)).map(match => {\n\t\t\tif (match[1]) {\n\t\t\t\treturn new Entity(match[1], '', parseInt(match[2]) - 1, true, false);\n\t\t\t} else if (match[3]) {\n\t\t\t\treturn new Entity(match[6], match[4], parseInt(match[5]) - 1, false, true);\n\t\t\t} else if (match[7]) {\n\t\t\t\treturn new Entity(match[8], '', parseInt(match[9]) - 1, false, false);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Invalid Entity match');\n\t\t\t}\n\t\t});\n\t}\n}\n\ninterface SimLogParams {\n\traw: string;\n\tlogIndex: number;\n\ttimestamp: number;\n\tsource: Entity | null;\n\ttarget: Entity | null;\n\tactionId: ActionId | null;\n\tthreat: number;\n}\n\nexport class SimLog {\n\treadonly raw: string;\n\n\t// Index of this log within the full log output.\n\t// When comparing timestamps this should be used instead of timestamp, because\n\t// timestamp is scraped from log text and doesn't have enough precision.\n\treadonly logIndex: number;\n\n\t// Time in seconds from the encounter start.\n\treadonly timestamp: number;\n\n\treadonly source: Entity | null;\n\treadonly target: Entity | null;\n\treadonly actionId: ActionId | null;\n\n\t// Amount of threat generated from this event. Note that not all events generate threat, so this will be 0.\n\treadonly threat: number;\n\n\t// Logs for auras that were active at this timestamp.\n\t// This is only filled if populateActiveAuras() is called.\n\tactiveAuras: Array<AuraUptimeLog>;\n\n\tconstructor(params: SimLogParams) {\n\t\tthis.raw = params.raw;\n\t\tthis.logIndex = params.logIndex;\n\t\tthis.timestamp = params.timestamp;\n\t\tthis.source = params.source;\n\t\tthis.target = params.target;\n\t\tthis.actionId = params.actionId;\n\t\tthis.threat = params.threat;\n\t\tthis.activeAuras = [];\n\t}\n\n\ttoString(includeTimestamp = true): string {\n\t\tlet str = this.raw;\n\t\t// Base logs already have the timestamp appended by default\n\t\tif (!includeTimestamp) {\n\t\t\tconst regexp = /(\\[[0-9.-]+\\]) (\\[[0-9a-zA-Z\\s\\-()#]+\\])?(.*)/;\n\t\t\tif (this.raw.match(regexp)) {\n\t\t\t\t// TypeScript doesn't handle regex capture typing well\n\t\t\t\tconst captureArr = regexp.exec(this.raw);\n\t\t\t\t// const timestamp = captureArr[1];\n\t\t\t\t// const source = captureArr[2];\n\n\t\t\t\tif (captureArr && captureArr.length == 4) {\n\t\t\t\t\tstr = captureArr[3];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.source) {\n\t\t\tstr = `${this.source.toHTMLString()} ${str}`;\n\t\t}\n\n\t\treturn str;\n\t}\n\n\ttoStringPrefix(includeTimestamp = true): string {\n\t\tlet prefix = '';\n\t\tif (includeTimestamp) {\n\t\t\tprefix = `[${this.timestamp.toFixed(2)}]`;\n\t\t}\n\t\tif (this.source) {\n\t\t\tprefix = `${prefix} ${this.source.toHTMLString()}`;\n\t\t}\n\n\t\treturn prefix;\n\t}\n\n\tformattedTimestamp(): string {\n\t\tconst positiveTimestamp = Math.abs(this.timestamp);\n\t\tconst minutes = Math.floor(positiveTimestamp / 60);\n\t\tconst seconds = Math.floor(positiveTimestamp - minutes * 60);\n\t\tconst milliseconds = ((positiveTimestamp - Math.floor(positiveTimestamp)) * 1000).toFixed();\n\n\t\tlet formatted = `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}:${String(milliseconds).padStart(3, '0')}`;\n\t\tif (this.timestamp < 0) {\n\t\t\tformatted = `-${formatted}`;\n\t\t}\n\t\treturn formatted;\n\t}\n\n\tprotected newActionIdLink(): string {\n\t\tconst iconElem = <span className=\"icon icon-sm\"></span>;\n\t\tconst actionAnchor = (\n\t\t\t<a className=\"log-action\" target=\"_blank\">\n\t\t\t\t<span>\n\t\t\t\t\t{iconElem} {this.actionId!.name}\n\t\t\t\t</span>\n\t\t\t</a>\n\t\t);\n\t\tthis.actionId?.setBackground(iconElem as HTMLAnchorElement);\n\t\tthis.actionId?.setWowheadHref(actionAnchor as HTMLAnchorElement);\n\t\treturn actionAnchor.outerHTML;\n\t}\n\n\tstatic async parseAll(result: RaidSimResult): Promise<Array<SimLog>> {\n\t\tconst lines = result.logs.split('\\n');\n\n\t\treturn Promise.all(\n\t\t\tlines.map((line, lineIndex) => {\n\t\t\t\tconst params: SimLogParams = {\n\t\t\t\t\traw: line,\n\t\t\t\t\tlogIndex: lineIndex,\n\t\t\t\t\ttimestamp: 0,\n\t\t\t\t\tsource: null,\n\t\t\t\t\ttarget: null,\n\t\t\t\t\tactionId: null,\n\t\t\t\t\tthreat: 0,\n\t\t\t\t};\n\n\t\t\t\tconst threatMatch = line.match(/ \\(Threat: (-?[0-9]+\\.[0-9]+)\\)/);\n\t\t\t\tif (threatMatch) {\n\t\t\t\t\tparams.threat = parseFloat(threatMatch[1]);\n\t\t\t\t\tline = line.substring(0, threatMatch.index);\n\t\t\t\t}\n\n\t\t\t\tconst match = line.match(/\\[(-?[0-9]+\\.[0-9]+)\\]\\w*(.*)/);\n\t\t\t\tif (!match || !match[1]) {\n\t\t\t\t\treturn new SimLog(params);\n\t\t\t\t}\n\n\t\t\t\tparams.timestamp = parseFloat(match[1]);\n\t\t\t\tconst remainder = match[2];\n\n\t\t\t\tconst entities = Entity.parseAll(remainder);\n\t\t\t\tparams.source = entities[0] || null;\n\t\t\t\tparams.target = entities[1] || null;\n\n\t\t\t\t// Order from most to least common to reduce number of checks.\n\t\t\t\treturn (\n\t\t\t\t\tDamageDealtLog.parse(params) ||\n\t\t\t\t\tResourceChangedLog.parse(params) ||\n\t\t\t\t\tAuraEventLog.parse(params) ||\n\t\t\t\t\tAuraStacksChangeLog.parse(params) ||\n\t\t\t\t\tMajorCooldownUsedLog.parse(params) ||\n\t\t\t\t\tCastBeganLog.parse(params) ||\n\t\t\t\t\tCastCompletedLog.parse(params) ||\n\t\t\t\t\tStatChangeLog.parse(params) ||\n\t\t\t\t\tPromise.resolve(new SimLog(params))\n\t\t\t\t);\n\t\t\t}),\n\t\t);\n\t}\n\n\tisDamageDealt(): this is DamageDealtLog {\n\t\treturn this instanceof DamageDealtLog;\n\t}\n\n\tisResourceChanged(): this is ResourceChangedLog {\n\t\treturn this instanceof ResourceChangedLog;\n\t}\n\n\tisAuraEvent(): this is AuraEventLog {\n\t\treturn this instanceof AuraEventLog;\n\t}\n\n\tisAuraStacksChange(): this is AuraStacksChangeLog {\n\t\treturn this instanceof AuraStacksChangeLog;\n\t}\n\n\tisMajorCooldownUsed(): this is MajorCooldownUsedLog {\n\t\treturn this instanceof MajorCooldownUsedLog;\n\t}\n\n\tisCastBegan(): this is CastBeganLog {\n\t\treturn this instanceof CastBeganLog;\n\t}\n\n\tisCastCompleted(): this is CastCompletedLog {\n\t\treturn this instanceof CastCompletedLog;\n\t}\n\n\tisStatChange(): this is StatChangeLog {\n\t\treturn this instanceof StatChangeLog;\n\t}\n\n\t// Group events that happen at the same time.\n\tstatic groupDuplicateTimestamps<LogType extends SimLog>(logs: Array<LogType>): Array<Array<LogType>> {\n\t\tconst grouped: Array<Array<LogType>> = [];\n\t\tlet curGroup: Array<LogType> = [];\n\n\t\tlogs.forEach(log => {\n\t\t\tif (curGroup.length == 0 || log.timestamp == curGroup[0].timestamp) {\n\t\t\t\tcurGroup.push(log);\n\t\t\t} else {\n\t\t\t\tgrouped.push(curGroup);\n\t\t\t\tcurGroup = [log];\n\t\t\t}\n\t\t});\n\t\tif (curGroup.length > 0) {\n\t\t\tgrouped.push(curGroup);\n\t\t}\n\n\t\treturn grouped;\n\t}\n}\n\nexport class DamageDealtLog extends SimLog {\n\treadonly amount: number;\n\treadonly type: string;\n\treadonly miss: boolean;\n\treadonly hit: boolean;\n\treadonly crit: boolean;\n\treadonly crush: boolean;\n\treadonly glance: boolean;\n\treadonly dodge: boolean;\n\treadonly parry: boolean;\n\treadonly block: boolean;\n\treadonly tick: boolean;\n\treadonly partialResist1_4: boolean;\n\treadonly partialResist2_4: boolean;\n\treadonly partialResist3_4: boolean;\n\n\tconstructor(\n\t\tparams: SimLogParams,\n\t\tamount: number,\n\t\ttype: string,\n\t\tmiss: boolean,\n\t\tcrit: boolean,\n\t\tcrush: boolean,\n\t\tglance: boolean,\n\t\tdodge: boolean,\n\t\tparry: boolean,\n\t\tblock: boolean,\n\t\ttick: boolean,\n\t\tpartialResist1_4: boolean,\n\t\tpartialResist2_4: boolean,\n\t\tpartialResist3_4: boolean,\n\t) {\n\t\tsuper(params);\n\t\tthis.amount = amount;\n\t\tthis.type = type;\n\t\tthis.miss = miss;\n\t\tthis.glance = glance;\n\t\tthis.dodge = dodge;\n\t\tthis.parry = parry;\n\t\tthis.block = block;\n\t\tthis.hit = !miss && !crit;\n\t\tthis.crit = crit;\n\t\tthis.crush = crush;\n\t\tthis.tick = tick;\n\t\tthis.partialResist1_4 = partialResist1_4;\n\t\tthis.partialResist2_4 = partialResist2_4;\n\t\tthis.partialResist3_4 = partialResist3_4;\n\t}\n\n\tisDamage(): boolean {\n\t\treturn this.type == 'damage';\n\t}\n\n\tisHealing(): boolean {\n\t\treturn this.type == 'healing';\n\t}\n\n\tisShielding(): boolean {\n\t\treturn this.type == 'shielding';\n\t}\n\n\tresultString(): string {\n\t\tlet result = '';\n\n\t\tif (this.isHealing()) {\n\t\t\tresult += 'Heal ';\n\t\t} else if (this.isShielding()) {\n\t\t\tresult += 'Shield ';\n\t\t}\n\n\t\tresult += this.miss\n\t\t\t? 'Miss'\n\t\t\t: this.dodge\n\t\t\t? 'Dodge'\n\t\t\t: this.parry\n\t\t\t? 'Parry'\n\t\t\t: this.glance\n\t\t\t? 'Glance'\n\t\t\t: this.block\n\t\t\t? this.crit\n\t\t\t\t? 'Critical Block'\n\t\t\t\t: 'Block'\n\t\t\t: this.crit\n\t\t\t? 'Crit'\n\t\t\t: this.crush\n\t\t\t? 'Crush'\n\t\t\t: this.tick\n\t\t\t? 'Tick'\n\t\t\t: 'Hit';\n\n\t\tresult += ' ' + this.target?.toHTMLString();\n\t\tif (!this.miss && !this.dodge && !this.parry) {\n\t\t\tresult += ` for <strong class=\"text-danger\">${this.amount.toFixed(2)} damage</strong>`;\n\t\t\tif (this.partialResist1_4) {\n\t\t\t\tresult += ' (25% Resist)';\n\t\t\t} else if (this.partialResist2_4) {\n\t\t\t\tresult += ' (50% Resist)';\n\t\t\t} else if (this.partialResist3_4) {\n\t\t\t\tresult += ' (75% Resist)';\n\t\t\t}\n\t\t\tresult += '.';\n\t\t}\n\t\treturn result;\n\t}\n\n\ttoString(includeTimestamp = true): string {\n\t\tconst threatPostfix = this.source?.isTarget ? '' : ` (${this.threat.toFixed(2)} Threat)`;\n\t\treturn `${this.toStringPrefix(includeTimestamp)} ${this.newActionIdLink()} ${this.resultString()}${threatPostfix}`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<DamageDealtLog> | null {\n\t\tconst match = params.raw.match(\n\t\t\t/] (.*?) (tick )?((Miss)|(Hit)|(CriticalBlock)|(Crit)|(Crush)|(Glance)|(Dodge)|(Parry)|(Block))( \\((\\d+)% Resist\\))?( for (\\d+\\.\\d+) ((damage)|(healing)|(shielding)))?/,\n\t\t);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[1])\n\t\t\t\t.fill(params.source?.index)\n\t\t\t\t.then(cause => {\n\t\t\t\t\tparams.actionId = cause;\n\n\t\t\t\t\tconst amount = match[16] ? parseFloat(match[16]) : 0;\n\t\t\t\t\tconst type = match[17] || '';\n\n\t\t\t\t\treturn new DamageDealtLog(\n\t\t\t\t\t\tparams,\n\t\t\t\t\t\tamount,\n\t\t\t\t\t\ttype,\n\t\t\t\t\t\tmatch[3] == 'Miss',\n\t\t\t\t\t\tmatch[3] == 'Crit' || match[3] == 'CriticalBlock',\n\t\t\t\t\t\tmatch[3] == 'Crush',\n\t\t\t\t\t\tmatch[3] == 'Glance',\n\t\t\t\t\t\tmatch[3] == 'Dodge',\n\t\t\t\t\t\tmatch[3] == 'Parry',\n\t\t\t\t\t\tmatch[3] == 'Block' || match[3] == 'CriticalBlock',\n\t\t\t\t\t\tBoolean(match[2]) && match[2].includes('tick'),\n\t\t\t\t\t\tmatch[14] == '25',\n\t\t\t\t\t\tmatch[14] == '50',\n\t\t\t\t\t\tmatch[14] == '75',\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class DpsLog extends SimLog {\n\treadonly dps: number;\n\n\t// Damage events that occurred at the same time as this log.\n\treadonly damageLogs: Array<DamageDealtLog>;\n\n\tconstructor(params: SimLogParams, dps: number, damageLogs: Array<DamageDealtLog>) {\n\t\tsuper(params);\n\t\tthis.dps = dps;\n\t\tthis.damageLogs = damageLogs;\n\t}\n\n\tstatic DPS_WINDOW = 15; // Window over which to calculate DPS.\n\tstatic fromLogs(damageDealtLogs: Array<DamageDealtLog>): Array<DpsLog> {\n\t\tconst groupedDamageLogs = SimLog.groupDuplicateTimestamps(damageDealtLogs);\n\n\t\tlet curDamageLogs: Array<DamageDealtLog> = [];\n\t\tlet curDamageTotal = 0;\n\n\t\treturn groupedDamageLogs.map(ddLogGroup => {\n\t\t\tddLogGroup.forEach(ddLog => {\n\t\t\t\tcurDamageLogs.push(ddLog);\n\t\t\t\tcurDamageTotal += ddLog.amount;\n\t\t\t});\n\n\t\t\tconst newStartIdx = curDamageLogs.findIndex(curLog => {\n\t\t\t\tconst inWindow = curLog.timestamp > ddLogGroup[0].timestamp - DpsLog.DPS_WINDOW;\n\t\t\t\tif (!inWindow) {\n\t\t\t\t\tcurDamageTotal -= curLog.amount;\n\t\t\t\t}\n\t\t\t\treturn inWindow;\n\t\t\t});\n\t\t\tif (newStartIdx == -1) {\n\t\t\t\tcurDamageLogs = [];\n\t\t\t} else {\n\t\t\t\tcurDamageLogs = curDamageLogs.slice(newStartIdx);\n\t\t\t}\n\n\t\t\tconst dps = curDamageTotal / DpsLog.DPS_WINDOW;\n\t\t\tif (isNaN(dps)) {\n\t\t\t\tconsole.warn('NaN dps!');\n\t\t\t}\n\n\t\t\treturn new DpsLog(\n\t\t\t\t{\n\t\t\t\t\traw: '',\n\t\t\t\t\tlogIndex: ddLogGroup[0].logIndex,\n\t\t\t\t\ttimestamp: ddLogGroup[0].timestamp,\n\t\t\t\t\tsource: ddLogGroup[0].source,\n\t\t\t\t\ttarget: null,\n\t\t\t\t\tactionId: null,\n\t\t\t\t\tthreat: 0,\n\t\t\t\t},\n\t\t\t\tdps,\n\t\t\t\tddLogGroup,\n\t\t\t);\n\t\t});\n\t}\n}\n\nexport class ThreatLogGroup extends SimLog {\n\treadonly threatBefore: number;\n\treadonly threatAfter: number;\n\treadonly logs: Array<SimLog>;\n\n\tconstructor(params: SimLogParams, threatBefore: number, threatAfter: number, logs: Array<SimLog>) {\n\t\tsuper(params);\n\t\tthis.threatBefore = threatBefore;\n\t\tthis.threatAfter = threatAfter;\n\t\tthis.logs = logs;\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>): Array<ThreatLogGroup> {\n\t\tconst groupedLogs = SimLog.groupDuplicateTimestamps(logs.filter(log => log.threat != 0));\n\t\tlet curThreat = 0;\n\t\treturn groupedLogs.map(logGroup => {\n\t\t\tconst newThreat = sum(logGroup.map(log => log.threat));\n\t\t\tconst threatLog = new ThreatLogGroup(\n\t\t\t\t{\n\t\t\t\t\traw: '',\n\t\t\t\t\tlogIndex: logGroup[0].logIndex,\n\t\t\t\t\ttimestamp: logGroup[0].timestamp,\n\t\t\t\t\tsource: logGroup[0].source,\n\t\t\t\t\ttarget: logGroup[0].target,\n\t\t\t\t\tactionId: null,\n\t\t\t\t\tthreat: newThreat,\n\t\t\t\t},\n\t\t\t\tcurThreat,\n\t\t\t\tcurThreat + newThreat,\n\t\t\t\tlogGroup,\n\t\t\t);\n\n\t\t\tcurThreat += newThreat;\n\t\t\treturn threatLog;\n\t\t});\n\t}\n}\n\nexport class AuraEventLog extends SimLog {\n\treadonly isGained: boolean;\n\treadonly isFaded: boolean;\n\treadonly isRefreshed: boolean;\n\n\tconstructor(params: SimLogParams, isGained: boolean, isFaded: boolean, isRefreshed: boolean) {\n\t\tsuper(params);\n\t\tthis.isGained = isGained;\n\t\tthis.isFaded = isFaded;\n\t\tthis.isRefreshed = isRefreshed;\n\t}\n\n\ttoString(includeTimestamp = true): string {\n\t\treturn `${this.toStringPrefix(includeTimestamp)} Aura ${this.isGained ? 'gained' : this.isFaded ? 'faded' : 'refreshed'}: ${this.newActionIdLink()}.`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<AuraEventLog> | null {\n\t\tconst match = params.raw.match(/Aura ((gained)|(faded)|(refreshed)): (.*)/);\n\t\tif (match && match[5]) {\n\t\t\treturn ActionId.fromLogString(match[5])\n\t\t\t\t.fill(params.source?.index)\n\t\t\t\t.then(aura => {\n\t\t\t\t\tparams.actionId = aura;\n\t\t\t\t\tconst event = match[1];\n\t\t\t\t\treturn new AuraEventLog(params, event == 'gained', event == 'faded', event == 'refreshed');\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class AuraStacksChangeLog extends SimLog {\n\treadonly oldStacks: number;\n\treadonly newStacks: number;\n\n\tconstructor(params: SimLogParams, oldStacks: number, newStacks: number) {\n\t\tsuper(params);\n\t\tthis.oldStacks = oldStacks;\n\t\tthis.newStacks = newStacks;\n\t}\n\n\ttoString(includeTimestamp = true): string {\n\t\treturn `${this.toStringPrefix(includeTimestamp)} ${this.newActionIdLink()} stacks: ${this.oldStacks} &rarr; ${this.newStacks}.`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<AuraStacksChangeLog> | null {\n\t\tconst match = params.raw.match(/(.*) stacks: ([0-9]+) --> ([0-9]+)/);\n\t\tif (match && match[1]) {\n\t\t\treturn ActionId.fromLogString(match[1])\n\t\t\t\t.fill(params.source?.index)\n\t\t\t\t.then(aura => {\n\t\t\t\t\tparams.actionId = aura;\n\t\t\t\t\treturn new AuraStacksChangeLog(params, parseInt(match[2]), parseInt(match[3]));\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class AuraUptimeLog extends SimLog {\n\treadonly gainedAt: number;\n\treadonly fadedAt: number;\n\treadonly stacksChange: Array<AuraStacksChangeLog>;\n\n\tconstructor(params: SimLogParams, fadedAt: number, stacksChange: Array<AuraStacksChangeLog>) {\n\t\tsuper(params);\n\t\tthis.gainedAt = params.timestamp;\n\t\tthis.fadedAt = fadedAt;\n\t\tthis.stacksChange = stacksChange;\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>, entity: Entity, encounterDuration: number): Array<AuraUptimeLog> {\n\t\tconst unmatchedGainedLogs: Array<{ gained: AuraEventLog; stacks: Array<AuraStacksChangeLog> }> = [];\n\t\tconst uptimeLogs: Array<AuraUptimeLog> = [];\n\n\t\tlogs.forEach((log: SimLog) => {\n\t\t\tif (!log.source || !log.source.equals(entity)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (log.isAuraStacksChange()) {\n\t\t\t\tconst matchingGainedIdx = unmatchedGainedLogs.findIndex(gainedLog => gainedLog.gained.actionId!.equals(log.actionId!));\n\t\t\t\tif (matchingGainedIdx == -1) {\n\t\t\t\t\tconsole.warn('Unmatched aura stacks change log: ' + log.actionId!.name);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tunmatchedGainedLogs[matchingGainedIdx].stacks.push(log);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!log.isAuraEvent()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (log.isGained) {\n\t\t\t\tunmatchedGainedLogs.push({ gained: log, stacks: [] });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst matchingGainedIdx = unmatchedGainedLogs.findIndex(gainedLog => gainedLog.gained.actionId!.equals(log.actionId!));\n\t\t\tif (matchingGainedIdx == -1) {\n\t\t\t\tconsole.warn('Unmatched aura faded log: ' + log.actionId!.name);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst { gained: gainedLog, stacks: stacksChangeLogs } = unmatchedGainedLogs.splice(matchingGainedIdx, 1)[0];\n\n\t\t\tuptimeLogs.push(\n\t\t\t\tnew AuraUptimeLog(\n\t\t\t\t\t{\n\t\t\t\t\t\traw: log.raw,\n\t\t\t\t\t\tlogIndex: gainedLog.logIndex,\n\t\t\t\t\t\ttimestamp: gainedLog.timestamp,\n\t\t\t\t\t\tsource: log.source,\n\t\t\t\t\t\ttarget: log.target,\n\t\t\t\t\t\tactionId: gainedLog.actionId,\n\t\t\t\t\t\tthreat: gainedLog.threat,\n\t\t\t\t\t},\n\t\t\t\t\tlog.timestamp,\n\t\t\t\t\tstacksChangeLogs,\n\t\t\t\t),\n\t\t\t);\n\n\t\t\tif (log.isRefreshed) {\n\t\t\t\tunmatchedGainedLogs.push({ gained: log, stacks: [] });\n\t\t\t}\n\t\t});\n\n\t\t// Auras active at the end won't have a faded log, so need to add them separately.\n\t\tunmatchedGainedLogs.forEach(unmatchedLog => {\n\t\t\tconst { gained: gainedLog, stacks: stacksChangeLogs } = unmatchedLog;\n\t\t\tuptimeLogs.push(\n\t\t\t\tnew AuraUptimeLog(\n\t\t\t\t\t{\n\t\t\t\t\t\traw: gainedLog.raw,\n\t\t\t\t\t\tlogIndex: gainedLog.logIndex,\n\t\t\t\t\t\ttimestamp: gainedLog.timestamp,\n\t\t\t\t\t\tsource: gainedLog.source,\n\t\t\t\t\t\ttarget: gainedLog.target,\n\t\t\t\t\t\tactionId: gainedLog.actionId,\n\t\t\t\t\t\tthreat: gainedLog.threat,\n\t\t\t\t\t},\n\t\t\t\t\tencounterDuration,\n\t\t\t\t\tstacksChangeLogs,\n\t\t\t\t),\n\t\t\t);\n\t\t});\n\n\t\tuptimeLogs.sort((a, b) => a.gainedAt - b.gainedAt);\n\t\treturn uptimeLogs;\n\t}\n\n\t// Populates the activeAuras field for all logs using the provided auras.\n\tstatic populateActiveAuras(logs: Array<SimLog>, auraLogs: Array<AuraUptimeLog>) {\n\t\tlet curAuras: Array<AuraUptimeLog> = [];\n\t\tlet auraLogsIndex = 0;\n\n\t\tlogs.forEach(log => {\n\t\t\twhile (auraLogsIndex < auraLogs.length && auraLogs[auraLogsIndex].gainedAt <= log.timestamp) {\n\t\t\t\tcurAuras.push(auraLogs[auraLogsIndex]);\n\t\t\t\tauraLogsIndex++;\n\t\t\t}\n\t\t\tcurAuras = curAuras.filter(curAura => curAura.fadedAt > log.timestamp);\n\n\t\t\tconst activeAuras = curAuras.slice();\n\t\t\tactiveAuras.sort((a, b) => stringComparator(a.actionId!.name, b.actionId!.name));\n\t\t\tlog.activeAuras = activeAuras;\n\t\t});\n\t}\n}\n\nexport class ResourceChangedLog extends SimLog {\n\treadonly resourceType: ResourceType;\n\treadonly valueBefore: number;\n\treadonly valueAfter: number;\n\treadonly isSpend: boolean;\n\n\tconstructor(params: SimLogParams, resourceType: ResourceType, valueBefore: number, valueAfter: number, isSpend: boolean) {\n\t\tsuper(params);\n\t\tthis.resourceType = resourceType;\n\t\tthis.valueBefore = valueBefore;\n\t\tthis.valueAfter = valueAfter;\n\t\tthis.isSpend = isSpend;\n\t}\n\n\ttoString(includeTimestamp = true): string {\n\t\tconst signedDiff = (this.valueAfter - this.valueBefore) * (this.isSpend ? -1 : 1);\n\n\t\tconst isHealth = this.resourceType == ResourceType.ResourceTypeHealth;\n\t\tconst verb = isHealth ? (this.isSpend ? 'Lost' : 'Recovered') : this.isSpend ? 'Spent' : 'Gained';\n\t\tconst resourceName = resourceNames.get(this.resourceType)!;\n\t\tconst resourceKlass = `resource-${resourceName.replace(/\\s/g, '-').toLowerCase()}`;\n\n\t\treturn `${this.toStringPrefix(includeTimestamp)} ${verb} <strong class=\"${resourceKlass}\">${signedDiff.toFixed(\n\t\t\t1,\n\t\t)} ${resourceName}</strong> from ${this.newActionIdLink()}. (${this.valueBefore.toFixed(1)} &rarr; ${this.valueAfter.toFixed(1)})`;\n\t}\n\n\tresultString(): string {\n\t\tconst delta = this.valueAfter - this.valueBefore;\n\t\tif (delta < 0) {\n\t\t\treturn delta.toFixed(1);\n\t\t} else {\n\t\t\treturn '+' + delta.toFixed(1);\n\t\t}\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<ResourceChangedLog> | null {\n\t\tconst match = params.raw.match(\n\t\t\t/((Gained)|(Spent)) \\d+\\.?\\d* ((health)|(mana)|(energy)|(focus)|(rage)|(combo points)|(runic power)|(blood rune)|(frost rune)|(unholy rune)|(death rune)) from (.*) \\((\\d+\\.?\\d*) --> (\\d+\\.?\\d*)\\)/,\n\t\t);\n\t\tif (match) {\n\t\t\tconst resourceType = stringToResourceType(match[4]);\n\t\t\treturn ActionId.fromLogString(match[16])\n\t\t\t\t.fill(params.source?.index)\n\t\t\t\t.then(cause => {\n\t\t\t\t\tparams.actionId = cause;\n\t\t\t\t\treturn new ResourceChangedLog(params, resourceType, parseFloat(match[17]), parseFloat(match[18]), match[1] == 'Spent');\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class ResourceChangedLogGroup extends SimLog {\n\treadonly resourceType: ResourceType;\n\treadonly valueBefore: number;\n\treadonly valueAfter: number;\n\treadonly logs: Array<ResourceChangedLog>;\n\n\tconstructor(params: SimLogParams, resourceType: ResourceType, valueBefore: number, valueAfter: number, logs: Array<ResourceChangedLog>) {\n\t\tsuper(params);\n\t\tthis.resourceType = resourceType;\n\t\tthis.valueBefore = valueBefore;\n\t\tthis.valueAfter = valueAfter;\n\t\tthis.logs = logs;\n\t}\n\n\ttoString(includeTimestamp = true): string {\n\t\treturn `${this.toStringPrefix(includeTimestamp)} ${resourceNames.get(this.resourceType)}: ${this.valueBefore.toFixed(\n\t\t\t1,\n\t\t)} &rarr; ${this.valueAfter.toFixed(1)}`;\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>): Record<ResourceType, Array<ResourceChangedLogGroup>> {\n\t\tconst allResourceChangedLogs = logs.filter((log): log is ResourceChangedLog => log.isResourceChanged());\n\n\t\tconst results: Partial<Record<ResourceType, Array<ResourceChangedLogGroup>>> = {};\n\t\tconst resourceTypes = (getEnumValues(ResourceType) as Array<ResourceType>).filter(val => val != ResourceType.ResourceTypeNone);\n\t\tresourceTypes.forEach(resourceType => {\n\t\t\tconst resourceChangedLogs = allResourceChangedLogs.filter(log => log.resourceType == resourceType);\n\n\t\t\tconst groupedLogs = SimLog.groupDuplicateTimestamps(resourceChangedLogs);\n\t\t\tresults[resourceType] = groupedLogs.map(\n\t\t\t\tlogGroup =>\n\t\t\t\t\tnew ResourceChangedLogGroup(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\traw: '',\n\t\t\t\t\t\t\tlogIndex: logGroup[0].logIndex,\n\t\t\t\t\t\t\ttimestamp: logGroup[0].timestamp,\n\t\t\t\t\t\t\tsource: logGroup[0].source,\n\t\t\t\t\t\t\ttarget: logGroup[0].target,\n\t\t\t\t\t\t\tactionId: null,\n\t\t\t\t\t\t\tthreat: 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tresourceType,\n\t\t\t\t\t\tlogGroup[0].valueBefore,\n\t\t\t\t\t\tlogGroup[logGroup.length - 1].valueAfter,\n\t\t\t\t\t\tlogGroup,\n\t\t\t\t\t),\n\t\t\t);\n\t\t});\n\n\t\treturn results as Record<ResourceType, Array<ResourceChangedLogGroup>>;\n\t}\n}\n\nexport class MajorCooldownUsedLog extends SimLog {\n\tconstructor(params: SimLogParams) {\n\t\tsuper(params);\n\t}\n\n\ttoString(includeTimestamp = true): string {\n\t\treturn `${this.toStringPrefix(includeTimestamp)} Major cooldown used: ${this.newActionIdLink()}.`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<MajorCooldownUsedLog> | null {\n\t\tconst match = params.raw.match(/Major cooldown used: (.*)/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[1])\n\t\t\t\t.fill(params.source?.index)\n\t\t\t\t.then(cooldownId => {\n\t\t\t\t\tparams.actionId = cooldownId;\n\t\t\t\t\treturn new MajorCooldownUsedLog(params);\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class CastBeganLog extends SimLog {\n\treadonly manaCost: number;\n\treadonly castTime: number;\n\treadonly effectiveTime: number;\n\n\tconstructor(params: SimLogParams, manaCost: number, castTime: number, effectiveTime: number) {\n\t\tsuper(params);\n\t\tthis.manaCost = manaCost;\n\t\tthis.castTime = castTime;\n\t\tthis.effectiveTime = effectiveTime;\n\t}\n\n\ttoString(includeTimestamp = true): string {\n\t\treturn `${this.toStringPrefix(includeTimestamp)} Casting ${this.newActionIdLink()} (Cast time: ${this.castTime.toFixed(\n\t\t\t2,\n\t\t)}s, Cost: ${this.manaCost.toFixed(1)} Mana).`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<CastBeganLog> | null {\n\t\tconst match = params.raw.match(/Casting (.*) \\(Cost = (\\d+\\.?\\d*), Cast Time = (\\d+\\.?\\d*)(m?s), Effective Time = (\\d+\\.?\\d*)(m?s)\\)/);\n\t\tif (match) {\n\t\t\tlet castTime = parseFloat(match[3]);\n\t\t\tif (match[4] == 'ms') {\n\t\t\t\tcastTime /= 1000;\n\t\t\t}\n\t\t\tlet effectiveTime = parseFloat(match[5]);\n\t\t\tif (match[6] == 'ms') {\n\t\t\t\teffectiveTime /= 1000;\n\t\t\t}\n\t\t\treturn ActionId.fromLogString(match[1])\n\t\t\t\t.fill(params.source?.index)\n\t\t\t\t.then(castId => {\n\t\t\t\t\tparams.actionId = castId;\n\t\t\t\t\treturn new CastBeganLog(params, parseFloat(match[2]), castTime, effectiveTime);\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class CastCompletedLog extends SimLog {\n\tconstructor(params: SimLogParams) {\n\t\tsuper(params);\n\t}\n\n\ttoString(includeTimestamp = true): string {\n\t\treturn `${this.toStringPrefix(includeTimestamp)} Completed cast ${this.actionId!.name}.`;\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<CastCompletedLog> | null {\n\t\tconst match = params.raw.match(/Completed cast (.*)/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[1])\n\t\t\t\t.fill(params.source?.index)\n\t\t\t\t.then(castId => {\n\t\t\t\t\tparams.actionId = castId;\n\t\t\t\t\treturn new CastCompletedLog(params);\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport class CastLog extends SimLog {\n\treadonly castTime: number;\n\treadonly effectiveTime: number;\n\treadonly travelTime: number;\n\n\treadonly castBeganLog: CastBeganLog;\n\treadonly castCompletedLog: CastCompletedLog | null;\n\n\t// All instances of damage dealt from the completion of this cast until the completion of the next cast.\n\treadonly damageDealtLogs: Array<DamageDealtLog>;\n\n\tconstructor(castBeganLog: CastBeganLog, castCompletedLog: CastCompletedLog | null, damageDealtLogs: Array<DamageDealtLog>) {\n\t\tsuper({\n\t\t\traw: castBeganLog.raw,\n\t\t\tlogIndex: castBeganLog.logIndex,\n\t\t\ttimestamp: castBeganLog.timestamp,\n\t\t\tsource: castBeganLog.source,\n\t\t\ttarget: castBeganLog.target,\n\t\t\tactionId: castCompletedLog?.actionId || castBeganLog.actionId, // Use completed log because of arcane blast\n\t\t\tthreat: castCompletedLog?.threat || castBeganLog.threat,\n\t\t});\n\t\tthis.castTime = castBeganLog.castTime;\n\t\tthis.effectiveTime = castBeganLog.effectiveTime;\n\t\tthis.castBeganLog = castBeganLog;\n\t\tthis.castCompletedLog = castCompletedLog;\n\t\tthis.damageDealtLogs = damageDealtLogs;\n\n\t\tif (this.castCompletedLog && this.castBeganLog) {\n\t\t\tthis.castTime = this.castCompletedLog.timestamp - this.castBeganLog.timestamp;\n\t\t\tthis.effectiveTime = this.castCompletedLog.timestamp - this.castBeganLog.timestamp;\n\t\t}\n\n\t\tif (\n\t\t\tthis.castCompletedLog &&\n\t\t\tthis.damageDealtLogs.length == 1 &&\n\t\t\tthis.castCompletedLog.timestamp < this.damageDealtLogs[0].timestamp &&\n\t\t\t!this.damageDealtLogs[0].tick\n\t\t) {\n\t\t\tthis.travelTime = this.damageDealtLogs[0].timestamp - this.castCompletedLog.timestamp;\n\t\t} else {\n\t\t\tthis.travelTime = 0;\n\t\t}\n\t}\n\n\ttoString(includeTimestamp = true): string {\n\t\treturn `${this.toStringPrefix(includeTimestamp)} Casting ${this.actionId!.name} (Cast time = ${this.castTime.toFixed(2)}s).`;\n\t}\n\n\ttotalDamage(): number {\n\t\treturn sum(this.damageDealtLogs.map(ddl => ddl.amount));\n\t}\n\n\tstatic fromLogs(logs: Array<SimLog>): Array<CastLog> {\n\t\tconst castBeganLogs = logs.filter((log): log is CastBeganLog => log.isCastBegan());\n\t\tconst castCompletedLogs = logs.filter((log): log is CastCompletedLog => log.isCastCompleted());\n\t\tconst damageDealtLogs = logs.filter((log): log is DamageDealtLog => log.isDamageDealt());\n\n\t\tconst toBucketKey = (actionId: ActionId) => {\n\t\t\tif (actionId.spellId == 30451) {\n\t\t\t\t// Arcane Blast is unique because it can finish its cast as a different\n\t\t\t\t// spell than it started (if stacks drop).\n\t\t\t\treturn actionId.toStringIgnoringTag();\n\t\t\t} else {\n\t\t\t\treturn actionId.toString();\n\t\t\t}\n\t\t};\n\t\tconst castBeganLogsByAbility = bucket(castBeganLogs, log => toBucketKey(log.actionId!));\n\t\tconst castCompletedLogsByAbility = bucket(castCompletedLogs, log => toBucketKey(log.actionId!));\n\t\tconst damageDealtLogsByAbility = bucket(damageDealtLogs, log => toBucketKey(log.actionId!));\n\n\t\tconst castLogs: Array<CastLog> = [];\n\t\tObject.keys(castBeganLogsByAbility).forEach(bucketKey => {\n\t\t\tconst abilityCastsBegan = castBeganLogsByAbility[bucketKey]!;\n\t\t\tconst abilityCastsCompleted = castCompletedLogsByAbility[bucketKey];\n\t\t\tconst abilityDamageDealt = damageDealtLogsByAbility[bucketKey];\n\n\t\t\tlet ddIdx = 0;\n\t\t\tfor (let cbIdx = 0; cbIdx < abilityCastsBegan.length; cbIdx++) {\n\t\t\t\tconst cbLog = abilityCastsBegan[cbIdx];\n\n\t\t\t\t// Assume cast completed log is the same index because they always come in pairs.\n\t\t\t\t// Only exception is final pair, where there might be a cast began without a cast completed.\n\t\t\t\tlet ccLog: CastCompletedLog | null = null;\n\t\t\t\tlet nextCcLog: CastCompletedLog | null = null;\n\t\t\t\tif (abilityCastsCompleted && cbIdx < abilityCastsCompleted.length) {\n\t\t\t\t\tccLog = abilityCastsCompleted[cbIdx];\n\t\t\t\t\tif (cbIdx + 1 < abilityCastsCompleted.length) {\n\t\t\t\t\t\tnextCcLog = abilityCastsCompleted[cbIdx + 1];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Find all damage dealt logs between the cur and next cast completed logs.\n\t\t\t\tconst ddLogs = [];\n\t\t\t\twhile (abilityDamageDealt && ddIdx < abilityDamageDealt.length && (!nextCcLog || abilityDamageDealt[ddIdx].timestamp < nextCcLog.timestamp)) {\n\t\t\t\t\tddLogs.push(abilityDamageDealt[ddIdx]);\n\t\t\t\t\tddIdx++;\n\t\t\t\t}\n\t\t\t\tcastLogs.push(new CastLog(cbLog, ccLog, ddLogs));\n\t\t\t}\n\t\t});\n\n\t\tcastLogs.sort((a, b) => a.timestamp - b.timestamp);\n\t\treturn castLogs;\n\t}\n}\n\nexport class StatChangeLog extends SimLog {\n\treadonly isGain: boolean;\n\treadonly stats: string;\n\n\tconstructor(params: SimLogParams, isGain: boolean, stats: string) {\n\t\tsuper(params);\n\t\tthis.isGain = isGain;\n\t\tthis.stats = stats;\n\t}\n\n\ttoString(includeTimestamp = true): string {\n\t\tif (this.isGain) {\n\t\t\treturn `${this.toStringPrefix(includeTimestamp)} Gained ${this.stats} from ${this.newActionIdLink()}.`;\n\t\t} else {\n\t\t\treturn `${this.toStringPrefix(includeTimestamp)} Lost ${this.stats} from fading ${this.newActionIdLink()}.`;\n\t\t}\n\t}\n\n\tstatic parse(params: SimLogParams): Promise<StatChangeLog> | null {\n\t\tconst match = params.raw.match(/((Gained)|(Lost)) ({.*}) from (fading )?(.*)/);\n\t\tif (match) {\n\t\t\treturn ActionId.fromLogString(match[6])\n\t\t\t\t.fill(params.source?.index)\n\t\t\t\t.then(effectId => {\n\t\t\t\t\tparams.actionId = effectId;\n\t\t\t\t\tconst sign = match[1] == 'Lost' ? -1 : 1;\n\t\t\t\t\treturn new StatChangeLog(params, sign == 1, match[4]);\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n","import { PlayerSpec } from '../player_spec.js';\nimport { PlayerSpecs } from '../player_specs';\nimport {\n\tActionMetrics as ActionMetricsProto,\n\tAuraMetrics as AuraMetricsProto,\n\tDistributionMetrics as DistributionMetricsProto,\n\tEncounterMetrics as EncounterMetricsProto,\n\tParty as PartyProto,\n\tPartyMetrics as PartyMetricsProto,\n\tPlayer as PlayerProto,\n\tRaid as RaidProto,\n\tRaidMetrics as RaidMetricsProto,\n\tRaidSimRequest,\n\tRaidSimResult,\n\tResourceMetrics as ResourceMetricsProto,\n\tResourceType,\n\tTargetedActionMetrics as TargetedActionMetricsProto,\n\tUnitMetrics as UnitMetricsProto,\n} from '../proto/api.js';\nimport { Class, Encounter as EncounterProto, Target as TargetProto } from '../proto/common.js';\nimport { SimRun } from '../proto/ui.js';\nimport { ActionId, defaultTargetIcon } from '../proto_utils/action_id.js';\nimport { getPlayerSpecFromPlayer } from '../proto_utils/utils.js';\nimport { bucket, sum } from '../utils.js';\nimport {\n\tAuraUptimeLog,\n\tCastLog,\n\tDamageDealtLog,\n\tDpsLog,\n\tEntity,\n\tMajorCooldownUsedLog,\n\tResourceChangedLogGroup,\n\tSimLog,\n\tThreatLogGroup,\n} from './logs_parser.js';\n\nexport interface SimResultFilter {\n\t// Raid index of the player to display, or null for all players.\n\tplayer?: number | null;\n\n\t// Target index of the target to display, or null for all targets.\n\ttarget?: number | null;\n}\n\nclass SimResultData {\n\treadonly request: RaidSimRequest;\n\treadonly result: RaidSimResult;\n\n\tconstructor(request: RaidSimRequest, result: RaidSimResult) {\n\t\tthis.request = request;\n\t\tthis.result = result;\n\t}\n\n\tget iterations() {\n\t\treturn this.request.simOptions?.iterations || 1;\n\t}\n\n\tget duration() {\n\t\treturn this.result.avgIterationDuration || 1;\n\t}\n\n\tget firstIterationDuration() {\n\t\treturn this.result.firstIterationDuration || 1;\n\t}\n}\n\n// Holds all the data from a simulation call, and provides helper functions\n// for parsing it.\nexport class SimResult {\n\treadonly request: RaidSimRequest;\n\treadonly result: RaidSimResult;\n\n\treadonly raidMetrics: RaidMetrics;\n\treadonly encounterMetrics: EncounterMetrics;\n\treadonly logs: Array<SimLog>;\n\n\tprivate players: Array<UnitMetrics>;\n\tprivate units: Array<UnitMetrics>;\n\n\tprivate constructor(request: RaidSimRequest, result: RaidSimResult, raidMetrics: RaidMetrics, encounterMetrics: EncounterMetrics, logs: Array<SimLog>) {\n\t\tthis.request = request;\n\t\tthis.result = result;\n\t\tthis.raidMetrics = raidMetrics;\n\t\tthis.encounterMetrics = encounterMetrics;\n\t\tthis.logs = logs;\n\n\t\tthis.players = raidMetrics.parties.map(party => party.players).flat();\n\t\tthis.units = this.players.concat(encounterMetrics.targets);\n\t}\n\n\tget iterations() {\n\t\treturn this.request.simOptions?.iterations || 1;\n\t}\n\n\tget duration() {\n\t\treturn this.result.avgIterationDuration || 1;\n\t}\n\n\tget firstIterationDuration() {\n\t\treturn this.result.firstIterationDuration || 1;\n\t}\n\n\tgetPlayers(filter?: SimResultFilter): Array<UnitMetrics> {\n\t\tif (filter?.player || filter?.player === 0) {\n\t\t\tconst player = this.getUnitWithIndex(filter.player);\n\t\t\treturn player ? [player] : [];\n\t\t} else {\n\t\t\treturn this.raidMetrics.parties.map(party => party.players).flat();\n\t\t}\n\t}\n\n\t// Returns the first player, regardless of which party / raid slot its in.\n\tgetFirstPlayer(): UnitMetrics | null {\n\t\treturn this.getPlayers()[0] || null;\n\t}\n\n\tgetPlayerWithIndex(unitIndex: number): UnitMetrics | null {\n\t\treturn this.players.find(player => player.unitIndex == unitIndex) || null;\n\t}\n\tgetPlayerWithRaidIndex(raidIndex: number): UnitMetrics | null {\n\t\treturn this.players.find(player => player.index == raidIndex) || null;\n\t}\n\n\tgetTargets(filter?: SimResultFilter): Array<UnitMetrics> {\n\t\tif (filter?.target || filter?.target === 0) {\n\t\t\tconst target = this.getUnitWithIndex(filter.target);\n\t\t\treturn target ? [target] : [];\n\t\t} else {\n\t\t\treturn this.encounterMetrics.targets.slice();\n\t\t}\n\t}\n\n\tgetTargetWithIndex(unitIndex: number): UnitMetrics | null {\n\t\treturn this.getTargets().find(target => target.unitIndex == unitIndex) || null;\n\t}\n\tgetTargetWithEncounterIndex(index: number): UnitMetrics | null {\n\t\treturn this.getTargets().find(target => target.index == index) || null;\n\t}\n\tgetUnitWithIndex(unitIndex: number): UnitMetrics | null {\n\t\treturn this.units.find(unit => unit.unitIndex == unitIndex) || null;\n\t}\n\n\tgetDamageMetrics(filter: SimResultFilter): DistributionMetricsProto {\n\t\tif (filter.player || filter.player === 0) {\n\t\t\treturn this.getPlayerWithIndex(filter.player)?.dps || DistributionMetricsProto.create();\n\t\t}\n\n\t\treturn this.raidMetrics.dps;\n\t}\n\n\tgetActionMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n\t\treturn ActionMetrics.joinById(\n\t\t\tthis.getPlayers(filter)\n\t\t\t\t.map(player => player.getPlayerAndPetActions().map(action => action.forTarget(filter)))\n\t\t\t\t.flat(),\n\t\t);\n\t}\n\n\tgetSpellMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n\t\treturn this.getActionMetrics(filter).filter(e => e.hitAttempts != 0 && !e.isMeleeAction);\n\t}\n\n\tgetMeleeMetrics(filter?: SimResultFilter): Array<ActionMetrics> {\n\t\treturn this.getActionMetrics(filter).filter(e => e.hitAttempts != 0 && e.isMeleeAction);\n\t}\n\n\tgetResourceMetrics(resourceType: ResourceType, filter?: SimResultFilter): Array<ResourceMetrics> {\n\t\treturn ResourceMetrics.joinById(\n\t\t\tthis.getPlayers(filter)\n\t\t\t\t.map(player => player.resources.filter(resource => resource.type == resourceType))\n\t\t\t\t.flat(),\n\t\t);\n\t}\n\n\tgetBuffMetrics(filter?: SimResultFilter): Array<AuraMetrics> {\n\t\treturn AuraMetrics.joinById(\n\t\t\tthis.getPlayers(filter)\n\t\t\t\t.map(player => player.auras)\n\t\t\t\t.flat(),\n\t\t);\n\t}\n\n\tgetDebuffMetrics(filter?: SimResultFilter): Array<AuraMetrics> {\n\t\treturn AuraMetrics.joinById(\n\t\t\tthis.getTargets(filter)\n\t\t\t\t.map(target => target.auras)\n\t\t\t\t.flat(),\n\t\t).filter(aura => aura.uptimePercent != 0);\n\t}\n\n\ttoProto(): SimRun {\n\t\treturn SimRun.create({\n\t\t\trequest: this.request,\n\t\t\tresult: this.result,\n\t\t});\n\t}\n\n\tstatic async fromProto(proto: SimRun): Promise<SimResult> {\n\t\treturn SimResult.makeNew(proto.request || RaidSimRequest.create(), proto.result || RaidSimResult.create());\n\t}\n\n\tstatic async makeNew(request: RaidSimRequest, result: RaidSimResult): Promise<SimResult> {\n\t\tconst resultData = new SimResultData(request, result);\n\t\tconst logs = await SimLog.parseAll(result);\n\n\t\tconst raidPromise = RaidMetrics.makeNew(resultData, request.raid!, result.raidMetrics!, logs);\n\t\tconst encounterPromise = EncounterMetrics.makeNew(resultData, request.encounter!, result.encounterMetrics!, logs);\n\n\t\tconst raidMetrics = await raidPromise;\n\t\tconst encounterMetrics = await encounterPromise;\n\n\t\treturn new SimResult(request, result, raidMetrics, encounterMetrics, logs);\n\t}\n}\n\nexport class RaidMetrics {\n\tprivate readonly raid: RaidProto;\n\tprivate readonly metrics: RaidMetricsProto;\n\n\treadonly dps: DistributionMetricsProto;\n\treadonly hps: DistributionMetricsProto;\n\treadonly parties: Array<PartyMetrics>;\n\n\tprivate constructor(raid: RaidProto, metrics: RaidMetricsProto, parties: Array<PartyMetrics>) {\n\t\tthis.raid = raid;\n\t\tthis.metrics = metrics;\n\t\tthis.dps = this.metrics.dps!;\n\t\tthis.hps = this.metrics.hps!;\n\t\tthis.parties = parties;\n\t}\n\n\tstatic async makeNew(resultData: SimResultData, raid: RaidProto, metrics: RaidMetricsProto, logs: Array<SimLog>): Promise<RaidMetrics> {\n\t\tconst numParties = Math.min(raid.parties.length, metrics.parties.length);\n\n\t\tconst parties = await Promise.all(\n\t\t\t[...new Array(numParties).keys()].map(i => PartyMetrics.makeNew(resultData, raid.parties[i], metrics.parties[i], i, logs)),\n\t\t);\n\n\t\treturn new RaidMetrics(raid, metrics, parties);\n\t}\n}\n\nexport class PartyMetrics {\n\tprivate readonly party: PartyProto;\n\tprivate readonly metrics: PartyMetricsProto;\n\n\treadonly partyIndex: number;\n\treadonly dps: DistributionMetricsProto;\n\treadonly hps: DistributionMetricsProto;\n\treadonly players: Array<UnitMetrics>;\n\n\tprivate constructor(party: PartyProto, metrics: PartyMetricsProto, partyIndex: number, players: Array<UnitMetrics>) {\n\t\tthis.party = party;\n\t\tthis.metrics = metrics;\n\t\tthis.partyIndex = partyIndex;\n\t\tthis.dps = this.metrics.dps!;\n\t\tthis.hps = this.metrics.hps!;\n\t\tthis.players = players;\n\t}\n\n\tstatic async makeNew(\n\t\tresultData: SimResultData,\n\t\tparty: PartyProto,\n\t\tmetrics: PartyMetricsProto,\n\t\tpartyIndex: number,\n\t\tlogs: Array<SimLog>,\n\t): Promise<PartyMetrics> {\n\t\tconst numPlayers = Math.min(party.players.length, metrics.players.length);\n\t\tconst players = await Promise.all(\n\t\t\t[...new Array(numPlayers).keys()]\n\t\t\t\t.filter(i => party.players[i].class != Class.ClassUnknown)\n\t\t\t\t.map(i => UnitMetrics.makeNewPlayer(resultData, party.players[i], metrics.players[i], partyIndex * 5 + i, false, logs)),\n\t\t);\n\n\t\treturn new PartyMetrics(party, metrics, partyIndex, players);\n\t}\n}\n\nexport class UnitMetrics {\n\t// If this Unit is a pet, player is the owner. If it's a target, player is null.\n\tprivate readonly player: PlayerProto | null;\n\tprivate readonly target: TargetProto | null;\n\tprivate readonly metrics: UnitMetricsProto;\n\n\treadonly index: number;\n\treadonly unitIndex: number;\n\treadonly name: string;\n\treadonly spec: PlayerSpec<any> | null;\n\treadonly petActionId: ActionId | null;\n\treadonly iconUrl: string;\n\treadonly classColor: string;\n\treadonly dps: DistributionMetricsProto;\n\treadonly dpasp: DistributionMetricsProto;\n\treadonly hps: DistributionMetricsProto;\n\treadonly tps: DistributionMetricsProto;\n\treadonly dtps: DistributionMetricsProto;\n\treadonly tmi: DistributionMetricsProto;\n\treadonly tto: DistributionMetricsProto;\n\treadonly actions: Array<ActionMetrics>;\n\treadonly auras: Array<AuraMetrics>;\n\treadonly resources: Array<ResourceMetrics>;\n\treadonly pets: Array<UnitMetrics>;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\n\treadonly logs: Array<SimLog>;\n\treadonly damageDealtLogs: Array<DamageDealtLog>;\n\treadonly groupedResourceLogs: Record<ResourceType, Array<ResourceChangedLogGroup>>;\n\treadonly dpsLogs: Array<DpsLog>;\n\treadonly auraUptimeLogs: Array<AuraUptimeLog>;\n\treadonly majorCooldownLogs: Array<MajorCooldownUsedLog>;\n\treadonly castLogs: Array<CastLog>;\n\treadonly threatLogs: Array<ThreatLogGroup>;\n\n\t// Aura uptime logs, filtered to include only auras that correspond to a\n\t// major cooldown.\n\treadonly majorCooldownAuraUptimeLogs: Array<AuraUptimeLog>;\n\n\tprivate constructor(\n\t\tplayer: PlayerProto | null,\n\t\ttarget: TargetProto | null,\n\t\tpetActionId: ActionId | null,\n\t\tmetrics: UnitMetricsProto,\n\t\tindex: number,\n\t\tactions: Array<ActionMetrics>,\n\t\tauras: Array<AuraMetrics>,\n\t\tresources: Array<ResourceMetrics>,\n\t\tpets: Array<UnitMetrics>,\n\t\tlogs: Array<SimLog>,\n\t\tresultData: SimResultData,\n\t) {\n\t\tthis.player = player;\n\t\tthis.target = target;\n\t\tthis.metrics = metrics;\n\n\t\tthis.index = index;\n\t\tthis.unitIndex = metrics.unitIndex;\n\t\tthis.name = metrics.name;\n\t\tthis.spec = this.player ? getPlayerSpecFromPlayer(this.player) : null;\n\t\tthis.petActionId = petActionId;\n\t\tthis.iconUrl = this.isPlayer ? this.spec?.getIcon('medium') ?? '' : this.isTarget ? defaultTargetIcon : '';\n\t\tthis.classColor = this.isTarget ? '' : PlayerSpecs.getPlayerClass(this.spec as PlayerSpec<any>).hexColor ?? '';\n\t\tthis.dps = this.metrics.dps!;\n\t\tthis.dpasp = this.metrics.dpasp!;\n\t\tthis.hps = this.metrics.hps!;\n\t\tthis.tps = this.metrics.threat!;\n\t\tthis.dtps = this.metrics.dtps!;\n\t\tthis.tmi = this.metrics.tmi!;\n\t\tthis.tto = this.metrics.tto!;\n\t\tthis.actions = actions;\n\t\tthis.auras = auras;\n\t\tthis.resources = resources;\n\t\tthis.pets = pets;\n\t\tthis.logs = logs;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\n\t\tthis.damageDealtLogs = this.logs.filter((log): log is DamageDealtLog => log.isDamageDealt());\n\t\tthis.dpsLogs = DpsLog.fromLogs(this.damageDealtLogs);\n\t\tthis.castLogs = CastLog.fromLogs(this.logs);\n\t\tthis.threatLogs = ThreatLogGroup.fromLogs(this.logs);\n\n\t\tthis.auraUptimeLogs = AuraUptimeLog.fromLogs(\n\t\t\tthis.logs,\n\t\t\tnew Entity(this.name, '', this.index, this.target != null, this.isPet),\n\t\t\tresultData.firstIterationDuration,\n\t\t);\n\t\tthis.majorCooldownLogs = this.logs.filter((log): log is MajorCooldownUsedLog => log.isMajorCooldownUsed());\n\n\t\tthis.groupedResourceLogs = ResourceChangedLogGroup.fromLogs(this.logs);\n\t\tAuraUptimeLog.populateActiveAuras(this.dpsLogs, this.auraUptimeLogs);\n\t\tAuraUptimeLog.populateActiveAuras(this.groupedResourceLogs[ResourceType.ResourceTypeMana], this.auraUptimeLogs);\n\n\t\tthis.majorCooldownAuraUptimeLogs = this.auraUptimeLogs.filter(auraLog =>\n\t\t\tthis.majorCooldownLogs.find(mcdLog => mcdLog.actionId!.equals(auraLog.actionId!)),\n\t\t);\n\t}\n\n\tget label() {\n\t\tif (this.target == null) {\n\t\t\treturn `${this.name} (#${this.index + 1})`;\n\t\t} else {\n\t\t\treturn this.name;\n\t\t}\n\t}\n\n\tget isPlayer() {\n\t\treturn this.player != null;\n\t}\n\n\tget isTarget() {\n\t\treturn this.target != null;\n\t}\n\n\tget isPet() {\n\t\treturn this.petActionId != null;\n\t}\n\n\t// Returns the unit index of the target of this unit, as selected by the filter.\n\tgetTargetIndex(filter?: SimResultFilter): number | null {\n\t\tif (!filter) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst index = this.isPlayer ? filter.target : filter.player;\n\t\tif (index == null || index == -1) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tget inFrontOfTarget(): boolean {\n\t\tif (this.isTarget) {\n\t\t\treturn true;\n\t\t} else if (this.isPlayer) {\n\t\t\treturn this.player!.inFrontOfTarget;\n\t\t} else {\n\t\t\treturn false; // TODO pets\n\t\t}\n\t}\n\n\tget chanceOfDeath(): number {\n\t\treturn this.metrics.chanceOfDeath * 100;\n\t}\n\n\tget maxThreat() {\n\t\treturn this.threatLogs[this.threatLogs.length - 1]?.threatAfter || 0;\n\t}\n\n\tget secondsOomAvg() {\n\t\treturn this.metrics.secondsOomAvg;\n\t}\n\n\tget totalDamage() {\n\t\treturn this.dps.avg * this.duration;\n\t}\n\n\tgetPlayerAndPetActions(): Array<ActionMetrics> {\n\t\treturn this.actions.concat(this.pets.map(pet => pet.getPlayerAndPetActions()).flat());\n\t}\n\n\tprivate getActionsForDisplay(): Array<ActionMetrics> {\n\t\treturn this.actions.filter(e => e.hitAttempts != 0 || e.tps != 0 || e.dps != 0);\n\t}\n\n\tgetMeleeActions(): Array<ActionMetrics> {\n\t\treturn this.getActionsForDisplay().filter(e => e.isMeleeAction);\n\t}\n\n\tgetSpellActions(): Array<ActionMetrics> {\n\t\treturn this.getActionsForDisplay().filter(e => !e.isMeleeAction);\n\t}\n\n\tgetHealingActions(): Array<ActionMetrics> {\n\t\treturn this.getActionsForDisplay();\n\t}\n\n\tgetResourceMetrics(resourceType: ResourceType): Array<ResourceMetrics> {\n\t\treturn this.resources.filter(resource => resource.type == resourceType);\n\t}\n\n\tstatic async makeNewPlayer(\n\t\tresultData: SimResultData,\n\t\tplayer: PlayerProto,\n\t\tmetrics: UnitMetricsProto,\n\t\traidIndex: number,\n\t\tisPet: boolean,\n\t\tlogs: Array<SimLog>,\n\t): Promise<UnitMetrics> {\n\t\tconst playerLogs = logs.filter(\n\t\t\tlog => log.source && !log.source.isTarget && isPet == log.source.isPet && (isPet ? log.source.name == metrics.name : log.source.index == raidIndex),\n\t\t);\n\t\tconst petLogs = logs.filter(log => log.source && !log.source.isTarget && log.source.isPet && log.source.index == raidIndex);\n\n\t\tconst actionsPromise = Promise.all(metrics.actions.map(actionMetrics => ActionMetrics.makeNew(null, resultData, actionMetrics, raidIndex)));\n\t\tconst aurasPromise = Promise.all(metrics.auras.map(auraMetrics => AuraMetrics.makeNew(null, resultData, auraMetrics, raidIndex)));\n\t\tconst resourcesPromise = Promise.all(metrics.resources.map(resourceMetrics => ResourceMetrics.makeNew(null, resultData, resourceMetrics, raidIndex)));\n\t\tconst petsPromise = Promise.all(metrics.pets.map(petMetrics => UnitMetrics.makeNewPlayer(resultData, player, petMetrics, raidIndex, true, petLogs)));\n\n\t\tlet petIdPromise: Promise<ActionId | null> = Promise.resolve(null);\n\t\tif (isPet) {\n\t\t\tpetIdPromise = ActionId.fromPetName(metrics.name).fill(raidIndex);\n\t\t}\n\n\t\tconst actions = await actionsPromise;\n\t\tconst auras = await aurasPromise;\n\t\tconst resources = await resourcesPromise;\n\t\tconst pets = await petsPromise;\n\t\tconst petActionId = await petIdPromise;\n\n\t\tconst playerMetrics = new UnitMetrics(player, null, petActionId, metrics, raidIndex, actions, auras, resources, pets, playerLogs, resultData);\n\t\tactions.forEach(action => {\n\t\t\taction.unit = playerMetrics;\n\t\t\taction.resources = resources.filter(resourceMetrics => resourceMetrics.actionId.equals(action.actionId));\n\t\t});\n\t\tauras.forEach(aura => (aura.unit = playerMetrics));\n\t\tresources.forEach(resource => (resource.unit = playerMetrics));\n\t\treturn playerMetrics;\n\t}\n\n\tstatic async makeNewTarget(\n\t\tresultData: SimResultData,\n\t\ttarget: TargetProto,\n\t\tmetrics: UnitMetricsProto,\n\t\tindex: number,\n\t\tlogs: Array<SimLog>,\n\t): Promise<UnitMetrics> {\n\t\tconst targetLogs = logs.filter(log => log.source && log.source.isTarget && log.source.index == index);\n\n\t\tconst actionsPromise = Promise.all(metrics.actions.map(actionMetrics => ActionMetrics.makeNew(null, resultData, actionMetrics, index)));\n\t\tconst aurasPromise = Promise.all(metrics.auras.map(auraMetrics => AuraMetrics.makeNew(null, resultData, auraMetrics)));\n\n\t\tconst actions = await actionsPromise;\n\t\tconst auras = await aurasPromise;\n\n\t\tconst targetMetrics = new UnitMetrics(null, target, null, metrics, index, actions, auras, [], [], targetLogs, resultData);\n\t\tactions.forEach(action => (action.unit = targetMetrics));\n\t\tauras.forEach(aura => (aura.unit = targetMetrics));\n\t\treturn targetMetrics;\n\t}\n}\n\nexport class EncounterMetrics {\n\tprivate readonly encounter: EncounterProto;\n\tprivate readonly metrics: EncounterMetricsProto;\n\n\treadonly targets: Array<UnitMetrics>;\n\n\tprivate constructor(encounter: EncounterProto, metrics: EncounterMetricsProto, targets: Array<UnitMetrics>) {\n\t\tthis.encounter = encounter;\n\t\tthis.metrics = metrics;\n\t\tthis.targets = targets;\n\t}\n\n\tstatic async makeNew(resultData: SimResultData, encounter: EncounterProto, metrics: EncounterMetricsProto, logs: Array<SimLog>): Promise<EncounterMetrics> {\n\t\tconst numTargets = Math.min(encounter.targets.length, metrics.targets.length);\n\t\tconst targets = await Promise.all(\n\t\t\t[...new Array(numTargets).keys()].map(i => UnitMetrics.makeNewTarget(resultData, encounter.targets[i], metrics.targets[i], i, logs)),\n\t\t);\n\n\t\treturn new EncounterMetrics(encounter, metrics, targets);\n\t}\n\n\tget durationSeconds() {\n\t\treturn this.encounter.duration;\n\t}\n}\n\nexport class AuraMetrics {\n\tunit: UnitMetrics | null;\n\treadonly actionId: ActionId;\n\treadonly name: string;\n\treadonly iconUrl: string;\n\tprivate readonly resultData: SimResultData;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\tprivate readonly data: AuraMetricsProto;\n\n\tprivate constructor(unit: UnitMetrics | null, actionId: ActionId, data: AuraMetricsProto, resultData: SimResultData) {\n\t\tthis.unit = unit;\n\t\tthis.actionId = actionId;\n\t\tthis.name = actionId.name;\n\t\tthis.iconUrl = actionId.iconUrl;\n\t\tthis.data = data;\n\t\tthis.resultData = resultData;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\t}\n\n\tget uptimePercent() {\n\t\treturn (this.data.uptimeSecondsAvg / this.duration) * 100;\n\t}\n\n\tget averageProcs() {\n\t\treturn this.data.procsAvg;\n\t}\n\n\tget ppm() {\n\t\treturn this.data.procsAvg / (this.duration / 60);\n\t}\n\n\tstatic async makeNew(unit: UnitMetrics | null, resultData: SimResultData, auraMetrics: AuraMetricsProto, playerIndex?: number): Promise<AuraMetrics> {\n\t\tconst actionId = await ActionId.fromProto(auraMetrics.id!).fill(playerIndex);\n\t\treturn new AuraMetrics(unit, actionId, auraMetrics, resultData);\n\t}\n\n\t// Merges an array of metrics into a single metrics.\n\tstatic merge(auras: Array<AuraMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): AuraMetrics {\n\t\tconst firstAura = auras[0];\n\t\tconst unit = auras.every(aura => aura.unit == firstAura.unit) ? firstAura.unit : null;\n\t\tlet actionId = actionIdOverride || firstAura.actionId;\n\t\tif (removeTag) {\n\t\t\tactionId = actionId.withoutTag();\n\t\t}\n\t\treturn new AuraMetrics(\n\t\t\tunit,\n\t\t\tactionId,\n\t\t\tAuraMetricsProto.create({\n\t\t\t\tuptimeSecondsAvg: Math.max(...auras.map(a => a.data.uptimeSecondsAvg)),\n\t\t\t}),\n\t\t\tfirstAura.resultData,\n\t\t);\n\t}\n\n\t// Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n\t// different tags, and returns them as separate arrays.\n\tstatic groupById(auras: Array<AuraMetrics>, useTag?: boolean): Array<Array<AuraMetrics>> {\n\t\tif (useTag) {\n\t\t\treturn Object.values(bucket(auras, aura => aura.actionId.toString()));\n\t\t} else {\n\t\t\treturn Object.values(bucket(auras, aura => aura.actionId.toStringIgnoringTag()));\n\t\t}\n\t}\n\n\t// Merges aura metrics that have the same name/ID, adding their stats together.\n\tstatic joinById(auras: Array<AuraMetrics>, useTag?: boolean): Array<AuraMetrics> {\n\t\treturn AuraMetrics.groupById(auras, useTag).map(aurasToJoin => AuraMetrics.merge(aurasToJoin));\n\t}\n}\n\nexport class ResourceMetrics {\n\tunit: UnitMetrics | null;\n\treadonly actionId: ActionId;\n\treadonly name: string;\n\treadonly iconUrl: string;\n\treadonly type: ResourceType;\n\tprivate readonly resultData: SimResultData;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\tprivate readonly data: ResourceMetricsProto;\n\n\tprivate constructor(unit: UnitMetrics | null, actionId: ActionId, data: ResourceMetricsProto, resultData: SimResultData) {\n\t\tthis.unit = unit;\n\t\tthis.actionId = actionId;\n\t\tthis.name = actionId.name;\n\t\tthis.iconUrl = actionId.iconUrl;\n\t\tthis.type = data.type;\n\t\tthis.resultData = resultData;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\t\tthis.data = data;\n\t}\n\n\tget events() {\n\t\treturn this.data.events / this.iterations;\n\t}\n\n\tget gain() {\n\t\treturn this.data.gain / this.iterations;\n\t}\n\n\tget gainPerSecond() {\n\t\treturn this.data.gain / this.iterations / this.duration;\n\t}\n\n\tget avgGain() {\n\t\treturn this.data.gain / this.data.events;\n\t}\n\n\tget wastedGain() {\n\t\treturn (this.data.gain - this.data.actualGain) / this.iterations;\n\t}\n\n\tstatic async makeNew(\n\t\tunit: UnitMetrics | null,\n\t\tresultData: SimResultData,\n\t\tresourceMetrics: ResourceMetricsProto,\n\t\tplayerIndex?: number,\n\t): Promise<ResourceMetrics> {\n\t\tconst actionId = await ActionId.fromProto(resourceMetrics.id!).fill(playerIndex);\n\t\treturn new ResourceMetrics(unit, actionId, resourceMetrics, resultData);\n\t}\n\n\t// Merges an array of metrics into a single metrics.\n\tstatic merge(resources: Array<ResourceMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): ResourceMetrics {\n\t\tconst firstResource = resources[0];\n\t\tconst unit = resources.every(resource => resource.unit == firstResource.unit) ? firstResource.unit : null;\n\t\tlet actionId = actionIdOverride || firstResource.actionId;\n\t\tif (removeTag) {\n\t\t\tactionId = actionId.withoutTag();\n\t\t}\n\t\treturn new ResourceMetrics(\n\t\t\tunit,\n\t\t\tactionId,\n\t\t\tResourceMetricsProto.create({\n\t\t\t\tevents: sum(resources.map(a => a.data.events)),\n\t\t\t\tgain: sum(resources.map(a => a.data.gain)),\n\t\t\t\tactualGain: sum(resources.map(a => a.data.actualGain)),\n\t\t\t}),\n\t\t\tfirstResource.resultData,\n\t\t);\n\t}\n\n\t// Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n\t// different tags, and returns them as separate arrays.\n\tstatic groupById(resources: Array<ResourceMetrics>, useTag?: boolean): Array<Array<ResourceMetrics>> {\n\t\tif (useTag) {\n\t\t\treturn Object.values(bucket(resources, resource => resource.actionId.toString()));\n\t\t} else {\n\t\t\treturn Object.values(bucket(resources, resource => resource.actionId.toStringIgnoringTag()));\n\t\t}\n\t}\n\n\t// Merges resource metrics that have the same name/ID, adding their stats together.\n\tstatic joinById(resources: Array<ResourceMetrics>, useTag?: boolean): Array<ResourceMetrics> {\n\t\treturn ResourceMetrics.groupById(resources, useTag).map(resourcesToJoin => ResourceMetrics.merge(resourcesToJoin));\n\t}\n}\n\n// Manages the metrics for a single unit action (e.g. Lightning Bolt).\nexport class ActionMetrics {\n\tunit: UnitMetrics | null;\n\treadonly actionId: ActionId;\n\treadonly name: string;\n\treadonly iconUrl: string;\n\treadonly targets: Array<TargetedActionMetrics>;\n\tprivate readonly resultData: SimResultData;\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\tprivate readonly data: ActionMetricsProto;\n\tprivate readonly combinedMetrics: TargetedActionMetrics;\n\tresources: Array<ResourceMetrics>;\n\n\tprivate constructor(unit: UnitMetrics | null, actionId: ActionId, data: ActionMetricsProto, resultData: SimResultData) {\n\t\tthis.unit = unit;\n\t\tthis.actionId = actionId;\n\t\tthis.name = actionId.name;\n\t\tthis.iconUrl = actionId.iconUrl;\n\t\tthis.resultData = resultData;\n\t\tthis.iterations = resultData.iterations;\n\t\tthis.duration = resultData.duration;\n\t\tthis.data = data;\n\t\tthis.targets = data.targets.map(tam => new TargetedActionMetrics(this.iterations, this.duration, tam));\n\t\tthis.combinedMetrics = TargetedActionMetrics.merge(this.targets);\n\t\tthis.resources = [];\n\t}\n\n\tget isMeleeAction() {\n\t\treturn this.data.isMelee;\n\t}\n\n\tget damage() {\n\t\treturn this.combinedMetrics.damage;\n\t}\n\n\tget dps() {\n\t\treturn this.combinedMetrics.dps;\n\t}\n\n\tget hps() {\n\t\treturn this.combinedMetrics.hps;\n\t}\n\n\tget tps() {\n\t\treturn this.combinedMetrics.tps;\n\t}\n\n\tget casts() {\n\t\treturn this.combinedMetrics.casts;\n\t}\n\n\tget castsPerMinute() {\n\t\treturn this.combinedMetrics.castsPerMinute;\n\t}\n\n\tget avgCastTimeMs() {\n\t\treturn this.combinedMetrics.avgCastTimeMs;\n\t}\n\n\tget hpm() {\n\t\tconst totalHealing = this.combinedMetrics.hps * this.duration;\n\t\tconst manaMetrics = this.resources.find(r => r.type == ResourceType.ResourceTypeMana);\n\t\tif (manaMetrics) {\n\t\t\treturn totalHealing / -manaMetrics.gain;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tget healingThroughput() {\n\t\treturn this.combinedMetrics.healingThroughput;\n\t}\n\n\tget avgCast() {\n\t\treturn this.combinedMetrics.avgCast;\n\t}\n\n\tget avgCastHealing() {\n\t\treturn this.combinedMetrics.avgCastHealing;\n\t}\n\n\tget avgCastThreat() {\n\t\treturn this.combinedMetrics.avgCastThreat;\n\t}\n\n\tget landedHits() {\n\t\treturn this.combinedMetrics.landedHits;\n\t}\n\n\tget hitAttempts() {\n\t\treturn this.combinedMetrics.hitAttempts;\n\t}\n\n\tget avgHit() {\n\t\treturn this.combinedMetrics.avgHit;\n\t}\n\n\tget avgHitThreat() {\n\t\treturn this.combinedMetrics.avgHitThreat;\n\t}\n\n\tget critPercent() {\n\t\treturn this.combinedMetrics.critPercent;\n\t}\n\n\tget misses() {\n\t\treturn this.combinedMetrics.misses;\n\t}\n\n\tget missPercent() {\n\t\treturn this.combinedMetrics.missPercent;\n\t}\n\n\tget dodges() {\n\t\treturn this.combinedMetrics.dodges;\n\t}\n\n\tget dodgePercent() {\n\t\treturn this.combinedMetrics.dodgePercent;\n\t}\n\n\tget parries() {\n\t\treturn this.combinedMetrics.parries;\n\t}\n\n\tget parryPercent() {\n\t\treturn this.combinedMetrics.parryPercent;\n\t}\n\n\tget blocks() {\n\t\treturn this.combinedMetrics.blocks;\n\t}\n\n\tget blockPercent() {\n\t\treturn this.combinedMetrics.blockPercent;\n\t}\n\n\tget glances() {\n\t\treturn this.combinedMetrics.glances;\n\t}\n\n\tget glancePercent() {\n\t\treturn this.combinedMetrics.glancePercent;\n\t}\n\n\tforTarget(filter?: SimResultFilter): ActionMetrics {\n\t\tconst unitIndex = this.unit!.getTargetIndex(filter);\n\t\tif (unitIndex == null) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\tconst target = this.targets.find(target => target.data.unitIndex == unitIndex);\n\t\t\tif (target) {\n\t\t\t\tconst targetData = ActionMetricsProto.clone(this.data);\n\t\t\t\ttargetData.targets = [target.data];\n\t\t\t\treturn new ActionMetrics(this.unit, this.actionId, targetData, this.resultData);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Could not find target with unitIndex ' + unitIndex);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic async makeNew(unit: UnitMetrics | null, resultData: SimResultData, actionMetrics: ActionMetricsProto, playerIndex?: number): Promise<ActionMetrics> {\n\t\tconst actionId = await ActionId.fromProto(actionMetrics.id!).fill(playerIndex);\n\t\treturn new ActionMetrics(unit, actionId, actionMetrics, resultData);\n\t}\n\n\t// Merges an array of metrics into a single metric.\n\tstatic merge(actions: Array<ActionMetrics>, removeTag?: boolean, actionIdOverride?: ActionId): ActionMetrics {\n\t\tconst firstAction = actions[0];\n\t\tconst unit = firstAction.unit;\n\t\tlet actionId = actionIdOverride || firstAction.actionId;\n\t\tif (removeTag) {\n\t\t\tactionId = actionId.withoutTag();\n\t\t}\n\n\t\tconst maxTargets = Math.max(...actions.map(action => action.targets.length));\n\t\tconst mergedTargets = [...Array(maxTargets).keys()].map(i => TargetedActionMetrics.merge(actions.map(action => action.targets[i])));\n\n\t\treturn new ActionMetrics(\n\t\t\tunit,\n\t\t\tactionId,\n\t\t\tActionMetricsProto.create({\n\t\t\t\tisMelee: firstAction.isMeleeAction,\n\t\t\t\ttargets: mergedTargets.map(t => t.data),\n\t\t\t}),\n\t\t\tfirstAction.resultData,\n\t\t);\n\t}\n\n\t// Groups similar metrics, i.e. metrics with the same item/spell/other ID but\n\t// different tags, and returns them as separate arrays.\n\tstatic groupById(actions: Array<ActionMetrics>, useTag?: boolean): Array<Array<ActionMetrics>> {\n\t\tif (useTag) {\n\t\t\treturn Object.values(bucket(actions, action => action.actionId.toString()));\n\t\t} else {\n\t\t\treturn Object.values(bucket(actions, action => action.actionId.toStringIgnoringTag()));\n\t\t}\n\t}\n\n\t// Merges action metrics that have the same name/ID, adding their stats together.\n\tstatic joinById(actions: Array<ActionMetrics>, useTag?: boolean): Array<ActionMetrics> {\n\t\treturn ActionMetrics.groupById(actions, useTag).map(actionsToJoin => ActionMetrics.merge(actionsToJoin));\n\t}\n}\n\n// Manages the metrics for a single action applied to a specific target.\nexport class TargetedActionMetrics {\n\tprivate readonly iterations: number;\n\tprivate readonly duration: number;\n\treadonly data: TargetedActionMetricsProto;\n\n\treadonly landedHitsRaw: number;\n\treadonly hitAttempts: number;\n\n\tconstructor(iterations: number, duration: number, data: TargetedActionMetricsProto) {\n\t\tthis.iterations = iterations;\n\t\tthis.duration = duration;\n\t\tthis.data = data;\n\n\t\tthis.landedHitsRaw = this.data.hits + this.data.crits + this.data.blocks + this.data.glances;\n\n\t\tthis.hitAttempts = this.data.misses + this.data.dodges + this.data.parries + this.data.blocks + this.data.glances + this.data.crits + this.data.hits;\n\t}\n\n\tget damage() {\n\t\treturn this.data.damage;\n\t}\n\n\tget dps() {\n\t\treturn this.data.damage / this.iterations / this.duration;\n\t}\n\n\tget hps() {\n\t\treturn (this.data.healing + this.data.shielding) / this.iterations / this.duration;\n\t}\n\n\tget tps() {\n\t\treturn this.data.threat / this.iterations / this.duration;\n\t}\n\n\tget casts() {\n\t\treturn (this.data.casts || this.hitAttempts) / this.iterations;\n\t}\n\n\tget castsPerMinute() {\n\t\treturn this.casts / (this.duration / 60);\n\t}\n\n\tget avgCastTimeMs() {\n\t\treturn this.data.castTimeMs / this.iterations / this.casts;\n\t}\n\n\tget healingThroughput() {\n\t\tif (this.avgCastTimeMs) {\n\t\t\treturn this.hps / (this.avgCastTimeMs / 1000);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tget timeSpentCastingMs() {\n\t\treturn this.data.castTimeMs / this.iterations;\n\t}\n\n\tget avgCast() {\n\t\treturn this.data.damage / this.iterations / (this.casts || 1);\n\t}\n\n\tget avgCastHealing() {\n\t\treturn (this.data.healing + this.data.shielding) / this.iterations / (this.casts || 1);\n\t}\n\n\tget avgCastThreat() {\n\t\treturn this.data.threat / this.iterations / (this.casts || 1);\n\t}\n\n\tget landedHits() {\n\t\treturn this.landedHitsRaw / this.iterations;\n\t}\n\n\tget avgHit() {\n\t\tconst lhr = this.landedHitsRaw;\n\t\treturn lhr == 0 ? 0 : this.data.damage / lhr;\n\t}\n\n\tget avgHitThreat() {\n\t\tconst lhr = this.landedHitsRaw;\n\t\treturn lhr == 0 ? 0 : this.data.threat / lhr;\n\t}\n\n\tget critPercent() {\n\t\treturn (this.data.crits / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget misses() {\n\t\treturn this.data.misses / this.iterations;\n\t}\n\n\tget missPercent() {\n\t\treturn (this.data.misses / (this.data.casts || 1)) * 100;\n\t}\n\n\tget dodges() {\n\t\treturn this.data.dodges / this.iterations;\n\t}\n\n\tget dodgePercent() {\n\t\treturn (this.data.dodges / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget parries() {\n\t\treturn this.data.parries / this.iterations;\n\t}\n\n\tget parryPercent() {\n\t\treturn (this.data.parries / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget blocks() {\n\t\treturn this.data.blocks / this.iterations;\n\t}\n\n\tget blockPercent() {\n\t\treturn (this.data.blocks / (this.hitAttempts || 1)) * 100;\n\t}\n\n\tget glances() {\n\t\treturn this.data.glances / this.iterations;\n\t}\n\n\tget glancePercent() {\n\t\treturn (this.data.glances / (this.hitAttempts || 1)) * 100;\n\t}\n\n\t// Merges an array of metrics into a single metric.\n\tstatic merge(actions: Array<TargetedActionMetrics>): TargetedActionMetrics {\n\t\treturn new TargetedActionMetrics(\n\t\t\tactions[0]?.iterations || 1,\n\t\t\tactions[0]?.duration || 1,\n\t\t\tTargetedActionMetricsProto.create({\n\t\t\t\tcasts: sum(actions.map(a => a.data.casts)),\n\t\t\t\thits: sum(actions.map(a => a.data.hits)),\n\t\t\t\tcrits: sum(actions.map(a => a.data.crits)),\n\t\t\t\tmisses: sum(actions.map(a => a.data.misses)),\n\t\t\t\tdodges: sum(actions.map(a => a.data.dodges)),\n\t\t\t\tparries: sum(actions.map(a => a.data.parries)),\n\t\t\t\tblocks: sum(actions.map(a => a.data.blocks)),\n\t\t\t\tglances: sum(actions.map(a => a.data.glances)),\n\t\t\t\tdamage: sum(actions.map(a => a.data.damage)),\n\t\t\t\tthreat: sum(actions.map(a => a.data.threat)),\n\t\t\t\thealing: sum(actions.map(a => a.data.healing)),\n\t\t\t\tshielding: sum(actions.map(a => a.data.shielding)),\n\t\t\t\tcastTimeMs: sum(actions.map(a => a.data.castTimeMs)),\n\t\t\t}),\n\t\t);\n\t}\n}\n","export abstract class Component {\n\tprotected customRootElement?(): HTMLElement;\n\n\tprivate disposeCallbacks: Array<() => void> = [];\n\tprivate disposed = false;\n\n\treadonly rootElem: HTMLElement;\n\n\tconstructor(parentElem: HTMLElement | null, rootCssClass: string, rootElem?: HTMLElement) {\n\t\tthis.rootElem = rootElem || this.customRootElement?.() || document.createElement('div');\n\t\tthis.rootElem.classList.add(rootCssClass);\n\t\tif (parentElem) {\n\t\t\tparentElem.appendChild(this.rootElem);\n\t\t}\n\t}\n\n\taddOnDisposeCallback(callback: () => void) {\n\t\tthis.disposeCallbacks.push(callback);\n\t}\n\n\tdispose() {\n\t\tif (this.disposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis.disposed = true;\n\n\t\tthis.disposeCallbacks.forEach(callback => callback());\n\t\tthis.disposeCallbacks = [];\n\t}\n}\n","import { Tooltip } from 'bootstrap';\nimport { EventID, TypedEvent } from '../typed_event.js';\n\nimport { Component } from './component.js';\n\nimport { element, fragment } from 'tsx-vanilla'\n\n/**\n * Data for creating a new input UI element.\n */\nexport interface InputConfig<ModObject, T, V = T> {\n\tlabel?: string,\n\tlabelTooltip?: string,\n\tinline?: boolean,\n\textraCssClasses?: Array<string>,\n\n\tdefaultValue?: T,\n\n\t// Returns the event indicating the mapped value has changed.\n\tchangedEvent: (obj: ModObject) => TypedEvent<any>,\n\n\t// Get and set the mapped value.\n\tgetValue: (obj: ModObject) => T,\n\tsetValue: (eventID: EventID, obj: ModObject, newValue: T) => void,\n\n\t// If set, will automatically disable the input when this evaluates to false.\n\tenableWhen?: (obj: ModObject) => boolean,\n\n\t// If set, will automatically hide the input when this evaluates to false.\n\tshowWhen?: (obj: ModObject) => boolean,\n\n\t// Overrides the default root element (new div).\n\trootElem?: HTMLElement,\n\n\t// Convert between source value and input value types. In most cases this is not needed\n\t// because source and input use the same type. These functions must be set if T != V.\n\tsourceToValue?: (src: T) => V,\n\tvalueToSource?: (val: V) => T,\n}\n\n// Shared logic for UI elements that are mapped to a value for some modifiable object.\nexport abstract class Input<ModObject, T, V = T> extends Component {\n\tprivate readonly inputConfig: InputConfig<ModObject, T, V>;\n\treadonly modObject: ModObject;\n\n\tprotected enabled: boolean = true;\n\n\treadonly changeEmitter = new TypedEvent<void>();\n\n\tconstructor(parent: HTMLElement | null, cssClass: string, modObject: ModObject, config: InputConfig<ModObject, T, V>) {\n\t\tsuper(parent, 'input-root', config.rootElem);\n\t\tthis.inputConfig = config;\n\t\tthis.modObject = modObject;\n\t\tthis.rootElem.classList.add(cssClass);\n\n\t\tif (config.inline) this.rootElem.classList.add('input-inline');\n\t\tif (config.extraCssClasses) this.rootElem.classList.add(...config.extraCssClasses);\n\t\tif (config.label) this.rootElem.appendChild(this.buildLabel(config));\n\n\t\tconfig.changedEvent(this.modObject).on(eventID => {\n\t\t\tthis.setInputValue(this.getSourceValue());\n\t\t\tthis.update();\n\t\t});\n\t}\n\n\tprivate buildLabel(config: InputConfig<ModObject, T, V>): JSX.Element {\n\t\tlet dataset = {};\n\n\t\tlet label = (\n\t\t\t<label className=\"form-label\">\n\t\t\t\t{config.label}\n\t\t\t</label>\n\t\t);\n\n\t\tif (config.labelTooltip)\n\t\t\tnew Tooltip(label, {\n\t\t\t\ttitle: config.labelTooltip,\n\t\t\t\thtml: true,\n\t\t\t});\n\n\t\treturn label;\n\t}\n\n\tupdate() {\n\t\tconst enable = !this.inputConfig.enableWhen || this.inputConfig.enableWhen(this.modObject);\n\t\tif (enable) {\n\t\t\tthis.enabled = true;\n\t\t\tthis.rootElem.classList.remove('disabled');\n\t\t\tthis.getInputElem()?.removeAttribute('disabled');\n\t\t} else {\n\t\t\tthis.enabled = false;\n\t\t\tthis.rootElem.classList.add('disabled');\n\t\t\tthis.getInputElem()?.setAttribute('disabled', '');\n\t\t}\n\n\t\tconst show = !this.inputConfig.showWhen || this.inputConfig.showWhen(this.modObject);\n\t\tif (show) {\n\t\t\tthis.rootElem.classList.remove('hide');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('hide');\n\t\t}\n\t}\n\n\t// Can't call abstract functions in constructor, so need an init() call.\n\tinit() {\n\t\tconst initialValue = this.inputConfig.defaultValue ? this.inputConfig.defaultValue : this.inputConfig.getValue(this.modObject);\n\t\tthis.setInputValue(initialValue);\n\t\tthis.update();\n\t}\n\n\tabstract getInputElem(): HTMLElement | null;\n\n\tabstract getInputValue(): T;\n\n\tabstract setInputValue(newValue: T): void;\n\n\tprotected getSourceValue(): T {\n\t\treturn this.inputConfig.getValue(this.modObject);\n\t}\n\n\tprotected setSourceValue(eventID: EventID, newValue: T) {\n\t\tthis.inputConfig.setValue(eventID, this.modObject, newValue);\n\t}\n\n\tprotected sourceToValue(src: T): V {\n\t\treturn this.inputConfig.sourceToValue ? this.inputConfig.sourceToValue(src) : src as unknown as V;\n\t}\n\tprotected valueToSource(val: V): T {\n\t\treturn this.inputConfig.valueToSource ? this.inputConfig.valueToSource(val) : val as unknown as T;\n\t}\n\n\t// Child classes should call this method when the value in the input element changes.\n\tinputChanged(eventID: EventID) {\n\t\tthis.setSourceValue(eventID, this.getInputValue());\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n\n\t// Sets the underlying value directly.\n\tsetValue(eventID: EventID, newValue: T) {\n\t\tthis.inputConfig.setValue(eventID, this.modObject, newValue);\n\t}\n\n\tstatic newGroupContainer(): HTMLElement {\n\t\tlet group = document.createElement('div');\n\t\tgroup.classList.add('picker-group');\n\t\treturn group;\n\t}\n}\n","import { TypedEvent } from '../typed_event.js';\nimport { Input, InputConfig } from './input.js';\n\n/**\n * Data for creating a boolean picker (checkbox).\n */\nexport interface BooleanPickerConfig<ModObject> extends InputConfig<ModObject, boolean> {\n\treverse?: boolean;\n}\n\n// UI element for picking an arbitrary number field.\nexport class BooleanPicker<ModObject> extends Input<ModObject, boolean> {\n\tprivate readonly inputElem: HTMLInputElement;\n\n\tconstructor(parent: HTMLElement, modObject: ModObject, config: BooleanPickerConfig<ModObject>) {\n\t\tsuper(parent, 'boolean-picker-root', modObject, config);\n\n\t\tthis.rootElem.classList.add('form-check');\n\n\t\tthis.inputElem = document.createElement('input');\n\t\tthis.inputElem.type = 'checkbox';\n\t\tthis.inputElem.classList.add('boolean-picker-input', 'form-check-input');\n\n\t\tif (config.reverse) {\n\t\t\tthis.rootElem.classList.add('form-check-reverse');\n\t\t\tthis.rootElem.appendChild(this.inputElem);\n\t\t} else {\n\t\t\tthis.rootElem.prepend(this.inputElem);\n\t\t}\n\n\t\tthis.init();\n\n\t\tthis.inputElem.addEventListener('change', () => {\n\t\t\tthis.inputChanged(TypedEvent.nextEventID());\n\t\t});\n\t}\n\n\tgetInputElem(): HTMLElement {\n\t\treturn this.inputElem;\n\t}\n\n\tgetInputValue(): boolean {\n\t\treturn Boolean(this.inputElem.checked);\n\t}\n\n\tsetInputValue(newValue: boolean) {\n\t\tthis.inputElem.checked = newValue;\n\t}\n}\n","import { Tooltip } from 'bootstrap';\n\nimport { TypedEvent } from '../typed_event.js';\n\nimport { Input, InputConfig } from './input.js';\n\nexport interface DropdownValueConfig<V> {\n\tvalue: V,\n\tsubmenu?: Array<string | V>,\n\theaderText?: string,\n\ttooltip?: string,\n\textraCssClasses?: Array<string>,\n}\n\nexport interface DropdownPickerConfig<ModObject, T, V = T> extends InputConfig<ModObject, T, V> {\n\tvalues: Array<DropdownValueConfig<V>>;\n\tequals: (a: V | undefined, b: V | undefined) => boolean,\n\tsetOptionContent: (button: HTMLButtonElement, valueConfig: DropdownValueConfig<V>, isSelectButton: boolean) => void,\n\tcreateMissingValue?: (val: V) => Promise<DropdownValueConfig<V>>,\n\tdefaultLabel: string,\n}\n\ninterface DropdownSubmenu<V> {\n\tpath: Array<string|V>,\n\n\tlistElem: HTMLUListElement,\n}\n\n/** UI Input that uses a dropdown menu. */\nexport class DropdownPicker<ModObject, T, V = T> extends Input<ModObject, T, V> {\n\tprivate readonly config: DropdownPickerConfig<ModObject, T, V>;\n\tprivate valueConfigs: Array<DropdownValueConfig<V>>;\n\n\tprivate readonly buttonElem: HTMLButtonElement;\n\tprivate readonly listElem: HTMLUListElement;\n\n\tprivate currentSelection: DropdownValueConfig<V> | null;\n\tprivate submenus: Array<DropdownSubmenu<V>>;\n\n\tconstructor(parent: HTMLElement, modObject: ModObject, config: DropdownPickerConfig<ModObject, T, V>) {\n\t\tsuper(parent, 'dropdown-picker-root', modObject, config);\n\t\tthis.config = config;\n\t\tthis.valueConfigs = this.config.values.filter(vc => !vc.headerText);\n\t\tthis.currentSelection = null;\n\t\tthis.submenus = [];\n\n\t\tthis.rootElem.classList.add('dropdown');\n\n\t\tthis.buttonElem = document.createElement('button');\n\t\tthis.buttonElem.classList.add('dropdown-picker-button', 'btn', 'dropdown-toggle', 'open-on-click');\n\t\tthis.buttonElem.setAttribute('data-bs-toggle', 'dropdown');\n\t\tthis.buttonElem.setAttribute('aria-expanded', 'false');\n\t\tthis.buttonElem.setAttribute('role', 'button');\n\t\tthis.buttonElem.textContent = config.defaultLabel;\n\t\tthis.rootElem.appendChild(this.buttonElem);\n\n\t\tthis.listElem = document.createElement('ul');\n\t\tthis.listElem.classList.add('dropdown-picker-list', 'dropdown-menu');\n\t\tthis.rootElem.appendChild(this.listElem);\n\n\t\tthis.buildDropdown(this.valueConfigs);\n\t\tthis.init();\n\t}\n\n\tsetOptions(newValueConfigs: Array<DropdownValueConfig<V>>) {\n\t\tthis.buildDropdown(newValueConfigs);\n\t\tthis.valueConfigs = newValueConfigs.filter(vc => !vc.headerText);\n\t\tthis.setInputValue(this.getSourceValue());\n\t}\n\n\tprivate buildDropdown(valueConfigs: Array<DropdownValueConfig<V>>) {\n\t\tthis.listElem.innerHTML = '';\n\t\tthis.submenus = [];\n\t\tvalueConfigs.forEach(valueConfig => {\n\t\t\tconst itemElem = document.createElement('li');\n\t\t\tconst containsSubmenuChildren = valueConfigs.some(vc => vc.submenu?.some(e => !(typeof e == 'string') && this.config.equals(e, valueConfig.value)))\n\t\t\tif (valueConfig.extraCssClasses) {\n\t\t\t\titemElem.classList.add(...valueConfig.extraCssClasses);\n\t\t\t}\n\t\t\tif (valueConfig.headerText) {\n\t\t\t\titemElem.classList.add('dropdown-picker-header');\n\n\t\t\t\tconst headerElem = document.createElement('h6');\n\t\t\t\theaderElem.classList.add('dropdown-header');\n\t\t\t\theaderElem.textContent = valueConfig.headerText;\n\t\t\t\titemElem.appendChild(headerElem);\n\t\t\t} else {\n\t\t\t\titemElem.classList.add('dropdown-picker-item');\n\n\t\t\t\tconst buttonElem = document.createElement('button');\n\t\t\t\tbuttonElem.classList.add('dropdown-item');\n\t\t\t\tbuttonElem.type = 'button';\n\t\t\t\tthis.config.setOptionContent(buttonElem, valueConfig, false);\n\n\t\t\t\tif (valueConfig.tooltip) {\n\t\t\t\t\tTooltip.getOrCreateInstance(buttonElem, {\n\t\t\t\t\t\tanimation: false,\n\t\t\t\t\t\tplacement: 'right',\n\t\t\t\t\t\tfallbackPlacements: ['left', 'bottom'],\n\t\t\t\t\t\toffset: [0, 10],\n\t\t\t\t\t\tcustomClass: 'dropdown-tooltip',\n\t\t\t\t\t\thtml: true,\n\t\t\t\t\t\ttitle: valueConfig.tooltip\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tbuttonElem.addEventListener('click', () => {\n\t\t\t\t\tthis.updateValue(valueConfig);\n\t\t\t\t\tthis.inputChanged(TypedEvent.nextEventID());\n\t\t\t\t});\n\n\t\t\t\tif (containsSubmenuChildren) {\n\t\t\t\t\tthis.createSubmenu((valueConfig.submenu || []).concat([valueConfig.value]), buttonElem, itemElem)\n\t\t\t\t} else {\n\t\t\t\t\titemElem.appendChild(buttonElem);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!containsSubmenuChildren) {\n\t\t\t\tif (valueConfig.submenu && valueConfig.submenu.length > 0) {\n\t\t\t\t\tthis.createSubmenu(valueConfig.submenu);\n\t\t\t\t}\n\t\t\t\tconst submenu = this.getSubmenu(valueConfig.submenu);\n\t\t\t\tif (submenu) {\n\t\t\t\t\tsubmenu.listElem.appendChild(itemElem);\n\t\t\t\t} else {\n\t\t\t\t\tthis.listElem.appendChild(itemElem);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getSubmenu(path: Array<string|V> | undefined): DropdownSubmenu<V> | null {\n\t\tif (!path) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.submenus.find(submenu => this.equalPaths(submenu.path, path)) || null;\n\t}\n\n\tprivate createSubmenu(path: Array<string|V>, buttonElem?: HTMLButtonElement, itemElem?: HTMLLIElement): DropdownSubmenu<V> {\n\t\tconst submenu = this.getSubmenu(path);\n\t\tif (submenu) {\n\t\t\treturn submenu;\n\t\t}\n\n\t\tlet parent: DropdownSubmenu<V> | null = null;\n\t\tif (path.length > 1) {\n\t\t\tparent = this.createSubmenu(path.slice(0, path.length - 1));\n\t\t}\n\n\t\tif (!itemElem) {\n\t\t\titemElem = document.createElement('li');\n\t\t}\n\t\titemElem.classList.add('dropdown-picker-item');\n\n\t\tconst containerElem = document.createElement('div');\n\t\tcontainerElem.classList.add('dropend');\n\t\titemElem.appendChild(containerElem);\n\n\t\tif (!buttonElem) {\n\t\t\tbuttonElem = document.createElement('button');\n\t\t}\n\t\tbuttonElem.classList.add('dropdown-item');\n\t\tbuttonElem.setAttribute('data-bs-toggle', 'dropdown');\n\t\tbuttonElem.setAttribute('role', 'button');\n\t\tbuttonElem.setAttribute('aria-expanded', 'false');\n\t\tif (buttonElem.childNodes.length == 0) {\n\t\t\tbuttonElem.textContent = path[path.length - 1] + ' \\u00bb';\n\t\t}\n\t\tcontainerElem.appendChild(buttonElem);\n\n\t\tconst listElem = document.createElement('ul');\n\t\tlistElem.classList.add('dropdown-submenu', 'dropdown-menu');\n\t\tcontainerElem.appendChild(listElem);\n\n\t\tif (parent) {\n\t\t\tparent.listElem.appendChild(itemElem);\n\t\t} else {\n\t\t\tthis.listElem.appendChild(itemElem);\n\t\t}\n\n\t\tconst newSubmenu = {\n\t\t\tpath: path,\n\t\t\tlistElem: listElem,\n\t\t};\n\t\tthis.submenus.push(newSubmenu);\n\t\treturn newSubmenu;\n\t}\n\n\tprivate equalPaths(a: Array<string|V> | null | undefined, b: Array<string|V> | null | undefined): boolean {\n\t\treturn (a?.length || 0) == (b?.length || 0) &&\n\t\t\t(a || []).every((aVal, i) =>\n\t\t\t\t(typeof aVal == 'string')\n\t\t\t\t\t? aVal == (b![i] as string)\n\t\t\t\t\t: this.config.equals(aVal, b![i] as V));\n\t}\n\n\tgetInputElem(): HTMLElement {\n\t\treturn this.listElem;\n\t}\n\n\tgetInputValue(): T {\n\t\treturn this.valueToSource(this.currentSelection?.value as V);\n\t}\n\n\tsetInputValue(newSrcValue: T) {\n\t\tconst newValue = this.sourceToValue(newSrcValue);\n\t\tconst newSelection = this.valueConfigs.find(v => this.config.equals(v.value, newValue))!;\n\t\tif (newSelection) {\n\t\t\tthis.updateValue(newSelection);\n\t\t} else if (newValue == null) {\n\t\t\tthis.updateValue(null);\n\t\t} else if (this.config.createMissingValue) {\n\t\t\tthis.config.createMissingValue(newValue).then(newSelection => this.updateValue(newSelection));\n\t\t} else {\n\t\t\tthis.updateValue(null);\n\t\t}\n\t}\n\n\tprivate updateValue(newValue: DropdownValueConfig<V> | null) {\n\t\tthis.currentSelection = newValue;\n\n\t\t// Update button\n\t\tif (newValue) {\n\t\t\tthis.buttonElem.innerHTML = '';\n\t\t\tthis.config.setOptionContent(this.buttonElem, newValue, true);\n\t\t} else {\n\t\t\tthis.buttonElem.textContent = this.config.defaultLabel;\n\t\t}\n\t}\n}\n\nexport interface TextDropdownValueConfig<T> extends DropdownValueConfig<T> {\n\tlabel: string,\n}\n\nexport interface TextDropdownPickerConfig<ModObject, T> extends Omit<DropdownPickerConfig<ModObject, T>, 'values' | 'setOptionContent'> {\n\tvalues: Array<TextDropdownValueConfig<T>>,\n}\n\nexport class TextDropdownPicker<ModObject, T> extends DropdownPicker<ModObject, T> {\n\tconstructor(parent: HTMLElement, modObject: ModObject, config: TextDropdownPickerConfig<ModObject, T>) {\n\t\tsuper(parent, modObject, {\n\t\t\t...config,\n\t\t\tsetOptionContent: (button: HTMLButtonElement, valueConfig: DropdownValueConfig<T>) => {\n\t\t\t\tbutton.textContent = (valueConfig as TextDropdownValueConfig<T>).label;\n\t\t\t}\n\t\t});\n\t}\n}","import { UnitReference } from '../proto/common.js';\nimport { ActionId } from '../proto_utils/action_id.js';\nimport { DropdownPicker, DropdownPickerConfig, DropdownValueConfig } from './dropdown_picker.js';\n\nexport interface UnitValue {\n    value: UnitReference|undefined,\n\ttext?: string,\n\ticonUrl?: string|ActionId,\n\tcolor?: string,\n}\n\nexport interface UnitValueConfig extends DropdownValueConfig<UnitValue> {}\nexport interface UnitPickerConfig<ModObject> extends Omit<DropdownPickerConfig<ModObject, UnitReference|undefined, UnitValue>, 'equals' | 'setOptionContent' | 'defaultLabel'> {\n    hideLabelWhenDefaultSelected?: boolean,\n}\n\nexport class UnitPicker<ModObject> extends DropdownPicker<ModObject, UnitReference|undefined, UnitValue> {\n\tconstructor(parent: HTMLElement, modObject: ModObject, config: UnitPickerConfig<ModObject>) {\n\t\tsuper(parent, modObject, {\n\t\t\t...config,\n\t\t\tequals: (a, b) => UnitReference.equals(a?.value || UnitReference.create(), b?.value || UnitReference.create()),\n            defaultLabel: 'Unit',\n\t\t\tsetOptionContent: (button: HTMLButtonElement, valueConfig: DropdownValueConfig<UnitValue>, isSelectButton: boolean) => {\n                const unitConfig = valueConfig.value;\n\n                button.className = button.className.replace(/text-[\\w]*/, '')\n                if (unitConfig.color) {\n                    button.classList.add(`text-${unitConfig.color}`);\n                }\n\n                if (unitConfig.iconUrl) {\n                    let icon = null;\n                    if (unitConfig.iconUrl instanceof ActionId) {\n                        const img = document.createElement('img');\n                        img.classList.add('unit-picker-item-icon');\n                        unitConfig.iconUrl.fill().then(filledId => {\n                            img.src = filledId.iconUrl;\n                        });\n                        icon = img;\n                    } else if (unitConfig.iconUrl.startsWith('fa-')) {\n                        const img = document.createElement('i');\n                        img.classList.add('fa', unitConfig.iconUrl, 'unit-picker-item-icon');\n                        icon = img;\n                    } else {\n                        const img = document.createElement('img');\n                        img.classList.add('unit-picker-item-icon');\n                        img.src = unitConfig.iconUrl;\n                        icon = img;\n                    }\n                    button.appendChild(icon);\n                }\n\n                const hideLabel = config.hideLabelWhenDefaultSelected && isSelectButton && !unitConfig.value;\n                if (unitConfig.text && !hideLabel) {\n                    button.insertAdjacentText('beforeend', unitConfig.text);\n                }\n\t\t\t}\n\t\t});\n        this.rootElem.classList.add('unit-picker-root');\n\t}\n}\n","import { SimResult, SimResultFilter } from '../..//proto_utils/sim_result.js';\nimport { Component } from '../../components/component.js';\nimport { EventID, TypedEvent } from '../../typed_event.js';\n\nexport interface SimResultData {\n\teventID: EventID,\n\tresult: SimResult,\n\tfilter: SimResultFilter,\n};\n\nexport interface ResultComponentConfig {\n\tparent: HTMLElement,\n\trootCssClass?: string,\n\tcssScheme?: String | null,\n\tresultsEmitter: TypedEvent<SimResultData | null>,\n};\n\nexport abstract class ResultComponent extends Component {\n\tprivate lastSimResult: SimResultData | null;\n\n\tconstructor(config: ResultComponentConfig) {\n\t\tsuper(config.parent, config.rootCssClass || 'result-component');\n\t\tthis.lastSimResult = null;\n\n\t\tconfig.resultsEmitter.on((eventID, resultData) => {\n\t\t\tif (!resultData)\n\t\t\t\treturn;\n\n\t\t\tthis.lastSimResult = resultData;\n\t\t\tthis.onSimResult(resultData);\n\t\t});\n\t}\n\n\thasLastSimResult(): boolean {\n\t\treturn this.lastSimResult != null;\n\t}\n\n\tgetLastSimResult(): SimResultData {\n\t\tif (this.lastSimResult) {\n\t\t\treturn this.lastSimResult;\n\t\t} else {\n\t\t\tthrow new Error('No last sim result!');\n\t\t}\n\t}\n\n\tabstract onSimResult(resultData: SimResultData): void;\n}\n","import { UnitReference, UnitReference_Type as UnitType } from '../../proto/common.js';\nimport { SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { EventID, TypedEvent } from '../../typed_event.js';\nimport { UnitPicker, UnitValueConfig, UnitValue } from '../../components/unit_picker.js';\n\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nconst ALL_UNITS = -1;\n\ninterface FilterData {\n\tplayer: number,\n\ttarget: number,\n};\n\nexport class ResultsFilter extends ResultComponent {\n\tprivate readonly currentFilter: FilterData;\n\n\treadonly changeEmitter: TypedEvent<void>;\n\n\tprivate readonly playerFilter: UnitPicker<FilterData>;\n\tprivate readonly targetFilter: UnitPicker<FilterData>;\n\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'results-filter-root';\n\t\tsuper(config);\n\t\tthis.currentFilter = {\n\t\t\tplayer: ALL_UNITS,\n\t\t\ttarget: ALL_UNITS,\n\t\t};\n\t\tthis.changeEmitter = new TypedEvent<void>();\n\n\t\tthis.playerFilter = new UnitPicker(this.rootElem, this.currentFilter, {\n\t\t\textraCssClasses: [\n\t\t\t\t'player-filter-root',\n\t\t\t\t'd-none',\n\t\t\t],\n\t\t\tchangedEvent: (_filterData: FilterData) => this.changeEmitter,\n\t\t\tsourceToValue: (src: UnitReference|undefined) => this.refToValue(src),\n\t\t\tvalueToSource: (val: UnitValue) => val.value,\n\t\t\tgetValue: (filterData: FilterData) => this.numToRef(filterData.player, true),\n\t\t\tsetValue: (eventID: EventID, filterData: FilterData, newValue: UnitReference|undefined) => this.setPlayer(eventID, this.refToNum(newValue)),\n\t\t\tvalues: [],\n\t\t});\n\n\t\tthis.targetFilter = new UnitPicker(this.rootElem, this.currentFilter, {\n\t\t\textraCssClasses: [\n\t\t\t\t'target-filter-root',\n\t\t\t\t'd-none',\n\t\t\t],\n\t\t\tchangedEvent: (_filterData: FilterData) => this.changeEmitter,\n\t\t\tsourceToValue: (src: UnitReference|undefined) => this.refToValue(src),\n\t\t\tvalueToSource: (val: UnitValue) => val.value,\n\t\t\tgetValue: (filterData: FilterData) => this.numToRef(filterData.target, false),\n\t\t\tsetValue: (eventID: EventID, filterData: FilterData, newValue: UnitReference|undefined) => this.setTarget(eventID, this.refToNum(newValue)),\n\t\t\tvalues: [],\n\t\t});\n\t}\n\n\tgetFilter(): SimResultFilter {\n\t\treturn {\n\t\t\tplayer: this.currentFilter.player == ALL_UNITS ? null : this.currentFilter.player,\n\t\t\ttarget: this.currentFilter.target == ALL_UNITS ? null : this.currentFilter.target,\n\t\t};\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t\tthis.playerFilter.setOptions(this.getUnitOptions(resultData.eventID, resultData.result, true));\n\t\tthis.targetFilter.setOptions(this.getUnitOptions(resultData.eventID, resultData.result, false));\n\t\tthis.playerFilter.rootElem.classList.remove('d-none');\n\t\tthis.targetFilter.rootElem.classList.remove('d-none');\n\t}\n\n\tsetPlayer(eventID: EventID, newPlayer: number | null) {\n\t\tthis.currentFilter.player = (newPlayer === null) ? ALL_UNITS : newPlayer;\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n\n\tsetTarget(eventID: EventID, newTarget: number | null) {\n\t\tthis.currentFilter.target = (newTarget === null) ? ALL_UNITS : newTarget;\n\t\tthis.changeEmitter.emit(eventID);\n\t}\n\n\tprivate refToValue(ref: UnitReference|undefined): UnitValue {\n\t\tif (!ref || ref.type == UnitType.Unknown) {\n\t\t\treturn {\n\t\t\t\tvalue: ref,\n\t\t\t};\n\t\t} else if (ref.type == UnitType.AllPlayers) {\n\t\t\treturn {\n\t\t\t\ticonUrl: '',\n\t\t\t\ttext: 'All Players',\n\t\t\t\tvalue: ref,\n\t\t\t};\n\t\t} else if (ref.type == UnitType.AllTargets) {\n\t\t\treturn {\n\t\t\t\ticonUrl: '',\n\t\t\t\ttext: 'All Targets',\n\t\t\t\tvalue: ref,\n\t\t\t};\n\t\t} else if (this.hasLastSimResult()) {\n\t\t\tconst simResult = this.getLastSimResult();\n\t\t\tconst unit = ref.type == UnitType.Player\n\t\t\t\t? simResult.result.getPlayerWithRaidIndex(ref.index)\n\t\t\t\t: ref.type == UnitType.Target \n\t\t\t\t\t? simResult.result.getTargetWithEncounterIndex(ref.index)\n\t\t\t\t\t: null;\n\n\t\t\tif (unit) {\n\t\t\t\treturn {\n\t\t\t\t\ticonUrl: unit.iconUrl || '',\n\t\t\t\t\ttext: unit.label,\n\t\t\t\t\tcolor: unit.classColor || '',\n\t\t\t\t\tvalue: ref,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tvalue: ref,\n\t\t};\n\t}\n\n\tprivate refToNum(ref: UnitReference|undefined): number {\n\t\treturn (!ref || ref.type == UnitType.AllPlayers || ref.type == UnitType.AllTargets) ? ALL_UNITS : ref.index;\n\t}\n\n\tprivate numToRef(idx: number, isPlayer: boolean): UnitReference {\n\t\tif (isPlayer) {\n\t\t\treturn idx == ALL_UNITS\n\t\t\t\t? UnitReference.create({type: UnitType.AllPlayers})\n\t\t\t\t: UnitReference.create({type: UnitType.Player, index: idx});\n\t\t} else {\n\t\t\treturn idx == ALL_UNITS\n\t\t\t\t? UnitReference.create({type: UnitType.AllTargets})\n\t\t\t\t: UnitReference.create({type: UnitType.Target, index: idx});\n\t\t}\n\t}\n\n\tprivate getUnitOptions(eventID: EventID, simResult: SimResult, isPlayer: boolean): Array<UnitValueConfig> {\n\t\tconst allUnitsOption = UnitReference.create({type: isPlayer ? UnitType.AllPlayers : UnitType.AllTargets});\n\n\t\tconst unitOptions = (isPlayer ? simResult.getPlayers() : simResult.getTargets())\n\t\t\t.map(unit => UnitReference.create({type: isPlayer ? UnitType.Player : UnitType.Target, index: unit.index}));\n\n\t\tconst options = [allUnitsOption].concat(unitOptions);\n\n\t\tconst curRef = this.numToRef(isPlayer ? this.currentFilter.player : this.currentFilter.target, isPlayer);\n\t\tconst hasSameOption = options.find(option => UnitReference.equals(option, curRef)) != null;\n\t\tif (!hasSameOption) {\n\t\t\tif (isPlayer) {\n\t\t\t\tthis.currentFilter.player = ALL_UNITS;\n\t\t\t} else {\n\t\t\t\tthis.currentFilter.target = ALL_UNITS;\n\t\t\t}\n\t\t\tthis.changeEmitter.emit(eventID);\n\t\t}\n\n\t\treturn options.map(o => {\n\t\t\treturn {\n\t\t\t\tvalue: this.refToValue(o),\n\t\t\t};\n\t\t});\n\t}\n}","/**!\n* tippy.js v6.3.7\n* (c) 2017-2021 atomiks\n* MIT License\n*/\nimport { createPopper, applyStyles } from '@popperjs/core';\n\nvar ROUND_ARROW = '<svg width=\"16\" height=\"6\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 6s1.796-.013 4.67-3.615C5.851.9 6.93.006 8 0c1.07-.006 2.148.887 3.343 2.385C14.233 6.005 16 6 16 6H0z\"></svg>';\nvar BOX_CLASS = \"tippy-box\";\nvar CONTENT_CLASS = \"tippy-content\";\nvar BACKDROP_CLASS = \"tippy-backdrop\";\nvar ARROW_CLASS = \"tippy-arrow\";\nvar SVG_ARROW_CLASS = \"tippy-svg-arrow\";\nvar TOUCH_OPTIONS = {\n  passive: true,\n  capture: true\n};\nvar TIPPY_DEFAULT_APPEND_TO = function TIPPY_DEFAULT_APPEND_TO() {\n  return document.body;\n};\n\nfunction hasOwnProperty(obj, key) {\n  return {}.hasOwnProperty.call(obj, key);\n}\nfunction getValueAtIndexOrReturn(value, index, defaultValue) {\n  if (Array.isArray(value)) {\n    var v = value[index];\n    return v == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v;\n  }\n\n  return value;\n}\nfunction isType(value, type) {\n  var str = {}.toString.call(value);\n  return str.indexOf('[object') === 0 && str.indexOf(type + \"]\") > -1;\n}\nfunction invokeWithArgsOrReturn(value, args) {\n  return typeof value === 'function' ? value.apply(void 0, args) : value;\n}\nfunction debounce(fn, ms) {\n  // Avoid wrapping in `setTimeout` if ms is 0 anyway\n  if (ms === 0) {\n    return fn;\n  }\n\n  var timeout;\n  return function (arg) {\n    clearTimeout(timeout);\n    timeout = setTimeout(function () {\n      fn(arg);\n    }, ms);\n  };\n}\nfunction removeProperties(obj, keys) {\n  var clone = Object.assign({}, obj);\n  keys.forEach(function (key) {\n    delete clone[key];\n  });\n  return clone;\n}\nfunction splitBySpaces(value) {\n  return value.split(/\\s+/).filter(Boolean);\n}\nfunction normalizeToArray(value) {\n  return [].concat(value);\n}\nfunction pushIfUnique(arr, value) {\n  if (arr.indexOf(value) === -1) {\n    arr.push(value);\n  }\n}\nfunction unique(arr) {\n  return arr.filter(function (item, index) {\n    return arr.indexOf(item) === index;\n  });\n}\nfunction getBasePlacement(placement) {\n  return placement.split('-')[0];\n}\nfunction arrayFrom(value) {\n  return [].slice.call(value);\n}\nfunction removeUndefinedProps(obj) {\n  return Object.keys(obj).reduce(function (acc, key) {\n    if (obj[key] !== undefined) {\n      acc[key] = obj[key];\n    }\n\n    return acc;\n  }, {});\n}\n\nfunction div() {\n  return document.createElement('div');\n}\nfunction isElement(value) {\n  return ['Element', 'Fragment'].some(function (type) {\n    return isType(value, type);\n  });\n}\nfunction isNodeList(value) {\n  return isType(value, 'NodeList');\n}\nfunction isMouseEvent(value) {\n  return isType(value, 'MouseEvent');\n}\nfunction isReferenceElement(value) {\n  return !!(value && value._tippy && value._tippy.reference === value);\n}\nfunction getArrayOfElements(value) {\n  if (isElement(value)) {\n    return [value];\n  }\n\n  if (isNodeList(value)) {\n    return arrayFrom(value);\n  }\n\n  if (Array.isArray(value)) {\n    return value;\n  }\n\n  return arrayFrom(document.querySelectorAll(value));\n}\nfunction setTransitionDuration(els, value) {\n  els.forEach(function (el) {\n    if (el) {\n      el.style.transitionDuration = value + \"ms\";\n    }\n  });\n}\nfunction setVisibilityState(els, state) {\n  els.forEach(function (el) {\n    if (el) {\n      el.setAttribute('data-state', state);\n    }\n  });\n}\nfunction getOwnerDocument(elementOrElements) {\n  var _element$ownerDocumen;\n\n  var _normalizeToArray = normalizeToArray(elementOrElements),\n      element = _normalizeToArray[0]; // Elements created via a <template> have an ownerDocument with no reference to the body\n\n\n  return element != null && (_element$ownerDocumen = element.ownerDocument) != null && _element$ownerDocumen.body ? element.ownerDocument : document;\n}\nfunction isCursorOutsideInteractiveBorder(popperTreeData, event) {\n  var clientX = event.clientX,\n      clientY = event.clientY;\n  return popperTreeData.every(function (_ref) {\n    var popperRect = _ref.popperRect,\n        popperState = _ref.popperState,\n        props = _ref.props;\n    var interactiveBorder = props.interactiveBorder;\n    var basePlacement = getBasePlacement(popperState.placement);\n    var offsetData = popperState.modifiersData.offset;\n\n    if (!offsetData) {\n      return true;\n    }\n\n    var topDistance = basePlacement === 'bottom' ? offsetData.top.y : 0;\n    var bottomDistance = basePlacement === 'top' ? offsetData.bottom.y : 0;\n    var leftDistance = basePlacement === 'right' ? offsetData.left.x : 0;\n    var rightDistance = basePlacement === 'left' ? offsetData.right.x : 0;\n    var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;\n    var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;\n    var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;\n    var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;\n    return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;\n  });\n}\nfunction updateTransitionEndListener(box, action, listener) {\n  var method = action + \"EventListener\"; // some browsers apparently support `transition` (unprefixed) but only fire\n  // `webkitTransitionEnd`...\n\n  ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {\n    box[method](event, listener);\n  });\n}\n/**\n * Compared to xxx.contains, this function works for dom structures with shadow\n * dom\n */\n\nfunction actualContains(parent, child) {\n  var target = child;\n\n  while (target) {\n    var _target$getRootNode;\n\n    if (parent.contains(target)) {\n      return true;\n    }\n\n    target = target.getRootNode == null ? void 0 : (_target$getRootNode = target.getRootNode()) == null ? void 0 : _target$getRootNode.host;\n  }\n\n  return false;\n}\n\nvar currentInput = {\n  isTouch: false\n};\nvar lastMouseMoveTime = 0;\n/**\n * When a `touchstart` event is fired, it's assumed the user is using touch\n * input. We'll bind a `mousemove` event listener to listen for mouse input in\n * the future. This way, the `isTouch` property is fully dynamic and will handle\n * hybrid devices that use a mix of touch + mouse input.\n */\n\nfunction onDocumentTouchStart() {\n  if (currentInput.isTouch) {\n    return;\n  }\n\n  currentInput.isTouch = true;\n\n  if (window.performance) {\n    document.addEventListener('mousemove', onDocumentMouseMove);\n  }\n}\n/**\n * When two `mousemove` event are fired consecutively within 20ms, it's assumed\n * the user is using mouse input again. `mousemove` can fire on touch devices as\n * well, but very rarely that quickly.\n */\n\nfunction onDocumentMouseMove() {\n  var now = performance.now();\n\n  if (now - lastMouseMoveTime < 20) {\n    currentInput.isTouch = false;\n    document.removeEventListener('mousemove', onDocumentMouseMove);\n  }\n\n  lastMouseMoveTime = now;\n}\n/**\n * When an element is in focus and has a tippy, leaving the tab/window and\n * returning causes it to show again. For mouse users this is unexpected, but\n * for keyboard use it makes sense.\n * TODO: find a better technique to solve this problem\n */\n\nfunction onWindowBlur() {\n  var activeElement = document.activeElement;\n\n  if (isReferenceElement(activeElement)) {\n    var instance = activeElement._tippy;\n\n    if (activeElement.blur && !instance.state.isVisible) {\n      activeElement.blur();\n    }\n  }\n}\nfunction bindGlobalEventListeners() {\n  document.addEventListener('touchstart', onDocumentTouchStart, TOUCH_OPTIONS);\n  window.addEventListener('blur', onWindowBlur);\n}\n\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';\nvar isIE11 = isBrowser ? // @ts-ignore\n!!window.msCrypto : false;\n\nfunction createMemoryLeakWarning(method) {\n  var txt = method === 'destroy' ? 'n already-' : ' ';\n  return [method + \"() was called on a\" + txt + \"destroyed instance. This is a no-op but\", 'indicates a potential memory leak.'].join(' ');\n}\nfunction clean(value) {\n  var spacesAndTabs = /[ \\t]{2,}/g;\n  var lineStartWithSpaces = /^[ \\t]*/gm;\n  return value.replace(spacesAndTabs, ' ').replace(lineStartWithSpaces, '').trim();\n}\n\nfunction getDevMessage(message) {\n  return clean(\"\\n  %ctippy.js\\n\\n  %c\" + clean(message) + \"\\n\\n  %c\\uD83D\\uDC77\\u200D This is a development-only message. It will be removed in production.\\n  \");\n}\n\nfunction getFormattedMessage(message) {\n  return [getDevMessage(message), // title\n  'color: #00C584; font-size: 1.3em; font-weight: bold;', // message\n  'line-height: 1.5', // footer\n  'color: #a6a095;'];\n} // Assume warnings and errors never have the same message\n\nvar visitedMessages;\n\nif (process.env.NODE_ENV !== \"production\") {\n  resetVisitedMessages();\n}\n\nfunction resetVisitedMessages() {\n  visitedMessages = new Set();\n}\nfunction warnWhen(condition, message) {\n  if (condition && !visitedMessages.has(message)) {\n    var _console;\n\n    visitedMessages.add(message);\n\n    (_console = console).warn.apply(_console, getFormattedMessage(message));\n  }\n}\nfunction errorWhen(condition, message) {\n  if (condition && !visitedMessages.has(message)) {\n    var _console2;\n\n    visitedMessages.add(message);\n\n    (_console2 = console).error.apply(_console2, getFormattedMessage(message));\n  }\n}\nfunction validateTargets(targets) {\n  var didPassFalsyValue = !targets;\n  var didPassPlainObject = Object.prototype.toString.call(targets) === '[object Object]' && !targets.addEventListener;\n  errorWhen(didPassFalsyValue, ['tippy() was passed', '`' + String(targets) + '`', 'as its targets (first) argument. Valid types are: String, Element,', 'Element[], or NodeList.'].join(' '));\n  errorWhen(didPassPlainObject, ['tippy() was passed a plain object which is not supported as an argument', 'for virtual positioning. Use props.getReferenceClientRect instead.'].join(' '));\n}\n\nvar pluginProps = {\n  animateFill: false,\n  followCursor: false,\n  inlinePositioning: false,\n  sticky: false\n};\nvar renderProps = {\n  allowHTML: false,\n  animation: 'fade',\n  arrow: true,\n  content: '',\n  inertia: false,\n  maxWidth: 350,\n  role: 'tooltip',\n  theme: '',\n  zIndex: 9999\n};\nvar defaultProps = Object.assign({\n  appendTo: TIPPY_DEFAULT_APPEND_TO,\n  aria: {\n    content: 'auto',\n    expanded: 'auto'\n  },\n  delay: 0,\n  duration: [300, 250],\n  getReferenceClientRect: null,\n  hideOnClick: true,\n  ignoreAttributes: false,\n  interactive: false,\n  interactiveBorder: 2,\n  interactiveDebounce: 0,\n  moveTransition: '',\n  offset: [0, 10],\n  onAfterUpdate: function onAfterUpdate() {},\n  onBeforeUpdate: function onBeforeUpdate() {},\n  onCreate: function onCreate() {},\n  onDestroy: function onDestroy() {},\n  onHidden: function onHidden() {},\n  onHide: function onHide() {},\n  onMount: function onMount() {},\n  onShow: function onShow() {},\n  onShown: function onShown() {},\n  onTrigger: function onTrigger() {},\n  onUntrigger: function onUntrigger() {},\n  onClickOutside: function onClickOutside() {},\n  placement: 'top',\n  plugins: [],\n  popperOptions: {},\n  render: null,\n  showOnCreate: false,\n  touch: true,\n  trigger: 'mouseenter focus',\n  triggerTarget: null\n}, pluginProps, renderProps);\nvar defaultKeys = Object.keys(defaultProps);\nvar setDefaultProps = function setDefaultProps(partialProps) {\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== \"production\") {\n    validateProps(partialProps, []);\n  }\n\n  var keys = Object.keys(partialProps);\n  keys.forEach(function (key) {\n    defaultProps[key] = partialProps[key];\n  });\n};\nfunction getExtendedPassedProps(passedProps) {\n  var plugins = passedProps.plugins || [];\n  var pluginProps = plugins.reduce(function (acc, plugin) {\n    var name = plugin.name,\n        defaultValue = plugin.defaultValue;\n\n    if (name) {\n      var _name;\n\n      acc[name] = passedProps[name] !== undefined ? passedProps[name] : (_name = defaultProps[name]) != null ? _name : defaultValue;\n    }\n\n    return acc;\n  }, {});\n  return Object.assign({}, passedProps, pluginProps);\n}\nfunction getDataAttributeProps(reference, plugins) {\n  var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {\n    plugins: plugins\n  }))) : defaultKeys;\n  var props = propKeys.reduce(function (acc, key) {\n    var valueAsString = (reference.getAttribute(\"data-tippy-\" + key) || '').trim();\n\n    if (!valueAsString) {\n      return acc;\n    }\n\n    if (key === 'content') {\n      acc[key] = valueAsString;\n    } else {\n      try {\n        acc[key] = JSON.parse(valueAsString);\n      } catch (e) {\n        acc[key] = valueAsString;\n      }\n    }\n\n    return acc;\n  }, {});\n  return props;\n}\nfunction evaluateProps(reference, props) {\n  var out = Object.assign({}, props, {\n    content: invokeWithArgsOrReturn(props.content, [reference])\n  }, props.ignoreAttributes ? {} : getDataAttributeProps(reference, props.plugins));\n  out.aria = Object.assign({}, defaultProps.aria, out.aria);\n  out.aria = {\n    expanded: out.aria.expanded === 'auto' ? props.interactive : out.aria.expanded,\n    content: out.aria.content === 'auto' ? props.interactive ? null : 'describedby' : out.aria.content\n  };\n  return out;\n}\nfunction validateProps(partialProps, plugins) {\n  if (partialProps === void 0) {\n    partialProps = {};\n  }\n\n  if (plugins === void 0) {\n    plugins = [];\n  }\n\n  var keys = Object.keys(partialProps);\n  keys.forEach(function (prop) {\n    var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));\n    var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop); // Check if the prop exists in `plugins`\n\n    if (didPassUnknownProp) {\n      didPassUnknownProp = plugins.filter(function (plugin) {\n        return plugin.name === prop;\n      }).length === 0;\n    }\n\n    warnWhen(didPassUnknownProp, [\"`\" + prop + \"`\", \"is not a valid prop. You may have spelled it incorrectly, or if it's\", 'a plugin, forgot to pass it in an array as props.plugins.', '\\n\\n', 'All props: https://atomiks.github.io/tippyjs/v6/all-props/\\n', 'Plugins: https://atomiks.github.io/tippyjs/v6/plugins/'].join(' '));\n  });\n}\n\nvar innerHTML = function innerHTML() {\n  return 'innerHTML';\n};\n\nfunction dangerouslySetInnerHTML(element, html) {\n  element[innerHTML()] = html;\n}\n\nfunction createArrowElement(value) {\n  var arrow = div();\n\n  if (value === true) {\n    arrow.className = ARROW_CLASS;\n  } else {\n    arrow.className = SVG_ARROW_CLASS;\n\n    if (isElement(value)) {\n      arrow.appendChild(value);\n    } else {\n      dangerouslySetInnerHTML(arrow, value);\n    }\n  }\n\n  return arrow;\n}\n\nfunction setContent(content, props) {\n  if (isElement(props.content)) {\n    dangerouslySetInnerHTML(content, '');\n    content.appendChild(props.content);\n  } else if (typeof props.content !== 'function') {\n    if (props.allowHTML) {\n      dangerouslySetInnerHTML(content, props.content);\n    } else {\n      content.textContent = props.content;\n    }\n  }\n}\nfunction getChildren(popper) {\n  var box = popper.firstElementChild;\n  var boxChildren = arrayFrom(box.children);\n  return {\n    box: box,\n    content: boxChildren.find(function (node) {\n      return node.classList.contains(CONTENT_CLASS);\n    }),\n    arrow: boxChildren.find(function (node) {\n      return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);\n    }),\n    backdrop: boxChildren.find(function (node) {\n      return node.classList.contains(BACKDROP_CLASS);\n    })\n  };\n}\nfunction render(instance) {\n  var popper = div();\n  var box = div();\n  box.className = BOX_CLASS;\n  box.setAttribute('data-state', 'hidden');\n  box.setAttribute('tabindex', '-1');\n  var content = div();\n  content.className = CONTENT_CLASS;\n  content.setAttribute('data-state', 'hidden');\n  setContent(content, instance.props);\n  popper.appendChild(box);\n  box.appendChild(content);\n  onUpdate(instance.props, instance.props);\n\n  function onUpdate(prevProps, nextProps) {\n    var _getChildren = getChildren(popper),\n        box = _getChildren.box,\n        content = _getChildren.content,\n        arrow = _getChildren.arrow;\n\n    if (nextProps.theme) {\n      box.setAttribute('data-theme', nextProps.theme);\n    } else {\n      box.removeAttribute('data-theme');\n    }\n\n    if (typeof nextProps.animation === 'string') {\n      box.setAttribute('data-animation', nextProps.animation);\n    } else {\n      box.removeAttribute('data-animation');\n    }\n\n    if (nextProps.inertia) {\n      box.setAttribute('data-inertia', '');\n    } else {\n      box.removeAttribute('data-inertia');\n    }\n\n    box.style.maxWidth = typeof nextProps.maxWidth === 'number' ? nextProps.maxWidth + \"px\" : nextProps.maxWidth;\n\n    if (nextProps.role) {\n      box.setAttribute('role', nextProps.role);\n    } else {\n      box.removeAttribute('role');\n    }\n\n    if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) {\n      setContent(content, instance.props);\n    }\n\n    if (nextProps.arrow) {\n      if (!arrow) {\n        box.appendChild(createArrowElement(nextProps.arrow));\n      } else if (prevProps.arrow !== nextProps.arrow) {\n        box.removeChild(arrow);\n        box.appendChild(createArrowElement(nextProps.arrow));\n      }\n    } else if (arrow) {\n      box.removeChild(arrow);\n    }\n  }\n\n  return {\n    popper: popper,\n    onUpdate: onUpdate\n  };\n} // Runtime check to identify if the render function is the default one; this\n// way we can apply default CSS transitions logic and it can be tree-shaken away\n\nrender.$$tippy = true;\n\nvar idCounter = 1;\nvar mouseMoveListeners = []; // Used by `hideAll()`\n\nvar mountedInstances = [];\nfunction createTippy(reference, passedProps) {\n  var props = evaluateProps(reference, Object.assign({}, defaultProps, getExtendedPassedProps(removeUndefinedProps(passedProps)))); // ===========================================================================\n  // 🔒 Private members\n  // ===========================================================================\n\n  var showTimeout;\n  var hideTimeout;\n  var scheduleHideAnimationFrame;\n  var isVisibleFromClick = false;\n  var didHideDueToDocumentMouseDown = false;\n  var didTouchMove = false;\n  var ignoreOnFirstUpdate = false;\n  var lastTriggerEvent;\n  var currentTransitionEndListener;\n  var onFirstUpdate;\n  var listeners = [];\n  var debouncedOnMouseMove = debounce(onMouseMove, props.interactiveDebounce);\n  var currentTarget; // ===========================================================================\n  // 🔑 Public members\n  // ===========================================================================\n\n  var id = idCounter++;\n  var popperInstance = null;\n  var plugins = unique(props.plugins);\n  var state = {\n    // Is the instance currently enabled?\n    isEnabled: true,\n    // Is the tippy currently showing and not transitioning out?\n    isVisible: false,\n    // Has the instance been destroyed?\n    isDestroyed: false,\n    // Is the tippy currently mounted to the DOM?\n    isMounted: false,\n    // Has the tippy finished transitioning in?\n    isShown: false\n  };\n  var instance = {\n    // properties\n    id: id,\n    reference: reference,\n    popper: div(),\n    popperInstance: popperInstance,\n    props: props,\n    state: state,\n    plugins: plugins,\n    // methods\n    clearDelayTimeouts: clearDelayTimeouts,\n    setProps: setProps,\n    setContent: setContent,\n    show: show,\n    hide: hide,\n    hideWithInteractivity: hideWithInteractivity,\n    enable: enable,\n    disable: disable,\n    unmount: unmount,\n    destroy: destroy\n  }; // TODO: Investigate why this early return causes a TDZ error in the tests —\n  // it doesn't seem to happen in the browser\n\n  /* istanbul ignore if */\n\n  if (!props.render) {\n    if (process.env.NODE_ENV !== \"production\") {\n      errorWhen(true, 'render() function has not been supplied.');\n    }\n\n    return instance;\n  } // ===========================================================================\n  // Initial mutations\n  // ===========================================================================\n\n\n  var _props$render = props.render(instance),\n      popper = _props$render.popper,\n      onUpdate = _props$render.onUpdate;\n\n  popper.setAttribute('data-tippy-root', '');\n  popper.id = \"tippy-\" + instance.id;\n  instance.popper = popper;\n  reference._tippy = instance;\n  popper._tippy = instance;\n  var pluginsHooks = plugins.map(function (plugin) {\n    return plugin.fn(instance);\n  });\n  var hasAriaExpanded = reference.hasAttribute('aria-expanded');\n  addListeners();\n  handleAriaExpandedAttribute();\n  handleStyles();\n  invokeHook('onCreate', [instance]);\n\n  if (props.showOnCreate) {\n    scheduleShow();\n  } // Prevent a tippy with a delay from hiding if the cursor left then returned\n  // before it started hiding\n\n\n  popper.addEventListener('mouseenter', function () {\n    if (instance.props.interactive && instance.state.isVisible) {\n      instance.clearDelayTimeouts();\n    }\n  });\n  popper.addEventListener('mouseleave', function () {\n    if (instance.props.interactive && instance.props.trigger.indexOf('mouseenter') >= 0) {\n      getDocument().addEventListener('mousemove', debouncedOnMouseMove);\n    }\n  });\n  return instance; // ===========================================================================\n  // 🔒 Private methods\n  // ===========================================================================\n\n  function getNormalizedTouchSettings() {\n    var touch = instance.props.touch;\n    return Array.isArray(touch) ? touch : [touch, 0];\n  }\n\n  function getIsCustomTouchBehavior() {\n    return getNormalizedTouchSettings()[0] === 'hold';\n  }\n\n  function getIsDefaultRenderFn() {\n    var _instance$props$rende;\n\n    // @ts-ignore\n    return !!((_instance$props$rende = instance.props.render) != null && _instance$props$rende.$$tippy);\n  }\n\n  function getCurrentTarget() {\n    return currentTarget || reference;\n  }\n\n  function getDocument() {\n    var parent = getCurrentTarget().parentNode;\n    return parent ? getOwnerDocument(parent) : document;\n  }\n\n  function getDefaultTemplateChildren() {\n    return getChildren(popper);\n  }\n\n  function getDelay(isShow) {\n    // For touch or keyboard input, force `0` delay for UX reasons\n    // Also if the instance is mounted but not visible (transitioning out),\n    // ignore delay\n    if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === 'focus') {\n      return 0;\n    }\n\n    return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);\n  }\n\n  function handleStyles(fromHide) {\n    if (fromHide === void 0) {\n      fromHide = false;\n    }\n\n    popper.style.pointerEvents = instance.props.interactive && !fromHide ? '' : 'none';\n    popper.style.zIndex = \"\" + instance.props.zIndex;\n  }\n\n  function invokeHook(hook, args, shouldInvokePropsHook) {\n    if (shouldInvokePropsHook === void 0) {\n      shouldInvokePropsHook = true;\n    }\n\n    pluginsHooks.forEach(function (pluginHooks) {\n      if (pluginHooks[hook]) {\n        pluginHooks[hook].apply(pluginHooks, args);\n      }\n    });\n\n    if (shouldInvokePropsHook) {\n      var _instance$props;\n\n      (_instance$props = instance.props)[hook].apply(_instance$props, args);\n    }\n  }\n\n  function handleAriaContentAttribute() {\n    var aria = instance.props.aria;\n\n    if (!aria.content) {\n      return;\n    }\n\n    var attr = \"aria-\" + aria.content;\n    var id = popper.id;\n    var nodes = normalizeToArray(instance.props.triggerTarget || reference);\n    nodes.forEach(function (node) {\n      var currentValue = node.getAttribute(attr);\n\n      if (instance.state.isVisible) {\n        node.setAttribute(attr, currentValue ? currentValue + \" \" + id : id);\n      } else {\n        var nextValue = currentValue && currentValue.replace(id, '').trim();\n\n        if (nextValue) {\n          node.setAttribute(attr, nextValue);\n        } else {\n          node.removeAttribute(attr);\n        }\n      }\n    });\n  }\n\n  function handleAriaExpandedAttribute() {\n    if (hasAriaExpanded || !instance.props.aria.expanded) {\n      return;\n    }\n\n    var nodes = normalizeToArray(instance.props.triggerTarget || reference);\n    nodes.forEach(function (node) {\n      if (instance.props.interactive) {\n        node.setAttribute('aria-expanded', instance.state.isVisible && node === getCurrentTarget() ? 'true' : 'false');\n      } else {\n        node.removeAttribute('aria-expanded');\n      }\n    });\n  }\n\n  function cleanupInteractiveMouseListeners() {\n    getDocument().removeEventListener('mousemove', debouncedOnMouseMove);\n    mouseMoveListeners = mouseMoveListeners.filter(function (listener) {\n      return listener !== debouncedOnMouseMove;\n    });\n  }\n\n  function onDocumentPress(event) {\n    // Moved finger to scroll instead of an intentional tap outside\n    if (currentInput.isTouch) {\n      if (didTouchMove || event.type === 'mousedown') {\n        return;\n      }\n    }\n\n    var actualTarget = event.composedPath && event.composedPath()[0] || event.target; // Clicked on interactive popper\n\n    if (instance.props.interactive && actualContains(popper, actualTarget)) {\n      return;\n    } // Clicked on the event listeners target\n\n\n    if (normalizeToArray(instance.props.triggerTarget || reference).some(function (el) {\n      return actualContains(el, actualTarget);\n    })) {\n      if (currentInput.isTouch) {\n        return;\n      }\n\n      if (instance.state.isVisible && instance.props.trigger.indexOf('click') >= 0) {\n        return;\n      }\n    } else {\n      invokeHook('onClickOutside', [instance, event]);\n    }\n\n    if (instance.props.hideOnClick === true) {\n      instance.clearDelayTimeouts();\n      instance.hide(); // `mousedown` event is fired right before `focus` if pressing the\n      // currentTarget. This lets a tippy with `focus` trigger know that it\n      // should not show\n\n      didHideDueToDocumentMouseDown = true;\n      setTimeout(function () {\n        didHideDueToDocumentMouseDown = false;\n      }); // The listener gets added in `scheduleShow()`, but this may be hiding it\n      // before it shows, and hide()'s early bail-out behavior can prevent it\n      // from being cleaned up\n\n      if (!instance.state.isMounted) {\n        removeDocumentPress();\n      }\n    }\n  }\n\n  function onTouchMove() {\n    didTouchMove = true;\n  }\n\n  function onTouchStart() {\n    didTouchMove = false;\n  }\n\n  function addDocumentPress() {\n    var doc = getDocument();\n    doc.addEventListener('mousedown', onDocumentPress, true);\n    doc.addEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);\n    doc.addEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);\n    doc.addEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);\n  }\n\n  function removeDocumentPress() {\n    var doc = getDocument();\n    doc.removeEventListener('mousedown', onDocumentPress, true);\n    doc.removeEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);\n    doc.removeEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);\n    doc.removeEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);\n  }\n\n  function onTransitionedOut(duration, callback) {\n    onTransitionEnd(duration, function () {\n      if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) {\n        callback();\n      }\n    });\n  }\n\n  function onTransitionedIn(duration, callback) {\n    onTransitionEnd(duration, callback);\n  }\n\n  function onTransitionEnd(duration, callback) {\n    var box = getDefaultTemplateChildren().box;\n\n    function listener(event) {\n      if (event.target === box) {\n        updateTransitionEndListener(box, 'remove', listener);\n        callback();\n      }\n    } // Make callback synchronous if duration is 0\n    // `transitionend` won't fire otherwise\n\n\n    if (duration === 0) {\n      return callback();\n    }\n\n    updateTransitionEndListener(box, 'remove', currentTransitionEndListener);\n    updateTransitionEndListener(box, 'add', listener);\n    currentTransitionEndListener = listener;\n  }\n\n  function on(eventType, handler, options) {\n    if (options === void 0) {\n      options = false;\n    }\n\n    var nodes = normalizeToArray(instance.props.triggerTarget || reference);\n    nodes.forEach(function (node) {\n      node.addEventListener(eventType, handler, options);\n      listeners.push({\n        node: node,\n        eventType: eventType,\n        handler: handler,\n        options: options\n      });\n    });\n  }\n\n  function addListeners() {\n    if (getIsCustomTouchBehavior()) {\n      on('touchstart', onTrigger, {\n        passive: true\n      });\n      on('touchend', onMouseLeave, {\n        passive: true\n      });\n    }\n\n    splitBySpaces(instance.props.trigger).forEach(function (eventType) {\n      if (eventType === 'manual') {\n        return;\n      }\n\n      on(eventType, onTrigger);\n\n      switch (eventType) {\n        case 'mouseenter':\n          on('mouseleave', onMouseLeave);\n          break;\n\n        case 'focus':\n          on(isIE11 ? 'focusout' : 'blur', onBlurOrFocusOut);\n          break;\n\n        case 'focusin':\n          on('focusout', onBlurOrFocusOut);\n          break;\n      }\n    });\n  }\n\n  function removeListeners() {\n    listeners.forEach(function (_ref) {\n      var node = _ref.node,\n          eventType = _ref.eventType,\n          handler = _ref.handler,\n          options = _ref.options;\n      node.removeEventListener(eventType, handler, options);\n    });\n    listeners = [];\n  }\n\n  function onTrigger(event) {\n    var _lastTriggerEvent;\n\n    var shouldScheduleClickHide = false;\n\n    if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {\n      return;\n    }\n\n    var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === 'focus';\n    lastTriggerEvent = event;\n    currentTarget = event.currentTarget;\n    handleAriaExpandedAttribute();\n\n    if (!instance.state.isVisible && isMouseEvent(event)) {\n      // If scrolling, `mouseenter` events can be fired if the cursor lands\n      // over a new target, but `mousemove` events don't get fired. This\n      // causes interactive tooltips to get stuck open until the cursor is\n      // moved\n      mouseMoveListeners.forEach(function (listener) {\n        return listener(event);\n      });\n    } // Toggle show/hide when clicking click-triggered tooltips\n\n\n    if (event.type === 'click' && (instance.props.trigger.indexOf('mouseenter') < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {\n      shouldScheduleClickHide = true;\n    } else {\n      scheduleShow(event);\n    }\n\n    if (event.type === 'click') {\n      isVisibleFromClick = !shouldScheduleClickHide;\n    }\n\n    if (shouldScheduleClickHide && !wasFocused) {\n      scheduleHide(event);\n    }\n  }\n\n  function onMouseMove(event) {\n    var target = event.target;\n    var isCursorOverReferenceOrPopper = getCurrentTarget().contains(target) || popper.contains(target);\n\n    if (event.type === 'mousemove' && isCursorOverReferenceOrPopper) {\n      return;\n    }\n\n    var popperTreeData = getNestedPopperTree().concat(popper).map(function (popper) {\n      var _instance$popperInsta;\n\n      var instance = popper._tippy;\n      var state = (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.state;\n\n      if (state) {\n        return {\n          popperRect: popper.getBoundingClientRect(),\n          popperState: state,\n          props: props\n        };\n      }\n\n      return null;\n    }).filter(Boolean);\n\n    if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {\n      cleanupInteractiveMouseListeners();\n      scheduleHide(event);\n    }\n  }\n\n  function onMouseLeave(event) {\n    var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf('click') >= 0 && isVisibleFromClick;\n\n    if (shouldBail) {\n      return;\n    }\n\n    if (instance.props.interactive) {\n      instance.hideWithInteractivity(event);\n      return;\n    }\n\n    scheduleHide(event);\n  }\n\n  function onBlurOrFocusOut(event) {\n    if (instance.props.trigger.indexOf('focusin') < 0 && event.target !== getCurrentTarget()) {\n      return;\n    } // If focus was moved to within the popper\n\n\n    if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) {\n      return;\n    }\n\n    scheduleHide(event);\n  }\n\n  function isEventListenerStopped(event) {\n    return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf('touch') >= 0 : false;\n  }\n\n  function createPopperInstance() {\n    destroyPopperInstance();\n    var _instance$props2 = instance.props,\n        popperOptions = _instance$props2.popperOptions,\n        placement = _instance$props2.placement,\n        offset = _instance$props2.offset,\n        getReferenceClientRect = _instance$props2.getReferenceClientRect,\n        moveTransition = _instance$props2.moveTransition;\n    var arrow = getIsDefaultRenderFn() ? getChildren(popper).arrow : null;\n    var computedReference = getReferenceClientRect ? {\n      getBoundingClientRect: getReferenceClientRect,\n      contextElement: getReferenceClientRect.contextElement || getCurrentTarget()\n    } : reference;\n    var tippyModifier = {\n      name: '$$tippy',\n      enabled: true,\n      phase: 'beforeWrite',\n      requires: ['computeStyles'],\n      fn: function fn(_ref2) {\n        var state = _ref2.state;\n\n        if (getIsDefaultRenderFn()) {\n          var _getDefaultTemplateCh = getDefaultTemplateChildren(),\n              box = _getDefaultTemplateCh.box;\n\n          ['placement', 'reference-hidden', 'escaped'].forEach(function (attr) {\n            if (attr === 'placement') {\n              box.setAttribute('data-placement', state.placement);\n            } else {\n              if (state.attributes.popper[\"data-popper-\" + attr]) {\n                box.setAttribute(\"data-\" + attr, '');\n              } else {\n                box.removeAttribute(\"data-\" + attr);\n              }\n            }\n          });\n          state.attributes.popper = {};\n        }\n      }\n    };\n    var modifiers = [{\n      name: 'offset',\n      options: {\n        offset: offset\n      }\n    }, {\n      name: 'preventOverflow',\n      options: {\n        padding: {\n          top: 2,\n          bottom: 2,\n          left: 5,\n          right: 5\n        }\n      }\n    }, {\n      name: 'flip',\n      options: {\n        padding: 5\n      }\n    }, {\n      name: 'computeStyles',\n      options: {\n        adaptive: !moveTransition\n      }\n    }, tippyModifier];\n\n    if (getIsDefaultRenderFn() && arrow) {\n      modifiers.push({\n        name: 'arrow',\n        options: {\n          element: arrow,\n          padding: 3\n        }\n      });\n    }\n\n    modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);\n    instance.popperInstance = createPopper(computedReference, popper, Object.assign({}, popperOptions, {\n      placement: placement,\n      onFirstUpdate: onFirstUpdate,\n      modifiers: modifiers\n    }));\n  }\n\n  function destroyPopperInstance() {\n    if (instance.popperInstance) {\n      instance.popperInstance.destroy();\n      instance.popperInstance = null;\n    }\n  }\n\n  function mount() {\n    var appendTo = instance.props.appendTo;\n    var parentNode; // By default, we'll append the popper to the triggerTargets's parentNode so\n    // it's directly after the reference element so the elements inside the\n    // tippy can be tabbed to\n    // If there are clipping issues, the user can specify a different appendTo\n    // and ensure focus management is handled correctly manually\n\n    var node = getCurrentTarget();\n\n    if (instance.props.interactive && appendTo === TIPPY_DEFAULT_APPEND_TO || appendTo === 'parent') {\n      parentNode = node.parentNode;\n    } else {\n      parentNode = invokeWithArgsOrReturn(appendTo, [node]);\n    } // The popper element needs to exist on the DOM before its position can be\n    // updated as Popper needs to read its dimensions\n\n\n    if (!parentNode.contains(popper)) {\n      parentNode.appendChild(popper);\n    }\n\n    instance.state.isMounted = true;\n    createPopperInstance();\n    /* istanbul ignore else */\n\n    if (process.env.NODE_ENV !== \"production\") {\n      // Accessibility check\n      warnWhen(instance.props.interactive && appendTo === defaultProps.appendTo && node.nextElementSibling !== popper, ['Interactive tippy element may not be accessible via keyboard', 'navigation because it is not directly after the reference element', 'in the DOM source order.', '\\n\\n', 'Using a wrapper <div> or <span> tag around the reference element', 'solves this by creating a new parentNode context.', '\\n\\n', 'Specifying `appendTo: document.body` silences this warning, but it', 'assumes you are using a focus management solution to handle', 'keyboard navigation.', '\\n\\n', 'See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity'].join(' '));\n    }\n  }\n\n  function getNestedPopperTree() {\n    return arrayFrom(popper.querySelectorAll('[data-tippy-root]'));\n  }\n\n  function scheduleShow(event) {\n    instance.clearDelayTimeouts();\n\n    if (event) {\n      invokeHook('onTrigger', [instance, event]);\n    }\n\n    addDocumentPress();\n    var delay = getDelay(true);\n\n    var _getNormalizedTouchSe = getNormalizedTouchSettings(),\n        touchValue = _getNormalizedTouchSe[0],\n        touchDelay = _getNormalizedTouchSe[1];\n\n    if (currentInput.isTouch && touchValue === 'hold' && touchDelay) {\n      delay = touchDelay;\n    }\n\n    if (delay) {\n      showTimeout = setTimeout(function () {\n        instance.show();\n      }, delay);\n    } else {\n      instance.show();\n    }\n  }\n\n  function scheduleHide(event) {\n    instance.clearDelayTimeouts();\n    invokeHook('onUntrigger', [instance, event]);\n\n    if (!instance.state.isVisible) {\n      removeDocumentPress();\n      return;\n    } // For interactive tippies, scheduleHide is added to a document.body handler\n    // from onMouseLeave so must intercept scheduled hides from mousemove/leave\n    // events when trigger contains mouseenter and click, and the tip is\n    // currently shown as a result of a click.\n\n\n    if (instance.props.trigger.indexOf('mouseenter') >= 0 && instance.props.trigger.indexOf('click') >= 0 && ['mouseleave', 'mousemove'].indexOf(event.type) >= 0 && isVisibleFromClick) {\n      return;\n    }\n\n    var delay = getDelay(false);\n\n    if (delay) {\n      hideTimeout = setTimeout(function () {\n        if (instance.state.isVisible) {\n          instance.hide();\n        }\n      }, delay);\n    } else {\n      // Fixes a `transitionend` problem when it fires 1 frame too\n      // late sometimes, we don't want hide() to be called.\n      scheduleHideAnimationFrame = requestAnimationFrame(function () {\n        instance.hide();\n      });\n    }\n  } // ===========================================================================\n  // 🔑 Public methods\n  // ===========================================================================\n\n\n  function enable() {\n    instance.state.isEnabled = true;\n  }\n\n  function disable() {\n    // Disabling the instance should also hide it\n    // https://github.com/atomiks/tippy.js-react/issues/106\n    instance.hide();\n    instance.state.isEnabled = false;\n  }\n\n  function clearDelayTimeouts() {\n    clearTimeout(showTimeout);\n    clearTimeout(hideTimeout);\n    cancelAnimationFrame(scheduleHideAnimationFrame);\n  }\n\n  function setProps(partialProps) {\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== \"production\") {\n      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('setProps'));\n    }\n\n    if (instance.state.isDestroyed) {\n      return;\n    }\n\n    invokeHook('onBeforeUpdate', [instance, partialProps]);\n    removeListeners();\n    var prevProps = instance.props;\n    var nextProps = evaluateProps(reference, Object.assign({}, prevProps, removeUndefinedProps(partialProps), {\n      ignoreAttributes: true\n    }));\n    instance.props = nextProps;\n    addListeners();\n\n    if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {\n      cleanupInteractiveMouseListeners();\n      debouncedOnMouseMove = debounce(onMouseMove, nextProps.interactiveDebounce);\n    } // Ensure stale aria-expanded attributes are removed\n\n\n    if (prevProps.triggerTarget && !nextProps.triggerTarget) {\n      normalizeToArray(prevProps.triggerTarget).forEach(function (node) {\n        node.removeAttribute('aria-expanded');\n      });\n    } else if (nextProps.triggerTarget) {\n      reference.removeAttribute('aria-expanded');\n    }\n\n    handleAriaExpandedAttribute();\n    handleStyles();\n\n    if (onUpdate) {\n      onUpdate(prevProps, nextProps);\n    }\n\n    if (instance.popperInstance) {\n      createPopperInstance(); // Fixes an issue with nested tippies if they are all getting re-rendered,\n      // and the nested ones get re-rendered first.\n      // https://github.com/atomiks/tippyjs-react/issues/177\n      // TODO: find a cleaner / more efficient solution(!)\n\n      getNestedPopperTree().forEach(function (nestedPopper) {\n        // React (and other UI libs likely) requires a rAF wrapper as it flushes\n        // its work in one\n        requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);\n      });\n    }\n\n    invokeHook('onAfterUpdate', [instance, partialProps]);\n  }\n\n  function setContent(content) {\n    instance.setProps({\n      content: content\n    });\n  }\n\n  function show() {\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== \"production\") {\n      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('show'));\n    } // Early bail-out\n\n\n    var isAlreadyVisible = instance.state.isVisible;\n    var isDestroyed = instance.state.isDestroyed;\n    var isDisabled = !instance.state.isEnabled;\n    var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;\n    var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);\n\n    if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {\n      return;\n    } // Normalize `disabled` behavior across browsers.\n    // Firefox allows events on disabled elements, but Chrome doesn't.\n    // Using a wrapper element (i.e. <span>) is recommended.\n\n\n    if (getCurrentTarget().hasAttribute('disabled')) {\n      return;\n    }\n\n    invokeHook('onShow', [instance], false);\n\n    if (instance.props.onShow(instance) === false) {\n      return;\n    }\n\n    instance.state.isVisible = true;\n\n    if (getIsDefaultRenderFn()) {\n      popper.style.visibility = 'visible';\n    }\n\n    handleStyles();\n    addDocumentPress();\n\n    if (!instance.state.isMounted) {\n      popper.style.transition = 'none';\n    } // If flipping to the opposite side after hiding at least once, the\n    // animation will use the wrong placement without resetting the duration\n\n\n    if (getIsDefaultRenderFn()) {\n      var _getDefaultTemplateCh2 = getDefaultTemplateChildren(),\n          box = _getDefaultTemplateCh2.box,\n          content = _getDefaultTemplateCh2.content;\n\n      setTransitionDuration([box, content], 0);\n    }\n\n    onFirstUpdate = function onFirstUpdate() {\n      var _instance$popperInsta2;\n\n      if (!instance.state.isVisible || ignoreOnFirstUpdate) {\n        return;\n      }\n\n      ignoreOnFirstUpdate = true; // reflow\n\n      void popper.offsetHeight;\n      popper.style.transition = instance.props.moveTransition;\n\n      if (getIsDefaultRenderFn() && instance.props.animation) {\n        var _getDefaultTemplateCh3 = getDefaultTemplateChildren(),\n            _box = _getDefaultTemplateCh3.box,\n            _content = _getDefaultTemplateCh3.content;\n\n        setTransitionDuration([_box, _content], duration);\n        setVisibilityState([_box, _content], 'visible');\n      }\n\n      handleAriaContentAttribute();\n      handleAriaExpandedAttribute();\n      pushIfUnique(mountedInstances, instance); // certain modifiers (e.g. `maxSize`) require a second update after the\n      // popper has been positioned for the first time\n\n      (_instance$popperInsta2 = instance.popperInstance) == null ? void 0 : _instance$popperInsta2.forceUpdate();\n      invokeHook('onMount', [instance]);\n\n      if (instance.props.animation && getIsDefaultRenderFn()) {\n        onTransitionedIn(duration, function () {\n          instance.state.isShown = true;\n          invokeHook('onShown', [instance]);\n        });\n      }\n    };\n\n    mount();\n  }\n\n  function hide() {\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== \"production\") {\n      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hide'));\n    } // Early bail-out\n\n\n    var isAlreadyHidden = !instance.state.isVisible;\n    var isDestroyed = instance.state.isDestroyed;\n    var isDisabled = !instance.state.isEnabled;\n    var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);\n\n    if (isAlreadyHidden || isDestroyed || isDisabled) {\n      return;\n    }\n\n    invokeHook('onHide', [instance], false);\n\n    if (instance.props.onHide(instance) === false) {\n      return;\n    }\n\n    instance.state.isVisible = false;\n    instance.state.isShown = false;\n    ignoreOnFirstUpdate = false;\n    isVisibleFromClick = false;\n\n    if (getIsDefaultRenderFn()) {\n      popper.style.visibility = 'hidden';\n    }\n\n    cleanupInteractiveMouseListeners();\n    removeDocumentPress();\n    handleStyles(true);\n\n    if (getIsDefaultRenderFn()) {\n      var _getDefaultTemplateCh4 = getDefaultTemplateChildren(),\n          box = _getDefaultTemplateCh4.box,\n          content = _getDefaultTemplateCh4.content;\n\n      if (instance.props.animation) {\n        setTransitionDuration([box, content], duration);\n        setVisibilityState([box, content], 'hidden');\n      }\n    }\n\n    handleAriaContentAttribute();\n    handleAriaExpandedAttribute();\n\n    if (instance.props.animation) {\n      if (getIsDefaultRenderFn()) {\n        onTransitionedOut(duration, instance.unmount);\n      }\n    } else {\n      instance.unmount();\n    }\n  }\n\n  function hideWithInteractivity(event) {\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== \"production\") {\n      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('hideWithInteractivity'));\n    }\n\n    getDocument().addEventListener('mousemove', debouncedOnMouseMove);\n    pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);\n    debouncedOnMouseMove(event);\n  }\n\n  function unmount() {\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== \"production\") {\n      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('unmount'));\n    }\n\n    if (instance.state.isVisible) {\n      instance.hide();\n    }\n\n    if (!instance.state.isMounted) {\n      return;\n    }\n\n    destroyPopperInstance(); // If a popper is not interactive, it will be appended outside the popper\n    // tree by default. This seems mainly for interactive tippies, but we should\n    // find a workaround if possible\n\n    getNestedPopperTree().forEach(function (nestedPopper) {\n      nestedPopper._tippy.unmount();\n    });\n\n    if (popper.parentNode) {\n      popper.parentNode.removeChild(popper);\n    }\n\n    mountedInstances = mountedInstances.filter(function (i) {\n      return i !== instance;\n    });\n    instance.state.isMounted = false;\n    invokeHook('onHidden', [instance]);\n  }\n\n  function destroy() {\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== \"production\") {\n      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning('destroy'));\n    }\n\n    if (instance.state.isDestroyed) {\n      return;\n    }\n\n    instance.clearDelayTimeouts();\n    instance.unmount();\n    removeListeners();\n    delete reference._tippy;\n    instance.state.isDestroyed = true;\n    invokeHook('onDestroy', [instance]);\n  }\n}\n\nfunction tippy(targets, optionalProps) {\n  if (optionalProps === void 0) {\n    optionalProps = {};\n  }\n\n  var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);\n  /* istanbul ignore else */\n\n  if (process.env.NODE_ENV !== \"production\") {\n    validateTargets(targets);\n    validateProps(optionalProps, plugins);\n  }\n\n  bindGlobalEventListeners();\n  var passedProps = Object.assign({}, optionalProps, {\n    plugins: plugins\n  });\n  var elements = getArrayOfElements(targets);\n  /* istanbul ignore else */\n\n  if (process.env.NODE_ENV !== \"production\") {\n    var isSingleContentElement = isElement(passedProps.content);\n    var isMoreThanOneReferenceElement = elements.length > 1;\n    warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, ['tippy() was passed an Element as the `content` prop, but more than', 'one tippy instance was created by this invocation. This means the', 'content element will only be appended to the last tippy instance.', '\\n\\n', 'Instead, pass the .innerHTML of the element, or use a function that', 'returns a cloned version of the element instead.', '\\n\\n', '1) content: element.innerHTML\\n', '2) content: () => element.cloneNode(true)'].join(' '));\n  }\n\n  var instances = elements.reduce(function (acc, reference) {\n    var instance = reference && createTippy(reference, passedProps);\n\n    if (instance) {\n      acc.push(instance);\n    }\n\n    return acc;\n  }, []);\n  return isElement(targets) ? instances[0] : instances;\n}\n\ntippy.defaultProps = defaultProps;\ntippy.setDefaultProps = setDefaultProps;\ntippy.currentInput = currentInput;\nvar hideAll = function hideAll(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      excludedReferenceOrInstance = _ref.exclude,\n      duration = _ref.duration;\n\n  mountedInstances.forEach(function (instance) {\n    var isExcluded = false;\n\n    if (excludedReferenceOrInstance) {\n      isExcluded = isReferenceElement(excludedReferenceOrInstance) ? instance.reference === excludedReferenceOrInstance : instance.popper === excludedReferenceOrInstance.popper;\n    }\n\n    if (!isExcluded) {\n      var originalDuration = instance.props.duration;\n      instance.setProps({\n        duration: duration\n      });\n      instance.hide();\n\n      if (!instance.state.isDestroyed) {\n        instance.setProps({\n          duration: originalDuration\n        });\n      }\n    }\n  });\n};\n\n// every time the popper is destroyed (i.e. a new target), removing the styles\n// and causing transitions to break for singletons when the console is open, but\n// most notably for non-transform styles being used, `gpuAcceleration: false`.\n\nvar applyStylesModifier = Object.assign({}, applyStyles, {\n  effect: function effect(_ref) {\n    var state = _ref.state;\n    var initialStyles = {\n      popper: {\n        position: state.options.strategy,\n        left: '0',\n        top: '0',\n        margin: '0'\n      },\n      arrow: {\n        position: 'absolute'\n      },\n      reference: {}\n    };\n    Object.assign(state.elements.popper.style, initialStyles.popper);\n    state.styles = initialStyles;\n\n    if (state.elements.arrow) {\n      Object.assign(state.elements.arrow.style, initialStyles.arrow);\n    } // intentionally return no cleanup function\n    // return () => { ... }\n\n  }\n});\n\nvar createSingleton = function createSingleton(tippyInstances, optionalProps) {\n  var _optionalProps$popper;\n\n  if (optionalProps === void 0) {\n    optionalProps = {};\n  }\n\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== \"production\") {\n    errorWhen(!Array.isArray(tippyInstances), ['The first argument passed to createSingleton() must be an array of', 'tippy instances. The passed value was', String(tippyInstances)].join(' '));\n  }\n\n  var individualInstances = tippyInstances;\n  var references = [];\n  var triggerTargets = [];\n  var currentTarget;\n  var overrides = optionalProps.overrides;\n  var interceptSetPropsCleanups = [];\n  var shownOnCreate = false;\n\n  function setTriggerTargets() {\n    triggerTargets = individualInstances.map(function (instance) {\n      return normalizeToArray(instance.props.triggerTarget || instance.reference);\n    }).reduce(function (acc, item) {\n      return acc.concat(item);\n    }, []);\n  }\n\n  function setReferences() {\n    references = individualInstances.map(function (instance) {\n      return instance.reference;\n    });\n  }\n\n  function enableInstances(isEnabled) {\n    individualInstances.forEach(function (instance) {\n      if (isEnabled) {\n        instance.enable();\n      } else {\n        instance.disable();\n      }\n    });\n  }\n\n  function interceptSetProps(singleton) {\n    return individualInstances.map(function (instance) {\n      var originalSetProps = instance.setProps;\n\n      instance.setProps = function (props) {\n        originalSetProps(props);\n\n        if (instance.reference === currentTarget) {\n          singleton.setProps(props);\n        }\n      };\n\n      return function () {\n        instance.setProps = originalSetProps;\n      };\n    });\n  } // have to pass singleton, as it maybe undefined on first call\n\n\n  function prepareInstance(singleton, target) {\n    var index = triggerTargets.indexOf(target); // bail-out\n\n    if (target === currentTarget) {\n      return;\n    }\n\n    currentTarget = target;\n    var overrideProps = (overrides || []).concat('content').reduce(function (acc, prop) {\n      acc[prop] = individualInstances[index].props[prop];\n      return acc;\n    }, {});\n    singleton.setProps(Object.assign({}, overrideProps, {\n      getReferenceClientRect: typeof overrideProps.getReferenceClientRect === 'function' ? overrideProps.getReferenceClientRect : function () {\n        var _references$index;\n\n        return (_references$index = references[index]) == null ? void 0 : _references$index.getBoundingClientRect();\n      }\n    }));\n  }\n\n  enableInstances(false);\n  setReferences();\n  setTriggerTargets();\n  var plugin = {\n    fn: function fn() {\n      return {\n        onDestroy: function onDestroy() {\n          enableInstances(true);\n        },\n        onHidden: function onHidden() {\n          currentTarget = null;\n        },\n        onClickOutside: function onClickOutside(instance) {\n          if (instance.props.showOnCreate && !shownOnCreate) {\n            shownOnCreate = true;\n            currentTarget = null;\n          }\n        },\n        onShow: function onShow(instance) {\n          if (instance.props.showOnCreate && !shownOnCreate) {\n            shownOnCreate = true;\n            prepareInstance(instance, references[0]);\n          }\n        },\n        onTrigger: function onTrigger(instance, event) {\n          prepareInstance(instance, event.currentTarget);\n        }\n      };\n    }\n  };\n  var singleton = tippy(div(), Object.assign({}, removeProperties(optionalProps, ['overrides']), {\n    plugins: [plugin].concat(optionalProps.plugins || []),\n    triggerTarget: triggerTargets,\n    popperOptions: Object.assign({}, optionalProps.popperOptions, {\n      modifiers: [].concat(((_optionalProps$popper = optionalProps.popperOptions) == null ? void 0 : _optionalProps$popper.modifiers) || [], [applyStylesModifier])\n    })\n  }));\n  var originalShow = singleton.show;\n\n  singleton.show = function (target) {\n    originalShow(); // first time, showOnCreate or programmatic call with no params\n    // default to showing first instance\n\n    if (!currentTarget && target == null) {\n      return prepareInstance(singleton, references[0]);\n    } // triggered from event (do nothing as prepareInstance already called by onTrigger)\n    // programmatic call with no params when already visible (do nothing again)\n\n\n    if (currentTarget && target == null) {\n      return;\n    } // target is index of instance\n\n\n    if (typeof target === 'number') {\n      return references[target] && prepareInstance(singleton, references[target]);\n    } // target is a child tippy instance\n\n\n    if (individualInstances.indexOf(target) >= 0) {\n      var ref = target.reference;\n      return prepareInstance(singleton, ref);\n    } // target is a ReferenceElement\n\n\n    if (references.indexOf(target) >= 0) {\n      return prepareInstance(singleton, target);\n    }\n  };\n\n  singleton.showNext = function () {\n    var first = references[0];\n\n    if (!currentTarget) {\n      return singleton.show(0);\n    }\n\n    var index = references.indexOf(currentTarget);\n    singleton.show(references[index + 1] || first);\n  };\n\n  singleton.showPrevious = function () {\n    var last = references[references.length - 1];\n\n    if (!currentTarget) {\n      return singleton.show(last);\n    }\n\n    var index = references.indexOf(currentTarget);\n    var target = references[index - 1] || last;\n    singleton.show(target);\n  };\n\n  var originalSetProps = singleton.setProps;\n\n  singleton.setProps = function (props) {\n    overrides = props.overrides || overrides;\n    originalSetProps(props);\n  };\n\n  singleton.setInstances = function (nextInstances) {\n    enableInstances(true);\n    interceptSetPropsCleanups.forEach(function (fn) {\n      return fn();\n    });\n    individualInstances = nextInstances;\n    enableInstances(false);\n    setReferences();\n    setTriggerTargets();\n    interceptSetPropsCleanups = interceptSetProps(singleton);\n    singleton.setProps({\n      triggerTarget: triggerTargets\n    });\n  };\n\n  interceptSetPropsCleanups = interceptSetProps(singleton);\n  return singleton;\n};\n\nvar BUBBLING_EVENTS_MAP = {\n  mouseover: 'mouseenter',\n  focusin: 'focus',\n  click: 'click'\n};\n/**\n * Creates a delegate instance that controls the creation of tippy instances\n * for child elements (`target` CSS selector).\n */\n\nfunction delegate(targets, props) {\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== \"production\") {\n    errorWhen(!(props && props.target), ['You must specity a `target` prop indicating a CSS selector string matching', 'the target elements that should receive a tippy.'].join(' '));\n  }\n\n  var listeners = [];\n  var childTippyInstances = [];\n  var disabled = false;\n  var target = props.target;\n  var nativeProps = removeProperties(props, ['target']);\n  var parentProps = Object.assign({}, nativeProps, {\n    trigger: 'manual',\n    touch: false\n  });\n  var childProps = Object.assign({\n    touch: defaultProps.touch\n  }, nativeProps, {\n    showOnCreate: true\n  });\n  var returnValue = tippy(targets, parentProps);\n  var normalizedReturnValue = normalizeToArray(returnValue);\n\n  function onTrigger(event) {\n    if (!event.target || disabled) {\n      return;\n    }\n\n    var targetNode = event.target.closest(target);\n\n    if (!targetNode) {\n      return;\n    } // Get relevant trigger with fallbacks:\n    // 1. Check `data-tippy-trigger` attribute on target node\n    // 2. Fallback to `trigger` passed to `delegate()`\n    // 3. Fallback to `defaultProps.trigger`\n\n\n    var trigger = targetNode.getAttribute('data-tippy-trigger') || props.trigger || defaultProps.trigger; // @ts-ignore\n\n    if (targetNode._tippy) {\n      return;\n    }\n\n    if (event.type === 'touchstart' && typeof childProps.touch === 'boolean') {\n      return;\n    }\n\n    if (event.type !== 'touchstart' && trigger.indexOf(BUBBLING_EVENTS_MAP[event.type]) < 0) {\n      return;\n    }\n\n    var instance = tippy(targetNode, childProps);\n\n    if (instance) {\n      childTippyInstances = childTippyInstances.concat(instance);\n    }\n  }\n\n  function on(node, eventType, handler, options) {\n    if (options === void 0) {\n      options = false;\n    }\n\n    node.addEventListener(eventType, handler, options);\n    listeners.push({\n      node: node,\n      eventType: eventType,\n      handler: handler,\n      options: options\n    });\n  }\n\n  function addEventListeners(instance) {\n    var reference = instance.reference;\n    on(reference, 'touchstart', onTrigger, TOUCH_OPTIONS);\n    on(reference, 'mouseover', onTrigger);\n    on(reference, 'focusin', onTrigger);\n    on(reference, 'click', onTrigger);\n  }\n\n  function removeEventListeners() {\n    listeners.forEach(function (_ref) {\n      var node = _ref.node,\n          eventType = _ref.eventType,\n          handler = _ref.handler,\n          options = _ref.options;\n      node.removeEventListener(eventType, handler, options);\n    });\n    listeners = [];\n  }\n\n  function applyMutations(instance) {\n    var originalDestroy = instance.destroy;\n    var originalEnable = instance.enable;\n    var originalDisable = instance.disable;\n\n    instance.destroy = function (shouldDestroyChildInstances) {\n      if (shouldDestroyChildInstances === void 0) {\n        shouldDestroyChildInstances = true;\n      }\n\n      if (shouldDestroyChildInstances) {\n        childTippyInstances.forEach(function (instance) {\n          instance.destroy();\n        });\n      }\n\n      childTippyInstances = [];\n      removeEventListeners();\n      originalDestroy();\n    };\n\n    instance.enable = function () {\n      originalEnable();\n      childTippyInstances.forEach(function (instance) {\n        return instance.enable();\n      });\n      disabled = false;\n    };\n\n    instance.disable = function () {\n      originalDisable();\n      childTippyInstances.forEach(function (instance) {\n        return instance.disable();\n      });\n      disabled = true;\n    };\n\n    addEventListeners(instance);\n  }\n\n  normalizedReturnValue.forEach(applyMutations);\n  return returnValue;\n}\n\nvar animateFill = {\n  name: 'animateFill',\n  defaultValue: false,\n  fn: function fn(instance) {\n    var _instance$props$rende;\n\n    // @ts-ignore\n    if (!((_instance$props$rende = instance.props.render) != null && _instance$props$rende.$$tippy)) {\n      if (process.env.NODE_ENV !== \"production\") {\n        errorWhen(instance.props.animateFill, 'The `animateFill` plugin requires the default render function.');\n      }\n\n      return {};\n    }\n\n    var _getChildren = getChildren(instance.popper),\n        box = _getChildren.box,\n        content = _getChildren.content;\n\n    var backdrop = instance.props.animateFill ? createBackdropElement() : null;\n    return {\n      onCreate: function onCreate() {\n        if (backdrop) {\n          box.insertBefore(backdrop, box.firstElementChild);\n          box.setAttribute('data-animatefill', '');\n          box.style.overflow = 'hidden';\n          instance.setProps({\n            arrow: false,\n            animation: 'shift-away'\n          });\n        }\n      },\n      onMount: function onMount() {\n        if (backdrop) {\n          var transitionDuration = box.style.transitionDuration;\n          var duration = Number(transitionDuration.replace('ms', '')); // The content should fade in after the backdrop has mostly filled the\n          // tooltip element. `clip-path` is the other alternative but is not\n          // well-supported and is buggy on some devices.\n\n          content.style.transitionDelay = Math.round(duration / 10) + \"ms\";\n          backdrop.style.transitionDuration = transitionDuration;\n          setVisibilityState([backdrop], 'visible');\n        }\n      },\n      onShow: function onShow() {\n        if (backdrop) {\n          backdrop.style.transitionDuration = '0ms';\n        }\n      },\n      onHide: function onHide() {\n        if (backdrop) {\n          setVisibilityState([backdrop], 'hidden');\n        }\n      }\n    };\n  }\n};\n\nfunction createBackdropElement() {\n  var backdrop = div();\n  backdrop.className = BACKDROP_CLASS;\n  setVisibilityState([backdrop], 'hidden');\n  return backdrop;\n}\n\nvar mouseCoords = {\n  clientX: 0,\n  clientY: 0\n};\nvar activeInstances = [];\n\nfunction storeMouseCoords(_ref) {\n  var clientX = _ref.clientX,\n      clientY = _ref.clientY;\n  mouseCoords = {\n    clientX: clientX,\n    clientY: clientY\n  };\n}\n\nfunction addMouseCoordsListener(doc) {\n  doc.addEventListener('mousemove', storeMouseCoords);\n}\n\nfunction removeMouseCoordsListener(doc) {\n  doc.removeEventListener('mousemove', storeMouseCoords);\n}\n\nvar followCursor = {\n  name: 'followCursor',\n  defaultValue: false,\n  fn: function fn(instance) {\n    var reference = instance.reference;\n    var doc = getOwnerDocument(instance.props.triggerTarget || reference);\n    var isInternalUpdate = false;\n    var wasFocusEvent = false;\n    var isUnmounted = true;\n    var prevProps = instance.props;\n\n    function getIsInitialBehavior() {\n      return instance.props.followCursor === 'initial' && instance.state.isVisible;\n    }\n\n    function addListener() {\n      doc.addEventListener('mousemove', onMouseMove);\n    }\n\n    function removeListener() {\n      doc.removeEventListener('mousemove', onMouseMove);\n    }\n\n    function unsetGetReferenceClientRect() {\n      isInternalUpdate = true;\n      instance.setProps({\n        getReferenceClientRect: null\n      });\n      isInternalUpdate = false;\n    }\n\n    function onMouseMove(event) {\n      // If the instance is interactive, avoid updating the position unless it's\n      // over the reference element\n      var isCursorOverReference = event.target ? reference.contains(event.target) : true;\n      var followCursor = instance.props.followCursor;\n      var clientX = event.clientX,\n          clientY = event.clientY;\n      var rect = reference.getBoundingClientRect();\n      var relativeX = clientX - rect.left;\n      var relativeY = clientY - rect.top;\n\n      if (isCursorOverReference || !instance.props.interactive) {\n        instance.setProps({\n          // @ts-ignore - unneeded DOMRect properties\n          getReferenceClientRect: function getReferenceClientRect() {\n            var rect = reference.getBoundingClientRect();\n            var x = clientX;\n            var y = clientY;\n\n            if (followCursor === 'initial') {\n              x = rect.left + relativeX;\n              y = rect.top + relativeY;\n            }\n\n            var top = followCursor === 'horizontal' ? rect.top : y;\n            var right = followCursor === 'vertical' ? rect.right : x;\n            var bottom = followCursor === 'horizontal' ? rect.bottom : y;\n            var left = followCursor === 'vertical' ? rect.left : x;\n            return {\n              width: right - left,\n              height: bottom - top,\n              top: top,\n              right: right,\n              bottom: bottom,\n              left: left\n            };\n          }\n        });\n      }\n    }\n\n    function create() {\n      if (instance.props.followCursor) {\n        activeInstances.push({\n          instance: instance,\n          doc: doc\n        });\n        addMouseCoordsListener(doc);\n      }\n    }\n\n    function destroy() {\n      activeInstances = activeInstances.filter(function (data) {\n        return data.instance !== instance;\n      });\n\n      if (activeInstances.filter(function (data) {\n        return data.doc === doc;\n      }).length === 0) {\n        removeMouseCoordsListener(doc);\n      }\n    }\n\n    return {\n      onCreate: create,\n      onDestroy: destroy,\n      onBeforeUpdate: function onBeforeUpdate() {\n        prevProps = instance.props;\n      },\n      onAfterUpdate: function onAfterUpdate(_, _ref2) {\n        var followCursor = _ref2.followCursor;\n\n        if (isInternalUpdate) {\n          return;\n        }\n\n        if (followCursor !== undefined && prevProps.followCursor !== followCursor) {\n          destroy();\n\n          if (followCursor) {\n            create();\n\n            if (instance.state.isMounted && !wasFocusEvent && !getIsInitialBehavior()) {\n              addListener();\n            }\n          } else {\n            removeListener();\n            unsetGetReferenceClientRect();\n          }\n        }\n      },\n      onMount: function onMount() {\n        if (instance.props.followCursor && !wasFocusEvent) {\n          if (isUnmounted) {\n            onMouseMove(mouseCoords);\n            isUnmounted = false;\n          }\n\n          if (!getIsInitialBehavior()) {\n            addListener();\n          }\n        }\n      },\n      onTrigger: function onTrigger(_, event) {\n        if (isMouseEvent(event)) {\n          mouseCoords = {\n            clientX: event.clientX,\n            clientY: event.clientY\n          };\n        }\n\n        wasFocusEvent = event.type === 'focus';\n      },\n      onHidden: function onHidden() {\n        if (instance.props.followCursor) {\n          unsetGetReferenceClientRect();\n          removeListener();\n          isUnmounted = true;\n        }\n      }\n    };\n  }\n};\n\nfunction getProps(props, modifier) {\n  var _props$popperOptions;\n\n  return {\n    popperOptions: Object.assign({}, props.popperOptions, {\n      modifiers: [].concat((((_props$popperOptions = props.popperOptions) == null ? void 0 : _props$popperOptions.modifiers) || []).filter(function (_ref) {\n        var name = _ref.name;\n        return name !== modifier.name;\n      }), [modifier])\n    })\n  };\n}\n\nvar inlinePositioning = {\n  name: 'inlinePositioning',\n  defaultValue: false,\n  fn: function fn(instance) {\n    var reference = instance.reference;\n\n    function isEnabled() {\n      return !!instance.props.inlinePositioning;\n    }\n\n    var placement;\n    var cursorRectIndex = -1;\n    var isInternalUpdate = false;\n    var triedPlacements = [];\n    var modifier = {\n      name: 'tippyInlinePositioning',\n      enabled: true,\n      phase: 'afterWrite',\n      fn: function fn(_ref2) {\n        var state = _ref2.state;\n\n        if (isEnabled()) {\n          if (triedPlacements.indexOf(state.placement) !== -1) {\n            triedPlacements = [];\n          }\n\n          if (placement !== state.placement && triedPlacements.indexOf(state.placement) === -1) {\n            triedPlacements.push(state.placement);\n            instance.setProps({\n              // @ts-ignore - unneeded DOMRect properties\n              getReferenceClientRect: function getReferenceClientRect() {\n                return _getReferenceClientRect(state.placement);\n              }\n            });\n          }\n\n          placement = state.placement;\n        }\n      }\n    };\n\n    function _getReferenceClientRect(placement) {\n      return getInlineBoundingClientRect(getBasePlacement(placement), reference.getBoundingClientRect(), arrayFrom(reference.getClientRects()), cursorRectIndex);\n    }\n\n    function setInternalProps(partialProps) {\n      isInternalUpdate = true;\n      instance.setProps(partialProps);\n      isInternalUpdate = false;\n    }\n\n    function addModifier() {\n      if (!isInternalUpdate) {\n        setInternalProps(getProps(instance.props, modifier));\n      }\n    }\n\n    return {\n      onCreate: addModifier,\n      onAfterUpdate: addModifier,\n      onTrigger: function onTrigger(_, event) {\n        if (isMouseEvent(event)) {\n          var rects = arrayFrom(instance.reference.getClientRects());\n          var cursorRect = rects.find(function (rect) {\n            return rect.left - 2 <= event.clientX && rect.right + 2 >= event.clientX && rect.top - 2 <= event.clientY && rect.bottom + 2 >= event.clientY;\n          });\n          var index = rects.indexOf(cursorRect);\n          cursorRectIndex = index > -1 ? index : cursorRectIndex;\n        }\n      },\n      onHidden: function onHidden() {\n        cursorRectIndex = -1;\n      }\n    };\n  }\n};\nfunction getInlineBoundingClientRect(currentBasePlacement, boundingRect, clientRects, cursorRectIndex) {\n  // Not an inline element, or placement is not yet known\n  if (clientRects.length < 2 || currentBasePlacement === null) {\n    return boundingRect;\n  } // There are two rects and they are disjoined\n\n\n  if (clientRects.length === 2 && cursorRectIndex >= 0 && clientRects[0].left > clientRects[1].right) {\n    return clientRects[cursorRectIndex] || boundingRect;\n  }\n\n  switch (currentBasePlacement) {\n    case 'top':\n    case 'bottom':\n      {\n        var firstRect = clientRects[0];\n        var lastRect = clientRects[clientRects.length - 1];\n        var isTop = currentBasePlacement === 'top';\n        var top = firstRect.top;\n        var bottom = lastRect.bottom;\n        var left = isTop ? firstRect.left : lastRect.left;\n        var right = isTop ? firstRect.right : lastRect.right;\n        var width = right - left;\n        var height = bottom - top;\n        return {\n          top: top,\n          bottom: bottom,\n          left: left,\n          right: right,\n          width: width,\n          height: height\n        };\n      }\n\n    case 'left':\n    case 'right':\n      {\n        var minLeft = Math.min.apply(Math, clientRects.map(function (rects) {\n          return rects.left;\n        }));\n        var maxRight = Math.max.apply(Math, clientRects.map(function (rects) {\n          return rects.right;\n        }));\n        var measureRects = clientRects.filter(function (rect) {\n          return currentBasePlacement === 'left' ? rect.left === minLeft : rect.right === maxRight;\n        });\n        var _top = measureRects[0].top;\n        var _bottom = measureRects[measureRects.length - 1].bottom;\n        var _left = minLeft;\n        var _right = maxRight;\n\n        var _width = _right - _left;\n\n        var _height = _bottom - _top;\n\n        return {\n          top: _top,\n          bottom: _bottom,\n          left: _left,\n          right: _right,\n          width: _width,\n          height: _height\n        };\n      }\n\n    default:\n      {\n        return boundingRect;\n      }\n  }\n}\n\nvar sticky = {\n  name: 'sticky',\n  defaultValue: false,\n  fn: function fn(instance) {\n    var reference = instance.reference,\n        popper = instance.popper;\n\n    function getReference() {\n      return instance.popperInstance ? instance.popperInstance.state.elements.reference : reference;\n    }\n\n    function shouldCheck(value) {\n      return instance.props.sticky === true || instance.props.sticky === value;\n    }\n\n    var prevRefRect = null;\n    var prevPopRect = null;\n\n    function updatePosition() {\n      var currentRefRect = shouldCheck('reference') ? getReference().getBoundingClientRect() : null;\n      var currentPopRect = shouldCheck('popper') ? popper.getBoundingClientRect() : null;\n\n      if (currentRefRect && areRectsDifferent(prevRefRect, currentRefRect) || currentPopRect && areRectsDifferent(prevPopRect, currentPopRect)) {\n        if (instance.popperInstance) {\n          instance.popperInstance.update();\n        }\n      }\n\n      prevRefRect = currentRefRect;\n      prevPopRect = currentPopRect;\n\n      if (instance.state.isMounted) {\n        requestAnimationFrame(updatePosition);\n      }\n    }\n\n    return {\n      onMount: function onMount() {\n        if (instance.props.sticky) {\n          updatePosition();\n        }\n      }\n    };\n  }\n};\n\nfunction areRectsDifferent(rectA, rectB) {\n  if (rectA && rectB) {\n    return rectA.top !== rectB.top || rectA.right !== rectB.right || rectA.bottom !== rectB.bottom || rectA.left !== rectB.left;\n  }\n\n  return true;\n}\n\ntippy.setDefaultProps({\n  render: render\n});\n\nexport default tippy;\nexport { animateFill, createSingleton, delegate, followCursor, hideAll, inlinePositioning, ROUND_ARROW as roundArrow, sticky };\n//# sourceMappingURL=tippy.esm.js.map\n","import tippy from 'tippy.js';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { element, fragment, ref } from 'tsx-vanilla';\n\nimport { ActionId } from '../../proto_utils/action_id.js';\nimport { UnitMetrics } from '../../proto_utils/sim_result.js';\nimport { TypedEvent } from '../../typed_event.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\ndeclare let $: any;\n\nexport enum ColumnSortType {\n\tNone,\n\tAscending,\n\tDescending,\n}\n\nexport interface MetricsColumnConfig<T> {\n\tname: string;\n\ttooltip?: string;\n\theaderCellClass?: string;\n\tcolumnClass?: string;\n\tsort?: ColumnSortType;\n\n\tgetValue?: (metric: T) => number;\n\n\t// Either getDisplayString or fillCell must be specified.\n\tgetDisplayString?: (metric: T) => string;\n\tfillCell?: (metric: T, cellElem: HTMLElement, rowElem: HTMLElement) => void;\n}\n\nexport abstract class MetricsTable<T> extends ResultComponent {\n\tprivate readonly columnConfigs: Array<MetricsColumnConfig<T>>;\n\n\tprotected readonly tableElem: HTMLElement;\n\tprotected readonly bodyElem: HTMLElement;\n\n\treadonly onUpdate = new TypedEvent<void>('MetricsTableUpdate');\n\n\tconstructor(config: ResultComponentConfig, columnConfigs: Array<MetricsColumnConfig<T>>) {\n\t\tsuper(config);\n\t\tthis.columnConfigs = columnConfigs;\n\n\t\tthis.rootElem.appendChild(\n\t\t\t<table className=\"metrics-table tablesorter\">\n\t\t\t\t<thead className=\"metrics-table-header\">\n\t\t\t\t\t<tr className=\"metrics-table-header-row\"></tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody className=\"metrics-table-body\"></tbody>\n\t\t\t</table>,\n\t\t);\n\n\t\tthis.tableElem = this.rootElem.getElementsByClassName('metrics-table')[0] as HTMLTableSectionElement;\n\t\tthis.bodyElem = this.rootElem.getElementsByClassName('metrics-table-body')[0] as HTMLElement;\n\n\t\tconst headerRowElem = this.rootElem.getElementsByClassName('metrics-table-header-row')[0] as HTMLElement;\n\t\tthis.columnConfigs.forEach(columnConfig => {\n\t\t\tconst headerCell = document.createElement('th');\n\t\t\theaderCell.classList.add('metrics-table-header-cell');\n\t\t\tif (columnConfig.headerCellClass) {\n\t\t\t\theaderCell.classList.add(columnConfig.headerCellClass);\n\t\t\t}\n\t\t\tif (columnConfig.columnClass) {\n\t\t\t\theaderCell.classList.add(columnConfig.columnClass);\n\t\t\t}\n\t\t\theaderCell.appendChild(<span>{columnConfig.name}</span>);\n\t\t\tif (columnConfig.tooltip) {\n\t\t\t\ttippy(headerCell, {\n\t\t\t\t\tcontent: columnConfig.tooltip,\n\t\t\t\t\tignoreAttributes: true,\n\t\t\t\t});\n\t\t\t}\n\t\t\theaderRowElem.appendChild(headerCell);\n\t\t});\n\n\t\tconst sortList = this.columnConfigs\n\t\t\t.map((config, i) => [i, config.sort == ColumnSortType.Ascending ? 0 : 1])\n\t\t\t.filter(sortData => this.columnConfigs[sortData[0]].sort);\n\t\t$(this.tableElem).tablesorter({\n\t\t\tsortList: sortList,\n\t\t\tcssChildRow: 'child-metric',\n\t\t});\n\t}\n\n\tprotected sortMetrics(metrics: Array<T>) {\n\t\tthis.columnConfigs\n\t\t\t.filter(config => config.sort)\n\t\t\t.forEach(config => {\n\t\t\t\tif (!config.getValue) {\n\t\t\t\t\tthrow new Error(\"Can' apply group sorting without getValue\");\n\t\t\t\t}\n\t\t\t\tif (config.sort == ColumnSortType.Ascending) {\n\t\t\t\t\tmetrics.sort((a, b) => config.getValue!(a) - config.getValue!(b));\n\t\t\t\t} else {\n\t\t\t\t\tmetrics.sort((a, b) => config.getValue!(b) - config.getValue!(a));\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate addRow(metric: T): HTMLElement {\n\t\tconst rowElem = document.createElement('tr');\n\t\tthis.bodyElem.appendChild(rowElem);\n\n\t\tthis.columnConfigs.forEach(columnConfig => {\n\t\t\tconst cellElem = document.createElement('td');\n\t\t\tif (columnConfig.columnClass) {\n\t\t\t\tcellElem.classList.add(columnConfig.columnClass);\n\t\t\t}\n\t\t\tif (columnConfig.fillCell) {\n\t\t\t\tcolumnConfig.fillCell(metric, cellElem, rowElem);\n\t\t\t} else if (columnConfig.getDisplayString) {\n\t\t\t\tcellElem.textContent = columnConfig.getDisplayString(metric);\n\t\t\t} else {\n\t\t\t\tthrow new Error('Metrics column config does not provide content function: ' + columnConfig.name);\n\t\t\t}\n\t\t\trowElem.appendChild(cellElem);\n\t\t});\n\n\t\tthis.customizeRowElem(metric, rowElem);\n\t\treturn rowElem;\n\t}\n\n\tprivate addGroup(metrics: Array<T>) {\n\t\tif (metrics.length == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (metrics.length == 1 && this.shouldCollapse(metrics[0])) {\n\t\t\tthis.addRow(metrics[0]);\n\t\t\treturn;\n\t\t}\n\n\t\t// Manually sort because tablesorter doesn't let us apply sorting to child rows.\n\t\tthis.sortMetrics(metrics);\n\n\t\tconst mergedMetrics = this.mergeMetrics(metrics);\n\t\tconst parentRow = this.addRow(mergedMetrics);\n\t\tconst childRows = metrics.map(metric => this.addRow(metric));\n\t\tchildRows.forEach(childRow => childRow.classList.add('child-metric'));\n\n\t\tlet expand = true;\n\t\tparentRow.classList.add('parent-metric', 'expand');\n\t\tparentRow.addEventListener('click', event => {\n\t\t\texpand = !expand;\n\t\t\tif (expand) {\n\t\t\t\tchildRows.forEach(row => row.classList.remove('hide'));\n\t\t\t\tparentRow.classList.add('expand');\n\t\t\t} else {\n\t\t\t\tchildRows.forEach(row => row.classList.add('hide'));\n\t\t\t\tparentRow.classList.remove('expand');\n\t\t\t}\n\t\t});\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t\tthis.bodyElem.textContent = '';\n\t\tconst groupedMetrics = this.getGroupedMetrics(resultData).filter(group => group.length > 0);\n\t\tif (groupedMetrics.length == 0) {\n\t\t\tthis.rootElem.classList.add('hide');\n\t\t\tthis.onUpdate.emit(resultData.eventID);\n\t\t\treturn;\n\t\t} else {\n\t\t\tthis.rootElem.classList.remove('hide');\n\t\t}\n\n\t\tgroupedMetrics.forEach(group => this.addGroup(group));\n\t\t$(this.tableElem).trigger('update');\n\t\tthis.onUpdate.emit(resultData.eventID);\n\t}\n\n\t// Whether a single-element group should have its parent row removed.\n\t// Override this to add custom behavior.\n\tprotected shouldCollapse(metric: T): boolean {\n\t\treturn true;\n\t}\n\n\t// Override this to customize rowElem after it has been populated.\n\tprotected customizeRowElem(metric: T, rowElem: HTMLElement) {\n\t\treturn;\n\t}\n\n\t// Override this to provide custom merge behavior.\n\tprotected mergeMetrics(metrics: Array<T>): T {\n\t\treturn metrics[0];\n\t}\n\n\t// Returns grouped metrics to display.\n\tabstract getGroupedMetrics(resultData: SimResultData): Array<Array<T>>;\n\n\tstatic nameCellConfig<T>(getData: (metric: T) => { name: string; actionId: ActionId }): MetricsColumnConfig<T> {\n\t\treturn {\n\t\t\tname: 'Name',\n\t\t\tfillCell: (metric: T, cellElem: HTMLElement, rowElem: HTMLElement) => {\n\t\t\t\tconst data = getData(metric);\n\t\t\t\tconst iconElem = ref<HTMLAnchorElement>();\n\t\t\t\tcellElem.appendChild(\n\t\t\t\t\t<>\n\t\t\t\t\t\t<a ref={iconElem} className=\"metrics-action-icon\"></a>\n\t\t\t\t\t\t<span className=\"metrics-action-name\">{data.name}</span>\n\t\t\t\t\t\t<span className=\"expand-toggle fa fa-caret-down\"></span>\n\t\t\t\t\t\t<span className=\"expand-toggle fa fa-caret-right\"></span>\n\t\t\t\t\t</>,\n\t\t\t\t);\n\t\t\t\tdata.actionId.setBackgroundAndHref(iconElem.value!);\n\t\t\t},\n\t\t};\n\t}\n\n\tstatic playerNameCellConfig(): MetricsColumnConfig<UnitMetrics> {\n\t\treturn {\n\t\t\tname: 'Name',\n\t\t\tfillCell: (player: UnitMetrics, cellElem: HTMLElement, rowElem: HTMLElement) => {\n\t\t\t\tcellElem.appendChild(\n\t\t\t\t\t<>\n\t\t\t\t\t\t<img className=\"metrics-action-icon\" src={player.iconUrl}></img>\n\t\t\t\t\t\t<span className={`metrics-action-name text-${player.classColor}`}>{player.label}</span>\n\t\t\t\t\t</>,\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nexport class CastMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'cast-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'CPM',\n\t\t\t\ttooltip: 'Casts / (Encounter Duration / 60 Seconds)',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.castsPerMinute,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.castsPerMinute.toFixed(1),\n\t\t\t},\n\t\t]);\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\t//const actionMetrics = resultData.result.getActionMetrics(resultData.filter);\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tconst actions = player.actions.filter(action => action.casts != 0).map(action => action.forTarget(resultData.filter));\n\t\tconst actionGroups = ActionMetrics.groupById(actions);\n\t\tconst petGroups = player.pets.map(pet => pet.actions.filter(action => action.casts != 0).map(action => action.forTarget(resultData.filter)));\n\n\t\treturn actionGroups.concat(petGroups);\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n\n\tshouldCollapse(metric: ActionMetrics): boolean {\n\t\treturn !metric.unit?.isPet;\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nexport class DtpsMeleeMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'dtps-melee-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'DPS',\n\t\t\t\ttooltip: 'Damage / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Damage / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCast,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCast.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Damage / (Hits + Crits + Glances + Blocks)',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHit,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHit.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Hits',\n\t\t\t\ttooltip: 'Hits + Crits + Glances + Blocks',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.landedHits,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.landedHits.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Miss %',\n\t\t\t\ttooltip: 'Misses / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.missPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.missPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Dodge %',\n\t\t\t\ttooltip: 'Dodges / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dodgePercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dodgePercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Parry %',\n\t\t\t\ttooltip: 'Parries / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.parryPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.parryPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Block %',\n\t\t\t\ttooltip: 'Blocks / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.blockPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.blockPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Crit %',\n\t\t\t\ttooltip: 'Crits / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.critPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.critPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tconst targets = resultData.result.getTargets(resultData.filter);\n\t\tconst targetActions = targets.map(target => target.getMeleeActions().map(action => action.forTarget(resultData.filter))).flat();\n\t\tconst actionGroups = ActionMetrics.groupById(targetActions);\n\n\t\treturn actionGroups;\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\t// TODO: Use NPC ID here instead of pet ID.\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nexport class DtpsSpellMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'dtps-spell-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'DPS',\n\t\t\t\ttooltip: 'Damage / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Damage / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCast,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCast.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Damage / (Hits + Crits)',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHit,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHit.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Hits',\n\t\t\t\ttooltip: 'Hits + Crits',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.landedHits,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.landedHits.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Miss %',\n\t\t\t\ttooltip: 'Misses / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.missPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.missPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Crit %',\n\t\t\t\ttooltip: 'Crits / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.critPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.critPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tconst targets = resultData.result.getTargets(resultData.filter);\n\t\tconst targetActions = targets.map(target => target.getSpellActions().map(action => action.forTarget(resultData.filter))).flat();\n\t\tconst actionGroups = ActionMetrics.groupById(targetActions);\n\n\t\treturn actionGroups;\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\t// TODO: Use NPC ID here instead of pet ID.\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nexport class HealingMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'healing-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'CPM',\n\t\t\t\ttooltip: 'Casts / (Encounter Duration / 60 Seconds)',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.castsPerMinute,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.castsPerMinute.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Cast Time',\n\t\t\t\ttooltip: 'Average cast time in seconds',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCastTimeMs,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => (metric.avgCastTimeMs / 1000).toFixed(2),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'HPM',\n\t\t\t\ttooltip: 'Healing / Mana',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.hpm,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.hpm.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'HPET',\n\t\t\t\ttooltip: 'Healing / Avg Cast Time',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.healingThroughput,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.healingThroughput.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'HPS',\n\t\t\t\ttooltip: 'Healing / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.hps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.hps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Healing / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCastHealing,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCastHealing.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'TPS',\n\t\t\t\ttooltip: 'Threat / Encounter Duration',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.tps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.tps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Threat / Casts',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCastThreat,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCastThreat.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Crit %',\n\t\t\t\ttooltip: 'Crits / Hits',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.critPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.critPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t}\n\n\tcustomizeRowElem(action: ActionMetrics, rowElem: HTMLElement) {\n\t\tif (action.hitAttempts == 0 && action.hps == 0) {\n\t\t\trowElem.classList.add('threat-metrics');\n\t\t}\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\t//const actions = player.getSpellActions().map(action => action.forTarget(resultData.filter));\n\t\tconst actions = player.getHealingActions();\n\t\tconst actionGroups = ActionMetrics.groupById(actions);\n\n\t\treturn actionGroups;\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n\n\tshouldCollapse(metric: ActionMetrics): boolean {\n\t\treturn !metric.unit?.isPet;\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { bucket } from '../../utils.js';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nexport class MeleeMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'melee-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'DPS',\n\t\t\t\ttooltip: 'Damage / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Damage / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCast,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCast.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Damage / (Hits + Crits + Glances + Blocks)',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHit,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHit.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'TPS',\n\t\t\t\ttooltip: 'Threat / Encounter Duration',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.tps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.tps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Threat / Casts',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCastThreat,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCastThreat.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Threat / (Hits + Crits + Glances + Blocks)',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHitThreat,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHitThreat.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Hits',\n\t\t\t\ttooltip: 'Hits + Crits + Glances + Blocks',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.landedHits,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.landedHits.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Miss %',\n\t\t\t\ttooltip: 'Misses / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.missPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.missPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Dodge %',\n\t\t\t\ttooltip: 'Dodges / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dodgePercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dodgePercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Parry %',\n\t\t\t\ttooltip: 'Parries / Swings',\n\t\t\t\tcolumnClass: 'in-front-of-target',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.parryPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.parryPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Block %',\n\t\t\t\ttooltip: 'Blocks / Swings',\n\t\t\t\tcolumnClass: 'in-front-of-target',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.blockPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.blockPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Glance %',\n\t\t\t\ttooltip: 'Glances / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.glancePercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.glancePercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Crit %',\n\t\t\t\ttooltip: 'Crits / Swings',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.critPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.critPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tif (player.inFrontOfTarget) {\n\t\t\tthis.rootElem.classList.remove('hide-in-front-of-target');\n\t\t} else {\n\t\t\tthis.rootElem.classList.add('hide-in-front-of-target');\n\t\t}\n\n\t\tconst actions = player.getMeleeActions().map(action => action.forTarget(resultData.filter));\n\t\tconst actionGroups = ActionMetrics.groupById(actions);\n\n\t\tconst petsByName = bucket(player.pets, pet => pet.name);\n\t\tconst petGroups = Object.values(petsByName).map(pets => ActionMetrics.joinById(pets.map(pet => pet.getMeleeActions().map(action => action.forTarget(resultData.filter))).flat(), true));\n\n\t\treturn actionGroups.concat(petGroups);\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n\n\tshouldCollapse(metric: ActionMetrics): boolean {\n\t\treturn !metric.unit?.isPet;\n\t}\n}\n","import { ActionMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { bucket } from '../../utils.js';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nexport class SpellMetricsTable extends MetricsTable<ActionMetrics> {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'spell-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ActionMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'DPS',\n\t\t\t\ttooltip: 'Damage / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.dps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.dps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Damage / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCast,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCast.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Damage / Hits',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHit,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHit.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'TPS',\n\t\t\t\ttooltip: 'Threat / Encounter Duration',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.tps,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.tps.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Cast',\n\t\t\t\ttooltip: 'Threat / Casts',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgCastThreat,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgCastThreat.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Hit',\n\t\t\t\ttooltip: 'Threat / Hits',\n\t\t\t\tcolumnClass: 'threat-metrics',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.avgHitThreat,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.avgHitThreat.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.casts,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.casts.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Hits',\n\t\t\t\ttooltip: 'Hits',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.landedHits,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.landedHits.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Miss %',\n\t\t\t\ttooltip: 'Misses / Casts',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.missPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.missPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Crit %',\n\t\t\t\ttooltip: 'Crits / Hits',\n\t\t\t\tgetValue: (metric: ActionMetrics) => metric.critPercent,\n\t\t\t\tgetDisplayString: (metric: ActionMetrics) => metric.critPercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t}\n\n\tcustomizeRowElem(action: ActionMetrics, rowElem: HTMLElement) {\n\t\tif (action.hitAttempts == 0 && action.dps == 0) {\n\t\t\trowElem.classList.add('threat-metrics');\n\t\t}\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ActionMetrics>> {\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tconst actions = player.getSpellActions().map(action => action.forTarget(resultData.filter));\n\t\tconst actionGroups = ActionMetrics.groupById(actions);\n\n\t\tconst petsByName = bucket(player.pets, pet => pet.name);\n\t\tconst petGroups = Object.values(petsByName).map(pets => ActionMetrics.joinById(pets.map(pet => pet.getSpellActions().map(action => action.forTarget(resultData.filter))).flat(), true));\n\n\t\treturn actionGroups.concat(petGroups);\n\t}\n\n\tmergeMetrics(metrics: Array<ActionMetrics>): ActionMetrics {\n\t\treturn ActionMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n\n\tshouldCollapse(metric: ActionMetrics): boolean {\n\t\treturn !metric.unit?.isPet;\n\t}\n}\n","import { ResourceMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { ResourceType } from '../../proto/api.js';\nimport { resourceNames } from '../../proto_utils/names.js';\nimport { orderedResourceTypes } from '../../proto_utils/utils.js';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nexport class ResourceMetricsTable extends ResultComponent {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'resource-metrics-root';\n\t\tsuper(config);\n\n\t\torderedResourceTypes.forEach(resourceType => {\n\t\t\tconst containerElem = document.createElement('div');\n\t\t\tcontainerElem.classList.add('resource-metrics-table-container', 'hide');\n\t\t\tcontainerElem.innerHTML = `<span class=\"resource-metrics-table-title\">${resourceNames.get(resourceType)}</span>`;\n\t\t\tthis.rootElem.appendChild(containerElem);\n\n\t\t\tconst childConfig = config;\n\t\t\tchildConfig.parent = containerElem;\n\t\t\tconst table = new TypedResourceMetricsTable(childConfig, resourceType);\n\t\t\ttable.onUpdate.on(() => {\n\t\t\t\tif (table.rootElem.classList.contains('hide')) {\n\t\t\t\t\tcontainerElem.classList.add('hide');\n\t\t\t\t} else {\n\t\t\t\t\tcontainerElem.classList.remove('hide');\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t}\n}\n\nexport class TypedResourceMetricsTable extends MetricsTable<ResourceMetrics> {\n\treadonly resourceType: ResourceType;\n\n\tconstructor(config: ResultComponentConfig, resourceType: ResourceType) {\n\t\tconfig.rootCssClass = 'resource-metrics-table-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: ResourceMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'Casts',\n\t\t\t\ttooltip: 'Casts',\n\t\t\t\tgetValue: (metric: ResourceMetrics) => metric.events,\n\t\t\t\tgetDisplayString: (metric: ResourceMetrics) => metric.events.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Gain',\n\t\t\t\ttooltip: 'Gain',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: ResourceMetrics) => metric.gain,\n\t\t\t\tgetDisplayString: (metric: ResourceMetrics) => metric.gain.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Gain / s',\n\t\t\t\ttooltip: 'Gain / Second',\n\t\t\t\tgetValue: (metric: ResourceMetrics) => metric.gainPerSecond,\n\t\t\t\tgetDisplayString: (metric: ResourceMetrics) => metric.gainPerSecond.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Avg Gain',\n\t\t\t\ttooltip: 'Gain / Event',\n\t\t\t\tgetValue: (metric: ResourceMetrics) => metric.avgGain,\n\t\t\t\tgetDisplayString: (metric: ResourceMetrics) => metric.avgGain.toFixed(1),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Wasted Gain',\n\t\t\t\ttooltip: 'Gain that was wasted because of resource cap.',\n\t\t\t\tgetValue: (metric: ResourceMetrics) => metric.wastedGain,\n\t\t\t\tgetDisplayString: (metric: ResourceMetrics) => metric.wastedGain.toFixed(1),\n\t\t\t},\n\t\t]);\n\t\tthis.resourceType = resourceType;\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<ResourceMetrics>> {\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\tif (players.length != 1) {\n\t\t\treturn [];\n\t\t}\n\t\tconst player = players[0];\n\n\t\tconst resources = player.getResourceMetrics(this.resourceType);\n\t\tconst resourceGroups = ResourceMetrics.groupById(resources);\n\t\treturn resourceGroups;\n\t}\n\n\tmergeMetrics(metrics: Array<ResourceMetrics>): ResourceMetrics {\n\t\treturn ResourceMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n}\n","export const actionColors: Array<string> = [\n\t'#dd9933',\n\t'#67074e',\n\t'#5a175d',\n\t'#074e67',\n\t'#05878a',\n\t'#c9c1e7',\n\t'#bdd5ef',\n\t'#c7e3d0',\n\t'#e7e6ce',\n\t'#f2d8cc',\n\t'#e9ccce',\n];\n","import { Component } from '../../components/component.js';\nimport { SimResult, SimResultFilter, ActionMetrics } from '../../proto_utils/sim_result.js';\nimport { sum } from '../../utils.js';\n\nimport { actionColors } from './color_settings.js';\n\ndeclare var Chart: any;\n\nexport class SourceChart extends Component {\n\tconstructor(parentElem: HTMLElement, allActionMetrics: Array<ActionMetrics>) {\n\t\tconst chartCanvas = document.createElement(\"canvas\");\n\t\tsuper(parentElem, 'source-chart-root', chartCanvas);\n\n\t\tchartCanvas.style.height = '400px';\n\t\tchartCanvas.style.width = '600px';\n\t\tchartCanvas.height = 400;\n\t\tchartCanvas.width = 600;\n\n\t\tconst actionMetrics = allActionMetrics\n\t\t\t.filter(actionMetric => actionMetric.damage > 0)\n\t\t\t.sort((a, b) => b.damage - a.damage);\n\t\tconst names = actionMetrics.map(am => am.name);\n\t\tconst totalDmg = sum(actionMetrics.map(actionMetric => actionMetric.damage));\n\t\tconst vals = actionMetrics.map(actionMetric => actionMetric.damage / totalDmg);\n\t\tconst bgColors = actionColors.slice(0, actionMetrics.length);\n\n\t\tconst ctx = chartCanvas.getContext('2d');\n\t\tconst chart = new Chart(ctx, {\n\t\t\ttype: 'pie',\n\t\t\tdata: {\n\t\t\t\tlabels: names,\n\t\t\t\tdatasets: [{\n\t\t\t\t\tdata: vals,\n\t\t\t\t\tbackgroundColor: bgColors,\n\t\t\t\t}],\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tplugins: {\n\t\t\t\t\tlegend: {\n\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\tposition: 'right',\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n}\n","import { UnitMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result.js';\nimport { maxIndex } from '../../utils.js';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\nimport { ResultsFilter } from './results_filter.js';\nimport { SourceChart } from './source_chart.js';\nimport tippy from 'tippy.js';\n\nexport class PlayerDamageMetricsTable extends MetricsTable<UnitMetrics> {\n\tprivate readonly resultsFilter: ResultsFilter;\n\n\t// Cached values from most recent result.\n\tprivate raidDps: number;\n\tprivate maxDps: number;\n\n\tconstructor(config: ResultComponentConfig, resultsFilter: ResultsFilter) {\n\t\tconfig.rootCssClass = 'player-damage-metrics-root';\n\t\tsuper(config, [\n\t\t\tMetricsTable.playerNameCellConfig(),\n\t\t\t{\n\t\t\t\tname: 'Amount',\n\t\t\t\ttooltip: 'Player Damage / Raid Damage',\n\t\t\t\theaderCellClass: 'amount-header-cell',\n\t\t\t\tfillCell: (player: UnitMetrics, cellElem: HTMLElement, rowElem: HTMLElement) => {\n\t\t\t\t\tcellElem.classList.add('amount-cell');\n\n\t\t\t\t\tlet chart: HTMLElement | null = null;\n\t\t\t\t\tconst makeChart = () => {\n\t\t\t\t\t\tconst chartContainer = document.createElement('div');\n\t\t\t\t\t\trowElem.appendChild(chartContainer);\n\t\t\t\t\t\tconst sourceChart = new SourceChart(chartContainer, player.actions);\n\t\t\t\t\t\treturn chartContainer;\n\t\t\t\t\t};\n\n\t\t\t\t\ttippy(rowElem, {\n\t\t\t\t\t\tcontent: 'Loading...',\n\t\t\t\t\t\tplacement: 'bottom',\n\t\t\t\t\t\tignoreAttributes: true,\n\t\t\t\t\t\tonShow(instance: any) {\n\t\t\t\t\t\t\tif (!chart) {\n\t\t\t\t\t\t\t\tchart = makeChart();\n\t\t\t\t\t\t\t\tinstance.setContent(chart);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t});\n\n\t\t\t\t\tcellElem.innerHTML = `\n\t\t\t\t\t\t<div class=\"player-damage-percent\">\n\t\t\t\t\t\t\t<span>${(player.dps.avg / this.raidDps * 100).toFixed(2)}%</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"player-damage-bar-container\">\n\t\t\t\t\t\t\t<div class=\"player-damage-bar bg-${player.classColor}\" style=\"width:${player.dps.avg / this.maxDps * 100}%\"></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"player-damage-total\">\n\t\t\t\t\t\t\t<span>${(player.totalDamage / 1000).toFixed(1)}k</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`;\n\t\t\t\t},\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'DPS',\n\t\t\t\ttooltip: 'Damage / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: UnitMetrics) => metric.dps.avg,\n\t\t\t\tgetDisplayString: (metric: UnitMetrics) => metric.dps.avg.toFixed(1),\n\t\t\t},\n\t\t]);\n\t\tthis.resultsFilter = resultsFilter;\n\t\tthis.raidDps = 0;\n\t\tthis.maxDps = 0;\n\t}\n\n\tcustomizeRowElem(player: UnitMetrics, rowElem: HTMLElement) {\n\t\trowElem.classList.add('player-damage-row');\n\t\trowElem.addEventListener('click', event => {\n\t\t\tthis.resultsFilter.setPlayer(this.getLastSimResult().eventID, player.unitIndex);\n\t\t});\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<UnitMetrics>> {\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\n\t\tthis.raidDps = resultData.result.raidMetrics.dps.avg;\n\t\tconst maxDpsIndex = maxIndex(players.map(player => player.dps.avg))!;\n\t\tthis.maxDps = players[maxDpsIndex].dps.avg;\n\n\t\treturn players.map(player => [player]);\n\t}\n}\n","import { ActionId } from '../../proto_utils/action_id';\nimport { AuraMetrics, SimResult, SimResultFilter } from '../../proto_utils/sim_result';\n\nimport { ColumnSortType, MetricsTable } from './metrics_table';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component';\n\nexport class AuraMetricsTable extends MetricsTable<AuraMetrics> {\n\tprivate readonly useDebuffs: boolean;\n\n\tconstructor(config: ResultComponentConfig, useDebuffs: boolean) {\n\t\tif (useDebuffs) {\n\t\t\tconfig.rootCssClass = 'debuff-metrics-root';\n\t\t} else {\n\t\t\tconfig.rootCssClass = 'buff-metrics-root';\n\t\t}\n\t\tsuper(config, [\n\t\t\tMetricsTable.nameCellConfig((metric: AuraMetrics) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: metric.name,\n\t\t\t\t\tactionId: metric.actionId,\n\t\t\t\t};\n\t\t\t}),\n\t\t\t{\n\t\t\t\tname: 'Procs',\n\t\t\t\ttooltip: 'Procs',\n\t\t\t\tgetValue: (metric: AuraMetrics) => metric.averageProcs,\n\t\t\t\tgetDisplayString: (metric: AuraMetrics) => metric.averageProcs.toFixed(2),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'PPM',\n\t\t\t\ttooltip: 'Procs Per Minute',\n\t\t\t\tgetValue: (metric: AuraMetrics) => metric.ppm,\n\t\t\t\tgetDisplayString: (metric: AuraMetrics) => metric.ppm.toFixed(2),\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'Uptime',\n\t\t\t\ttooltip: 'Uptime / Encounter Duration',\n\t\t\t\tsort: ColumnSortType.Descending,\n\t\t\t\tgetValue: (metric: AuraMetrics) => metric.uptimePercent,\n\t\t\t\tgetDisplayString: (metric: AuraMetrics) => metric.uptimePercent.toFixed(2) + '%',\n\t\t\t},\n\t\t]);\n\t\tthis.useDebuffs = useDebuffs;\n\t}\n\n\tgetGroupedMetrics(resultData: SimResultData): Array<Array<AuraMetrics>> {\n\t\tif (this.useDebuffs) {\n\t\t\treturn AuraMetrics.groupById(resultData.result.getDebuffMetrics(resultData.filter));\n\t\t} else {\n\t\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\t\tif (players.length != 1) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tconst player = players[0];\n\n\t\t\tconst auras = player.auras;\n\t\t\tconst actionGroups = AuraMetrics.groupById(auras);\n\t\t\tconst petGroups = player.pets.map(pet => pet.auras);\n\n\t\t\treturn actionGroups.concat(petGroups);\n\t\t}\n\t}\n\n\tmergeMetrics(metrics: Array<AuraMetrics>): AuraMetrics {\n\t\treturn AuraMetrics.merge(metrics, true, metrics[0].unit?.petActionId || undefined);\n\t}\n\n\tshouldCollapse(metric: AuraMetrics): boolean {\n\t\treturn !metric.unit?.isPet;\n\t}\n}\n","import { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\ndeclare var Chart: any;\n\nexport class DpsHistogram extends ResultComponent {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'dps-histogram-root';\n\t\tsuper(config);\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t\tconst chartBounds = this.rootElem.getBoundingClientRect();\n\n\t\tthis.rootElem.textContent = '';\n\t\tconst chartCanvas = document.createElement(\"canvas\");\n\t\tchartCanvas.height = chartBounds.height;\n\t\tchartCanvas.width = chartBounds.width;\n\n\t\tconst damageMetrics = resultData.result.getDamageMetrics(resultData.filter);\n\n\t\tconst min = damageMetrics.avg - damageMetrics.stdev;\n\t\tconst max = damageMetrics.avg + damageMetrics.stdev;\n\t\tconst vals: Array<number> = [];\n\t\tconst colors: Array<string> = [];\n\n\t\tconst labels = Object.keys(damageMetrics.hist);\n\t\tlabels.forEach((k, i) => {\n\t\t\tvals.push(damageMetrics.hist[Number(k)]);\n\t\t\tconst val = parseInt(k);\n\t\t\tif (val > min && val < max) {\n\t\t\t\tcolors.push('#1E87F0');\n\t\t\t} else {\n\t\t\t\tcolors.push('#FF6961');\n\t\t\t}\n\t\t});\n\n\t\tconst ctx = chartCanvas.getContext('2d');\n\t\tthis.rootElem.appendChild(chartCanvas);\n\n\t\tconst chart = new Chart(ctx, {\n\t\t\ttype: 'bar',\n\t\t\tdata: {\n\t\t\t\tlabels: labels,\n\t\t\t\tdatasets: [{\n\t\t\t\t\tdata: vals,\n\t\t\t\t\tbackgroundColor: colors,\n\t\t\t\t}],\n\t\t\t},\n\t\t\toptions: {\n\t\t\t\tplugins: {\n\t\t\t\t\ttitle: {\n\t\t\t\t\t\tdisplay: true,\n\t\t\t\t\t\ttext: 'DPS Histogram',\n\t\t\t\t\t},\n\t\t\t\t\tlegend: {\n\t\t\t\t\t\tdisplay: false,\n\t\t\t\t\t\tlabels: {},\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tscales: {\n\t\t\t\t\ty: {\n\t\t\t\t\t\tbeginAtZero: true,\n\t\t\t\t\t\tticks: {\n\t\t\t\t\t\t\tdisplay: false\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n}\n","import { Tooltip } from 'bootstrap';\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { element, fragment } from 'tsx-vanilla';\n\nimport { ResourceType } from '../../proto/api.js';\nimport { OtherAction } from '../../proto/common.js';\nimport { ActionId, resourceTypeToIcon } from '../../proto_utils/action_id.js';\nimport { AuraUptimeLog, CastLog, DpsLog, ResourceChangedLogGroup, SimLog, ThreatLogGroup } from '../../proto_utils/logs_parser.js';\nimport { resourceNames } from '../../proto_utils/names.js';\nimport { UnitMetrics } from '../../proto_utils/sim_result.js';\nimport { orderedResourceTypes } from '../../proto_utils/utils.js';\nimport { TypedEvent } from '../../typed_event.js';\nimport { bucket, distinct, htmlDecode, maxIndex, stringComparator } from '../../utils.js';\nimport { actionColors } from './color_settings.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\ndeclare let ApexCharts: any;\n\ntype TooltipHandler = (dataPointIndex: number) => string;\n\nconst dpsColor = '#ed5653';\nconst manaColor = '#2E93fA';\nconst threatColor = '#b56d07';\n\nexport class Timeline extends ResultComponent {\n\tprivate readonly dpsResourcesPlotElem: HTMLElement;\n\tprivate dpsResourcesPlot: any;\n\n\tprivate readonly rotationPlotElem: HTMLElement;\n\tprivate readonly rotationLabels: HTMLElement;\n\tprivate readonly rotationTimeline: HTMLElement;\n\tprivate readonly rotationHiddenIdsContainer: HTMLElement;\n\tprivate readonly chartPicker: HTMLSelectElement;\n\n\tprivate resultData: SimResultData | null;\n\tprivate rendered: boolean;\n\n\tprivate hiddenIds: Array<ActionId>;\n\tprivate hiddenIdsChangeEmitter;\n\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'timeline-root';\n\t\tsuper(config);\n\t\tthis.resultData = null;\n\t\tthis.rendered = false;\n\t\tthis.hiddenIds = [];\n\t\tthis.hiddenIdsChangeEmitter = new TypedEvent<void>();\n\n\t\tthis.rootElem.appendChild(\n\t\t\t<div className=\"timeline-disclaimer\">\n\t\t\t\t<div className=\"d-flex flex-column\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<i className=\"warning fa fa-exclamation-triangle fa-xl me-2\"></i>\n\t\t\t\t\t\tTimeline data visualizes only 1 sim iteration.\n\t\t\t\t\t</p>\n\t\t\t\t\t<p>\n\t\t\t\t\t\tNote: You can move the timeline by holding <kbd>Shift</kbd> while scrolling, or by clicking and dragging.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<select className=\"timeline-chart-picker form-select\">\n\t\t\t\t\t<option className=\"rotation-option\" value=\"rotation\">\n\t\t\t\t\t\tRotation\n\t\t\t\t\t</option>\n\t\t\t\t\t<option className=\"dps-option\" value=\"dps\">\n\t\t\t\t\t\tDPS\n\t\t\t\t\t</option>\n\t\t\t\t\t<option className=\"threat-option\" value=\"threat\">\n\t\t\t\t\t\tThreat\n\t\t\t\t\t</option>\n\t\t\t\t</select>\n\t\t\t</div>,\n\t\t);\n\t\tthis.rootElem.appendChild(\n\t\t\t<div className=\"timeline-plots-container\">\n\t\t\t\t<div className=\"timeline-plot dps-resources-plot hide\"></div>\n\t\t\t\t<div className=\"timeline-plot rotation-plot\">\n\t\t\t\t\t<div className=\"rotation-container\">\n\t\t\t\t\t\t<div className=\"rotation-labels\"></div>\n\t\t\t\t\t\t<div className=\"rotation-timeline\" draggable={true}></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"rotation-hidden-ids\"></div>\n\t\t\t\t</div>\n\t\t\t</div>,\n\t\t);\n\n\t\tthis.chartPicker = this.rootElem.getElementsByClassName('timeline-chart-picker')[0] as HTMLSelectElement;\n\t\tthis.chartPicker.addEventListener('change', () => {\n\t\t\tif (this.chartPicker.value == 'rotation') {\n\t\t\t\tthis.dpsResourcesPlotElem.classList.add('hide');\n\t\t\t\tthis.rotationPlotElem.classList.remove('hide');\n\t\t\t} else {\n\t\t\t\tthis.dpsResourcesPlotElem.classList.remove('hide');\n\t\t\t\tthis.rotationPlotElem.classList.add('hide');\n\t\t\t}\n\t\t\tthis.updatePlot();\n\t\t});\n\n\t\tthis.dpsResourcesPlotElem = this.rootElem.getElementsByClassName('dps-resources-plot')[0] as HTMLElement;\n\t\tthis.dpsResourcesPlot = new ApexCharts(this.dpsResourcesPlotElem, {\n\t\t\tchart: {\n\t\t\t\ttype: 'line',\n\t\t\t\tforeColor: 'white',\n\t\t\t\tid: 'dpsResources',\n\t\t\t\tanimations: {\n\t\t\t\t\tenabled: false,\n\t\t\t\t},\n\t\t\t},\n\t\t\tseries: [], // Set dynamically\n\t\t\txaxis: {\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: 'Time (s)',\n\t\t\t\t},\n\t\t\t},\n\t\t\tnoData: {\n\t\t\t\ttext: 'Waiting for data...',\n\t\t\t},\n\t\t\tstroke: {\n\t\t\t\twidth: 2,\n\t\t\t\tcurve: 'straight',\n\t\t\t},\n\t\t});\n\n\t\tthis.rotationPlotElem = this.rootElem.getElementsByClassName('rotation-plot')[0] as HTMLElement;\n\t\tthis.rotationLabels = this.rootElem.getElementsByClassName('rotation-labels')[0] as HTMLElement;\n\t\tthis.rotationTimeline = this.rootElem.getElementsByClassName('rotation-timeline')[0] as HTMLElement;\n\t\tthis.rotationHiddenIdsContainer = this.rootElem.getElementsByClassName('rotation-hidden-ids')[0] as HTMLElement;\n\n\t\tlet isMouseDown = false;\n\t\tlet startX = 0;\n\t\tlet scrollLeft = 0;\n\t\tthis.rotationTimeline.ondragstart = event => {\n\t\t\tevent.preventDefault();\n\t\t};\n\t\tthis.rotationTimeline.onmousedown = event => {\n\t\t\tisMouseDown = true;\n\t\t\tstartX = event.pageX - this.rotationTimeline.offsetLeft;\n\t\t\tscrollLeft = this.rotationTimeline.scrollLeft;\n\t\t};\n\t\tthis.rotationTimeline.onmouseleave = () => {\n\t\t\tisMouseDown = false;\n\t\t\tthis.rotationTimeline.classList.remove('active');\n\t\t};\n\t\tthis.rotationTimeline.onmouseup = () => {\n\t\t\tisMouseDown = false;\n\t\t\tthis.rotationTimeline.classList.remove('active');\n\t\t};\n\t\tthis.rotationTimeline.onmousemove = e => {\n\t\t\tif (!isMouseDown) return;\n\t\t\te.preventDefault();\n\t\t\tconst x = e.pageX - this.rotationTimeline.offsetLeft;\n\t\t\tconst walk = (x - startX) * 3; //scroll-fast\n\t\t\tthis.rotationTimeline.scrollLeft = scrollLeft - walk;\n\t\t};\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t\tthis.resultData = resultData;\n\n\t\tif (this.rendered) {\n\t\t\tthis.updatePlot();\n\t\t}\n\t}\n\n\tprivate updatePlot() {\n\t\tif (this.resultData == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst duration = this.resultData!.result.result.firstIterationDuration || 1;\n\t\tconst options: any = {\n\t\t\tseries: [],\n\t\t\tcolors: [],\n\t\t\txaxis: {\n\t\t\t\tmin: 0,\n\t\t\t\tmax: duration,\n\t\t\t\ttickAmount: 10,\n\t\t\t\tdecimalsInFloat: 1,\n\t\t\t\tlabels: {\n\t\t\t\t\tshow: true,\n\t\t\t\t},\n\t\t\t\ttitle: {\n\t\t\t\t\ttext: 'Time (s)',\n\t\t\t\t},\n\t\t\t},\n\t\t\tyaxis: [],\n\t\t\tchart: {\n\t\t\t\tevents: {\n\t\t\t\t\tbeforeResetZoom: () => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\txaxis: {\n\t\t\t\t\t\t\t\tmin: 0,\n\t\t\t\t\t\t\t\tmax: duration,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttoolbar: {\n\t\t\t\t\tshow: false,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tlet tooltipHandlers: Array<TooltipHandler | null> = [];\n\t\toptions.tooltip = {\n\t\t\tenabled: true,\n\t\t\tcustom: (data: { series: any; seriesIndex: number; dataPointIndex: number; w: any }) => {\n\t\t\t\tif (tooltipHandlers[data.seriesIndex]) {\n\t\t\t\t\treturn tooltipHandlers[data.seriesIndex]!(data.dataPointIndex);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error('No tooltip handler for series ' + data.seriesIndex);\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\n\t\tconst players = this.resultData!.result.getPlayers(this.resultData!.filter);\n\t\tif (players.length == 1) {\n\t\t\tconst player = players[0];\n\n\t\t\tconst rotationOption = this.rootElem.getElementsByClassName('rotation-option')[0] as HTMLElement;\n\t\t\trotationOption.classList.remove('hide');\n\t\t\tconst threatOption = this.rootElem.getElementsByClassName('threat-option')[0] as HTMLElement;\n\t\t\tthreatOption.classList.add('hide');\n\n\t\t\ttry {\n\t\t\t\tthis.updateRotationChart(player, duration);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log('Failed to update rotation chart: ', e);\n\t\t\t}\n\n\t\t\tconst dpsData = this.addDpsSeries(player, options, '');\n\t\t\tthis.addDpsYAxis(dpsData.maxDps, options);\n\t\t\ttooltipHandlers.push(dpsData.tooltipHandler);\n\t\t\ttooltipHandlers.push(this.addManaSeries(player, options));\n\t\t\ttooltipHandlers.push(this.addThreatSeries(player, options, ''));\n\t\t\ttooltipHandlers = tooltipHandlers.filter(handler => handler != null);\n\n\t\t\tthis.addMajorCooldownAnnotations(player, options);\n\t\t} else {\n\t\t\tif (this.chartPicker.value == 'rotation') {\n\t\t\t\tthis.chartPicker.value = 'dps';\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst rotationOption = this.rootElem.getElementsByClassName('rotation-option')[0] as HTMLElement;\n\t\t\trotationOption.classList.add('hide');\n\t\t\tconst threatOption = this.rootElem.getElementsByClassName('threat-option')[0] as HTMLElement;\n\t\t\tthreatOption.classList.remove('hide');\n\n\t\t\tthis.clearRotationChart();\n\n\t\t\tif (this.chartPicker.value == 'dps') {\n\t\t\t\tlet maxDps = 0;\n\t\t\t\tplayers.forEach(player => {\n\t\t\t\t\tconst dpsData = this.addDpsSeries(player, options, `var(--bs-${player.classColor}`);\n\t\t\t\t\tmaxDps = Math.max(maxDps, dpsData.maxDps);\n\t\t\t\t\ttooltipHandlers.push(dpsData.tooltipHandler);\n\t\t\t\t});\n\t\t\t\tthis.addDpsYAxis(maxDps, options);\n\t\t\t} else {\n\t\t\t\t// threat\n\t\t\t\tlet maxThreat = 0;\n\t\t\t\tplayers.forEach(player => {\n\t\t\t\t\ttooltipHandlers.push(this.addThreatSeries(player, options, player.classColor));\n\t\t\t\t\tmaxThreat = Math.max(maxThreat, player.maxThreat);\n\t\t\t\t});\n\t\t\t\tthis.addThreatYAxis(maxThreat, options);\n\t\t\t}\n\t\t}\n\n\t\tthis.dpsResourcesPlot.updateOptions(options);\n\t}\n\n\tprivate addDpsYAxis(maxDps: number, options: any) {\n\t\tconst dpsAxisMax = Math.ceil(maxDps / 100) * 100;\n\t\toptions.yaxis.push({\n\t\t\tcolor: dpsColor,\n\t\t\tseriesName: 'DPS',\n\t\t\tmin: 0,\n\t\t\tmax: dpsAxisMax,\n\t\t\ttickAmount: 10,\n\t\t\tdecimalsInFloat: 0,\n\t\t\ttitle: {\n\t\t\t\ttext: 'DPS',\n\t\t\t\tstyle: {\n\t\t\t\t\tcolor: dpsColor,\n\t\t\t\t},\n\t\t\t},\n\t\t\taxisBorder: {\n\t\t\t\tshow: true,\n\t\t\t\tcolor: dpsColor,\n\t\t\t},\n\t\t\taxisTicks: {\n\t\t\t\tcolor: dpsColor,\n\t\t\t},\n\t\t\tlabels: {\n\t\t\t\tminWidth: 30,\n\t\t\t\tstyle: {\n\t\t\t\t\tcolors: [dpsColor],\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate addThreatYAxis(maxThreat: number, options: any) {\n\t\tconst axisMax = Math.ceil(maxThreat / 10000) * 10000;\n\t\toptions.yaxis.push({\n\t\t\tcolor: threatColor,\n\t\t\tseriesName: 'Threat',\n\t\t\tmin: 0,\n\t\t\tmax: axisMax,\n\t\t\ttickAmount: 10,\n\t\t\tdecimalsInFloat: 0,\n\t\t\ttitle: {\n\t\t\t\ttext: 'Threat',\n\t\t\t\tstyle: {\n\t\t\t\t\tcolor: threatColor,\n\t\t\t\t},\n\t\t\t},\n\t\t\taxisBorder: {\n\t\t\t\tshow: true,\n\t\t\t\tcolor: threatColor,\n\t\t\t},\n\t\t\taxisTicks: {\n\t\t\t\tcolor: threatColor,\n\t\t\t},\n\t\t\tlabels: {\n\t\t\t\tminWidth: 30,\n\t\t\t\tstyle: {\n\t\t\t\t\tcolors: [threatColor],\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\t}\n\n\t// Returns a function for drawing the tooltip, or null if no series was added.\n\tprivate addDpsSeries(unit: UnitMetrics, options: any, colorOverride: string): { maxDps: number; tooltipHandler: TooltipHandler } {\n\t\tconst dpsLogs = unit.dpsLogs.filter(log => log.timestamp >= 0);\n\n\t\toptions.colors.push(colorOverride || dpsColor);\n\t\toptions.series.push({\n\t\t\tname: 'DPS',\n\t\t\ttype: 'line',\n\t\t\tdata: dpsLogs.map(log => {\n\t\t\t\treturn {\n\t\t\t\t\tx: log.timestamp,\n\t\t\t\t\ty: log.dps,\n\t\t\t\t};\n\t\t\t}),\n\t\t});\n\n\t\treturn {\n\t\t\tmaxDps: dpsLogs[maxIndex(dpsLogs.map(l => l.dps))!].dps,\n\t\t\ttooltipHandler: (dataPointIndex: number) => {\n\t\t\t\tconst log = dpsLogs[dataPointIndex];\n\t\t\t\treturn this.dpsTooltip(log, true, unit, colorOverride);\n\t\t\t},\n\t\t};\n\t}\n\n\t// Returns a function for drawing the tooltip, or null if no series was added.\n\tprivate addManaSeries(unit: UnitMetrics, options: any): TooltipHandler | null {\n\t\tconst manaLogs = unit.groupedResourceLogs[ResourceType.ResourceTypeMana].filter(log => log.timestamp >= 0);\n\t\tif (manaLogs.length == 0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst maxMana = manaLogs[0].valueBefore;\n\n\t\toptions.colors.push(manaColor);\n\t\toptions.series.push({\n\t\t\tname: 'Mana',\n\t\t\ttype: 'line',\n\t\t\tdata: manaLogs.map(log => {\n\t\t\t\treturn {\n\t\t\t\t\tx: log.timestamp,\n\t\t\t\t\ty: log.valueAfter,\n\t\t\t\t};\n\t\t\t}),\n\t\t});\n\t\toptions.yaxis.push({\n\t\t\tseriesName: 'Mana',\n\t\t\topposite: true, // Appear on right side\n\t\t\tmin: 0,\n\t\t\tmax: maxMana,\n\t\t\ttickAmount: 10,\n\t\t\ttitle: {\n\t\t\t\ttext: 'Mana',\n\t\t\t\tstyle: {\n\t\t\t\t\tcolor: manaColor,\n\t\t\t\t},\n\t\t\t},\n\t\t\taxisBorder: {\n\t\t\t\tshow: true,\n\t\t\t\tcolor: manaColor,\n\t\t\t},\n\t\t\taxisTicks: {\n\t\t\t\tcolor: manaColor,\n\t\t\t},\n\t\t\tlabels: {\n\t\t\t\tminWidth: 30,\n\t\t\t\tstyle: {\n\t\t\t\t\tcolors: [manaColor],\n\t\t\t\t},\n\t\t\t\tformatter: (val: string) => {\n\t\t\t\t\tconst v = parseFloat(val);\n\t\t\t\t\treturn `${v.toFixed(0)} (${((v / maxMana) * 100).toFixed(0)}%)`;\n\t\t\t\t},\n\t\t\t},\n\t\t} as any);\n\n\t\treturn (dataPointIndex: number) => {\n\t\t\tconst log = manaLogs[dataPointIndex];\n\t\t\treturn this.resourceTooltip(log, maxMana, true);\n\t\t};\n\t}\n\n\t// Returns a function for drawing the tooltip, or null if no series was added.\n\tprivate addThreatSeries(unit: UnitMetrics, options: any, colorOverride: string): TooltipHandler | null {\n\t\toptions.colors.push(colorOverride || threatColor);\n\t\toptions.series.push({\n\t\t\tname: 'Threat',\n\t\t\ttype: 'line',\n\t\t\tdata: unit.threatLogs\n\t\t\t\t.filter(log => log.timestamp >= 0)\n\t\t\t\t.map(log => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tx: log.timestamp,\n\t\t\t\t\t\ty: log.threatAfter,\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t});\n\n\t\treturn (dataPointIndex: number) => {\n\t\t\tconst log = unit.threatLogs[dataPointIndex];\n\t\t\treturn this.threatTooltip(log, true, unit, colorOverride);\n\t\t};\n\t}\n\n\tprivate addMajorCooldownAnnotations(unit: UnitMetrics, options: any) {\n\t\tconst mcdLogs = unit.majorCooldownLogs;\n\t\tconst mcdAuraLogs = unit.majorCooldownAuraUptimeLogs;\n\n\t\t// Figure out how much to vertically offset cooldown icons, for cooldowns\n\t\t// used very close to each other. This is so the icons don't overlap.\n\t\tconst MAX_ALLOWED_DIST = 10;\n\t\tconst cooldownIconOffsets = mcdLogs.map(\n\t\t\t(mcdLog, mcdIdx) => mcdLogs.filter((cdLog, cdIdx) => cdIdx < mcdIdx && cdLog.timestamp > mcdLog.timestamp - MAX_ALLOWED_DIST).length,\n\t\t);\n\n\t\tconst distinctMcdAuras = distinct(mcdAuraLogs, (a, b) => a.actionId!.equalsIgnoringTag(b.actionId!));\n\t\t// Sort by name so auras keep their same colors even if timings change.\n\t\tdistinctMcdAuras.sort((a, b) => stringComparator(a.actionId!.name, b.actionId!.name));\n\t\tconst mcdAuraColors = mcdAuraLogs.map(\n\t\t\tmcdAuraLog => actionColors[distinctMcdAuras.findIndex(dAura => dAura.actionId!.equalsIgnoringTag(mcdAuraLog.actionId!))],\n\t\t);\n\n\t\toptions.annotations = {\n\t\t\tposition: 'back',\n\t\t\txaxis: mcdAuraLogs.map((log, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tx: log.gainedAt,\n\t\t\t\t\tx2: log.fadedAt,\n\t\t\t\t\tfillColor: mcdAuraColors[i],\n\t\t\t\t};\n\t\t\t}),\n\t\t\tpoints: mcdLogs.map((log, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tx: log.timestamp,\n\t\t\t\t\ty: 0,\n\t\t\t\t\timage: {\n\t\t\t\t\t\tpath: log.actionId!.iconUrl,\n\t\t\t\t\t\twidth: 20,\n\t\t\t\t\t\theight: 20,\n\t\t\t\t\t\toffsetY: cooldownIconOffsets[i] * -25,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}),\n\t\t};\n\t}\n\n\tprivate clearRotationChart() {\n\t\tthis.rotationLabels.innerText = '';\n\t\tthis.rotationLabels.appendChild(<div className=\"rotation-label-header\"></div>);\n\n\t\tthis.rotationTimeline.innerText = '';\n\t\tthis.rotationTimeline.appendChild(\n\t\t\t<div className=\"rotation-timeline-header\">\n\t\t\t\t<canvas className=\"rotation-timeline-canvas\"></canvas>\n\t\t\t</div>,\n\t\t);\n\t\tthis.rotationHiddenIdsContainer.innerText = '';\n\t\tthis.hiddenIdsChangeEmitter = new TypedEvent<void>();\n\t}\n\n\tprivate updateRotationChart(player: UnitMetrics, duration: number) {\n\t\tconst targets = this.resultData!.result.getTargets(this.resultData!.filter);\n\t\tif (targets.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst target = targets[0];\n\n\t\tthis.clearRotationChart();\n\n\t\ttry {\n\t\t\tthis.drawRotationTimeRuler(this.rotationTimeline.getElementsByClassName('rotation-timeline-canvas')[0] as HTMLCanvasElement, duration);\n\t\t} catch (e) {\n\t\t\tconsole.log('Failed to draw rotation: ', e);\n\t\t}\n\n\t\torderedResourceTypes.forEach(resourceType => this.addResourceRow(resourceType, player.groupedResourceLogs[resourceType], duration));\n\n\t\tconst buffsById = Object.values(bucket(player.auraUptimeLogs, log => log.actionId!.toString()));\n\t\tbuffsById.sort((a, b) => stringComparator(a[0].actionId!.name, b[0].actionId!.name));\n\t\tconst debuffsById = Object.values(bucket(target.auraUptimeLogs, log => log.actionId!.toString()));\n\t\tdebuffsById.sort((a, b) => stringComparator(a[0].actionId!.name, b[0].actionId!.name));\n\t\tconst buffsAndDebuffsById = buffsById.concat(debuffsById);\n\n\t\tconst playerCastsByAbility = this.getSortedCastsByAbility(player);\n\t\tplayerCastsByAbility.forEach(castLogs => this.addCastRow(castLogs, buffsAndDebuffsById, duration));\n\n\t\tif (player.pets.length > 0) {\n\t\t\tconst playerPets = new Map<string, UnitMetrics>();\n\t\t\tplayer.pets.forEach(petsLog => {\n\t\t\t\tconst petCastsByAbility = this.getSortedCastsByAbility(petsLog);\n\t\t\t\tif (petCastsByAbility.length > 0) {\n\t\t\t\t\t// Because multiple pets can have the same name and we parse cast logs\n\t\t\t\t\t// by pet name each individual pet ends up with all the casts of pets\n\t\t\t\t\t// with the same name. Because of this we can just grab the first pet\n\t\t\t\t\t// of each name and visualize only that.\n\t\t\t\t\tif (!playerPets.has(petsLog.name)) {\n\t\t\t\t\t\tplayerPets.set(petsLog.name, petsLog);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tplayerPets.forEach(pet => {\n\t\t\t\tthis.addSeparatorRow(duration);\n\t\t\t\tthis.addPetRow(pet.name, duration);\n\t\t\t\torderedResourceTypes.forEach(resourceType => this.addResourceRow(resourceType, pet.groupedResourceLogs[resourceType], duration));\n\t\t\t\tconst petCastsByAbility = this.getSortedCastsByAbility(pet);\n\t\t\t\tpetCastsByAbility.forEach(castLogs => this.addCastRow(castLogs, buffsAndDebuffsById, duration));\n\t\t\t});\n\t\t}\n\n\t\t// Don't add a row for buffs that were already visualized in a cast row.\n\t\tconst buffsToShow = buffsById.filter(auraUptimeLogs =>\n\t\t\tplayerCastsByAbility.findIndex(casts => casts[0].actionId!.equalsIgnoringTag(auraUptimeLogs[0].actionId!)),\n\t\t);\n\t\tif (buffsToShow.length > 0) {\n\t\t\tthis.addSeparatorRow(duration);\n\t\t\tbuffsToShow.forEach(auraUptimeLogs => this.addAuraRow(auraUptimeLogs, duration));\n\t\t}\n\n\t\tconst targetCastsByAbility = this.getSortedCastsByAbility(target);\n\t\tif (targetCastsByAbility.length > 0) {\n\t\t\tthis.addSeparatorRow(duration);\n\t\t\ttargetCastsByAbility.forEach(castLogs => this.addCastRow(castLogs, buffsAndDebuffsById, duration));\n\t\t}\n\n\t\t// Add a row for all debuffs, even those which have already been visualized in a cast row.\n\t\tconst debuffsToShow = debuffsById;\n\t\tif (debuffsToShow.length > 0) {\n\t\t\tthis.addSeparatorRow(duration);\n\t\t\tdebuffsToShow.forEach(auraUptimeLogs => this.addAuraRow(auraUptimeLogs, duration));\n\t\t}\n\t}\n\n\tprivate getSortedCastsByAbility(player: UnitMetrics): Array<Array<CastLog>> {\n\t\tconst meleeActionIds = player.getMeleeActions().map(action => action.actionId);\n\t\tconst spellActionIds = player.getSpellActions().map(action => action.actionId);\n\t\tconst getActionCategory = (actionId: ActionId): number => {\n\t\t\tconst fixedCategory = idToCategoryMap[actionId.anyId()];\n\t\t\tif (fixedCategory != null) {\n\t\t\t\treturn fixedCategory;\n\t\t\t} else if (meleeActionIds.find(meleeActionId => meleeActionId.equals(actionId))) {\n\t\t\t\treturn MELEE_ACTION_CATEGORY;\n\t\t\t} else if (spellActionIds.find(spellActionId => spellActionId.equals(actionId))) {\n\t\t\t\treturn SPELL_ACTION_CATEGORY;\n\t\t\t} else {\n\t\t\t\treturn DEFAULT_ACTION_CATEGORY;\n\t\t\t}\n\t\t};\n\n\t\tconst castsByAbility = Object.values(\n\t\t\tbucket(player.castLogs, log => {\n\t\t\t\tif (idsToGroupForRotation.includes(log.actionId!.spellId)) {\n\t\t\t\t\treturn log.actionId!.toStringIgnoringTag();\n\t\t\t\t} else {\n\t\t\t\t\treturn log.actionId!.toString();\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\n\t\tcastsByAbility.sort((a, b) => {\n\t\t\tconst categoryA = getActionCategory(a[0].actionId!);\n\t\t\tconst categoryB = getActionCategory(b[0].actionId!);\n\t\t\tif (categoryA != categoryB) {\n\t\t\t\treturn categoryA - categoryB;\n\t\t\t} else if (a[0].actionId!.anyId() == b[0].actionId!.anyId()) {\n\t\t\t\treturn a[0].actionId!.tag - b[0].actionId!.tag;\n\t\t\t} else {\n\t\t\t\treturn stringComparator(a[0].actionId!.name, b[0].actionId!.name);\n\t\t\t}\n\t\t});\n\n\t\treturn castsByAbility;\n\t}\n\n\tprivate makeLabelElem(actionId: ActionId, isHiddenLabel: boolean): JSX.Element {\n\t\tconst labelText = idsToGroupForRotation.includes(actionId.spellId) ? actionId.baseName : actionId.name;\n\n\t\tconst labelElem = (\n\t\t\t<div className={`rotation-label rotation-row ${isHiddenLabel ? 'rotation-label-hidden' : ''}`}>\n\t\t\t\t<span className={`fas fa-eye${isHiddenLabel ? '' : '-slash'}`}></span>\n\t\t\t\t<a className=\"rotation-label-icon\"></a>\n\t\t\t\t<span className=\"rotation-label-text\">{labelText}</span>\n\t\t\t</div>\n\t\t);\n\t\tconst hideElem = labelElem.getElementsByClassName('fas')[0] as HTMLElement;\n\t\thideElem.addEventListener('click', () => {\n\t\t\tif (isHiddenLabel) {\n\t\t\t\tconst index = this.hiddenIds.findIndex(hiddenId => hiddenId.equals(actionId));\n\t\t\t\tif (index != -1) {\n\t\t\t\t\tthis.hiddenIds.splice(index, 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.hiddenIds.push(actionId);\n\t\t\t}\n\t\t\tthis.hiddenIdsChangeEmitter.emit(TypedEvent.nextEventID());\n\t\t});\n\t\tTooltip.getOrCreateInstance(hideElem, {\n\t\t\tcustomClass: 'timeline-tooltip',\n\t\t\thtml: true,\n\t\t\tplacement: 'bottom',\n\t\t\ttitle: isHiddenLabel ? 'Show Row' : 'Hide Row',\n\t\t});\n\t\tconst updateHidden = () => {\n\t\t\tif (isHiddenLabel == Boolean(this.hiddenIds.find(hiddenId => hiddenId.equals(actionId)))) {\n\t\t\t\tlabelElem.classList.remove('hide');\n\t\t\t} else {\n\t\t\t\tlabelElem.classList.add('hide');\n\t\t\t}\n\t\t};\n\t\tthis.hiddenIdsChangeEmitter.on(updateHidden);\n\t\tupdateHidden();\n\t\tconst labelIcon = labelElem.getElementsByClassName('rotation-label-icon')[0] as HTMLAnchorElement;\n\t\tactionId.setBackgroundAndHref(labelIcon);\n\t\treturn labelElem;\n\t}\n\n\tprivate makeRowElem(actionId: ActionId, duration: number): JSX.Element {\n\t\tconst rowElem = (\n\t\t\t<div\n\t\t\t\tclassName=\"rotation-timeline-row rotation-row\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: this.timeToPx(duration),\n\t\t\t\t}}></div>\n\t\t);\n\n\t\tconst updateHidden = () => {\n\t\t\tif (this.hiddenIds.find(hiddenId => hiddenId.equals(actionId))) {\n\t\t\t\trowElem.classList.add('hide');\n\t\t\t} else {\n\t\t\t\trowElem.classList.remove('hide');\n\t\t\t}\n\t\t};\n\t\tthis.hiddenIdsChangeEmitter.on(updateHidden);\n\t\tupdateHidden();\n\t\treturn rowElem;\n\t}\n\n\tprivate addPetRow(petName: string, duration: number) {\n\t\tconst actionId = ActionId.fromPetName(petName);\n\t\tconst rowElem = this.makeRowElem(actionId, duration);\n\n\t\tconst iconElem = document.createElement('div');\n\t\tthis.rotationLabels.appendChild(iconElem);\n\n\t\tactionId.fill().then(filledActionId => {\n\t\t\tconst labelElem = document.createElement('div');\n\t\t\tlabelElem.classList.add('rotation-label', 'rotation-row');\n\t\t\tconst labelText = idsToGroupForRotation.includes(filledActionId.spellId) ? filledActionId.baseName : filledActionId.name;\n\t\t\tlabelElem.appendChild(<a className=\"rotation-label-icon\"></a>);\n\t\t\tlabelElem.appendChild(<span className=\"rotation-label-text\">{labelText}</span>);\n\t\t\tconst labelIcon = labelElem.getElementsByClassName('rotation-label-icon')[0] as HTMLAnchorElement;\n\t\t\tfilledActionId.setBackgroundAndHref(labelIcon);\n\t\t\ticonElem.appendChild(labelElem);\n\t\t});\n\n\t\tthis.rotationTimeline.appendChild(rowElem);\n\t}\n\n\tprivate addSeparatorRow(duration: number) {\n\t\tlet separatorElem = document.createElement('div');\n\t\tseparatorElem.classList.add('rotation-timeline-separator');\n\t\tthis.rotationLabels.appendChild(separatorElem);\n\t\tseparatorElem = document.createElement('div');\n\t\tseparatorElem.classList.add('rotation-timeline-separator');\n\t\tseparatorElem.style.width = this.timeToPx(duration);\n\t\tthis.rotationTimeline.appendChild(separatorElem);\n\t}\n\n\tprivate addResourceRow(resourceType: ResourceType, resourceLogs: Array<ResourceChangedLogGroup>, duration: number) {\n\t\tif (resourceLogs.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst startValue = resourceLogs[0].valueBefore;\n\t\tconst labelElem = (\n\t\t\t<div className=\"rotation-label rotation-row\">\n\t\t\t\t<a\n\t\t\t\t\tclassName=\"rotation-label-icon\"\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tbackgroundImage: `url('${resourceTypeToIcon[resourceType]}')`,\n\t\t\t\t\t}}></a>\n\t\t\t\t<span className=\"rotation-label-text\">{resourceNames.get(resourceType)}</span>\n\t\t\t</div>\n\t\t);\n\n\t\tthis.rotationLabels.appendChild(labelElem);\n\n\t\tconst rowElem = (\n\t\t\t<div\n\t\t\t\tclassName=\"rotation-timeline-row rotation-row\"\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: this.timeToPx(duration),\n\t\t\t\t}}></div>\n\t\t);\n\n\t\tresourceLogs.forEach((resourceLogGroup, i) => {\n\t\t\tconst cNames = resourceNames.get(resourceType)!.toLowerCase().replaceAll(' ', '-');\n\t\t\tconst resourceElem = (\n\t\t\t\t<div\n\t\t\t\t\tclassName={`rotation-timeline-resource series-color ${cNames}`}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tleft: this.timeToPx(resourceLogGroup.timestamp),\n\t\t\t\t\t\twidth: this.timeToPx((resourceLogs[i + 1]?.timestamp || duration) - resourceLogGroup.timestamp),\n\t\t\t\t\t}}></div>\n\t\t\t);\n\n\t\t\tif (percentageResources.includes(resourceType)) {\n\t\t\t\tresourceElem.textContent = ((resourceLogGroup.valueAfter / startValue) * 100).toFixed(0) + '%';\n\t\t\t} else {\n\t\t\t\tif (resourceType == ResourceType.ResourceTypeEnergy || resourceType == ResourceType.ResourceTypeFocus) {\n\t\t\t\t\tconst bgElem = document.createElement('div');\n\t\t\t\t\tbgElem.classList.add('rotation-timeline-resource-fill');\n\t\t\t\t\tbgElem.classList.add(cNames);\n\t\t\t\t\tbgElem.style.height = ((resourceLogGroup.valueAfter / startValue) * 100).toFixed(0) + '%';\n\t\t\t\t\tresourceElem.appendChild(bgElem);\n\t\t\t\t} else {\n\t\t\t\t\tresourceElem.textContent = Math.floor(resourceLogGroup.valueAfter).toFixed(0);\n\t\t\t\t}\n\t\t\t}\n\t\t\trowElem.appendChild(resourceElem);\n\n\t\t\tTooltip.getOrCreateInstance(resourceElem, {\n\t\t\t\thtml: true,\n\t\t\t\tplacement: 'bottom',\n\t\t\t\ttitle: this.resourceTooltipElem(resourceLogGroup, startValue, false),\n\t\t\t});\n\t\t});\n\t\tthis.rotationTimeline.appendChild(rowElem);\n\t}\n\n\tprivate addCastRow(castLogs: Array<CastLog>, aurasById: Array<Array<AuraUptimeLog>>, duration: number) {\n\t\tconst actionId = castLogs[0].actionId!;\n\n\t\tthis.rotationLabels.appendChild(this.makeLabelElem(actionId, false));\n\t\tthis.rotationHiddenIdsContainer.appendChild(this.makeLabelElem(actionId, true));\n\n\t\tconst rowElem = this.makeRowElem(actionId, duration);\n\t\tcastLogs.forEach(castLog => {\n\t\t\tconst castElem = document.createElement('div');\n\t\t\tcastElem.classList.add('rotation-timeline-cast');\n\t\t\tcastElem.style.left = this.timeToPx(castLog.timestamp);\n\t\t\tcastElem.style.minWidth = this.timeToPx(castLog.castTime + castLog.travelTime);\n\t\t\trowElem.appendChild(castElem);\n\n\t\t\tif (castLog.travelTime != 0) {\n\t\t\t\tconst travelTimeElem = document.createElement('div');\n\t\t\t\ttravelTimeElem.classList.add('rotation-timeline-travel-time');\n\t\t\t\ttravelTimeElem.style.left = this.timeToPx(castLog.castTime);\n\t\t\t\ttravelTimeElem.style.minWidth = this.timeToPx(castLog.travelTime);\n\t\t\t\tcastElem.appendChild(travelTimeElem);\n\t\t\t}\n\n\t\t\tif (castLog.damageDealtLogs.length > 0) {\n\t\t\t\tconst ddl = castLog.damageDealtLogs[0];\n\t\t\t\tif (ddl.miss || ddl.dodge || ddl.parry) {\n\t\t\t\t\tcastElem.classList.add('outcome-miss');\n\t\t\t\t} else if (ddl.glance || ddl.block || ddl.partialResist1_4 || ddl.partialResist2_4 || ddl.partialResist3_4) {\n\t\t\t\t\tcastElem.classList.add('outcome-partial');\n\t\t\t\t} else if (ddl.crit) {\n\t\t\t\t\tcastElem.classList.add('outcome-crit');\n\t\t\t\t} else {\n\t\t\t\t\tcastElem.classList.add('outcome-hit');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst iconElem = document.createElement('a');\n\t\t\ticonElem.classList.add('rotation-timeline-cast-icon');\n\t\t\tactionId.setBackground(iconElem);\n\t\t\tcastElem.appendChild(iconElem);\n\t\t\tconst travelTimeStr = castLog.travelTime == 0 ? '' : ` + ${castLog.travelTime.toFixed(2)}s travel time`;\n\t\t\tconst totalDamage = castLog.totalDamage();\n\n\t\t\tconst tt = (\n\t\t\t\t<div className=\"timeline-tooltip\">\n\t\t\t\t\t<span>\n\t\t\t\t\t\t{castLog.actionId!.name} from {castLog.timestamp.toFixed(2)}s to {(castLog.timestamp + castLog.castTime).toFixed(2)}s (\n\t\t\t\t\t\t{castLog.castTime > 0 && `${castLog.castTime.toFixed(2)}s, `} {castLog.effectiveTime.toFixed(2)}s GCD Time)\n\t\t\t\t\t\t{travelTimeStr.length > 0 && travelTimeStr}\n\t\t\t\t\t</span>\n\t\t\t\t\t{castLog.damageDealtLogs.length > 0 && (\n\t\t\t\t\t\t<ul className=\"rotation-timeline-cast-damage-list\">\n\t\t\t\t\t\t\t{castLog.damageDealtLogs.map(ddl => (\n\t\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t\t\t{ddl.timestamp.toFixed(2)}s - {htmlDecode(ddl.resultString())}\n\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t{ddl.source?.isTarget && <span className=\"threat-metrics\"> ({ddl.threat.toFixed(1)} Threat)</span>}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</ul>\n\t\t\t\t\t)}\n\t\t\t\t\t{totalDamage > 0 && (\n\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\tTotal: {totalDamage.toFixed(2)} ({(totalDamage / (castLog.effectiveTime || 1)).toFixed(2)} DPET)\n\t\t\t\t\t\t</span>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t);\n\n\t\t\tTooltip.getOrCreateInstance(castElem, {\n\t\t\t\thtml: true,\n\t\t\t\tplacement: 'bottom',\n\t\t\t\ttitle: tt.outerHTML,\n\t\t\t});\n\n\t\t\tcastLog.damageDealtLogs\n\t\t\t\t.filter(ddl => ddl.tick)\n\t\t\t\t.forEach(ddl => {\n\t\t\t\t\tconst tickElem = document.createElement('div');\n\t\t\t\t\ttickElem.classList.add('rotation-timeline-tick');\n\t\t\t\t\ttickElem.style.left = this.timeToPx(ddl.timestamp);\n\t\t\t\t\trowElem.appendChild(tickElem);\n\n\t\t\t\t\tconst tt = (\n\t\t\t\t\t\t<div className=\"timeline-tooltip\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t{ddl.timestamp.toFixed(2)}s - {ddl.actionId!.name} {htmlDecode(ddl.resultString())}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t{ddl.source?.isTarget && <span className=\"threat-metrics\"> ({ddl.threat.toFixed(1)} Threat)</span>}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\n\t\t\t\t\tTooltip.getOrCreateInstance(tickElem, {\n\t\t\t\t\t\thtml: true,\n\t\t\t\t\t\tplacement: 'bottom',\n\t\t\t\t\t\ttitle: tt.outerHTML,\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t});\n\n\t\t// If there are any auras that correspond to this cast, visualize them in the same row.\n\t\taurasById\n\t\t\t.filter(auraUptimeLogs => auraUptimeLogs[0].actionId!.equalsIgnoringTag(actionId))\n\t\t\t.forEach(auraUptimeLogs => this.applyAuraUptimeLogsToRow(auraUptimeLogs, rowElem));\n\n\t\tthis.rotationTimeline.appendChild(rowElem);\n\t}\n\n\tprivate addAuraRow(auraUptimeLogs: Array<AuraUptimeLog>, duration: number) {\n\t\tconst actionId = auraUptimeLogs[0].actionId!;\n\n\t\tconst rowElem = this.makeRowElem(actionId, duration);\n\t\tthis.rotationLabels.appendChild(this.makeLabelElem(actionId, false));\n\t\tthis.rotationHiddenIdsContainer.appendChild(this.makeLabelElem(actionId, true));\n\t\tthis.rotationTimeline.appendChild(rowElem);\n\n\t\tthis.applyAuraUptimeLogsToRow(auraUptimeLogs, rowElem);\n\t}\n\n\tprivate applyAuraUptimeLogsToRow(auraUptimeLogs: Array<AuraUptimeLog>, rowElem: JSX.Element) {\n\t\tauraUptimeLogs.forEach(aul => {\n\t\t\tconst auraElem = document.createElement('div');\n\t\t\tauraElem.classList.add('rotation-timeline-aura');\n\t\t\tauraElem.style.left = this.timeToPx(aul.gainedAt);\n\t\t\tauraElem.style.minWidth = this.timeToPx(aul.fadedAt === aul.gainedAt ? 0.001 : aul.fadedAt - aul.gainedAt);\n\t\t\trowElem.appendChild(auraElem);\n\n\t\t\tconst tt = (\n\t\t\t\t<div className=\"timeline-tooltip\">\n\t\t\t\t\t<span>\n\t\t\t\t\t\t{aul.actionId!.name}: {aul.gainedAt.toFixed(2)}s - {aul.fadedAt.toFixed(2)}s\n\t\t\t\t\t</span>\n\t\t\t\t</div>\n\t\t\t);\n\n\t\t\tTooltip.getOrCreateInstance(auraElem, {\n\t\t\t\thtml: true,\n\t\t\t\tplacement: 'bottom',\n\t\t\t\ttitle: tt.outerHTML,\n\t\t\t});\n\n\t\t\taul.stacksChange.forEach((scl, i) => {\n\t\t\t\tif (scl.timestamp == aul.fadedAt) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst stacksChangeElem = document.createElement('div');\n\t\t\t\tstacksChangeElem.classList.add('rotation-timeline-stacks-change');\n\t\t\t\tstacksChangeElem.style.left = this.timeToPx(scl.timestamp - aul.timestamp);\n\t\t\t\tstacksChangeElem.style.width = this.timeToPx(\n\t\t\t\t\taul.stacksChange[i + 1] ? aul.stacksChange[i + 1].timestamp - scl.timestamp : aul.fadedAt - scl.timestamp,\n\t\t\t\t);\n\t\t\t\tstacksChangeElem.textContent = String(scl.newStacks);\n\t\t\t\tauraElem.appendChild(stacksChangeElem);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate timeToPxValue(time: number): number {\n\t\treturn time * 100;\n\t}\n\tprivate timeToPx(time: number): string {\n\t\treturn this.timeToPxValue(time) + 'px';\n\t}\n\n\tprivate drawRotationTimeRuler(canvas: HTMLCanvasElement, duration: number) {\n\t\tconst height = 30;\n\t\tcanvas.width = this.timeToPxValue(duration);\n\t\tcanvas.height = height;\n\n\t\tconst ctx = canvas.getContext('2d')!;\n\t\tctx.strokeStyle = 'white';\n\n\t\tctx.font = 'bold 14px SimDefaultFont';\n\t\tctx.fillStyle = 'white';\n\t\tctx.lineWidth = 2;\n\t\tctx.beginPath();\n\n\t\t// Bottom border line\n\t\tctx.moveTo(0, height);\n\t\tctx.lineTo(canvas.width, height);\n\n\t\t// Tick lines\n\t\tconst numTicks = 1 + Math.floor(duration * 10);\n\t\tfor (let i = 0; i <= numTicks; i++) {\n\t\t\tconst time = i * 0.1;\n\t\t\tlet x = this.timeToPxValue(time);\n\t\t\tif (i == 0) {\n\t\t\t\tctx.textAlign = 'left';\n\t\t\t\tx++;\n\t\t\t} else if (i % 10 == 0 && time + 1 > duration) {\n\t\t\t\tctx.textAlign = 'right';\n\t\t\t\tx--;\n\t\t\t} else {\n\t\t\t\tctx.textAlign = 'center';\n\t\t\t}\n\n\t\t\tlet lineHeight = 0;\n\t\t\tif (i % 10 == 0) {\n\t\t\t\tlineHeight = height * 0.5;\n\t\t\t\tctx.fillText(time + 's', x, height - height * 0.6);\n\t\t\t} else if (i % 5 == 0) {\n\t\t\t\tlineHeight = height * 0.25;\n\t\t\t} else {\n\t\t\t\tlineHeight = height * 0.125;\n\t\t\t}\n\t\t\tctx.moveTo(x, height);\n\t\t\tctx.lineTo(x, height - lineHeight);\n\t\t}\n\t\tctx.stroke();\n\t}\n\n\tprivate dpsTooltip(log: DpsLog, includeAuras: boolean, player: UnitMetrics, colorOverride: string): string {\n\t\tconst showPlayerLabel = colorOverride != '';\n\t\treturn `\n\t\t\t<div class=\"timeline-tooltip dps\">\n\t\t\t\t<div class=\"timeline-tooltip-header\">\n\t\t\t\t\t${\n\t\t\t\t\t\tshowPlayerLabel\n\t\t\t\t\t\t\t? `\n\t\t\t\t\t<img class=\"timeline-tooltip-icon\" src=\"${player.iconUrl}\">\n\t\t\t\t\t<span class=\"\" style=\"color: ${colorOverride}\">${player.label}</span><span> - </span>\n\t\t\t\t\t`\n\t\t\t\t\t\t\t: ''\n\t\t\t\t\t}\n\t\t\t\t\t<span class=\"bold\">${log.timestamp.toFixed(2)}s</span>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"timeline-tooltip-body\">\n\t\t\t\t\t<ul class=\"timeline-dps-events\">\n\t\t\t\t\t\t${log.damageLogs.map(damageLog => this.tooltipLogItem(damageLog, damageLog.resultString())).join('')}\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div class=\"timeline-tooltip-body-row\">\n\t\t\t\t\t\t<span class=\"series-color\">DPS: ${log.dps.toFixed(2)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t${this.tooltipAurasSection(log)}\n\t\t\t</div>\n\t\t`;\n\t}\n\n\tprivate threatTooltip(log: ThreatLogGroup, includeAuras: boolean, player: UnitMetrics, colorOverride: string): string {\n\t\tconst showPlayerLabel = colorOverride != '';\n\t\treturn `<div class=\"timeline-tooltip threat\">\n\t\t\t<div class=\"timeline-tooltip-header\">\n\t\t\t\t${\n\t\t\t\t\tshowPlayerLabel\n\t\t\t\t\t\t? `\n\t\t\t\t<img class=\"timeline-tooltip-icon\" src=\"${player.iconUrl}\">\n\t\t\t\t<span class=\"\" style=\"color: ${colorOverride}\">${player.label}</span></span> - </span>\n\t\t\t\t`\n\t\t\t\t\t\t: ''\n\t\t\t\t}\n\t\t\t\t<span class=\"bold\">${log.timestamp.toFixed(2)}s</span>\n\t\t\t</div>\n\t\t\t<div class=\"timeline-tooltip-body\">\n\t\t\t\t<div class=\"timeline-tooltip-body-row\">\n\t\t\t\t\t<span class=\"series-color\">Before: ${log.threatBefore.toFixed(1)}</span>\n\t\t\t\t</div>\n\t\t\t\t<ul class=\"timeline-threat-events\">\n\t\t\t\t\t${log.logs.map(log => this.tooltipLogItem(log, `${log.threat.toFixed(1)} Threat`)).join('')}\n\t\t\t\t</ul>\n\t\t\t\t<div class=\"timeline-tooltip-body-row\">\n\t\t\t\t\t<span class=\"series-color\">After: ${log.threatAfter.toFixed(1)}</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t${includeAuras ? this.tooltipAurasSection(log) : ''}\n\t\t</div>`;\n\t}\n\n\tprivate resourceTooltipElem(log: ResourceChangedLogGroup, maxValue: number, includeAuras: boolean): JSX.Element {\n\t\tconst valToDisplayString = percentageResources.includes(log.resourceType)\n\t\t\t? (val: number) => `${val.toFixed(1)} (${((val / maxValue) * 100).toFixed(0)}%)`\n\t\t\t: (val: number) => `${val.toFixed(1)}`;\n\n\t\treturn (\n\t\t\t<div className={`timeline-tooltip ${resourceNames.get(log.resourceType)!.toLowerCase().replaceAll(' ', '-')}`}>\n\t\t\t\t<div className=\"timeline-tooltip-header\">\n\t\t\t\t\t<span className=\"bold\">{log.timestamp.toFixed(2)}s</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"timeline-tooltip-body\">\n\t\t\t\t\t<div className=\"timeline-tooltip-body-row\">\n\t\t\t\t\t\t<span className=\"series-color\">Before: {valToDisplayString(log.valueBefore)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<ul className=\"timeline-mana-events\">\n\t\t\t\t\t\t{log.logs.map(manaChangedLog => this.tooltipLogItemElem(manaChangedLog, manaChangedLog.resultString()))}\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div className=\"timeline-tooltip-body-row\">\n\t\t\t\t\t\t<span className=\"series-color\">After: {valToDisplayString(log.valueAfter)}</span>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t{includeAuras && this.tooltipAurasSectionElem(log)}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tprivate resourceTooltip(log: ResourceChangedLogGroup, maxValue: number, includeAuras: boolean): string {\n\t\treturn this.resourceTooltipElem(log, maxValue, includeAuras).outerHTML;\n\t}\n\n\tprivate tooltipLogItem(log: SimLog, value: string): string {\n\t\treturn this.tooltipLogItemElem(log, value).outerHTML;\n\t}\n\n\tprivate tooltipLogItemElem(log: SimLog, value: string): JSX.Element {\n\t\treturn (\n\t\t\t<li>\n\t\t\t\t{log.actionId && log.actionId.iconUrl && <img className=\"timeline-tooltip-icon\" src={log.actionId.iconUrl}></img>}\n\t\t\t\t{log.actionId && <span>{log.actionId.name}</span>}\n\t\t\t\t<span className=\"series-color\">{htmlDecode(value)}</span>\n\t\t\t</li>\n\t\t);\n\t}\n\n\tprivate tooltipAurasSection(log: SimLog): string {\n\t\tif (log.activeAuras.length == 0) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this.tooltipAurasSectionElem(log).outerHTML;\n\t}\n\n\tprivate tooltipAurasSectionElem(log: SimLog): JSX.Element {\n\t\tif (log.activeAuras.length == 0) {\n\t\t\treturn <></>;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"timeline-tooltip-auras\">\n\t\t\t\t<div className=\"timeline-tooltip-body-row\">\n\t\t\t\t\t<span className=\"bold\">Active Auras</span>\n\t\t\t\t</div>\n\t\t\t\t<ul className=\"timeline-active-auras\">\n\t\t\t\t\t{log.activeAuras.map(auraLog => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t{auraLog.actionId!.iconUrl && <img className=\"timeline-tooltip-icon\" src={auraLog.actionId!.iconUrl}></img>}\n\t\t\t\t\t\t\t\t<span>{auraLog.actionId!.name}</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender() {\n\t\tsetTimeout(() => {\n\t\t\tthis.dpsResourcesPlot.render();\n\t\t\tthis.rendered = true;\n\t\t\tthis.updatePlot();\n\t\t}, 300);\n\t}\n}\n\nconst MELEE_ACTION_CATEGORY = 1;\nconst SPELL_ACTION_CATEGORY = 2;\nconst DEFAULT_ACTION_CATEGORY = 3;\n\n// Hard-coded spell categories for controlling rotation ordering.\nconst idToCategoryMap: Record<number, number> = {\n\t[OtherAction.OtherActionAttack]: 0,\n\t[OtherAction.OtherActionShoot]: 0.5,\n\n\t// Druid\n\t[48480]: 0.1, // Maul\n\t[48564]: MELEE_ACTION_CATEGORY + 0.1, // Mangle (Bear)\n\t[48568]: MELEE_ACTION_CATEGORY + 0.2, // Lacerate\n\t[48562]: MELEE_ACTION_CATEGORY + 0.3, // Swipe (Bear)\n\n\t[48566]: MELEE_ACTION_CATEGORY + 0.1, // Mangle (Cat)\n\t[48572]: MELEE_ACTION_CATEGORY + 0.2, // Shred\n\t[49800]: MELEE_ACTION_CATEGORY + 0.51, // Rip\n\t[52610]: MELEE_ACTION_CATEGORY + 0.52, // Savage Roar\n\t[48577]: MELEE_ACTION_CATEGORY + 0.53, // Ferocious Bite\n\n\t[48465]: SPELL_ACTION_CATEGORY + 0.1, // Starfire\n\t[48461]: SPELL_ACTION_CATEGORY + 0.2, // Wrath\n\t[53201]: SPELL_ACTION_CATEGORY + 0.3, // Starfall\n\t[48468]: SPELL_ACTION_CATEGORY + 0.4, // Insect Swarm\n\t[48463]: SPELL_ACTION_CATEGORY + 0.5, // Moonfire\n\n\t// Hunter\n\t[48996]: 0.1, // Raptor Strike\n\t[53217]: 0.6, // Wild Quiver\n\t[53209]: MELEE_ACTION_CATEGORY + 0.1, // Chimera Shot\n\t[53353]: MELEE_ACTION_CATEGORY + 0.11, // Chimera Shot Serpent\n\t[60053]: MELEE_ACTION_CATEGORY + 0.1, // Explosive Shot\n\t[49050]: MELEE_ACTION_CATEGORY + 0.2, // Aimed Shot\n\t[49048]: MELEE_ACTION_CATEGORY + 0.21, // Multi Shot\n\t[3044]: MELEE_ACTION_CATEGORY + 0.22, // Arcane Shot\n\t[56641]: MELEE_ACTION_CATEGORY + 0.27, // Steady Shot\n\t[53351]: MELEE_ACTION_CATEGORY + 0.28, // Kill Shot\n\t[34490]: MELEE_ACTION_CATEGORY + 0.29, // Silencing Shot\n\t[49001]: MELEE_ACTION_CATEGORY + 0.3, // Serpent Sting\n\t[53238]: MELEE_ACTION_CATEGORY + 0.31, // Piercing Shots\n\t[63672]: MELEE_ACTION_CATEGORY + 0.32, // Black Arrow\n\t[49067]: MELEE_ACTION_CATEGORY + 0.33, // Explosive Trap\n\t[77767]: MELEE_ACTION_CATEGORY + 0.34, // Cobra Shot\n\n\t// Paladin\n\t[35395]: MELEE_ACTION_CATEGORY + 0.1, // Crusader Strike\n\t[53385]: MELEE_ACTION_CATEGORY + 0.2, // Divine Storm\n\t[42463]: MELEE_ACTION_CATEGORY + 0.3, // Seal of Vengeance\n\t[61840]: MELEE_ACTION_CATEGORY + 0.4, // Righteous Vengeance\n\t[61411]: MELEE_ACTION_CATEGORY + 0.5, // Shield of Righteousness\n\t[53595]: MELEE_ACTION_CATEGORY + 0.51, // Hammer of Righteousness\n\t[20182]: MELEE_ACTION_CATEGORY + 0.6, // Reckoning\n\t[48952]: SPELL_ACTION_CATEGORY + 0.1, // Holy Shield\n\t[31803]: SPELL_ACTION_CATEGORY + 0.2, // Holy Vengeance\n\t[48801]: SPELL_ACTION_CATEGORY + 0.3, // Exorcism\n\t[48819]: SPELL_ACTION_CATEGORY + 0.4, // Consecration\n\t[53408]: SPELL_ACTION_CATEGORY + 0.51, // Judgement of Wisdom\n\t[20271]: SPELL_ACTION_CATEGORY + 0.52, // Judgement of Light\n\t[31804]: SPELL_ACTION_CATEGORY + 0.53, // Judgement of Vengeance\n\t[20467]: SPELL_ACTION_CATEGORY + 0.54, // Judgement of Command\n\t[20187]: SPELL_ACTION_CATEGORY + 0.55, // Judgement of Righteousness\n\t[31878]: SPELL_ACTION_CATEGORY + 0.56, // Judgements of the Wise\n\t[48817]: SPELL_ACTION_CATEGORY + 0.5, // Holy Wrath\n\t[48806]: SPELL_ACTION_CATEGORY + 0.6, // Hammer of Wrath\n\t[54428]: SPELL_ACTION_CATEGORY + 0.7, // Divine Plea\n\t[66233]: SPELL_ACTION_CATEGORY + 0.8, // Ardent Defender\n\n\t// Priest\n\t[48300]: SPELL_ACTION_CATEGORY + 0.11, // Devouring Plague\n\t[48125]: SPELL_ACTION_CATEGORY + 0.12, // Shadow Word: Pain\n\t[48160]: SPELL_ACTION_CATEGORY + 0.13, // Vampiric Touch\n\t[48135]: SPELL_ACTION_CATEGORY + 0.14, // Holy Fire\n\t[48123]: SPELL_ACTION_CATEGORY + 0.19, // Smite\n\t[48127]: SPELL_ACTION_CATEGORY + 0.2, // Mind Blast\n\t[48158]: SPELL_ACTION_CATEGORY + 0.3, // Shadow Word: Death\n\t[48156]: SPELL_ACTION_CATEGORY + 0.4, // Mind Flay\n\n\t// Rogue\n\t[6774]: MELEE_ACTION_CATEGORY + 0.1, // Slice and Dice\n\t[8647]: MELEE_ACTION_CATEGORY + 0.2, // Expose Armor\n\t[48672]: MELEE_ACTION_CATEGORY + 0.3, // Rupture\n\t[57993]: MELEE_ACTION_CATEGORY + 0.3, // Envenom\n\t[48668]: MELEE_ACTION_CATEGORY + 0.4, // Eviscerate\n\t[48666]: MELEE_ACTION_CATEGORY + 0.5, // Mutilate\n\t[48665]: MELEE_ACTION_CATEGORY + 0.6, // Mutilate (MH)\n\t[48664]: MELEE_ACTION_CATEGORY + 0.7, // Mutilate (OH)\n\t[48638]: MELEE_ACTION_CATEGORY + 0.5, // Sinister Strike\n\t[51723]: MELEE_ACTION_CATEGORY + 0.8, // Fan of Knives\n\t[57973]: SPELL_ACTION_CATEGORY + 0.1, // Deadly Poison\n\t[57968]: SPELL_ACTION_CATEGORY + 0.2, // Instant Poison\n\n\t// Shaman\n\t[58804]: 0.11, // Windfury Weapon\n\t[58790]: 0.12, // Flametongue Weapon\n\t[58796]: 0.12, // Frostbrand Weapon\n\t[17364]: MELEE_ACTION_CATEGORY + 0.1, // Stormstrike\n\t[60103]: MELEE_ACTION_CATEGORY + 0.2, // Lava Lash\n\t[49233]: SPELL_ACTION_CATEGORY + 0.21, // Flame Shock\n\t[49231]: SPELL_ACTION_CATEGORY + 0.22, // Earth Shock\n\t[49236]: SPELL_ACTION_CATEGORY + 0.23, // Frost Shock\n\t[60043]: SPELL_ACTION_CATEGORY + 0.31, // Lava Burst\n\t[49238]: SPELL_ACTION_CATEGORY + 0.32, // Lightning Bolt\n\t[49271]: SPELL_ACTION_CATEGORY + 0.33, // Chain Lightning\n\t[61657]: SPELL_ACTION_CATEGORY + 0.41, // Fire Nova\n\t[58734]: SPELL_ACTION_CATEGORY + 0.42, // Magma Totem\n\t[58704]: SPELL_ACTION_CATEGORY + 0.43, // Searing Totem\n\t[49281]: SPELL_ACTION_CATEGORY + 0.51, // Lightning Shield\n\t[49279]: SPELL_ACTION_CATEGORY + 0.52, // Lightning Shield (Proc)\n\t[2825]: DEFAULT_ACTION_CATEGORY + 0.1, // Bloodlust\n\n\t// Warlock\n\t[47867]: SPELL_ACTION_CATEGORY + 0.01, // Curse of Doom\n\t[47864]: SPELL_ACTION_CATEGORY + 0.02, // Curse of Agony\n\t[47813]: SPELL_ACTION_CATEGORY + 0.1, // Corruption\n\t[59164]: SPELL_ACTION_CATEGORY + 0.2, // Haunt\n\t[47843]: SPELL_ACTION_CATEGORY + 0.3, // Unstable Affliction\n\t[47811]: SPELL_ACTION_CATEGORY + 0.31, // Immolate\n\t[17962]: SPELL_ACTION_CATEGORY + 0.32, // Conflagrate\n\t[59172]: SPELL_ACTION_CATEGORY + 0.49, // Chaos Bolt\n\t[47809]: SPELL_ACTION_CATEGORY + 0.5, // Shadow Bolt\n\t[47838]: SPELL_ACTION_CATEGORY + 0.51, // Incinerate\n\t[47825]: SPELL_ACTION_CATEGORY + 0.52, // Soul Fire\n\t[47855]: SPELL_ACTION_CATEGORY + 0.6, // Drain Soul\n\t[57946]: SPELL_ACTION_CATEGORY + 0.7, // Life Tap\n\t[47241]: SPELL_ACTION_CATEGORY + 0.8, // Metamorphosis\n\t[50589]: SPELL_ACTION_CATEGORY + 0.81, // Immolation Aura\n\t[47193]: SPELL_ACTION_CATEGORY + 0.82, // Demonic Empowerment\n\n\t// Mage\n\t[42842]: SPELL_ACTION_CATEGORY + 0.01, // Frostbolt\n\t[47610]: SPELL_ACTION_CATEGORY + 0.02, // Frostfire Bolt\n\t[42897]: SPELL_ACTION_CATEGORY + 0.02, // Arcane Blast\n\t[42833]: SPELL_ACTION_CATEGORY + 0.02, // Fireball\n\t[42859]: SPELL_ACTION_CATEGORY + 0.03, // Scorch\n\t[42891]: SPELL_ACTION_CATEGORY + 0.1, // Pyroblast\n\t[42846]: SPELL_ACTION_CATEGORY + 0.1, // Arcane Missiles\n\t[44572]: SPELL_ACTION_CATEGORY + 0.1, // Deep Freeze\n\t[44781]: SPELL_ACTION_CATEGORY + 0.2, // Arcane Barrage\n\t[42914]: SPELL_ACTION_CATEGORY + 0.2, // Ice Lance\n\t[55360]: SPELL_ACTION_CATEGORY + 0.2, // Living Bomb\n\t[55362]: SPELL_ACTION_CATEGORY + 0.21, // Living Bomb (Explosion)\n\t[12654]: SPELL_ACTION_CATEGORY + 0.3, // Ignite\n\t[12472]: SPELL_ACTION_CATEGORY + 0.4, // Icy Veins\n\t[11129]: SPELL_ACTION_CATEGORY + 0.4, // Combustion\n\t[12042]: SPELL_ACTION_CATEGORY + 0.4, // Arcane Power\n\t[11958]: SPELL_ACTION_CATEGORY + 0.41, // Cold Snap\n\t[12043]: SPELL_ACTION_CATEGORY + 0.41, // Presence of Mind\n\t[31687]: SPELL_ACTION_CATEGORY + 0.41, // Water Elemental\n\t[55342]: SPELL_ACTION_CATEGORY + 0.5, // Mirror Image\n\t[33312]: SPELL_ACTION_CATEGORY + 0.51, // Mana Gems\n\t[12051]: SPELL_ACTION_CATEGORY + 0.52, // Evocate\n\t[44401]: SPELL_ACTION_CATEGORY + 0.6, // Missile Barrage\n\t[44448]: SPELL_ACTION_CATEGORY + 0.6, // Hot Streak\n\t[44545]: SPELL_ACTION_CATEGORY + 0.6, // Fingers of Frost\n\t[44549]: SPELL_ACTION_CATEGORY + 0.61, // Brain Freeze\n\t[12536]: SPELL_ACTION_CATEGORY + 0.61, // Clearcasting\n\n\t// Warrior\n\t[47520]: 0.1, // Cleave\n\t[47450]: 0.1, // Heroic Strike\n\t[47475]: MELEE_ACTION_CATEGORY + 0.05, // Slam\n\t[23881]: MELEE_ACTION_CATEGORY + 0.1, // Bloodthirst\n\t[47486]: MELEE_ACTION_CATEGORY + 0.1, // Mortal Strike\n\t[30356]: MELEE_ACTION_CATEGORY + 0.1, // Shield Slam\n\t[47498]: MELEE_ACTION_CATEGORY + 0.21, // Devastate\n\t[47467]: MELEE_ACTION_CATEGORY + 0.22, // Sunder Armor\n\t[57823]: MELEE_ACTION_CATEGORY + 0.23, // Revenge\n\t[1680]: MELEE_ACTION_CATEGORY + 0.24, // Whirlwind\n\t[7384]: MELEE_ACTION_CATEGORY + 0.25, // Overpower\n\t[47471]: MELEE_ACTION_CATEGORY + 0.42, // Execute\n\t[12867]: SPELL_ACTION_CATEGORY + 0.51, // Deep Wounds\n\t[58874]: SPELL_ACTION_CATEGORY + 0.52, // Damage Shield\n\t[47296]: SPELL_ACTION_CATEGORY + 0.53, // Critical Block\n\t[46924]: SPELL_ACTION_CATEGORY + 0.61, // Bladestorm\n\t[2565]: SPELL_ACTION_CATEGORY + 0.62, // Shield Block\n\t[64382]: SPELL_ACTION_CATEGORY + 0.65, // Shattering Throw\n\t[71]: DEFAULT_ACTION_CATEGORY + 0.1, // Defensive Stance\n\t[2457]: DEFAULT_ACTION_CATEGORY + 0.1, // Battle Stance\n\t[2458]: DEFAULT_ACTION_CATEGORY + 0.1, // Berserker Stance\n\n\t// Death Knight\n\t[51425]: MELEE_ACTION_CATEGORY + 0.05, // Obliterate\n\t[55268]: MELEE_ACTION_CATEGORY + 0.1, // Frost strike\n\t[49930]: MELEE_ACTION_CATEGORY + 0.15, // Blood strike\n\t[50842]: MELEE_ACTION_CATEGORY + 0.2, // Pestilence\n\t[51411]: MELEE_ACTION_CATEGORY + 0.25, // Howling Blast\n\t[49895]: MELEE_ACTION_CATEGORY + 0.25, // Death Coil\n\t[49938]: MELEE_ACTION_CATEGORY + 0.25, // Death and Decay\n\t[63560]: MELEE_ACTION_CATEGORY + 0.25, // Ghoul Frenzy\n\t[50536]: MELEE_ACTION_CATEGORY + 0.25, // Unholy Blight\n\t[57623]: MELEE_ACTION_CATEGORY + 0.25, // HoW\n\t[59131]: MELEE_ACTION_CATEGORY + 0.3, // Icy touch\n\t[49921]: MELEE_ACTION_CATEGORY + 0.3, // Plague strike\n\t[51271]: MELEE_ACTION_CATEGORY + 0.35, // UA\n\t[45529]: MELEE_ACTION_CATEGORY + 0.35, // BT\n\t[47568]: MELEE_ACTION_CATEGORY + 0.35, // ERW\n\t[49206]: MELEE_ACTION_CATEGORY + 0.35, // Summon Gargoyle\n\t[46584]: MELEE_ACTION_CATEGORY + 0.35, // Raise Dead\n\t[55095]: MELEE_ACTION_CATEGORY + 0.4, // Frost Fever\n\t[55078]: MELEE_ACTION_CATEGORY + 0.4, // Blood Plague\n\t[49655]: MELEE_ACTION_CATEGORY + 0.4, // Wandering Plague\n\t[50401]: MELEE_ACTION_CATEGORY + 0.5, // Razor Frost\n\t[51460]: MELEE_ACTION_CATEGORY + 0.5, // Necrosis\n\t[50463]: MELEE_ACTION_CATEGORY + 0.5, // BCB\n\t[50689]: DEFAULT_ACTION_CATEGORY + 0.1, // Blood Presence\n\t[48263]: DEFAULT_ACTION_CATEGORY + 0.1, // Frost Presence\n\t[48265]: DEFAULT_ACTION_CATEGORY + 0.1, // Unholy Presence\n\n\t// Generic\n\t[53307]: SPELL_ACTION_CATEGORY + 0.931, // Thorns\n\t[54043]: SPELL_ACTION_CATEGORY + 0.932, // Retribution Aura\n\t[54758]: SPELL_ACTION_CATEGORY + 0.933, // Hyperspeed Acceleration\n\t[42641]: SPELL_ACTION_CATEGORY + 0.941, // Sapper\n\t[40536]: SPELL_ACTION_CATEGORY + 0.942, // Explosive Decoy\n\t[41119]: SPELL_ACTION_CATEGORY + 0.943, // Saronite Bomb\n\t[40771]: SPELL_ACTION_CATEGORY + 0.944, // Cobalt Frag Bomb\n};\n\nconst idsToGroupForRotation: Array<number> = [\n\t6774, // Slice and Dice\n\t8647, // Expose Armor\n\t48668, // Eviscerate\n\t48672, // Rupture\n\t51690, // Killing Spree\n\t57993, // Envenom\n];\n\nconst percentageResources: Array<ResourceType> = [ResourceType.ResourceTypeHealth, ResourceType.ResourceTypeMana];\n","// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { TypedEvent } from '../../typed_event.js';\nimport { BooleanPicker } from '../boolean_picker.js';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\nexport class LogRunner extends ResultComponent {\n\tprivate virtualScroll: CustomVirtualScroll | null = null;\n\treadonly showDebugChangeEmitter = new TypedEvent<void>('Show Debug');\n\tprivate showDebug = false;\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'log-runner-root';\n\t\tsuper(config);\n\n\t\t// Existing setup code for the component...\n\t\tthis.rootElem.innerHTML += `\n\t\t\t<div class=\"log-runner-actions\">\n\t\t\t\t<input type=\"text\" id=\"log-search-input\" class=\"form-control\" placeholder=\"Filter logs\">\n\t\t\t\t<button id=\"log-runner-scroll-to-top-btn\" class=\"btn btn-primary order-last\">Top</button>\n\t\t\t</div>\n\t\t\t<div id=\"log-runner-logs-scroll\" class=\"log-runner-scroll\">\n\t\t\t\t<table class=\"metrics-table log-runner-table\">\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr class=\"metrics-table-header-row\">\n\t\t\t\t\t\t\t<th>Time</th>\n\t\t\t\t\t\t\t<th><div class=\"d-flex align-items-end\">Event</div></th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody id=\"log-runner-logs\" class=\"log-runner-logs\"></tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t`;\n\t\tconst searchInput = this.rootElem.querySelector('#log-search-input') as HTMLInputElement;\n\n\t\t// Use the 'input' event to trigger search as the user types\n\t\tsearchInput.addEventListener('input', () => {\n\t\t\tconst searchQuery = searchInput.value;\n\t\t\tthis.searchLogs(searchQuery);\n\t\t});\n\t\tconst scrollToTopBtn = this.rootElem.querySelector('#log-runner-scroll-to-top-btn');\n\t\tscrollToTopBtn?.addEventListener('click', () => {\n\t\t\tthis.virtualScroll?.scrollToTop();\n\t\t});\n\t\tnew BooleanPicker<LogRunner>(this.rootElem.querySelector('.log-runner-actions')!, this, {\n\t\t\textraCssClasses: ['show-debug-picker'],\n\t\t\tlabel: 'Show Debug Statements',\n\t\t\tinline: true,\n\t\t\treverse: true,\n\t\t\tchangedEvent: () => this.showDebugChangeEmitter,\n\t\t\tgetValue: () => this.showDebug,\n\t\t\tsetValue: (eventID, _logRunner, newValue) => {\n\t\t\t\tthis.showDebug = newValue;\n\t\t\t\tthis.showDebugChangeEmitter.emit(eventID);\n\t\t\t},\n\t\t});\n\n\t\tthis.showDebugChangeEmitter.on(() => {\n\t\t\t// Refresh the logs display based on the new showDebug state.\n\t\t\tif (this.getLastSimResult()) {\n\t\t\t\tthis.onSimResult(this.getLastSimResult());\n\t\t\t}\n\t\t});\n\t\tthis.initializeClusterize();\n\t}\n\n\tprivate initializeClusterize(): void {\n\t\tconst scrollElem = this.rootElem.querySelector('#log-runner-logs-scroll') as HTMLElement;\n\t\tconst contentElem = this.rootElem.querySelector('#log-runner-logs') as HTMLElement;\n\n\t\tthis.virtualScroll = new CustomVirtualScroll({\n\t\t\tscrollContainer: scrollElem,\n\t\t\tcontentContainer: contentElem,\n\t\t\titemHeight: 30,\n\t\t});\n\t}\n\tsearchLogs(searchQuery: string): void {\n\t\t// Regular expression to match quoted phrases or words\n\t\tconst matchQuotesRegex = /\"([^\"]+)\"|\\S+/g;\n\t\tlet match;\n\t\tconst keywords: any[] = [];\n\n\t\t// Extract keywords and quoted phrases from the search query\n\t\twhile ((match = matchQuotesRegex.exec(searchQuery))) {\n\t\t\tkeywords.push(match[1] ? match[1].toLowerCase() : match[0].toLowerCase());\n\t\t}\n\n\t\tconst filteredLogs = this.getLastSimResult()\n\t\t\t?.result.logs.filter(log => !log.isCastCompleted())\n\t\t\t.filter(log => {\n\t\t\t\tconst logText = log.toString(false).trim().toLowerCase();\n\t\t\t\t// Check if log contains all keywords/phrases\n\t\t\t\treturn keywords.every(keyword => {\n\t\t\t\t\tif (keyword.startsWith('\"') && keyword.endsWith('\"')) {\n\t\t\t\t\t\t// Remove quotes for exact phrase match\n\t\t\t\t\t\treturn logText.includes(keyword.slice(1, -1));\n\t\t\t\t\t}\n\t\t\t\t\treturn logText.includes(keyword);\n\t\t\t\t});\n\t\t\t})\n\t\t\t.map(log => `<tr><td class=\"log-timestamp\">${log.formattedTimestamp()}</td><td class=\"log-event\">${log.toString(false).trim()}</td></tr>`);\n\n\t\tif (filteredLogs) {\n\t\t\tthis.virtualScroll?.setItems(filteredLogs);\n\t\t}\n\t}\n\n\tonSimResult(resultData: SimResultData): void {\n\t\tconst logs = resultData.result.logs\n\t\t\t.filter(log => !log.isCastCompleted())\n\t\t\t.map(log => `<tr><td class=\"log-timestamp\">${log.formattedTimestamp()}</td><td class=\"log-evdsfent\">${log.toString(false).trim()}</td></tr>`);\n\t\tthis.virtualScroll?.setItems(logs);\n\t}\n}\n\nclass CustomVirtualScroll {\n\tprivate scrollContainer: HTMLElement;\n\tprivate contentContainer: HTMLElement;\n\tprivate items: string[];\n\tprivate itemHeight: number;\n\tprivate visibleItemsCount: number;\n\tprivate startIndex: number;\n\tprivate placeholderTop: HTMLElement;\n\tprivate placeholderBottom: HTMLElement;\n\n\tconstructor({ scrollContainer, contentContainer, itemHeight }: { scrollContainer: HTMLElement; contentContainer: HTMLElement; itemHeight: number }) {\n\t\tthis.scrollContainer = scrollContainer;\n\t\tthis.contentContainer = contentContainer;\n\t\tthis.items = [];\n\t\tthis.itemHeight = itemHeight;\n\t\tthis.visibleItemsCount = 50; // +1 for buffer\n\t\tthis.startIndex = 0;\n\n\t\tthis.placeholderTop = document.createElement('div');\n\t\tthis.placeholderBottom = document.createElement('div');\n\t\tcontentContainer.prepend(this.placeholderTop);\n\t\tcontentContainer.append(this.placeholderBottom);\n\n\t\tthis.attachScrollListener();\n\t}\n\n\tscrollToTop(): void {\n\t\tthis.scrollContainer.scrollTop = 0;\n\t\tthis.startIndex = 0; // Reset startIndex to ensure items are updated correctly\n\t\tthis.updateVisibleItems(); // Update the visible items after scrolling to top\n\t}\n\n\tsetItems(newItems: string[]): void {\n\t\t// Adjust the type of newItems as needed\n\t\tthis.items = newItems;\n\t\tthis.updateVisibleItems();\n\t}\n\n\tprivate attachScrollListener(): void {\n\t\tthis.scrollContainer.addEventListener('scroll', () => {\n\t\t\tconst newIndex = Math.floor(this.scrollContainer.scrollTop / this.itemHeight);\n\t\t\tif (newIndex !== this.startIndex) {\n\t\t\t\tthis.startIndex = newIndex;\n\t\t\t\tthis.updateVisibleItems();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate updateVisibleItems(): void {\n\t\tconst endIndex = this.startIndex + this.visibleItemsCount;\n\t\tconst visibleItems = this.items.slice(this.startIndex, endIndex);\n\n\t\t// Reset content and adjust placeholders\n\t\tthis.contentContainer.innerHTML = '';\n\t\tthis.contentContainer.appendChild(this.placeholderTop);\n\t\tthis.placeholderTop.style.height = `${this.startIndex * this.itemHeight}px`;\n\n\t\tvisibleItems.forEach(item => {\n\t\t\t// Assuming each item is an HTML string that can be directly inserted\n\t\t\tconst itemRow = document.createElement('tr'); // Create a <tr> element\n\t\t\titemRow.innerHTML = item; // Set the innerHTML of the <tr> to the item\n\t\t\tthis.contentContainer.appendChild(itemRow); // Append the <tr> to the container\n\t\t});\n\n\t\tthis.contentContainer.appendChild(this.placeholderBottom);\n\t\tconst remainingItems = this.items.length - endIndex;\n\t\tthis.placeholderBottom.style.height = `${remainingItems * this.itemHeight}px`;\n\t}\n}\n","import { Tooltip } from 'bootstrap';\nimport tippy from 'tippy.js';\n\nimport { DistributionMetrics as DistributionMetricsProto, ProgressMetrics, Raid as RaidProto } from '../proto/api.js';\nimport { Encounter as EncounterProto } from '../proto/common.js';\nimport { SimRunData } from '../proto/ui.js';\nimport { ActionMetrics, SimResult, SimResultFilter } from '../proto_utils/sim_result.js';\nimport { SimUI } from '../sim_ui.js';\nimport { EventID, TypedEvent } from '../typed_event.js';\nimport { formatDeltaTextElem } from '../utils.js';\n\nexport function addRaidSimAction(simUI: SimUI): RaidSimResultsManager {\n\tsimUI.addAction('Simulate', 'dps-action', async () =>\n\t\tsimUI.runSim((progress: ProgressMetrics) => {\n\t\t\tresultsManager.setSimProgress(progress);\n\t\t}),\n\t);\n\n\tconst resultsManager = new RaidSimResultsManager(simUI);\n\tsimUI.sim.simResultEmitter.on((eventID, simResult) => {\n\t\tresultsManager.setSimResult(eventID, simResult);\n\t});\n\treturn resultsManager;\n}\n\nexport type ReferenceData = {\n\tsimResult: SimResult;\n\tsettings: any;\n\traidProto: RaidProto;\n\tencounterProto: EncounterProto;\n};\n\nexport interface ResultMetrics {\n\tcod: string;\n\tdps: string;\n\tdpasp: string;\n\tdtps: string;\n\ttmi: string;\n\tdur: string;\n\thps: string;\n\ttps: string;\n\ttto: string;\n}\n\nexport interface ResultMetricCategories {\n\tdamage: string;\n\tdemo: string;\n\thealing: string;\n\tthreat: string;\n}\n\nexport interface ResultsLineArgs {\n\taverage: number;\n\tstdev?: number;\n\tclasses?: string;\n}\n\nexport class RaidSimResultsManager {\n\tstatic resultMetricCategories: { [ResultMetrics: string]: keyof ResultMetricCategories } = {\n\t\tdps: 'damage',\n\t\tdpasp: 'demo',\n\t\ttps: 'threat',\n\t\tdtps: 'threat',\n\t\ttmi: 'threat',\n\t\tcod: 'threat',\n\t\ttto: 'healing',\n\t\thps: 'healing',\n\t};\n\n\tstatic resultMetricClasses: { [ResultMetrics: string]: string } = {\n\t\tcod: 'results-sim-cod',\n\t\tdps: 'results-sim-dps',\n\t\tdpasp: 'results-sim-dpasp',\n\t\tdtps: 'results-sim-dtps',\n\t\ttmi: 'results-sim-tmi',\n\t\tdur: 'results-sim-dur',\n\t\thps: 'results-sim-hps',\n\t\ttps: 'results-sim-tps',\n\t\ttto: 'results-sim-tto',\n\t};\n\n\tstatic metricsClasses: { [ResultMetricCategories: string]: string } = {\n\t\tdamage: 'damage-metrics',\n\t\tdemo: 'demo-metrics',\n\t\thealing: 'healing-metrics',\n\t\tthreat: 'threat-metrics',\n\t};\n\n\treadonly currentChangeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\treadonly referenceChangeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\treadonly changeEmitter: TypedEvent<void> = new TypedEvent<void>();\n\n\tprivate readonly simUI: SimUI;\n\n\tprivate currentData: ReferenceData | null = null;\n\tprivate referenceData: ReferenceData | null = null;\n\n\tconstructor(simUI: SimUI) {\n\t\tthis.simUI = simUI;\n\n\t\t[this.currentChangeEmitter, this.referenceChangeEmitter].forEach(emitter => emitter.on(eventID => this.changeEmitter.emit(eventID)));\n\t}\n\n\tsetSimProgress(progress: ProgressMetrics) {\n\t\tthis.simUI.resultsViewer.setContent(`\n\t\t\t<div class=\"results-sim\">\n\t\t\t\t<div class=\"results-sim-dps damage-metrics\">\n\t\t\t\t\t<span class=\"topline-result-avg\">${progress.dps.toFixed(2)}</span>\n\t\t\t\t</div>\n\t\t\t\t${\n\t\t\t\t\t!this.simUI.isIndividualSim()\n\t\t\t\t\t\t? ''\n\t\t\t\t\t\t: `<div class=\"results-sim-hps healing-metrics\">\n\t\t\t\t\t<span class=\"topline-result-avg\">${progress.hps.toFixed(2)}</span>\n\t\t\t\t</div>`\n\t\t\t\t}\n\t\t\t\t<div class=\"\">\n\t\t\t\t\t${progress.presimRunning ? 'presimulations running' : `${progress.completedIterations} / ${progress.totalIterations}<br>iterations complete`}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`);\n\t}\n\n\tsetSimResult(eventID: EventID, simResult: SimResult) {\n\t\tthis.currentData = {\n\t\t\tsimResult: simResult,\n\t\t\tsettings: {\n\t\t\t\traid: RaidProto.toJson(this.simUI.sim.raid.toProto()),\n\t\t\t\tencounter: EncounterProto.toJson(this.simUI.sim.encounter.toProto()),\n\t\t\t},\n\t\t\traidProto: RaidProto.clone(simResult.request.raid || RaidProto.create()),\n\t\t\tencounterProto: EncounterProto.clone(simResult.request.encounter || EncounterProto.create()),\n\t\t};\n\t\tthis.currentChangeEmitter.emit(eventID);\n\n\t\tconst dpsMetrics = simResult.raidMetrics.dps;\n\t\tthis.simUI.resultsViewer.setContent(`\n      <div class=\"results-sim\">\n\t\t\t\t${RaidSimResultsManager.makeToplineResultsContent(simResult)}\n\t\t\t\t<div class=\"results-sim-reference\">\n\t\t\t\t\t<a\n\t\t\t\t\t\thref=\"javascript:void(0)\"\n\t\t\t\t\t\tclass=\"results-sim-set-reference\"\n\t\t\t\t\t\trole=\"button\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<i class=\"fa fa-map-pin fa-lg text-${this.simUI.cssScheme} me-2\"></i>Save as Reference\n\t\t\t\t\t</a>\n\t\t\t\t\t<div class=\"results-sim-reference-bar\">\n\t\t\t\t\t\t<a href=\"javascript:void(0)\" class=\"results-sim-reference-swap me-3\" role=\"button\">\n\t\t\t\t\t\t\t<i class=\"fas fa-arrows-rotate me-1\"></i>Swap\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"javascript:void(0)\" class=\"results-sim-reference-delete\" role=\"button\">\n\t\t\t\t\t\t\t<i class=\"fa fa-times fa-lg me-1\"></i>Cancel\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n      </div>\n    `);\n\n\t\tconst setResultTooltip = (cssClass: string, tooltip: string) => {\n\t\t\tconst resultDivElem = this.simUI.resultsViewer.contentElem.getElementsByClassName(cssClass)[0] as HTMLElement | undefined;\n\t\t\tif (resultDivElem) {\n\t\t\t\tTooltip.getOrCreateInstance(resultDivElem, { title: tooltip, html: true, placement: 'right' });\n\t\t\t}\n\t\t};\n\t\tsetResultTooltip('results-sim-dps', 'Damage Per Second');\n\t\tsetResultTooltip('results-sim-dpasp', 'Demonic Pact Average Spell Power');\n\t\tsetResultTooltip('results-sim-tto', 'Time To OOM');\n\t\tsetResultTooltip('results-sim-hps', 'Healing+Shielding Per Second, including overhealing.');\n\t\tsetResultTooltip('results-sim-tps', 'Threat Per Second');\n\t\tsetResultTooltip('results-sim-dtps', 'Damage Taken Per Second');\n\t\tsetResultTooltip(\n\t\t\t'results-sim-tmi',\n\t\t\t`\n\t\t\t<p>Theck-Meloree Index (TMI)</p>\n\t\t\t<p>A measure of incoming damage smoothness which combines the benefits of avoidance with effective health.</p>\n\t\t\t<p><b>Lower is better.</b> This represents the % of your HP to expect in a 6-second burst window based on the encounter settings.</p>\n\t\t`,\n\t\t);\n\t\tsetResultTooltip(\n\t\t\t'results-sim-cod',\n\t\t\t`\n\t\t\t<p>Chance of Death</p>\n\t\t\t<p>The percentage of iterations in which the player died, based on incoming damage from the enemies and incoming healing (see the <b>Incoming HPS</b> and <b>Healing Cadence</b> options).</p>\n\t\t\t<p>DTPS alone is not a good measure of tankiness because it is not affected by health and ignores damage spikes. Chance of Death attempts to capture overall tankiness.</p>\n\t\t`,\n\t\t);\n\n\t\tif (!this.simUI.isIndividualSim()) {\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-diff-separator')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-dpasp')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-tto')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-hps')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-tps')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-dtps')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-tmi')).forEach(e => e.remove());\n\t\t\tArray.from(this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-cod')).forEach(e => e.remove());\n\t\t}\n\n\t\tconst simReferenceElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference')[0] as HTMLDivElement;\n\t\tconst simReferenceDiffElem = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-diff')[0] as HTMLSpanElement;\n\n\t\tconst simReferenceSetButton = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-set-reference')[0] as HTMLSpanElement;\n\t\tsimReferenceSetButton.addEventListener('click', event => {\n\t\t\tthis.referenceData = this.currentData;\n\t\t\tthis.referenceChangeEmitter.emit(TypedEvent.nextEventID());\n\t\t\tthis.updateReference();\n\t\t});\n\t\tTooltip.getOrCreateInstance(simReferenceSetButton, { title: 'Use as reference' });\n\n\t\tconst simReferenceSwapButton = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-swap')[0] as HTMLSpanElement;\n\t\tsimReferenceSwapButton.addEventListener('click', event => {\n\t\t\tTypedEvent.freezeAllAndDo(() => {\n\t\t\t\tif (this.currentData && this.referenceData) {\n\t\t\t\t\tconst swapEventID = TypedEvent.nextEventID();\n\t\t\t\t\tconst tmpData = this.currentData;\n\t\t\t\t\tthis.currentData = this.referenceData;\n\t\t\t\t\tthis.referenceData = tmpData;\n\n\t\t\t\t\tthis.simUI.sim.raid.fromProto(swapEventID, this.currentData.raidProto);\n\t\t\t\t\tthis.simUI.sim.encounter.fromProto(swapEventID, this.currentData.encounterProto);\n\t\t\t\t\tthis.setSimResult(swapEventID, this.currentData.simResult);\n\n\t\t\t\t\tthis.referenceChangeEmitter.emit(swapEventID);\n\t\t\t\t\tthis.updateReference();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\ttippy(simReferenceSwapButton, {\n\t\t\tcontent: 'Swap reference with current',\n\t\t\tignoreAttributes: true,\n\t\t});\n\n\t\tconst simReferenceDeleteButton = this.simUI.resultsViewer.contentElem.getElementsByClassName('results-sim-reference-delete')[0] as HTMLSpanElement;\n\t\tsimReferenceDeleteButton.addEventListener('click', event => {\n\t\t\tthis.referenceData = null;\n\t\t\tthis.referenceChangeEmitter.emit(TypedEvent.nextEventID());\n\t\t\tthis.updateReference();\n\t\t});\n\t\ttippy(simReferenceDeleteButton, {\n\t\t\tcontent: 'Remove reference',\n\t\t\tignoreAttributes: true,\n\t\t});\n\n\t\tthis.updateReference();\n\t}\n\n\tprivate updateReference() {\n\t\tif (!this.referenceData || !this.currentData) {\n\t\t\t// Remove references\n\t\t\tthis.simUI.resultsViewer.contentElem.querySelector('.results-sim-reference')?.classList.remove('has-reference');\n\t\t\tthis.simUI.resultsViewer.contentElem.querySelectorAll('.results-reference').forEach(e => e.classList.add('hide'));\n\t\t\treturn;\n\t\t} else {\n\t\t\t// Add references references\n\t\t\tthis.simUI.resultsViewer.contentElem.querySelector('.results-sim-reference')?.classList.add('has-reference');\n\t\t\tthis.simUI.resultsViewer.contentElem.querySelectorAll('.results-reference').forEach(e => e.classList.remove('hide'));\n\t\t}\n\n\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['dps']} .results-reference-diff`, res => res.raidMetrics.dps, 2);\n\t\tif (this.simUI.isIndividualSim()) {\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['hps']} .results-reference-diff`, res => res.raidMetrics.hps, 2);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['dpasp']} .results-reference-diff`, res => res.getPlayers()[0]!.dpasp, 2);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['tto']} .results-reference-diff`, res => res.getPlayers()[0]!.tto, 2);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['tps']} .results-reference-diff`, res => res.getPlayers()[0]!.tps, 2);\n\t\t\tthis.formatToplineResult(\n\t\t\t\t`.${RaidSimResultsManager.resultMetricClasses['dtps']} .results-reference-diff`,\n\t\t\t\tres => res.getPlayers()[0]!.dtps,\n\t\t\t\t2,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t\tthis.formatToplineResult(`.${RaidSimResultsManager.resultMetricClasses['tmi']} .results-reference-diff`, res => res.getPlayers()[0]!.tmi, 2, true);\n\t\t\tthis.formatToplineResult(\n\t\t\t\t`.${RaidSimResultsManager.resultMetricClasses['cod']} .results-reference-diff`,\n\t\t\t\tres => res.getPlayers()[0]!.chanceOfDeath,\n\t\t\t\t1,\n\t\t\t\ttrue,\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate formatToplineResult(\n\t\tquerySelector: string,\n\t\tgetMetrics: (result: SimResult) => DistributionMetricsProto | number,\n\t\tprecision: number,\n\t\tlowerIsBetter?: boolean,\n\t) {\n\t\tconst elem = this.simUI.resultsViewer.contentElem.querySelector(querySelector) as HTMLSpanElement;\n\t\tif (!elem) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst cur = this.currentData!.simResult;\n\t\tconst ref = this.referenceData!.simResult;\n\t\tconst curMetricsTemp = getMetrics(cur);\n\t\tconst refMetricsTemp = getMetrics(ref);\n\t\tif (typeof curMetricsTemp === 'number') {\n\t\t\tconst curMetrics = curMetricsTemp as number;\n\t\t\tconst refMetrics = refMetricsTemp as number;\n\t\t\tformatDeltaTextElem(elem, refMetrics, curMetrics, precision, lowerIsBetter);\n\t\t} else {\n\t\t\tconst curMetrics = curMetricsTemp as DistributionMetricsProto;\n\t\t\tconst refMetrics = refMetricsTemp as DistributionMetricsProto;\n\t\t\tconst isDiff = this.applyZTestTooltip(elem, ref.iterations, refMetrics.avg, refMetrics.stdev, cur.iterations, curMetrics.avg, curMetrics.stdev);\n\t\t\tformatDeltaTextElem(elem, refMetrics.avg, curMetrics.avg, precision, lowerIsBetter, !isDiff);\n\t\t}\n\t}\n\n\tprivate applyZTestTooltip(elem: HTMLElement, n1: number, avg1: number, stdev1: number, n2: number, avg2: number, stdev2: number): boolean {\n\t\tconst delta = avg1 - avg2;\n\t\tconst err1 = stdev1 / Math.sqrt(n1);\n\t\tconst err2 = stdev2 / Math.sqrt(n2);\n\t\tconst denom = Math.sqrt(Math.pow(err1, 2) + Math.pow(err2, 2));\n\t\tconst z = Math.abs(delta / denom);\n\t\tconst isDiff = z > 1.96;\n\n\t\tlet significance_str = '';\n\t\tif (isDiff) {\n\t\t\tsignificance_str = `Difference is significantly different (Z = ${z.toFixed(3)}).`;\n\t\t} else {\n\t\t\tsignificance_str = `Difference is not significantly different (Z = ${z.toFixed(3)}).`;\n\t\t}\n\t\ttippy(elem, {\n\t\t\tcontent: significance_str,\n\t\t\tignoreAttributes: true,\n\t\t});\n\n\t\treturn isDiff;\n\t}\n\n\tgetRunData(): SimRunData | null {\n\t\tif (this.currentData == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn SimRunData.create({\n\t\t\trun: this.currentData.simResult.toProto(),\n\t\t\treferenceRun: this.referenceData?.simResult.toProto(),\n\t\t});\n\t}\n\n\tgetCurrentData(): ReferenceData | null {\n\t\tif (this.currentData == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Defensive copy.\n\t\treturn {\n\t\t\tsimResult: this.currentData.simResult,\n\t\t\tsettings: JSON.parse(JSON.stringify(this.currentData.settings)),\n\t\t\traidProto: this.currentData.raidProto,\n\t\t\tencounterProto: this.currentData.encounterProto,\n\t\t};\n\t}\n\n\tgetReferenceData(): ReferenceData | null {\n\t\tif (this.referenceData == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// Defensive copy.\n\t\treturn {\n\t\t\tsimResult: this.referenceData.simResult,\n\t\t\tsettings: JSON.parse(JSON.stringify(this.referenceData.settings)),\n\t\t\traidProto: this.referenceData.raidProto,\n\t\t\tencounterProto: this.referenceData.encounterProto,\n\t\t};\n\t}\n\n\tstatic makeToplineResultsContent(simResult: SimResult, filter?: SimResultFilter): string {\n\t\tconst players = simResult.getPlayers(filter);\n\t\tlet content = '';\n\n\t\tif (players.length == 1) {\n\t\t\tconst playerMetrics = players[0];\n\t\t\tif (playerMetrics.getTargetIndex(filter) == null) {\n\t\t\t\tconst dpsMetrics = playerMetrics.dps;\n\t\t\t\tconst dpaspMetrics = playerMetrics.dpasp;\n\t\t\t\tconst tpsMetrics = playerMetrics.tps;\n\t\t\t\tconst dtpsMetrics = playerMetrics.dtps;\n\t\t\t\tconst tmiMetrics = playerMetrics.tmi;\n\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\taverage: dpsMetrics.avg,\n\t\t\t\t\tstdev: dpsMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('dps'),\n\t\t\t\t}).outerHTML;\n\n\t\t\t\t// Hide dpasp if it's zero.\n\t\t\t\tconst dpaspContent = this.buildResultsLine({\n\t\t\t\t\taverage: dpaspMetrics.avg,\n\t\t\t\t\tstdev: dpaspMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('dpasp'),\n\t\t\t\t});\n\t\t\t\tif (dpaspMetrics.avg == 0) {\n\t\t\t\t\tdpaspContent.classList.add('hide');\n\t\t\t\t}\n\t\t\t\tcontent += dpaspContent.outerHTML;\n\n\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\taverage: tpsMetrics.avg,\n\t\t\t\t\tstdev: tpsMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('tps'),\n\t\t\t\t}).outerHTML;\n\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\taverage: dtpsMetrics.avg,\n\t\t\t\t\tstdev: dtpsMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('dtps'),\n\t\t\t\t}).outerHTML;\n\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\taverage: tmiMetrics.avg,\n\t\t\t\t\tstdev: tmiMetrics.stdev,\n\t\t\t\t\tclasses: this.getResultsLineClasses('tmi'),\n\t\t\t\t}).outerHTML;\n\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\taverage: playerMetrics.chanceOfDeath,\n\t\t\t\t\tclasses: this.getResultsLineClasses('cod'),\n\t\t\t\t}).outerHTML;\n\t\t\t} else {\n\t\t\t\tconst actions = simResult.getActionMetrics(filter);\n\t\t\t\tif (actions.length > 0) {\n\t\t\t\t\tconst mergedActions = ActionMetrics.merge(actions);\n\t\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\t\taverage: mergedActions.dps,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('dps'),\n\t\t\t\t\t}).outerHTML;\n\t\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\t\taverage: mergedActions.tps,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('tps'),\n\t\t\t\t\t}).outerHTML;\n\t\t\t\t}\n\n\t\t\t\tconst targetActions = simResult.getTargets(filter)[0].actions.map(action => action.forTarget(filter));\n\t\t\t\tif (targetActions.length > 0) {\n\t\t\t\t\tconst mergedTargetActions = ActionMetrics.merge(targetActions);\n\t\t\t\t\tcontent += this.buildResultsLine({\n\t\t\t\t\t\taverage: mergedTargetActions.dps,\n\t\t\t\t\t\tclasses: this.getResultsLineClasses('dtps'),\n\t\t\t\t\t}).outerHTML;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcontent += this.buildResultsLine({\n\t\t\t\taverage: playerMetrics.tto.avg,\n\t\t\t\tstdev: playerMetrics.tto.stdev,\n\t\t\t\tclasses: this.getResultsLineClasses('tto'),\n\t\t\t}).outerHTML;\n\t\t\tcontent += this.buildResultsLine({\n\t\t\t\taverage: playerMetrics.hps.avg,\n\t\t\t\tstdev: playerMetrics.hps.stdev,\n\t\t\t\tclasses: this.getResultsLineClasses('hps'),\n\t\t\t}).outerHTML;\n\t\t} else {\n\t\t\tconst dpsMetrics = simResult.raidMetrics.dps;\n\t\t\tcontent += this.buildResultsLine({\n\t\t\t\taverage: dpsMetrics.avg,\n\t\t\t\tstdev: dpsMetrics.stdev,\n\t\t\t\tclasses: this.getResultsLineClasses('dps'),\n\t\t\t}).outerHTML;\n\t\t\t//const hpsMetrics = simResult.raidMetrics.hps;\n\t\t\t//content += this.buildResultsLine({\n\t\t\t//\taverage: hpsMetrics.avg,\n\t\t\t//\tstdev: hpsMetrics.stdev,\n\t\t\t//\tclasses: this.getResultsLineClasses('hps'),\n\t\t\t//}).outerHTML;\n\t\t}\n\n\t\tif (simResult.request.encounter?.useHealth) {\n\t\t\tcontent += this.buildResultsLine({\n\t\t\t\taverage: simResult.result.avgIterationDuration,\n\t\t\t\tclasses: this.getResultsLineClasses('dur'),\n\t\t\t});\n\t\t}\n\n\t\treturn content;\n\t}\n\n\tprivate static getResultsLineClasses(metric: keyof ResultMetrics): string {\n\t\tconst classes = [this.resultMetricClasses[metric]];\n\t\tif (this.resultMetricCategories[metric]) classes.push(this.metricsClasses[this.resultMetricCategories[metric]]);\n\n\t\treturn classes.join(' ');\n\t}\n\n\tprivate static buildResultsLine(args: ResultsLineArgs): HTMLElement {\n\t\tconst resultsFragment = document.createElement('fragment');\n\t\tresultsFragment.innerHTML = `\n\t\t\t<div class=\"results-metric ${args.classes}\">\n\t\t\t\t<span class=\"topline-result-avg\">${args.average.toFixed(2)}</span>\n\t\t\t\t${\n\t\t\t\t\targs.stdev\n\t\t\t\t\t\t? `\n\t\t\t\t\t<span class=\"topline-result-stdev\">\n\t\t\t\t\t\t(<i class=\"fas fa-plus-minus fa-xs\"></i>${args.stdev.toFixed()})\n\t\t\t\t\t</span>`\n\t\t\t\t\t\t: ''\n\t\t\t\t}\n\t\t\t\t<div class=\"results-reference hide\">\n\t\t\t\t\t<span class=\"results-reference-diff\"></span> vs reference\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\n\t\treturn resultsFragment.children[0] as HTMLElement;\n\t}\n}\n","import { RaidSimResultsManager } from '../../components/raid_sim_action.js';\nimport { DeathKnight } from '../../player_classes/death_knight';\nimport { Hunter } from '../../player_classes/hunter';\nimport { Rogue } from '../../player_classes/rogue';\nimport { Warrior } from '../../player_classes/warrior';\nimport { PlayerSpec } from '../../player_spec';\nimport { PlayerSpecs } from '../../player_specs';\nimport { ResultComponent, ResultComponentConfig, SimResultData } from './result_component.js';\n\nexport class ToplineResults extends ResultComponent {\n\tconstructor(config: ResultComponentConfig) {\n\t\tconfig.rootCssClass = 'topline-results-root';\n\t\tsuper(config);\n\n\t\tthis.rootElem.classList.add('results-sim');\n\t}\n\n\tonSimResult(resultData: SimResultData) {\n\t\tlet content = RaidSimResultsManager.makeToplineResultsContent(resultData.result, resultData.filter);\n\n\t\tconst noManaClasses = [DeathKnight, Rogue, Warrior, Hunter];\n\n\t\tconst players = resultData.result.getPlayers(resultData.filter);\n\t\tif (players.length == 1 && !!players[0].spec && !noManaClasses.some(klass => PlayerSpecs.getPlayerClass(players[0].spec as PlayerSpec<any>) == klass)) {\n\t\t\tconst player = players[0];\n\t\t\tconst secondsOOM = player.secondsOomAvg;\n\t\t\tconst percentOOM = secondsOOM / resultData.result.encounterMetrics.durationSeconds;\n\t\t\tconst dangerLevel = percentOOM < 0.01 ? 'safe' : percentOOM < 0.05 ? 'warning' : 'danger';\n\n\t\t\tcontent += `\n\t\t\t\t<div class=\"results-sim-percent-oom ${dangerLevel} damage-metrics\">\n\t\t\t\t\t<span class=\"topline-result-avg\">${secondsOOM.toFixed(1)}s</span>\n\t\t\t\t</div>\n\t\t\t`;\n\t\t}\n\n\t\tthis.rootElem.innerHTML = content;\n\t}\n}\n","import { REPO_NAME } from '../constants/other'\nimport { TypedEvent } from '../../core/typed_event';\nimport { DetailedResultsUpdate, SimRunData, SimRun } from '../proto/ui';\nimport { SimResult } from '../proto_utils/sim_result';\nimport { SimUI } from '../sim_ui';\n\nimport { SimResultData } from './detailed_results/result_component';\nimport { ResultsFilter } from './detailed_results/results_filter';\nimport { CastMetricsTable } from './detailed_results/cast_metrics';\nimport { DtpsMeleeMetricsTable } from './detailed_results/dtps_melee_metrics';\nimport { DtpsSpellMetricsTable } from './detailed_results/dtps_spell_metrics';\nimport { HealingMetricsTable } from './detailed_results/healing_metrics';\nimport { MeleeMetricsTable } from './detailed_results/melee_metrics';\nimport { SpellMetricsTable } from './detailed_results/spell_metrics';\nimport { ResourceMetricsTable } from './detailed_results/resource_metrics';\nimport { PlayerDamageMetricsTable } from './detailed_results/player_damage';\nimport { AuraMetricsTable } from './detailed_results/aura_metrics'\nimport { DpsHistogram } from './detailed_results/dps_histogram';\nimport { Timeline } from './detailed_results/timeline';\nimport { LogRunner } from './detailed_results/log_runner';\nimport { ToplineResults } from './detailed_results/topline_results';\n\nimport { Component } from './component';\nimport { RaidSimResultsManager } from './raid_sim_action';\n\ndeclare var Chart: any;\n\nconst layoutHTML = `\n<div class=\"dr-root dr-no-results\">\n\t<div class=\"dr-toolbar\">\n\t\t<div class=\"results-filter\"></div>\n\t\t<div class=\"tabs-filler\"></div>\n\t\t<ul class=\"nav nav-tabs\" role=\"tablist\">\n\t\t\t<li class=\"nav-item dr-tab-tab damage-metrics\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tclass=\"nav-link active\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#damageTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"damageTab\"\n\t\t\t\t\taria-selected=\"true\"\n\t\t\t\t>Damage</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item dr-tab-tab healing-metrics\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tclass=\"nav-link\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#healingTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"healingTab\"\n\t\t\t\t\taria-selected=\"false\"\n\t\t\t\t>Healing</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item dr-tab-tab threat-metrics\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tclass=\"nav-link\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#damageTakenTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"damageTakenTab\"\n\t\t\t\t\taria-selected=\"false\"\n\t\t\t\t>Damage Taken</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item dr-tab-tab\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tclass=\"nav-link\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#buffsTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"buffsTab\"\n\t\t\t\t\taria-selected=\"false\"\n\t\t\t\t>Buffs</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item dr-tab-tab\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tclass=\"nav-link\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#debuffsTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"debuffsTab\"\n\t\t\t\t\taria-selected=\"false\"\n\t\t\t\t>Debuffs</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item dr-tab-tab\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tclass=\"nav-link\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#castsTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"castsTab\"\n\t\t\t\t\taria-selected=\"false\"\n\t\t\t\t>Casts</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item dr-tab-tab\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tclass=\"nav-link\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#resourcesTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"resourcesTab\"\n\t\t\t\t\taria-selected=\"false\"\n\t\t\t\t>Resources</a>\n\t\t\t</li>\n\t\t\t<li class=\"nav-item dr-tab-tab\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tid=\"timelineTabTab\"\n\t\t\t\t\tclass=\"nav-link\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#timelineTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"timelineTab\"\n\t\t\t\t\taria-selected=\"false\"\n\t\t\t\t>Timeline</a>\n\t\t\t<li class=\"nav-item dr-tab-tab\" role=\"presentation\">\n\t\t\t\t<a\n\t\t\t\t\tid=\"logTabTab\"\n\t\t\t\t\tclass=\"nav-link\"\n\t\t\t\t\tdata-bs-toggle=\"tab\"\n\t\t\t\t\tdata-bs-target=\"#logTab\"\n\t\t\t\t\ttype=\"button\"\n\t\t\t\t\trole=\"tab\"\n\t\t\t\t\taria-controls=\"logTab\"\n\t\t\t\t\taria-selected=\"false\"\n\t\t\t\t>Log</a>\n\t\t\t</li>\n\t\t</ul>\n\t</div>\n\t<div class=\"tab-content\">\n\t\t<div id=\"noResultsTab\" class=\"tab-pane dr-tab-content fade active show\">\n\t\t\tRun a simulation to view results\n\t\t</div>\n\t\t<div id=\"damageTab\" class=\"tab-pane dr-tab-content damage-content fade active show\">\n\t\t\t<div class=\"dr-row topline-results\">\n\t\t\t</div>\n\t\t\t<div class=\"dr-row all-players-only\">\n\t\t\t\t<div class=\"player-damage-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"dr-row single-player-only\">\n\t\t\t\t<div class=\"melee-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"dr-row single-player-only\">\n\t\t\t\t<div class=\"spell-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"dr-row dps-histogram\">\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"healingTab\" class=\"tab-pane dr-tab-content healing-content fade\">\n\t\t\t<div class=\"dr-row topline-results\">\n\t\t\t</div>\n\t\t\t<div class=\"dr-row single-player-only\">\n\t\t\t\t<div class=\"healing-spell-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"dr-row hps-histogram\">\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"damageTakenTab\" class=\"tab-pane dr-tab-content damage-taken-content fade\">\n\t\t\t<div class=\"dr-row single-player-only\">\n\t\t\t\t<div class=\"dtps-melee-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"dr-row single-player-only\">\n\t\t\t\t<div class=\"dtps-spell-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"dr-row damage-taken-histogram single-player-only\">\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"buffsTab\" class=\"tab-pane dr-tab-content buffs-content fade\">\n\t\t\t<div class=\"dr-row\">\n\t\t\t\t<div class=\"buff-aura-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"debuffsTab\" class=\"tab-pane dr-tab-content debuffs-content fade\">\n\t\t\t<div class=\"dr-row\">\n\t\t\t\t<div class=\"debuff-aura-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"castsTab\" class=\"tab-pane dr-tab-content casts-content fade\">\n\t\t\t<div class=\"dr-row\">\n\t\t\t\t<div class=\"cast-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"resourcesTab\" class=\"tab-pane dr-tab-content resources-content fade\">\n\t\t\t<div class=\"dr-row\">\n\t\t\t\t<div class=\"resource-metrics\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"timelineTab\" class=\"tab-pane dr-tab-content timeline-content fade\">\n\t\t\t<div class=\"dr-row\">\n\t\t\t\t<div class=\"timeline\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div id=\"logTab\" class=\"tab-pane dr-tab-content log-content fade\">\n\t\t\t<div class=\"dr-row\">\n\t\t\t\t<div class=\"log\">\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</div>\n`;\n\nexport abstract class DetailedResults extends Component {\n\tprotected readonly simUI: SimUI | null;\n\tprotected latestRun: SimRunData | null = null;\n\n\tprivate currentSimResult: SimResult | null = null;\n\tprivate resultsEmitter: TypedEvent<SimResultData | null> = new TypedEvent<SimResultData | null>();\n\tprivate resultsFilter: ResultsFilter;\n\n\tconstructor(parent: HTMLElement, simUI: SimUI | null, cssScheme: string) {\n\t\tsuper(parent, 'detailed-results-manager-root');\n\t\tthis.rootElem.innerHTML = layoutHTML;\n\t\tthis.simUI = simUI;\n\n\t\tthis.simUI?.sim.settingsChangeEmitter.on(async () => await this.updateSettings());\n\n\t\tChart.defaults.color = 'white';\n\n\t\t// Allow styling the sticky toolbar\n\t\tconst toolbar = document.querySelector('.dr-toolbar') as HTMLElement;\n\t\tnew IntersectionObserver(\n\t\t\t([e]) => {\n\t\t\t\t//console.log(e.intersectionRatio)\n\t\t\t\te.target.classList.toggle('stuck', e.intersectionRatio < 1)\n\t\t\t},\n\t\t\t{\n\t\t\t\t// Intersect with the sim header or top of the separate tab\n\t\t\t\trootMargin: this.simUI ? `-${this.simUI.simHeader.rootElem.offsetHeight + 1}px 0px 0px 0px` : '0px',\n\t\t\t\tthreshold: [1],\n\t\t\t}\n\t\t).observe(toolbar)\n\n\t\tthis.resultsFilter = new ResultsFilter({\n\t\t\tparent: this.rootElem.getElementsByClassName('results-filter')[0] as HTMLElement,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t});\n\n\t\t(Array.from(this.rootElem.getElementsByClassName('topline-results')) as Array<HTMLElement>).forEach(toplineResultsDiv => {\n\t\t\tnew ToplineResults({ parent: toplineResultsDiv, resultsEmitter: this.resultsEmitter });\n\t\t});\n\n\t\tconst castMetrics = new CastMetricsTable({ parent: this.rootElem.getElementsByClassName('cast-metrics')[0] as HTMLElement, resultsEmitter: this.resultsEmitter });\n\t\tconst meleeMetrics = new MeleeMetricsTable({ parent: this.rootElem.getElementsByClassName('melee-metrics')[0] as HTMLElement, resultsEmitter: this.resultsEmitter });\n\t\tconst spellMetrics = new SpellMetricsTable({ parent: this.rootElem.getElementsByClassName('spell-metrics')[0] as HTMLElement, resultsEmitter: this.resultsEmitter });\n\t\tconst healingMetrics = new HealingMetricsTable({ parent: this.rootElem.getElementsByClassName('healing-spell-metrics')[0] as HTMLElement, resultsEmitter: this.resultsEmitter });\n\t\tconst resourceMetrics = new ResourceMetricsTable({ parent: this.rootElem.getElementsByClassName('resource-metrics')[0] as HTMLElement, resultsEmitter: this.resultsEmitter });\n\t\tconst playerDamageMetrics = new PlayerDamageMetricsTable({ parent: this.rootElem.getElementsByClassName('player-damage-metrics')[0] as HTMLElement, resultsEmitter: this.resultsEmitter }, this.resultsFilter);\n\t\tconst buffAuraMetrics = new AuraMetricsTable({\n\t\t\tparent: this.rootElem.getElementsByClassName('buff-aura-metrics')[0] as HTMLElement,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t}, false);\n\t\tconst debuffAuraMetrics = new AuraMetricsTable({\n\t\t\tparent: this.rootElem.getElementsByClassName('debuff-aura-metrics')[0] as HTMLElement,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t}, true);\n\t\tconst dpsHistogram = new DpsHistogram({ parent: this.rootElem.getElementsByClassName('dps-histogram')[0] as HTMLElement, resultsEmitter: this.resultsEmitter });\n\n\t\tconst dtpsMeleeMetrics = new DtpsMeleeMetricsTable({ parent: this.rootElem.getElementsByClassName('dtps-melee-metrics')[0] as HTMLElement, resultsEmitter: this.resultsEmitter });\n\t\tconst dtpsSpellMetrics = new DtpsSpellMetricsTable({ parent: this.rootElem.getElementsByClassName('dtps-spell-metrics')[0] as HTMLElement, resultsEmitter: this.resultsEmitter });\n\n\t\tconst timeline = new Timeline({\n\t\t\tparent: this.rootElem.getElementsByClassName('timeline')[0] as HTMLElement,\n\t\t\tcssScheme: cssScheme,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t});\n\t\tdocument.getElementById('timelineTabTab')?.addEventListener('click', event => timeline.render());\n\n\t\tconst log = new LogRunner({\n\t\t\tparent: this.rootElem.getElementsByClassName('log')[0] as HTMLElement,\n\t\t\tcssScheme: cssScheme,\n\t\t\tresultsEmitter: this.resultsEmitter,\n\t\t});\n\n\t\tthis.rootElem.classList.add('hide-threat-metrics');\n\t\tthis.rootElem.classList.add('hide-healing-metrics');\n\n\t\tthis.resultsFilter.changeEmitter.on(() => this.updateResults());\n\n\t\tconst rootDiv = this.rootElem.getElementsByClassName('dr-root')[0] as HTMLElement;\n\t\tthis.resultsEmitter.on((eventID, resultData) => {\n\t\t\tif (resultData?.filter.player || resultData?.filter.player === 0) {\n\t\t\t\trootDiv.classList.remove('all-players');\n\t\t\t\trootDiv.classList.add('single-player');\n\t\t\t} else {\n\t\t\t\trootDiv.classList.add('all-players');\n\t\t\t\trootDiv.classList.remove('single-player');\n\t\t\t}\n\t\t});\n\t}\n\n\tabstract postMessage(update: DetailedResultsUpdate): Promise<void>;\n\n\tprotected async setSimRunData(simRunData: SimRunData) {\n\t\tthis.latestRun = simRunData;\n\t\tawait this.postMessage(DetailedResultsUpdate.create({\n\t\t\tdata: {\n\t\t\t\toneofKind: 'runData',\n\t\t\t\trunData: simRunData,\n\t\t\t},\n\t\t}));\n\t}\n\n\tprotected async updateSettings() {\n\t\tif (!this.simUI)\n\t\t\treturn\n\t\tawait this.postMessage(DetailedResultsUpdate.create({\n\t\t\tdata: {\n\t\t\t\toneofKind: 'settings',\n\t\t\t\tsettings: this.simUI.sim.toProto(),\n\t\t\t},\n\t\t}));\n\t}\n\n\tprivate updateResults() {\n\t\tconst eventID = TypedEvent.nextEventID();\n\t\tif (this.currentSimResult == null) {\n\t\t\tthis.rootElem.querySelector('.dr-root')?.classList.add('dr-no-results');\n\t\t\tthis.resultsEmitter.emit(eventID, null);\n\t\t} else {\n\t\t\tthis.rootElem.querySelector('.dr-root')?.classList.remove('dr-no-results');\n\t\t\tthis.resultsEmitter.emit(eventID, {\n\t\t\t\teventID: eventID,\n\t\t\t\tresult: this.currentSimResult,\n\t\t\t\tfilter: this.resultsFilter.getFilter(),\n\t\t\t});\n\t\t}\n\t}\n\n\tprotected async handleMessage(data: DetailedResultsUpdate) {\n\t\tswitch (data.data.oneofKind) {\n\t\t\tcase 'runData':\n\t\t\t\tconst runData = data.data.runData;\n\t\t\t\tthis.currentSimResult = await SimResult.fromProto(runData.run || SimRun.create());\n\t\t\t\tthis.updateResults();\n\t\t\t\tbreak;\n\t\t\tcase 'settings':\n\t\t\t\tconst settings = data.data.settings;\n\t\t\t\tif (settings.showDamageMetrics) {\n\t\t\t\t\tthis.rootElem.classList.remove('hide-damage-metrics');\n\t\t\t\t} else {\n\t\t\t\t\tthis.rootElem.classList.add('hide-damage-metrics');\n\t\t\t\t\tif (document.getElementById('damageTab')!.classList.contains('active')) {\n\t\t\t\t\t\tdocument.getElementById('damageTab')!.classList.remove('active', 'show');\n\t\t\t\t\t\tdocument.getElementById('healingTab')!.classList.add('active', 'show');\n\n\t\t\t\t\t\tconst toolbar = document.getElementsByClassName('dr-toolbar')[0] as HTMLElement;\n\t\t\t\t\t\t(toolbar.getElementsByClassName('damage-metrics')[0] as HTMLElement).children[0]!.classList.remove('active');\n\t\t\t\t\t\t(toolbar.getElementsByClassName('healing-metrics')[0] as HTMLElement).children[0]!.classList.add('active');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (settings.showThreatMetrics) {\n\t\t\t\t\tthis.rootElem.classList.remove('hide-threat-metrics');\n\t\t\t\t} else {\n\t\t\t\t\tthis.rootElem.classList.add('hide-threat-metrics');\n\t\t\t\t}\n\t\t\t\tif (settings.showHealingMetrics) {\n\t\t\t\t\tthis.rootElem.classList.remove('hide-healing-metrics');\n\t\t\t\t} else {\n\t\t\t\t\tthis.rootElem.classList.add('hide-healing-metrics');\n\t\t\t\t}\n\t\t\t\tif (settings.showExperimental) {\n\t\t\t\t\tthis.rootElem.classList.remove('hide-experimental');\n\t\t\t\t} else {\n\t\t\t\t\tthis.rootElem.classList.add('hide-experimental');\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\n\nexport class WindowedDetailedResults extends DetailedResults {\n\tconstructor(parent: HTMLElement) {\n\t\tsuper(parent, null, new URLSearchParams(window.location.search).get(\"cssScheme\") ?? \"\")\n\n\t\twindow.addEventListener('message',\n\t\t\tasync (event) => await this.handleMessage(DetailedResultsUpdate.fromJson(event.data))\n\t\t);\n\n\t\tthis.rootElem.insertAdjacentHTML('beforeend', `\n\t\t\t<div class=\"sim-bg\"></div>\n\t\t`);\n\t}\n\n\tasync postMessage(update: DetailedResultsUpdate): Promise<void> {\n\t\tawait this.handleMessage(update);\n\t}\n}\n\nexport class EmbeddedDetailedResults extends DetailedResults {\n\tprivate tabWindow: Window | null = null;\n\n\tconstructor(parent: HTMLElement, simUI: SimUI, simResultsManager: RaidSimResultsManager) {\n\t\tsuper(parent, simUI, simUI.cssScheme)\n\n\t\tconst newTabBtn = document.createElement('div');\n\t\tnewTabBtn.classList.add('detailed-results-controls-div');\n\t\tnewTabBtn.innerHTML = `\n\t\t\t<button class=\"detailed-results-new-tab-button btn btn-primary\">View in Separate Tab</button>\n\t\t\t<button class=\"detailed-results-1-iteration-button btn btn-primary\">Sim 1 Iteration</button>\n\t\t`;\n\n\t\tthis.rootElem.prepend(newTabBtn);\n\n\t\tconst computedStyles = window.getComputedStyle(this.rootElem);\n\n\t\tconst url = new URL(`${window.location.protocol}//${window.location.host}/${REPO_NAME}/detailed_results/index.html`);\n\t\turl.searchParams.append('cssClass', simUI.cssClass);\n\n\t\tif (simUI.isIndividualSim()) {\n\t\t\turl.searchParams.append('isIndividualSim', '');\n\t\t\tthis.rootElem.classList.add('individual-sim');\n\t\t}\n\n\t\tconst newTabButton = this.rootElem.querySelector('.detailed-results-new-tab-button') as HTMLButtonElement;\n\t\tnewTabButton.addEventListener('click', event => {\n\t\t\tif (this.tabWindow == null || this.tabWindow.closed) {\n\t\t\t\tthis.tabWindow = window.open(url.href, 'Detailed Results');\n\t\t\t\tthis.tabWindow!.addEventListener('load', async event => {\n\t\t\t\t\tif (this.latestRun) {\n\t\t\t\t\t\tawait this.updateSettings();\n\t\t\t\t\t\tawait this.setSimRunData(this.latestRun);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.tabWindow.focus();\n\t\t\t}\n\t\t});\n\n\t\tconst simButton = this.rootElem.querySelector('.detailed-results-1-iteration-button') as HTMLButtonElement;\n\t\tsimButton.addEventListener('click', () => {\n\t\t\t(window.opener || window.parent)!.postMessage('runOnce', '*');\n\t\t});\n\n\t\tsimResultsManager.currentChangeEmitter.on(async () => {\n\t\t\tconst runData = simResultsManager.getRunData();\n\t\t\tif (runData) {\n\t\t\t\tawait this.updateSettings();\n\t\t\t\tawait this.setSimRunData(runData);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync postMessage(update: DetailedResultsUpdate) {\n\t\tif (this.tabWindow) {\n\t\t\tthis.tabWindow.postMessage(DetailedResultsUpdate.toJson(update), '*');\n\t\t}\n\t\tawait this.handleMessage(update);\n\t}\n}\n"],"names":["wowheadSupportedLanguages","en","cn","de","es","fr","it","ko","pt","ru","getBrowserLanguageCode","browserLang","navigator","language","substring","Object","keys","includes","getLanguageCode","cachedLanguageCode_","getWowheadLanguagePrefix","cachedWowheadLanguagePrefix_","setLanguageCode","newLang","typeofJsonValue","value","t","Array","isArray","encTable","split","decTable","i","length","charCodeAt","UnknownFieldHandler","WireType","varint64read","lowBits","highBits","shift","b","this","buf","pos","assertBounds","middleByte","Error","varint64write","lo","hi","bytes","hasNext","byte","push","splitBits","hasMoreBits","indexOf","symbol","Symbol","for","onRead","typeName","message","fieldNo","wireType","data","is","no","onWrite","writer","list","tag","raw","all","filter","uf","last","slice","TWO_PWR_32_DBL","int64fromString","dec","minus","base","add1e6digit","begin","end","digit1e6","Number","int64toString","bitsLow","bitsHigh","mid","high","digitA","digitB","digitC","decimalFrom1e7","digit1e7","needLeadingZeros","partial","String","Math","floor","varint32write","varint32read","result","readBytes","BI","assertBi","bi","dv","DataView","ArrayBuffer","ok","globalThis","BigInt","getBigInt64","getBigUint64","setBigInt64","setBigUint64","MIN","MAX","UMIN","UMAX","C","V","detectBi","RE_DECIMAL_STR","HALF_2_PWR_32","SharedPbLong","constructor","isZero","toNumber","isSafeInteger","PbULong","from","ZERO","getInt32","trim","test","toString","toBigInt","setInt32","PbLong","pbl","negate","isNegative","n","defaultsRead","readUnknownField","readerFactory","BinaryReader","textDecoder","varint64","uint32","len","view","buffer","byteOffset","byteLength","TextDecoder","fatal","ignoreBOM","skip","start","Varint","Bit64","Bit32","LengthDelimited","StartGroup","EndGroup","subarray","RangeError","int32","sint32","zze","int64","uint64","sint64","s","bool","fixed32","getUint32","sfixed32","fixed64","sfixed64","float","getFloat32","double","getFloat64","string","decode","assert","condition","msg","assertInt32","arg","isInteger","assertUInt32","assertFloat32","isFinite","defaultsWrite","writeUnknownFields","writerFactory","BinaryWriter","textEncoder","stack","TextEncoder","chunks","finish","Uint8Array","offset","set","fork","join","chunk","prev","pop","type","encode","setFloat32","setFloat64","setUint32","long","sign","emitDefaultValues","enumAsInteger","useProtoFieldName","prettySpaces","ignoreUnknownFields","MESSAGE_TYPE","lowerCamelCase","snakeCase","capNext","sb","next","charAt","toUpperCase","toLowerCase","ScalarType","LongType","RepeatType","normalizeFieldInfo","field","_a","_b","_c","_d","localName","name","jsonName","repeat","NO","opt","oneof","kind","isOneofGroup","any","hasOwnProperty","oneofKind","ReflectionTypeCheck","info","fields","prepare","req","known","oneofs","values","depth","allowExcessProperties","some","k","group","find","f","repeated","scalars","T","L","scalar","INT32","messages","mapKeys","K","isAssignable","longType","argType","UINT64","FIXED64","INT64","SFIXED64","SINT64","BIGINT","NUMBER","isNaN","BOOL","STRING","BYTES","DOUBLE","FLOAT","map","FIXED32","SFIXED32","SINT32","UINT32","parseInt","reflectionLongConvert","ReflectionJsonReader","fMap","fieldsInput","fieldName","jsonValue","what","read","input","options","oneofsHandled","jsonKey","entries","target","fieldObj","jsonObjKey","jsonObjValue","val","internalJsonRead","enum","key","fieldArr","jsonItem","json","localEnumName","enumNumber","e","NaN","POSITIVE_INFINITY","NEGATIVE_INFINITY","encodeURIComponent","base64Str","bytePos","groupPos","p","base64decode","error","ReflectionJsonWriter","write","source","assign","jsonObj","entryKey","entryValue","messageType","enumInfo","jsonArr","optional","internalJsonWrite","ed","ulong","base64","base64encode","reflectionScalarDefault","ReflectionBinaryReader","fieldNoToField","Map","reader","get","u","d","arr","internalBinaryRead","mapKey","mapVal","mapEntry","keyRaw","create","ReflectionBinaryWriter","concat","sort","a","emitDefault","PACKED","packed","item","keyValue","handler","internalBinaryWrite","method","isDefault","scalarInfo","m","reflectionMergePartial","fieldValue","output","mergePartial","objectValues","primitiveEq","ba","bb","repeatedPrimitiveEq","repeatedMsgEq","equals","MessageType","defaultCheckDepth","refTypeCheck","refJsonReader","refJsonWriter","refBinReader","refBinWriter","defineProperty","enumerable","reflectionCreate","clone","copy","val_a","val_b","reflectionEquals","fromBinary","binaryReadOptions","fromJson","jsonReadOptions","fromJsonString","JSON","parse","toJson","jsonWriteOptions","toJsonString","stringify","toBinary","binaryWriteOptions","UnitReference_Type","Spec","Race","Faction","Class","Profession","Stat","PseudoStat","ItemType","ArmorType","WeaponType","HandType","RangedWeaponType","ItemSlot","ItemQuality","GemColor","SpellSchool","TristateEffect","Explosive","Potions","Conjured","Flask","BattleElixir","GuardianElixir","Food","PetFood","MobType","InputType","EnchantType","OtherAction","RotationType","UnitStats","super","stats","pseudoStats","ReforgeStat","id","fromStat","toStat","multiplier","RaidBuffs","giftOfTheWild","powerWordFortitude","commandingShout","bloodPact","hornOfWinter","strengthOfEarthTotem","arcaneBrilliance","felIntelligence","divineSpirit","battleShout","trueshotAura","unleashedRage","abominationsMight","leaderOfThePack","rampage","icyTalons","windfuryTotem","totemOfWrath","flametongueTotem","demonicPactSp","swiftRetribution","moonkinAura","elementalOath","wrathOfAirTotem","ferociousInspiration","sanctifiedRetribution","arcaneEmpowerment","manaSpringTotem","shadowProtection","natureResistanceTotem","aspectOfTheWild","frostResistanceAura","frostResistanceTotem","bloodlust","thorns","devotionAura","stoneskinTotem","retributionAura","strengthOfWrynn","drumsOfForgottenKings","drumsOfTheWild","scrollOfProtection","scrollOfStamina","scrollOfStrength","scrollOfAgility","scrollOfIntellect","scrollOfSpirit","PartyBuffs","atieshMage","atieshWarlock","braidedEterniumChain","eyeOfTheNight","chainOfTheTwilightOwl","manaTideTotems","heroicPresence","IndividualBuffs","blessingOfKings","blessingOfWisdom","blessingOfMight","blessingOfSanctuary","vigilance","renewedHope","hymnOfHope","handOfSalvation","rapture","innervates","powerInfusions","unholyFrenzy","revitalizeRejuvination","revitalizeWildGrowth","tricksOfTheTrades","divineGuardians","painSuppressions","handOfSacrifices","guardianSpirits","shatteringThrows","vampiricTouch","huntingParty","judgementsOfTheWise","improvedSoulLeech","enduringWinter","focusMagic","Consumes","flask","battleElixir","guardianElixir","food","petFood","petScrollOfAgility","petScrollOfStrength","defaultPotion","prepopPotion","defaultConjured","thermalSapper","explosiveDecoy","fillerExplosive","Debuffs","judgementOfWisdom","judgementOfLight","misery","faerieFire","curseOfElements","ebonPlaguebringer","earthAndMoon","heartOfTheCrusader","masterPoisoner","shadowMastery","improvedScorch","wintersChill","bloodFrenzy","savageCombat","giftOfArthas","mangle","trauma","stampede","exposeArmor","sunderArmor","acidSpit","curseOfWeakness","sting","sporeCloud","demoralizingRoar","demoralizingShout","vindication","demoralizingScreech","thunderClap","frostFever","infectedWounds","judgementsOfTheJust","insectSwarm","scorpidSting","shadowEmbrace","huntersMark","crystalYield","TargetInput","inputType","label","tooltip","boolValue","numberValue","Target","level","mobType","minBaseDamage","damageSpread","swingSpeed","dualWield","dualWieldPenalty","parryHaste","suppressDodge","spellSchool","tankIndex","targetInputs","Encounter","duration","durationVariation","executeProportion20","executeProportion25","executeProportion35","useHealth","targets","PresetTarget","path","PresetEncounter","ItemRandomSuffix","ItemSpec","randomSuffix","enchant","gems","reforging","EquipmentSpec","items","SimDatabase","SimItem","SimEnchant","SimGem","randomSuffixes","enchants","reforgeStats","armorType","weaponType","handType","rangedWeaponType","gemSockets","socketBonus","weaponDamageMin","weaponDamageMax","weaponSpeed","setName","randPropPoints","effectId","color","UnitReference","index","owner","ActionID","rawId","spellId","itemId","otherId","Glyphs","prime1","prime2","prime3","major1","major2","major3","minor1","minor2","minor3","Cooldown","timings","Cooldowns","cooldowns","hpPercentForDefensives","HealingModel","hps","cadenceSeconds","cadenceVariation","inspirationUptime","burstWindow","CustomSpell","spells","spell","castsPerMinute","ItemSwap","mhItem","ohItem","rangedItem","ms","CHARACTER_LEVEL","BOSS_LEVEL","EXPERTISE_PER_QUARTER_PERCENT_REDUCTION","MELEE_CRIT_RATING_PER_CRIT_CHANCE","MELEE_HIT_RATING_PER_HIT_CHANCE","ARMOR_PEN_PER_PERCENT_ARMOR","SPELL_CRIT_RATING_PER_CRIT_CHANCE","SPELL_HIT_RATING_PER_HIT_CHANCE","HASTE_RATING_PER_HASTE_PERCENT","MASTERY_RATING_PER_MASTERY_POINT","SPECIAL_MELEE_HASTE_RATING_PER_HASTE_PERCENT","DEFENSE_RATING_PER_DEFENSE","MISS_DODGE_PARRY_BLOCK_CRIT_CHANCE_PER_DEFENSE","BLOCK_RATING_PER_BLOCK_CHANCE","RESILIENCE_RATING_PER_CRIT_REDUCTION_CHANCE","masteryPercentPerPoint","SpecAssassinationRogue","SpecCombatRogue","SpecSubtletyRogue","SpecBloodDeathKnight","SpecFrostDeathKnight","SpecUnholyDeathKnight","SpecBalanceDruid","SpecFeralDruid","SpecRestorationDruid","SpecHolyPaladin","SpecProtectionPaladin","SpecRetributionPaladin","SpecElementalShaman","SpecEnhancementShaman","SpecRestorationShaman","SpecBeastMasteryHunter","SpecMarksmanshipHunter","SpecSurvivalHunter","SpecArmsWarrior","SpecFuryWarrior","SpecProtectionWarrior","SpecArcaneMage","SpecFireMage","SpecFrostMage","SpecDisciplinePriest","SpecHolyPriest","SpecShadowPriest","SpecAfflictionWarlock","SpecDemonologyWarlock","SpecDestructionWarlock","ShamanTotems_TotemType","ElementalShaman_Options_ThunderstormRange","ShamanPrimeGlyph","ShamanMajorGlyph","ShamanMinorGlyph","EarthTotem","AirTotem","FireTotem","WaterTotem","ShamanShield","ShamanImbue","ShamanSyncType","ShamanTalents","acuity","convection","concussion","callOfFlame","elementalWarding","reverberation","elementalPrecision","rollingThunder","elementalFocus","elementalReach","lavaFlows","fulmination","elementalMastery","earthsGrasp","totemicWrath","feedback","lavaSurge","earthquake","elementalWeapons","focusedStrikes","improvedShields","elementalDevastation","flurry","ancestralSwiftness","totemicReach","toughness","stormstrike","staticShock","frozenPower","seasonedWinds","searingFlames","earthenPower","shamanisticRage","maelstromWeapon","improvedLavaLash","feralSpirit","ancestralResolve","tidalFocus","sparkOfLife","resurgence","totemicFocus","focusedInsight","naturesGuardian","ancestralHealing","naturesSwiftness","naturesBlessing","soothingRains","improvedCleanseSpirit","cleansingWaters","ancestralAwakening","manaTideTotem","telluricCurrents","spiritLinkTotem","tidalWaves","blessingOfTheEternals","riptide","ShamanTotems","earth","air","fire","water","useFireElemental","bonusSpellpower","enhTierTenBonus","ShamanOptions","shield","imbueMh","totems","ElementalShaman","ElementalShaman_Options","ElementalShaman_Rotation","thunderstormRange","classOptions","EnhancementShaman","EnhancementShaman_Options","EnhancementShaman_Rotation","syncType","imbueOh","RestorationShaman","RestorationShaman_Options","RestorationShaman_Rotation","earthShieldPPM","FeralDruid_Rotation_AplType","FeralDruid_Rotation_BearweaveType","FeralDruid_Rotation_BiteModeType","DruidPrimeGlyph","DruidMajorGlyph","DruidMinorGlyph","DruidTalents","naturesGrace","starlightWrath","naturesMajesty","genesis","moonglow","balanceOfPower","euphoria","moonkinForm","typhoon","shootingStars","owlkinFrenzy","galeWinds","solarBeam","dreamstate","forceOfNature","sunfire","fungalGrowth","lunarShower","starfall","feralSwiftness","furor","predatoryStrikes","furySwipes","primalFury","feralAggression","kingOfTheJungle","feralCharge","thickHide","brutalImpact","nurturingInstinct","primalMadness","survivalInstincts","endlessCarnage","naturalReaction","bloodInTheWater","rendAndTear","pulverize","berserk","blessingOfTheGrove","naturalShapeshifter","naturalist","heartOfTheWild","perseverance","masterShapeshifter","improvedRejuvenation","livingSeed","revitalize","furyOfStormrage","naturesBounty","empoweredTouch","malfurionsGift","efflorescence","wildGrowth","naturesCure","naturesWard","giftOfTheEarthmother","swiftRejuvenation","treeOfLife","DruidOptions","innervateTarget","BalanceDruid","BalanceDruid_Options","BalanceDruid_Rotation","okfUptime","FeralDruid","FeralDruid_Rotation","FeralDruid_Options","rotation","bearWeaveType","maintainFaerieFire","minCombosForRip","useRake","useBite","mangleSpam","biteTime","minCombosForBite","berserkBiteThresh","berserkFfThresh","ripLeeway","powerbear","minRoarOffset","biteModeType","hotUptime","snekWeave","flowerWeave","raidTargets","manualParams","maxFfDelay","rotationType","prePopBerserk","prePopOoc","latencyMs","assumeBleedActive","FeralTankDruid_Options","maulRageThreshold","maintainDemoralizingRoar","lacerateTime","startingRage","RestorationDruid","RestorationDruid_Options","RestorationDruid_Rotation","APLRotation_Type","APLActionItemSwap_SwapSet","APLValueCompare_ComparisonOperator","APLValueMath_MathOperator","APLValueIsExecutePhase_ExecutePhaseThreshold","APLValueRuneType","APLValueRuneSlot","APLRotation","SimpleRotation","APLPrepullAction","APLListItem","prepullActions","priorityList","simple","specRotationJson","APLAction","APLValue","hide","action","doAtValue","notes","APLActionCastSpell","APLActionChannelSpell","APLActionMultidot","APLActionMultishield","APLActionAutocastOtherCooldowns","APLActionWait","APLActionWaitUntil","APLActionSchedule","APLActionSequence","APLActionResetSequence","APLActionStrictSequence","APLActionChangeTarget","APLActionActivateAura","APLActionCancelAura","APLActionTriggerICD","APLActionItemSwap","APLActionCatOptimalRotationAction","APLActionCustomRotation","castSpell","channelSpell","multidot","multishield","autocastOtherCooldowns","wait","waitUntil","schedule","sequence","resetSequence","strictSequence","changeTarget","activateAura","cancelAura","triggerIcd","itemSwap","catOptimalRotationAction","customRotation","APLValueConst","APLValueAnd","APLValueOr","APLValueNot","APLValueCompare","APLValueMath","APLValueMax","APLValueMin","APLValueCurrentTime","APLValueCurrentTimePercent","APLValueRemainingTime","APLValueRemainingTimePercent","APLValueIsExecutePhase","APLValueNumberTargets","APLValueBossSpellTimeToReady","APLValueBossSpellIsCasting","APLValueCurrentHealth","APLValueCurrentHealthPercent","APLValueCurrentMana","APLValueCurrentManaPercent","APLValueCurrentRage","APLValueCurrentEnergy","APLValueCurrentFocus","APLValueCurrentComboPoints","APLValueCurrentRunicPower","APLValueCurrentRuneCount","APLValueCurrentNonDeathRuneCount","APLValueCurrentRuneDeath","APLValueCurrentRuneActive","APLValueRuneCooldown","APLValueNextRuneCooldown","APLValueRuneSlotCooldown","APLValueRuneGrace","APLValueRuneSlotGrace","APLValueGCDIsReady","APLValueGCDTimeToReady","APLValueAutoTimeToNext","APLValueSpellCanCast","APLValueSpellIsReady","APLValueSpellTimeToReady","APLValueSpellCastTime","APLValueSpellTravelTime","APLValueSpellCPM","APLValueSpellIsChanneling","APLValueSpellChanneledTicks","APLValueSpellCurrentCost","APLValueAuraIsActive","APLValueAuraIsActiveWithReactionTime","APLValueAuraRemainingTime","APLValueAuraNumStacks","APLValueAuraInternalCooldown","APLValueAuraICDIsReadyWithReactionTime","APLValueAuraShouldRefresh","APLValueDotIsActive","APLValueDotRemainingTime","APLValueSequenceIsComplete","APLValueSequenceIsReady","APLValueSequenceTimeToReady","APLValueChannelClipDelay","APLValueFrontOfTarget","APLValueTotemRemainingTime","APLValueCatExcessEnergy","APLValueCatNewSavageRoarDuration","APLValueWarlockShouldRecastDrainSoul","APLValueWarlockShouldRefreshCorruption","const","and","or","not","cmp","math","max","min","currentTime","currentTimePercent","remainingTime","remainingTimePercent","isExecutePhase","numberTargets","bossSpellTimeToReady","bossSpellIsCasting","currentHealth","currentHealthPercent","currentMana","currentManaPercent","currentRage","currentEnergy","currentFocus","currentComboPoints","currentRunicPower","currentRuneCount","currentNonDeathRuneCount","currentRuneDeath","currentRuneActive","runeCooldown","nextRuneCooldown","runeSlotCooldown","runeGrace","runeSlotGrace","gcdIsReady","gcdTimeToReady","autoTimeToNext","spellCanCast","spellIsReady","spellTimeToReady","spellCastTime","spellTravelTime","spellCpm","spellIsChanneling","spellChanneledTicks","spellCurrentCost","auraIsActive","auraIsActiveWithReactionTime","auraRemainingTime","auraNumStacks","auraInternalCooldown","auraIcdIsReadyWithReactionTime","auraShouldRefresh","dotIsActive","dotRemainingTime","sequenceIsComplete","sequenceIsReady","sequenceTimeToReady","channelClipDelay","frontOfTarget","totemRemainingTime","catExcessEnergy","catNewSavageRoarDuration","warlockShouldRecastDrainSoul","warlockShouldRefreshCorruption","allowRecast","interruptIf","maxDots","maxOverlap","maxShields","innerAction","actions","sequenceName","newTarget","auraId","swapSet","vals","op","lhs","rhs","threshold","targetUnit","sourceUnit","runeType","runeSlot","totemType","WarriorPrimeGlyph","WarriorMajorGlyph","WarriorMinorGlyph","WarriorShout","WarriorTalents","warAcademy","fieldDressing","blitz","tacticalMastery","secondWind","deepWounds","drumsOfWar","tasteForBlood","sweepingStrikes","impale","improvedHamstring","improvedSlam","deadlyCalm","lambsToTheSlaughter","juggernaut","suddenDeath","wreckingCrew","throwdown","bladestorm","bloodCraze","battleTrance","cruelty","executioner","boomingVoice","rudeInterruption","piercingHowl","deathWish","enrage","dieByTheSword","ragingBlow","heroicFury","furiousAttacks","meatCleaver","intensifyRage","bloodsurge","skirmisher","titansGrip","singleMindedFury","incite","bloodAndThunder","shieldSpecialization","shieldMastery","holdTheLine","gagOrder","lastStand","concussionBlow","bastionOfDefense","warbringer","improvedRevenge","devastate","impendingVictory","thunderstruck","heavyRepercussions","safeguard","swordAndBoard","shockwave","WarriorOptions","shout","useShatteringThrow","ArmsWarrior","ArmsWarrior_Options","ArmsWarrior_Rotation","useRecklessness","stanceSnapshot","disableExpertiseGemming","FuryWarrior","FuryWarrior_Options","FuryWarrior_Rotation","ProtectionWarrior","ProtectionWarrior_Options","ProtectionWarrior_Rotation","WarlockOptions_Summon","WarlockOptions_Armor","WarlockOptions_WeaponImbue","WarlockPrimeGlyph","WarlockMajorGlyph","WarlockMinorGlyph","WarlockTalents","doomAndGloom","improvedLifeTap","improvedCorruption","jinx","soulSiphon","siphonLife","curseOfExhaustion","improvedFear","eradication","improvedHowlOfTerror","soulSwap","deathsEmbrace","nightfall","soulburnSeedOfCorruption","everlastingAffliction","pandemic","haunt","demonicEmbrace","darkArts","felSynergy","demonicRebirth","manaFeed","demonicAegis","masterSummoner","impendingDoom","demonicEmpowerment","improvedHealthFunnel","moltenCore","handOfGuldan","auraOfForeboding","ancientGrimoire","inferno","decimation","cremation","demonicPact","metamorphosis","bane","shadowAndFlame","improvedImmolate","aftermath","emberstorm","improvedSearingPain","improvedSoulFire","backdraft","shadowburn","burningEmbers","soulLeech","backlash","netherWard","fireAndBrimstone","shadowfury","netherProtection","empoweredImp","baneOfHavoc","chaosBolt","WarlockOptions","armor","summon","weaponImbue","detonateSeed","AfflictionWarlock","AfflictionWarlock_Options","AfflictionWarlock_Rotation","DemonologyWarlock","DemonologyWarlock_Options","DemonologyWarlock_Rotation","DestructionWarlock","DestructionWarlock_Options","DestructionWarlock_Rotation","RogueOptions_PoisonImbue","RoguePrimeGlyph","RogueMajorGlyph","RogueMinorGlyph","RogueTalents","deadlyMomentum","coupDeGrace","lethality","ruthlessness","quickening","puncturingWounds","blackjack","deadlyBrew","coldBlood","vilePoisons","deadenedNerves","sealFate","murderousIntent","overkill","improvedExposeArmor","cutToTheChase","venomousWounds","vendetta","improvedRecuperate","improvedSinisterStrike","precision","improvedSliceAndDice","improvedSprint","aggression","improvedKick","lightningReflexes","revealingStrike","reinforcedLeather","improvedGouge","combatPotency","bladeTwisting","throwingSpecialization","adrenalineRush","banditsGuile","restlessBlades","killingSpree","nightstalker","improvedAmbush","relentlessStrikes","elusiveness","waylay","opportunity","initiative","energeticRecovery","findWeakness","hemorrhage","honorAmongThieves","premeditation","envelopingShadows","cheatDeath","preparation","sanguinaryVein","slaughterFromTheShadows","serratedBlades","shadowDance","RogueOptions","mhImbue","ohImbue","thImbue","startingOverkillDuration","applyPoisonsManually","vanishBreakTime","tricksOfTheTradeTarget","AssassinationRogue","AssassinationRogue_Options","AssassinationRogue_Rotation","CombatRogue","CombatRogue_Options","CombatRogue_Rotation","SubtletyRogue","SubtletyRogue_Options","SubtletyRogue_Rotation","honorAmongThievesCritRate","PriestOptions_Armor","PriestPrimeGlyph","PriestMajorGlyph","PriestMinorGlyph","PriestTalents","improvedPowerWordShield","twinDisciplines","mentalAgility","evangelism","archangel","innerSanctum","soulWarding","powerInfusion","atonement","innerFocus","borrowedTime","reflectiveShield","strengthOfSoul","divineAegis","painSuppression","trainOfThought","focusedWill","grace","powerWordBarrier","improvedRenew","empoweredHealing","divineFury","desperatePrayer","surgeOfLight","inspiration","divineTouch","holyConcentration","lightwell","tomeOfLight","rapidRenewal","spiritOfRedemption","serendipity","bodyAndSoul","chakra","revelations","blessedResilience","testOfFaith","heavenlyVoice","circleOfHealing","guardianSpirit","darkness","improvedShadowWordPain","veiledShadows","improvedPsychicScream","improvedMindBlast","improvedDevouringPlague","twistedFaith","shadowform","phantasm","harnessedShadows","silence","vampiricEmbrace","masochism","mindMelt","painAndSuffering","paralysis","psychicHorror","sinAndPunishment","shadowyApparition","dispersion","PriestOptions","useShadowfiend","DisciplinePriest","DisciplinePriest_Options","DisciplinePriest_Rotation","powerInfusionTarget","HolyPriest","HolyPriest_Options","HolyPriest_Rotation","ShadowPriest","ShadowPriest_Options","ShadowPriest_Rotation","PaladinPrimeGlyph","PaladinMajorGlyph","PaladinMinorGlyph","Blessings","PaladinAura","PaladinSeal","PaladinJudgement","PaladinTalents","arbiterOfTheLight","protectorOfTheInnocent","judgementsOfThePure","clarityOfPurpose","lastWord","blazingLight","denounce","divineFavor","infusionOfLight","daybreak","enlightenedJudgements","beaconOfLight","speedOfLight","sacredCleansing","conviction","auraMastery","paragonOfVirtue","towerOfRadiance","blessedLife","lightOfDawn","divinity","sealsOfThePure","eternalGlory","improvedHammerOfJustice","hallowedGround","sanctuary","hammerOfTheRighteous","wrathOfTheLightbringer","reckoning","shieldOfTheRighteous","grandCrusader","holyShield","guardedByTheLight","divineGuardian","sacredDuty","shieldOfTheTemplar","ardentDefender","eyeForAnEye","crusade","improvedJudgement","guardiansFavor","ruleOfLaw","pursuitOfJustice","communion","theArtOfWar","longArmOfTheLaw","divineStorm","sacredShield","sanctityOfBattle","sealsOfCommand","sanctifiedWrath","selflessHealer","repentance","divinePurpose","inquiryOfFaith","actsOfSacrifice","zealotry","PaladinOptions","judgement","seal","aura","useAvengingWrath","RetributionPaladin","RetributionPaladin_Options","RetributionPaladin_Rotation","ProtectionPaladin","ProtectionPaladin_Options","ProtectionPaladin_Rotation","HolyPaladin","HolyPaladin_Options","HolyPaladin_Rotation","MageOptions_ArmorType","FireMage_Rotation_PrimaryFireSpell","MagePrimeGlyph","MageMajorGlyph","MageMinorGlyph","MageTalents","arcaneConcentration","improvedCounterspell","netherwindPresence","tormentTheWeak","invocation","improvedArcaneMissiles","improvedBlink","arcaneFlows","presenceOfMind","missileBarrage","prismaticCloak","improvedPolymorph","arcaneTactics","incantersAbsorption","improvedArcaneExplosion","arcanePotency","slow","netherVortex","improvedManaGem","arcanePower","masterOfElements","burningSoul","improvedFireBlast","ignite","firePower","blazingSpeed","impact","cauterize","blastWave","hotStreak","moltenShields","combustion","improvedHotStreak","firestarter","improvedFlamestrike","dragonsBreath","moltenFury","pyromaniac","criticalMass","livingBomb","earlyFrost","piercingIce","shatter","iceFloes","improvedConeOfCold","piercingChill","permafrost","iceShards","icyVeins","fingersOfFrost","improvedFreeze","coldSnap","brainFreeze","shatteredBarrier","iceBarrier","reactiveBarrier","frostfireOrb","deepFreeze","MageOptions","ArcaneMage","ArcaneMage_Options","ArcaneMage_Rotation","missileBarrageBelowManaPercent","blastWithoutMissileBarrageAboveManaPercent","only3ArcaneBlastStacksBelowManaPercent","useArcaneBarrage","focusMagicPercentUptime","focusMagicTarget","FireMage","FireMage_Options","FireMage_Rotation","primaryFireSpell","maintainImprovedScorch","FrostMage","FrostMage_Options","FrostMage_Rotation","useIceLance","waterElementalDisobeyChance","HunterOptions_Ammo","HunterOptions_PetType","HunterPrimeGlyph","HunterMajorGlyph","HunterMinorGlyph","HunterStingType","HunterTalents","improvedKillCommand","oneWithNature","bestialDiscipline","pathfinding","spiritBond","frenzy","improvedMendPet","cobraStrikes","fervor","focusFire","longevity","killingStreak","crouchingTigerHiddenChimera","bestialWrath","kindredSpirits","theBeastWithin","invigoration","beastMastery","goForTheThroat","efficiency","rapidKilling","sicEm","improvedSteadyShot","carefulAim","silencingShot","concussiveBarrage","piercingShots","bombardment","termination","resistanceIsFutile","rapidRecuperation","masterMarksman","readiness","posthaste","markedForDeath","chimeraShot","hunterVsWild","pathing","improvedSerpentSting","survivalTactics","trapMastery","entrapment","pointOfNoEscape","thrillOfTheHunt","counterattack","lockAndLoad","resourcefulness","mirroredBlades","tNT","toxicology","wyvernSting","noxiousStings","sniperTraining","serpentSpread","blackArrow","HunterPetTalents","serpentSwiftness","dash","greatStamina","naturalArmor","improvedCower","bloodthirsty","spikedCollar","boarsSpeed","cullingTheHerd","lionhearted","charge","heartOfThePhoenix","spidersBite","greatResistance","rabid","lickYourWounds","callOfTheWild","sharkAttack","wildHunt","bloodOfTheRhino","petBarding","guardDog","thunderstomp","graceOfTheMantis","taunt","roarOfSacrifice","intervene","silverback","dive","mobility","owlsFocus","carrionFeeder","cornered","feedingFrenzy","wolverineBite","roarOfRecovery","bullheaded","HunterOptions","ammo","petType","petUptime","timeToTrapWeaveMs","useHuntersMark","petTalents","BeastMasteryHunter","BeastMasteryHunter_Options","BeastMasteryHunter_Rotation","trapWeave","viperStartManaPercent","viperStopManaPercent","allowExplosiveShotDownrank","multiDotSerpentSting","MarksmanshipHunter","MarksmanshipHunter_Options","MarksmanshipHunter_Rotation","SurvivalHunter","SurvivalHunter_Options","SurvivalHunter_Rotation","sniperTrainingUptime","BloodDeathKnight_Rotation_Opener","BloodDeathKnight_Rotation_OptimizationSetting","BloodDeathKnight_Rotation_BloodSpell","BloodDeathKnight_Rotation_BloodTapPrio","BloodDeathKnight_Rotation_Presence","DeathKnightPrimeGlyph","DeathKnightMajorGlyph","DeathKnightMinorGlyph","DeathKnightTalents","butchery","bladeBarrier","bladedArmor","improvedBloodTap","scentOfBlood","scarletFever","handOfDoom","bloodCakedBlade","boneShield","sanguineFortitude","bloodParasite","improvedBloodPresence","willOfTheNecropolis","runeTap","vampiricBlood","improvedDeathStrike","crimsonScourge","dancingRuneWeapon","runicPowerMastery","icyReach","nervesOfColdSteel","annihilation","lichborne","onAPaleHorse","endlessWinter","mercilessCombat","chillOfTheGrave","killingMachine","rime","pillarOfFrost","improvedIcyTalons","brittleBones","chilblains","hungeringCold","improvedFrostPresence","threatOfThassarian","mightOfTheFrozenWastes","howlingBlast","unholyCommand","virulence","epidemic","desecration","resilientInfection","morbidity","runicCorruption","contagion","shadowInfusion","deathsAdvance","magicSuppression","rageOfRivendare","unholyBlight","antiMagicZone","improvedUnholyPresence","darkTransformation","suddenDoom","summonGargoyle","DeathKnightOptions","startingRunicPower","BloodDeathKnight","BloodDeathKnight_Rotation","BloodDeathKnight_Options","opener","optimizationSetting","bloodSpell","presence","bloodTapPrio","defensiveDelay","drwPestiApply","FrostDeathKnight","FrostDeathKnight_Options","FrostDeathKnight_Rotation","useAms","avgAmsSuccessRate","avgAmsHit","UnholyDeathKnight","UnholyDeathKnight_Options","UnholyDeathKnight_Rotation","unholyFrenzyTarget","ResourceType","Player","race","class","enableItemSwap","spec","talentsString","profession1","profession2","reactionTimeMs","channelClipDelayMs","inFrontOfTarget","distanceFromTarget","equipment","consumes","bonusStats","buffs","bloodDeathKnight","frostDeathKnight","unholyDeathKnight","balanceDruid","feralDruid","restorationDruid","beastMasteryHunter","marksmanshipHunter","survivalHunter","arcaneMage","fireMage","frostMage","holyPaladin","protectionPaladin","retributionPaladin","disciplinePriest","holyPriest","shadowPriest","assassinationRogue","combatRogue","subtletyRogue","elementalShaman","enhancementShaman","restorationShaman","afflictionWarlock","demonologyWarlock","destructionWarlock","armsWarrior","furyWarrior","protectionWarrior","glyphs","healingModel","database","Party","players","Raid","parties","numActiveParties","tanks","staggerStormstrikes","targetDummies","debuffs","SimOptions","iterations","randomSeed","debug","debugFirstIteration","isTest","saveAllValues","interactive","ActionMetrics","TargetedActionMetrics","isMelee","unitIndex","casts","hits","crits","misses","dodges","parries","blocks","glances","damage","threat","healing","shielding","castTimeMs","AuraMetrics","uptimeSecondsAvg","uptimeSecondsStdev","procsAvg","ResourceMetrics","events","gain","actualGain","DistributionMetrics","avg","stdev","maxSeed","minSeed","hist","allValues","binaryReadMap4","UnitMetrics","secondsOomAvg","chanceOfDeath","auras","resources","pets","dps","dpasp","dtps","tmi","tto","PartyMetrics","RaidMetrics","EncounterMetrics","RaidSimRequest","raid","encounter","simOptions","RaidSimResult","logs","firstIterationDuration","avgIterationDuration","errorResult","raidMetrics","encounterMetrics","ComputeStatsRequest","AuraStats","maxStacks","hasIcd","hasExclusiveEffect","SpellStats","isCastable","isChanneled","isMajorCooldown","hasDot","hasShield","prepullOnly","encounterOnly","hasCastTime","APLActionStats","warnings","APLStats","UnitMetadata","PetStats","metadata","PlayerStats","sets","baseStats","gearStats","talentsStats","buffsStats","consumesStats","finalStats","rotationStats","PartyStats","RaidStats","TargetStats","EncounterStats","ComputeStatsResult","raidStats","encounterStats","StatWeightsRequest","statsToWeigh","pseudoStatsToWeigh","epReferenceStat","player","raidBuffs","partyBuffs","StatWeightsResult","StatWeightValues","tps","pDeath","weights","weightsStdev","epValues","epValuesStdev","progressId","ProgressMetrics","BulkSimResult","completedIterations","totalIterations","completedSims","totalSims","presimRunning","finalRaidResult","finalWeightResult","finalBulkResult","BulkSimRequest","BulkSettings","baseSettings","bulkSettings","TalentLoadout","combinations","fastMode","autoEnchant","autoGem","defaultRedGem","defaultBlueGem","defaultYellowGem","defaultMetaGem","ensureMetaReqMet","iterationsPerCombo","simTalents","talentsToSim","BulkComboResult","results","equippedGearResult","ItemSpecWithSlot","itemsAdded","unitMetrics","talentLoadout","slot","Phase","Phase6","CURRENT_PHASE","REPO_NAME","pathnameParts","window","location","pathname","repoPartIdx","findIndex","part","PlayerClass","_PlayerSpec","races","armorTypes","PlayerSpec","_BloodDeathKnight","arguments","specID","classID","friendlyName","simLink","isTankSpec","isHealingSpec","isRangedDpsSpec","isMeleeDpsSpec","canDualWield","getIcon","size","ClassDeathKnight","getSpecSiteUrl","_FrostDeathKnight","_UnholyDeathKnight","_DeathKnight","hexColor","specs","weaponTypes","rangedWeaponTypes","RaceBloodElf","RaceDraenei","RaceDwarf","RaceHuman","RaceGnome","RaceGoblin","RaceNightElf","RaceOrc","RaceTauren","RaceTroll","RaceUndead","RaceWorgen","ArmorTypePlate","ArmorTypeMail","ArmorTypeLeather","ArmorTypeCloth","WeaponTypeAxe","canUseTwoHand","WeaponTypeMace","WeaponTypePolearm","WeaponTypeSword","RangedWeaponTypeSigil","DeathKnight","_BalanceDruid","ClassDruid","_FeralDruid","_RestorationDruid","_BeastMasteryHunter","ClassHunter","_MarksmanshipHunter","_SurvivalHunter","_ArcaneMage","ClassMage","_FireMage","_FrostMage","_HolyPaladin","ClassPaladin","_ProtectionPaladin","_RetributionPaladin","_DisciplinePriest","ClassPriest","_HolyPriest","_ShadowPriest","_AssassinationRogue","ClassRogue","_CombatRogue","_SubtletyRogue","_ElementalShaman","ClassShaman","_EnhancementShaman","_RestorationShaman","_AfflictionWarlock","ClassWarlock","_DemonologyWarlock","_DestructionWarlock","_ArmsWarrior","ClassWarrior","_FuryWarrior","_ProtectionWarrior","specToPlayerSpec","SpecUnknown","DeathKnightSpecs.BloodDeathKnight","DeathKnightSpecs.FrostDeathKnight","DeathKnightSpecs.UnholyDeathKnight","DruidSpecs.BalanceDruid","DruidSpecs.FeralDruid","DruidSpecs.RestorationDruid","HunterSpecs.BeastMasteryHunter","HunterSpecs.MarksmanshipHunter","HunterSpecs.SurvivalHunter","MageSpecs.ArcaneMage","MageSpecs.FireMage","MageSpecs.FrostMage","PaladinSpecs.HolyPaladin","PaladinSpecs.ProtectionPaladin","PaladinSpecs.RetributionPaladin","PriestSpecs.DisciplinePriest","PriestSpecs.HolyPriest","PriestSpecs.ShadowPriest","RogueSpecs.AssassinationRogue","RogueSpecs.CombatRogue","RogueSpecs.SubtletyRogue","ShamanSpecs.ElementalShaman","ShamanSpecs.EnhancementShaman","ShamanSpecs.RestorationShaman","WarlockSpecs.AfflictionWarlock","WarlockSpecs.DemonologyWarlock","WarlockSpecs.DestructionWarlock","WarriorSpecs.ArmsWarrior","WarriorSpecs.FuryWarrior","WarriorSpecs.ProtectionWarrior","getPlayerClass","playerSpec","PlayerClasses","fromProto","PlayerSpecs","DeathKnightSpecs","DruidSpecs","HunterSpecs","MageSpecs","PaladinSpecs","PriestSpecs","RogueSpecs","ShamanSpecs","WarlockSpecs","WarriorSpecs","getFullSpecName","getSpecNumber","getLocalStorageKey","replace","_Druid","WeaponTypeDagger","WeaponTypeFist","WeaponTypeOffHand","WeaponTypeStaff","RangedWeaponTypeLibram","Druid","_Hunter","RangedWeaponTypeBow","RangedWeaponTypeCrossbow","RangedWeaponTypeGun","Hunter","_Mage","RangedWeaponTypeWand","Mage","_Paladin","cssClass","WeaponTypeShield","Paladin","_Priest","Priest","_Rogue","RangedWeaponTypeThrown","Rogue","_Shaman","RangedWeaponTypeTotem","Shaman","_Warlock","Warlock","_Warrior","Warrior","protoToPlayerClass","ClassUnknown","getCssClass","playerClass","protoId","naturalOrder","UIItem_FactionRestriction","Expansion","DungeonDifficulty","SourceFilterOption","RaidFilterOption","UIDatabase","UIItem","UIEnchant","UIGem","UIZone","UINPC","IconData","GlyphID","encounters","zones","npcs","itemIcons","spellIcons","glyphIds","expansion","zoneId","UIItemSource","icon","randomSuffixOptions","ilvl","phase","quality","unique","heroic","classAllowlist","requiredProfession","sources","factionRestriction","CraftedSource","DropSource","QuestSource","SoldBySource","crafted","drop","quest","soldBy","profession","difficulty","npcId","otherName","category","npcName","extraTypes","enchantType","DatabaseFilters","raids","minMhWeaponSpeed","maxMhWeaponSpeed","minOhWeaponSpeed","maxOhWeaponSpeed","minRangedWeaponSpeed","maxRangedWeaponSpeed","oneHandedWeapons","twoHandedWeapons","matchingGemsOnly","favoriteItems","favoriteGems","favoriteEnchants","SimSettings","fixedRngSeed","showDamageMetrics","showThreatMetrics","showHealingMetrics","showExperimental","showEpValues","faction","filters","IndividualSimSettings","epRatios","dpsRefStat","healRefStat","tankRefStat","settings","epWeightsStats","SavedGearSet","gear","bonusStatsStats","SavedSettings","professions","playerBuffs","SavedTalents","SavedRotation","BlessingsAssignment","blessings","BlessingsAssignments","paladins","SavedEncounter","SavedRaid","RaidSimSettings","SimRun","request","SimRunData","run","referenceRun","DetailedResultsUpdate","runData","stringComparator","sum","reduce","total","cur","maxIndex","v","arrayEquals","comparator","every","distinct","distinctArr","forEach","dVal","bucket","buckets","valString","stDevToConf90","stDev","N","sqrt","getEnumValues","enumType","isRightClick","event","button","downloadString","fileName","dataStr","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","formatDeltaTextElem","elem","before","after","lowerIsBetter","noColor","delta","deltaStr","toFixed","textContent","classList","Boolean","add","permutations","withoutThisElem","splice","perm","flat","permutationsWithDups","smaller","permutation","newPerm","combinationsWithDups","permutationA","permutationB","buf2hex","x","padStart","jsonStringifyCustom","indent","jsonStringifyCustomHelper","indentStr","handlerResult","str","fieldKey","jsonStringifyWithFlattenedPaths","htmlDecode","DOMParser","parseFromString","documentElement","NUM_SPECS","raidSimIcon","raidSimLabel","getTalentTreePoints","trees","tree","char","getTalentPoints","getTalentTree","classString","specString","URL","protocol","host","raidSimSiteUrl","textCssClassForClass","textCssClassForSpec","UnknownRotation","UnknownTalents","UnknownClassOptions","UnknownSpecOptions","specTypeFunctions","rotationCreate","rotationEquals","rotationCopy","rotationToJson","rotationFromJson","_obj","talentsCreate","talentsEquals","talentsCopy","talentsToJson","talentsFromJson","optionsCreate","optionsEquals","optionsCopy","optionsToJson","optionsFromJson","optionsFromPlayer","_player","obj","raceToFaction","RaceUnknown","Unknown","Alliance","Horde","withSpec","specOptions","getPlayerSpecFromPlayer","specValues","isSharpWeaponType","isBluntWeaponType","metaGemEffectEPs","getMetaGemEffectEP","gem","playerStats","canEquipItem","ItemTypeFinger","ItemTypeTrinket","ItemTypeWeapon","eligibleWeaponType","wt","HandTypeOffHand","HandTypeOneHand","ItemSlotOffHand","HandTypeTwoHand","ItemTypeRanged","itemTypeToSlotsMap","ItemTypeUnknown","ItemTypeHead","ItemSlotHead","ItemTypeNeck","ItemSlotNeck","ItemTypeShoulder","ItemSlotShoulder","ItemTypeBack","ItemSlotBack","ItemTypeChest","ItemSlotChest","ItemTypeWrist","ItemSlotWrist","ItemTypeHands","ItemSlotHands","ItemTypeWaist","ItemSlotWaist","ItemTypeLegs","ItemSlotLegs","ItemTypeFeet","ItemSlotFeet","ItemSlotFinger1","ItemSlotFinger2","ItemSlotTrinket1","ItemSlotTrinket2","ItemSlotRanged","getEligibleItemSlots","HandTypeMainHand","ItemSlotMainHand","Item","getEligibleEnchantSlots","Enchant","enchantAppliesToItem","sharedSlots","EnchantTypeTwoHand","EnchantTypeShield","EnchantTypeStaff","canEquipEnchant","newUnitReference","raidIndex","emptyUnitReference","makeBlessingsAssignments","numPaladins","assignments","fill","BlessingUnknown","makeBlankBlessingsAssignments","j","makeDefaultBlessings","BlessingOfKings","BlessingOfMight","BlessingOfSanctuary","BlessingOfWisdom","orderedResourceTypes","ResourceTypeHealth","ResourceTypeMana","ResourceTypeEnergy","ResourceTypeRage","ResourceTypeComboPoints","ResourceTypeFocus","ResourceTypeRunicPower","ResourceTypeBloodRune","ResourceTypeFrostRune","ResourceTypeUnholyRune","ResourceTypeDeathRune","AL_CATEGORY_HARD_MODE","TypedEvent","listeners","firedEvents","frozenEvents","on","listener","dispose","off","idx","once","onceListener","eventID","emit","fe","freezeCount","frozenTypedEvents","fireEventInternal","freezeAllAndDo","func","console","typedEvents","typedEvent","frozenEvent","nextEventID","onAny","newEvent","emitter","GEM_COLORS","GemColorUnknown","PRIMARY_COLORS","GemColorRed","GemColorYellow","GemColorBlue","SECONDARY_COLORS","GemColorGreen","GemColorPurple","GemColorOrange","socketToMatchingColors","gemColorMatchesSocket","gemColor","socketColor","has","gemMatchesSocket","gemEligibleForSocket","GemColorMeta","isUnrestrictedGem","ProfessionUnknown","GemColorPrismatic","MetaGemCondition","description","minRed","minYellow","minBlue","compareColorGreater","compareColorLesser","metaGemConditions","isMet","numRed","numYellow","numBlue","getNumInCategory","isCompareColorCondition","isOneOfEach","isTwoAndOne","isThreeOfAColor","fromMinColors","fromCompareColors","getMetaGemCondition","getMetaGemConditionDescription","metaGem","emptyGemSocketIcons","getEmptyGemSocketIconUrl","armorTypeNames","ArmorTypeUnknown","weaponTypeNames","WeaponTypeUnknown","rangedWeaponTypeNames","RangedWeaponTypeUnknown","RangedWeaponTypeIdol","raceNames","nameToRace","normalized","replaceAll","classNames","nameToClass","lower","professionNames","Alchemy","Blacksmithing","Enchanting","Engineering","Herbalism","Inscription","Jewelcrafting","Leatherworking","Mining","Skinning","Tailoring","nameToProfession","statOrder","StatHealth","StatMana","StatArmor","StatBonusArmor","StatStamina","StatStrength","StatAgility","StatIntellect","StatSpirit","StatSpellPower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatSpellPenetration","StatMP5","StatAttackPower","StatRangedAttackPower","StatMeleeHit","StatMeleeCrit","StatMeleeHaste","StatArmorPenetration","StatExpertise","StatMastery","StatDefense","StatBlock","StatBlockValue","StatDodge","StatParry","StatResilience","StatArcaneResistance","StatFireResistance","StatFrostResistance","StatNatureResistance","StatShadowResistance","statNames","shortSecondaryStatNames","PseudoStatMainHandDps","PseudoStatOffHandDps","PseudoStatRangedDps","PseudoStatBlockValueMultiplier","pseudoStatNames","PseudoStatDodge","PseudoStatParry","getClassStatName","stat","statName","slotNames","resourceNames","ResourceTypeNone","sourceNames","SourceUnknown","SourceCrafting","SourceQuest","SourceDungeon","SourceDungeonH","SourceDungeonTRA","SourceDungeonTRB","SourceRaid10","SourceRaid10H","SourceRaid25","SourceRaid25H","raidNames","RaidUnknown","RaidVanilla","RaidTbc","RaidNaxxramas","RaidEyeOfEternity","RaidObsidianSanctum","RaidVaultOfArchavon","RaidUlduar","RaidTrialOfTheCrusader","RaidOnyxiasLair","RaidIcecrownCitadel","RaidRubySanctum","difficultyNames","DifficultyUnknown","DifficultyNormal","DifficultyHeroic","DifficultyTitanRuneAlpha","DifficultyTitanRuneBeta","DifficultyRaid10","DifficultyRaid10H","DifficultyRaid25","DifficultyRaid25H","masterySpellNames","masterySpellIDs","STATS_LEN","PSEUDOSTATS_LEN","UnitStat","pseudoStat","isStat","isPseudoStat","getStat","getPseudoStat","other","getName","clazz","getProtoValue","proto","setProtoValue","fromPseudoStat","getAll","allStats","allPseudoStats","Stats","initStatsArray","expectedLen","newStats","newStat","statIdx","getUnitStat","withStat","withPseudoStat","withUnitStat","addStat","subtract","scale","_stat","computeEP","epWeights","belowCaps","statCaps","asArray","toProto","fromMap","statsMap","pseudoStatsMap","statsArr","entry","statStr","pseudoStatsArr","pseudoStatstr","unitStats","getWeaponDPS","EquippedItem","_item","_enchant","_gems","_randomSuffix","_reforging","numPossibleSockets","numSockets","Gem","withItem","newEnchant","newGems","firstMatchingIndex","socketIdx","firstEligibleIndex","couldHaveExtraSocket","withEnchant","withReforge","reforge","withGemHelper","withGem","curItem","removeGemsWithId","gemId","removeAllGems","withRandomSuffix","asActionId","ActionId","fromRandomSuffix","fromItemId","asSpec","meetsSocketBonus","socketBonusStats","requiresExtraSocket","hasExtraGem","hasExtraSocket","isBlacksmithing","numSocketsOfColor","hasSocketedGem","allSocketColors","curSocketColors","curGems","curEquippedGems","g","getProfessionRequirements","profs","getFailedProfessionRequirements","failed","BaseGear","getItemSlots","otherArray","thisItem","equalsOrBothNull","getEquippedItem","asMap","newInternalGear","withEquippedItemInternal","newSlot","newItem","canDualWield2H","removeUniqueGems","removeUniqueItems","validateWeaponCombo","mainHand","offHand","canDW2h","toDatabase","db","equippedItems","ei","itemToDB","getReforge","enchantToDB","gemToDB","Gear","withEquippedItem","getTrinkets","hasTrinket","hasRelic","relicItem","getAllGems","getNonMetaGems","statsFromGems","getGemsOfColor","getJCGems","getMetaGem","gemColorCounts","red","yellow","blue","hasActiveMetaGem","isMetaGemActive","hasInactiveMetaGem","itemSlot","withSingleGemSubstitution","oldGem","newGem","currentGems","withMetaGem","headItem","withoutMetaGem","withoutGems","curGear","withoutBlacksmithSockets","wristItem","handsItem","hasBluntMHWeapon","weapon","hasSharpMHWeapon","hasBluntOHWeapon","hasSharpOHWeapon","ItemSwapGear","_Database","enchantsBySlot","presetEncounters","presetTargets","loadedLeftovers","loadProto","loadPromise","fetch","then","response","getLeftovers","loadLeftoversIfNecessary","leftoverDb","reforgeStat","npc","zone","Promise","resolve","getAllItems","getItems","getItemById","getRandomSuffixById","getAvailableReforges","availableReforges","statIndex","getEnchants","getGems","ret","getNpc","getZone","getMatchingGems","lookupGem","itemID","lookupItemSpec","itemSpec","slots","lookupEquipmentSpec","equipSpec","gearMap","assignedSlot","lookupItemSwap","enchantSpellIdToEffectId","enchantSpellId","glyphItemToSpellId","gid","glyphSpellToItemId","getPresetEncounter","getPresetTarget","getAllPresetEncounters","getAllPresetTargets","getItemIconData","getWowheadItemTooltipData","getSpellIconData","getWowheadSpellTooltipData","getWowheadTooltipData","tooltipPostfix","url","mergeSimDatabases","db1","db2","Database","_ActionId","baseName","iconUrl","randomSuffixId","OtherActionNone","OtherActionWait","OtherActionManaRegen","resourceTypeToIcon","OtherActionEnergyRegen","OtherActionFocusRegen","OtherActionManaGain","OtherActionRageGain","OtherActionAttack","OtherActionShoot","OtherActionPet","OtherActionRefund","OtherActionDamageTaken","OtherActionHealingModel","OtherActionBloodRuneGain","OtherActionFrostRuneGain","OtherActionUnholyRuneGain","OtherActionDeathRuneGain","OtherActionPotion","anyId","equalsIgnoringTag","setBackground","style","backgroundImage","makeItemUrl","makeSpellUrl","makeQuestUrl","makeNpcUrl","makeZoneUrl","setWowheadHref","href","setBackgroundAndHref","fillAndSet","setHref","filled","playerIndex","tooltipData","getTooltipData","idString","toProtoString","iconOverrideId","idOverrides","makeIconUrl","overrideTooltipData","toStringIgnoringTag","ActionIdProto","withoutTag","fromEmpty","fromSpellId","fromOtherId","fromPetName","petName","petNameToActionId","petNameToIcon","fromItem","fromMatch","match","idType","fromLogString","logRegex","warn","replaceAllInString","matches","matchAll","logRegexGlobal","replaceData","async","actionId","filledId","firstIndex","iconLabel","RegExp","defaultTargetIcon","Shadowfiend","Bloodworm","Gargoyle","Ghoul","Valkyr","Bat","Bear","Boar","Cat","Chimaera","Crab","Crocolisk","Devilsaur","Dragonhawk","Felguard","Felhunter","Infernal","Gorilla","Hyena","Imp","Moth","Owl","Raptor","Ravager","Rhino","Scorpid","Serpent","Silithid","Spider","Succubus","Tallstrider","Turtle","Wasp","Wolf","Worm","getPetIconFromName","element","tagName","props","children","el","tagMap","appendChildren","shadowRootOptions","attachShadow","attributes","dataset","ref","prop","specialProps","attr","addStyles","l","fragment","DocumentFragment","styles","setProperty","parent","child","append","Set","_Entity","ownerName","isTarget","isPet","toHTMLString","parseAll","parseRegex","Entity","SimLog","params","logIndex","timestamp","activeAuras","includeTimestamp","regexp","captureArr","exec","toStringPrefix","prefix","formattedTimestamp","positiveTimestamp","abs","minutes","seconds","milliseconds","formatted","newActionIdLink","iconElem","className","actionAnchor","outerHTML","lines","line","lineIndex","threatMatch","parseFloat","remainder","entities","DamageDealtLog","ResourceChangedLog","AuraEventLog","AuraStacksChangeLog","MajorCooldownUsedLog","CastBeganLog","CastCompletedLog","StatChangeLog","isDamageDealt","isResourceChanged","isAuraEvent","isAuraStacksChange","isMajorCooldownUsed","isCastBegan","isCastCompleted","isStatChange","groupDuplicateTimestamps","grouped","curGroup","log","amount","miss","crit","crush","glance","dodge","parry","block","tick","partialResist1_4","partialResist2_4","partialResist3_4","hit","isDamage","isHealing","isShielding","resultString","threatPostfix","cause","_DpsLog","damageLogs","fromLogs","damageDealtLogs","groupedDamageLogs","curDamageLogs","curDamageTotal","ddLogGroup","ddLog","newStartIdx","curLog","inWindow","DPS_WINDOW","DpsLog","ThreatLogGroup","threatBefore","threatAfter","groupedLogs","curThreat","logGroup","newThreat","threatLog","isGained","isFaded","isRefreshed","oldStacks","newStacks","AuraUptimeLog","fadedAt","stacksChange","gainedAt","entity","encounterDuration","unmatchedGainedLogs","uptimeLogs","matchingGainedIdx","gainedLog","gained","stacks","stacksChangeLogs","unmatchedLog","populateActiveAuras","auraLogs","curAuras","auraLogsIndex","curAura","resourceType","valueBefore","valueAfter","isSpend","signedDiff","verb","resourceName","resourceKlass","stringToResourceType","ResourceChangedLogGroup","allResourceChangedLogs","resourceChangedLogs","cooldownId","manaCost","castTime","effectiveTime","castId","CastLog","castBeganLog","castCompletedLog","travelTime","totalDamage","ddl","castBeganLogs","castCompletedLogs","toBucketKey","castBeganLogsByAbility","castCompletedLogsByAbility","damageDealtLogsByAbility","castLogs","bucketKey","abilityCastsBegan","abilityCastsCompleted","abilityDamageDealt","ddIdx","cbIdx","cbLog","ccLog","nextCcLog","ddLogs","isGain","SimResultData","SimResult","party","units","getPlayers","getUnitWithIndex","getFirstPlayer","getPlayerWithIndex","getPlayerWithRaidIndex","getTargets","getTargetWithIndex","getTargetWithEncounterIndex","unit","getDamageMetrics","DistributionMetricsProto","getActionMetrics","joinById","getPlayerAndPetActions","forTarget","getSpellMetrics","hitAttempts","isMeleeAction","getMeleeMetrics","getResourceMetrics","resource","getBuffMetrics","getDebuffMetrics","uptimePercent","makeNew","resultData","raidPromise","encounterPromise","metrics","numParties","partyIndex","numPlayers","makeNewPlayer","petActionId","isPlayer","classColor","dpsLogs","threatLogs","auraUptimeLogs","majorCooldownLogs","groupedResourceLogs","majorCooldownAuraUptimeLogs","auraLog","mcdLog","getTargetIndex","maxThreat","pet","getActionsForDisplay","getMeleeActions","getSpellActions","getHealingActions","playerLogs","petLogs","actionsPromise","actionMetrics","aurasPromise","auraMetrics","resourcesPromise","resourceMetrics","petsPromise","petMetrics","petIdPromise","playerMetrics","makeNewTarget","targetLogs","targetMetrics","numTargets","durationSeconds","averageProcs","ppm","merge","removeTag","actionIdOverride","firstAura","AuraMetricsProto","groupById","useTag","aurasToJoin","gainPerSecond","avgGain","wastedGain","firstResource","ResourceMetricsProto","resourcesToJoin","tam","combinedMetrics","avgCastTimeMs","hpm","totalHealing","manaMetrics","r","healingThroughput","avgCast","avgCastHealing","avgCastThreat","landedHits","avgHit","avgHitThreat","critPercent","missPercent","dodgePercent","parryPercent","blockPercent","glancePercent","targetData","ActionMetricsProto","firstAction","maxTargets","mergedTargets","actionsToJoin","landedHitsRaw","timeSpentCastingMs","lhr","TargetedActionMetricsProto","Component","parentElem","rootCssClass","rootElem","disposeCallbacks","disposed","customRootElement","addOnDisposeCallback","callback","Input","modObject","config","enabled","changeEmitter","inputConfig","inline","extraCssClasses","buildLabel","changedEvent","setInputValue","getSourceValue","update","labelTooltip","Tooltip","title","html","enableWhen","getInputElem","removeAttribute","showWhen","init","initialValue","defaultValue","getValue","setSourceValue","newValue","setValue","sourceToValue","src","valueToSource","inputChanged","getInputValue","newGroupContainer","BooleanPicker","inputElem","reverse","prepend","addEventListener","checked","DropdownPicker","valueConfigs","vc","headerText","currentSelection","submenus","buttonElem","defaultLabel","listElem","buildDropdown","setOptions","newValueConfigs","innerHTML","valueConfig","itemElem","containsSubmenuChildren","submenu","headerElem","setOptionContent","getOrCreateInstance","animation","placement","fallbackPlacements","customClass","updateValue","createSubmenu","getSubmenu","equalPaths","containerElem","childNodes","newSubmenu","aVal","newSrcValue","newSelection","createMissingValue","TextDropdownPicker","UnitPicker","isSelectButton","unitConfig","img","startsWith","hideLabel","hideLabelWhenDefaultSelected","text","insertAdjacentText","ResultComponent","lastSimResult","resultsEmitter","onSimResult","hasLastSimResult","getLastSimResult","ALL_UNITS","ResultsFilter","currentFilter","playerFilter","_filterData","refToValue","filterData","numToRef","setPlayer","refToNum","targetFilter","setTarget","getFilter","getUnitOptions","newPlayer","UnitType","AllPlayers","AllTargets","simResult","allUnitsOption","unitOptions","curRef","option","o","CONTENT_CLASS","BACKDROP_CLASS","ARROW_CLASS","SVG_ARROW_CLASS","TOUCH_OPTIONS","passive","capture","TIPPY_DEFAULT_APPEND_TO","getValueAtIndexOrReturn","isType","call","invokeWithArgsOrReturn","args","apply","debounce","fn","clearTimeout","timeout","setTimeout","normalizeToArray","pushIfUnique","arrayFrom","removeUndefinedProps","acc","div","isElement","getArrayOfElements","isNodeList","querySelectorAll","setTransitionDuration","els","transitionDuration","setVisibilityState","state","updateTransitionEndListener","box","actualContains","_target$getRootNode","contains","getRootNode","currentInput","isTouch","lastMouseMoveTime","onDocumentTouchStart","performance","onDocumentMouseMove","now","removeEventListener","onWindowBlur","activeElement","_tippy","reference","instance","blur","isVisible","isIE11","msCrypto","defaultProps","appendTo","aria","content","expanded","delay","getReferenceClientRect","hideOnClick","ignoreAttributes","interactiveBorder","interactiveDebounce","moveTransition","onAfterUpdate","onBeforeUpdate","onCreate","onDestroy","onHidden","onHide","onMount","onShow","onShown","onTrigger","onUntrigger","onClickOutside","plugins","popperOptions","render","showOnCreate","touch","trigger","triggerTarget","animateFill","followCursor","inlinePositioning","sticky","allowHTML","arrow","inertia","maxWidth","role","theme","zIndex","defaultKeys","getExtendedPassedProps","passedProps","pluginProps","plugin","_name","evaluateProps","out","valueAsString","getAttribute","getDataAttributeProps","dangerouslySetInnerHTML","createArrowElement","setContent","getChildren","popper","firstElementChild","boxChildren","node","backdrop","onUpdate","prevProps","nextProps","_getChildren","box2","removeChild","$$tippy","idCounter","mouseMoveListeners","mountedInstances","createTippy","showTimeout","hideTimeout","scheduleHideAnimationFrame","lastTriggerEvent","currentTransitionEndListener","onFirstUpdate","currentTarget","isVisibleFromClick","didHideDueToDocumentMouseDown","didTouchMove","ignoreOnFirstUpdate","debouncedOnMouseMove","onMouseMove","popperInstance","isEnabled","isDestroyed","isMounted","isShown","clearDelayTimeouts","cancelAnimationFrame","setProps","partialProps","invokeHook","getNestedPopperTree","nestedPopper","requestAnimationFrame","forceUpdate","show","isAlreadyVisible","isDisabled","isTouchAndTouchDisabled","getCurrentTarget","hasAttribute","getIsDefaultRenderFn","visibility","transition","_getDefaultTemplateCh2","getDefaultTemplateChildren","_instance$popperInsta2","offsetHeight","_getDefaultTemplateCh3","_box","_content","onTransitionEnd","onTransitionedIn","parentNode","isAlreadyHidden","handleStyles","_getDefaultTemplateCh4","onTransitionedOut","unmount","hideWithInteractivity","enable","disable","destroy","_props$render","pluginsHooks","hasAriaExpanded","getNormalizedTouchSettings","getIsCustomTouchBehavior","_instance$props$rende","getDocument","_element$ownerDocumen","ownerDocument","getDelay","isShow","fromHide","pointerEvents","hook","shouldInvokePropsHook","_instance$props","pluginHooks","handleAriaContentAttribute","currentValue","nextValue","handleAriaExpandedAttribute","cleanupInteractiveMouseListeners","onDocumentPress","actualTarget","composedPath","onTouchMove","onTouchStart","addDocumentPress","doc","removeDocumentPress","eventType","addListeners","onMouseLeave","onBlurOrFocusOut","removeListeners","_ref","_lastTriggerEvent","shouldScheduleClickHide","isEventListenerStopped","wasFocused","scheduleShow","scheduleHide","isCursorOverReferenceOrPopper","popperTreeData","clientX","clientY","popperRect","popperState","basePlacement","offsetData","modifiersData","topDistance","top","y","bottomDistance","bottom","leftDistance","left","rightDistance","right","exceedsTop","exceedsBottom","exceedsLeft","exceedsRight","isCursorOutsideInteractiveBorder","_instance$popperInsta","getBoundingClientRect","relatedTarget","createPopperInstance","_instance$props2","computedReference","contextElement","modifiers","padding","adaptive","requires","_ref2","state2","createPopper","destroyPopperInstance","_getNormalizedTouchSe","touchValue","touchDelay","tippy","optionalProps","instances","setDefaultProps","applyStyles","effect","initialStyles","position","strategy","margin","elements","ColumnSortType","ColumnSortType2","MetricsTable","columnConfigs","tableElem","getElementsByClassName","bodyElem","headerRowElem","columnConfig","headerCell","headerCellClass","columnClass","sortList","sortData","$","tablesorter","cssChildRow","sortMetrics","addRow","metric","rowElem","cellElem","fillCell","getDisplayString","customizeRowElem","addGroup","shouldCollapse","mergedMetrics","mergeMetrics","parentRow","childRows","childRow","expand","row","groupedMetrics","getGroupedMetrics","nameCellConfig","getData","playerNameCellConfig","CastMetricsTable","Descending","actionGroups","petGroups","DtpsMeleeMetricsTable","targetActions","DtpsSpellMetricsTable","HealingMetricsTable","MeleeMetricsTable","petsByName","SpellMetricsTable","ResourceMetricsTable","childConfig","table","TypedResourceMetricsTable","actionColors","SourceChart","allActionMetrics","chartCanvas","height","width","actionMetric","names","am","totalDmg","bgColors","ctx","getContext","Chart","labels","datasets","backgroundColor","legend","display","PlayerDamageMetricsTable","resultsFilter","chart","chartContainer","makeChart","raidDps","maxDps","maxDpsIndex","AuraMetricsTable","useDebuffs","DpsHistogram","chartBounds","damageMetrics","colors","scales","beginAtZero","ticks","dpsColor","manaColor","threatColor","Timeline","rendered","hiddenIds","hiddenIdsChangeEmitter","draggable","chartPicker","dpsResourcesPlotElem","rotationPlotElem","updatePlot","dpsResourcesPlot","ApexCharts","foreColor","animations","series","xaxis","noData","stroke","curve","rotationLabels","rotationTimeline","rotationHiddenIdsContainer","isMouseDown","startX","scrollLeft","ondragstart","preventDefault","onmousedown","pageX","offsetLeft","onmouseleave","onmouseup","onmousemove","walk","tickAmount","decimalsInFloat","yaxis","beforeResetZoom","toolbar","tooltipHandlers","custom","seriesIndex","dataPointIndex","updateRotationChart","dpsData","addDpsSeries","addDpsYAxis","tooltipHandler","addManaSeries","addThreatSeries","addMajorCooldownAnnotations","clearRotationChart","addThreatYAxis","updateOptions","dpsAxisMax","ceil","seriesName","axisBorder","axisTicks","minWidth","axisMax","colorOverride","dpsTooltip","manaLogs","maxMana","opposite","formatter","resourceTooltip","threatTooltip","mcdLogs","mcdAuraLogs","cooldownIconOffsets","mcdIdx","cdLog","cdIdx","distinctMcdAuras","mcdAuraColors","mcdAuraLog","dAura","annotations","x2","fillColor","points","image","offsetY","innerText","drawRotationTimeRuler","addResourceRow","buffsById","debuffsById","buffsAndDebuffsById","playerCastsByAbility","getSortedCastsByAbility","addCastRow","playerPets","petsLog","addSeparatorRow","addPetRow","buffsToShow","addAuraRow","targetCastsByAbility","debuffsToShow","meleeActionIds","spellActionIds","getActionCategory","fixedCategory","idToCategoryMap","meleeActionId","MELEE_ACTION_CATEGORY","spellActionId","SPELL_ACTION_CATEGORY","DEFAULT_ACTION_CATEGORY","castsByAbility","idsToGroupForRotation","categoryA","categoryB","makeLabelElem","isHiddenLabel","labelText","labelElem","hideElem","hiddenId","updateHidden","labelIcon","makeRowElem","timeToPx","filledActionId","separatorElem","resourceLogs","startValue","resourceLogGroup","cNames","resourceElem","percentageResources","bgElem","resourceTooltipElem","aurasById","castLog","castElem","travelTimeElem","travelTimeStr","tt","tickElem","applyAuraUptimeLogsToRow","aul","auraElem","scl","stacksChangeElem","timeToPxValue","time","canvas","strokeStyle","font","fillStyle","lineWidth","beginPath","moveTo","lineTo","numTicks","textAlign","lineHeight","fillText","includeAuras","damageLog","tooltipLogItem","tooltipAurasSection","maxValue","valToDisplayString","tooltipLogItemElem","manaChangedLog","tooltipAurasSectionElem","LogRunner","virtualScroll","showDebugChangeEmitter","showDebug","searchInput","querySelector","searchQuery","searchLogs","scrollToTopBtn","scrollToTop","_logRunner","initializeClusterize","scrollElem","contentElem","CustomVirtualScroll","scrollContainer","contentContainer","itemHeight","matchQuotesRegex","keywords","filteredLogs","logText","keyword","endsWith","setItems","visibleItemsCount","startIndex","placeholderTop","placeholderBottom","attachScrollListener","scrollTop","updateVisibleItems","newItems","newIndex","endIndex","visibleItems","itemRow","remainingItems","addRaidSimAction","simUI","addAction","runSim","progress","resultsManager","setSimProgress","RaidSimResultsManager","sim","simResultEmitter","setSimResult","_RaidSimResultsManager","currentChangeEmitter","referenceChangeEmitter","currentData","referenceData","resultsViewer","isIndividualSim","RaidProto","EncounterProto","raidProto","encounterProto","makeToplineResultsContent","cssScheme","setResultTooltip","resultDivElem","simReferenceSetButton","updateReference","simReferenceSwapButton","swapEventID","tmpData","simReferenceDeleteButton","formatToplineResult","resultMetricClasses","res","getMetrics","curMetricsTemp","refMetricsTemp","curMetrics","refMetrics","isDiff","applyZTestTooltip","n1","avg1","stdev1","n2","avg2","stdev2","err1","err2","denom","pow","z","significance_str","getRunData","getCurrentData","getReferenceData","dpsMetrics","dpaspMetrics","tpsMetrics","dtpsMetrics","tmiMetrics","buildResultsLine","average","classes","getResultsLineClasses","dpaspContent","mergedActions","mergedTargetActions","resultMetricCategories","metricsClasses","resultsFragment","cod","dur","demo","ToplineResults","noManaClasses","klass","secondsOOM","percentOOM","DetailedResults","latestRun","currentSimResult","settingsChangeEmitter","updateSettings","defaults","IntersectionObserver","toggle","intersectionRatio","rootMargin","simHeader","observe","toplineResultsDiv","timeline","getElementById","updateResults","rootDiv","setSimRunData","simRunData","postMessage","handleMessage","WindowedDetailedResults","URLSearchParams","search","insertAdjacentHTML","EmbeddedDetailedResults","simResultsManager","tabWindow","newTabBtn","getComputedStyle","searchParams","closed","open","focus"],"mappings":"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CjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IAGjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASE,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GAGjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GAGjC,KAAQF,GAAwB,GAChC,KAAQA,GAAwB,GAChC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASE,GAAwB,GACjC,MAASA,GAAwB,GAGjC,MAAS,IACT,MAAS,IACT,MAAS,IACT,MAASF,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASE,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,KAAQC,GAA0B,GAGlC,MAASD,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IAGjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IAGjC,MAAS,GACT,MAAS,GACT,MAASF,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,KAAQA,GAAwB,IAChC,KAAQA,GAAwB,IAChC,MAASA,GAAwB,IACjC,MAASE,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,KAAQA,GAAwB,IAChC,MAASA,GAAwB,IACjC,GAAMC,GAA0B,GAChC,KAAQA,GAA0B,GAClC,KAAQA,GAA0B,GAGlC,MAASH,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,GACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,GAAwB,IACjC,MAASA,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","x_google_ignoreList":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,75,85]}