{"version":3,"file":"sim-DIvBXBFk.chunk.js","sources":["../../../ui/shaman/elemental/inputs.ts","../../../ui/shaman/elemental/presets.ts","../../../ui/shaman/elemental/sim.ts"],"sourcesContent":["import { EventID } from 'ui/core/typed_event.js';\n\nimport * as InputHelpers from '../../core/components/input_helpers.js';\nimport { Player } from '../../core/player.js';\nimport { Spec } from '../../core/proto/common.js';\nimport { ElementalShaman_Options_ThunderstormRange } from '../../core/proto/shaman.js';\n\n// Configuration for spec-specific UI elements on the settings tab.\n// These don't need to be in a separate file but it keeps things cleaner.\n\nexport const InThunderstormRange = InputHelpers.makeSpecOptionsBooleanInput<Spec.SpecElementalShaman>({\n\tfieldName: 'thunderstormRange',\n\t// id: ActionId.fromSpellId(59159),\n\tlabel: 'Thunderstorm In Range',\n\tlabelTooltip: 'When set to true, thunderstorm casts will cause damage.',\n\tgetValue: (player: Player<Spec.SpecElementalShaman>) => player.getSpecOptions().thunderstormRange == ElementalShaman_Options_ThunderstormRange.TSInRange,\n\tsetValue: (eventID: EventID, player: Player<Spec.SpecElementalShaman>, newValue: boolean) => {\n\t\tconst newOptions = player.getSpecOptions();\n\t\tif (newValue) {\n\t\t\tnewOptions.thunderstormRange = ElementalShaman_Options_ThunderstormRange.TSInRange;\n\t\t} else {\n\t\t\tnewOptions.thunderstormRange = ElementalShaman_Options_ThunderstormRange.TSOutofRange;\n\t\t}\n\t\tplayer.setSpecOptions(eventID, newOptions);\n\t},\n});\n","import * as PresetUtils from '../../core/preset_utils.js';\nimport { Consumes, Faction, Flask, Food, Glyphs, Potions, Profession } from '../../core/proto/common.js';\nimport {\n\tAirTotem,\n\tEarthTotem,\n\tElementalShaman_Options as ElementalShamanOptions,\n\tFireTotem,\n\tShamanMajorGlyph,\n\tShamanMinorGlyph,\n\tShamanShield,\n\tShamanTotems,\n\tWaterTotem,\n} from '../../core/proto/shaman.js';\nimport { SavedTalents } from '../../core/proto/ui.js';\nimport AdvancedApl from './apls/advanced.apl.json';\nimport DefaultApl from './apls/default.apl.json';\nimport P1Gear from './gear_sets/p1.gear.json';\nimport P2Gear from './gear_sets/p2.gear.json';\nimport P3AllianceGear from './gear_sets/p3_alliance.gear.json';\nimport P3HordeGear from './gear_sets/p3_horde.gear.json';\nimport P4Gear from './gear_sets/p4.gear.json';\nimport PreraidGear from './gear_sets/preraid.gear.json';\n\n// Preset options for this spec.\n// Eventually we will import these values for the raid sim too, so its good to\n// keep them in a separate file.\n\nexport const PRERAID_PRESET = PresetUtils.makePresetGear('Pre-raid Preset', PreraidGear);\nexport const P1_PRESET = PresetUtils.makePresetGear('P1 Preset', P1Gear);\nexport const P2_PRESET = PresetUtils.makePresetGear('P2 Preset', P2Gear);\nexport const P3_PRESET_ALLI = PresetUtils.makePresetGear('P3 Preset [A]', P3AllianceGear, { faction: Faction.Alliance });\nexport const P3_PRESET_HORDE = PresetUtils.makePresetGear('P3 Preset [H]', P3HordeGear, { faction: Faction.Horde });\nexport const P4_PRESET = PresetUtils.makePresetGear('P4 Preset', P4Gear);\n\nexport const ROTATION_PRESET_DEFAULT = PresetUtils.makePresetAPLRotation('Default', DefaultApl);\nexport const ROTATION_PRESET_ADVANCED = PresetUtils.makePresetAPLRotation('Advanced', AdvancedApl);\n\n// Default talents. Uses the wowhead calculator format, make the talents on\n// https://wowhead.com/cata/talent-calc and copy the numbers in the url.\nexport const StandardTalents = {\n\tname: 'Standard',\n\tdata: SavedTalents.create({\n\t\t// talentsString: '0533001523213351322301351-005050031',\n\t\t// glyphs: Glyphs.create({\n\t\t// \tmajor1: ShamanMajorGlyph.GlyphOfFlametongueWeapon,\n\t\t// \tmajor2: ShamanMajorGlyph.GlyphOfTotemOfWrath,\n\t\t// \tmajor3: ShamanMajorGlyph.GlyphOfLightningBolt,\n\t\t// \tminor1: ShamanMinorGlyph.GlyphOfThunderstorm,\n\t\t// \tminor2: ShamanMinorGlyph.GlyphOfWaterShield,\n\t\t// \tminor3: ShamanMinorGlyph.GlyphOfGhostWolf,\n\t\t// }),\n\t}),\n};\n\nexport const DefaultOptions = ElementalShamanOptions.create({\n\tclassOptions: {\n\t\tshield: ShamanShield.WaterShield,\n\t\ttotems: ShamanTotems.create({\n\t\t\tearth: EarthTotem.StrengthOfEarthTotem,\n\t\t\tair: AirTotem.WrathOfAirTotem,\n\t\t\tfire: FireTotem.TotemOfWrath,\n\t\t\twater: WaterTotem.ManaSpringTotem,\n\t\t\tuseFireElemental: true,\n\t\t}),\n\t},\n});\n\nexport const OtherDefaults = {\n\tdistanceFromTarget: 20,\n\tprofession1: Profession.Engineering,\n\tprofession2: Profession.Tailoring,\n};\n\nexport const DefaultConsumes = Consumes.create({\n\tdefaultPotion: Potions.VolcanicPotion,\n\tflask: Flask.FlaskOfTheFrostWyrm,\n\tfood: Food.FoodFishFeast,\n});\n","import * as OtherInputs from '../../core/components/other_inputs.js';\nimport * as Mechanics from '../../core/constants/mechanics.js';\nimport { IndividualSimUI, registerSpecConfig } from '../../core/individual_sim_ui.js';\nimport { Player } from '../../core/player.js';\nimport { PlayerClasses } from '../../core/player_classes';\nimport { APLRotation } from '../../core/proto/apl.js';\nimport { Debuffs, Faction, IndividualBuffs, PartyBuffs, Race, RaidBuffs, Spec, Stat, TristateEffect } from '../../core/proto/common.js';\nimport { Stats } from '../../core/proto_utils/stats.js';\nimport { TypedEvent } from '../../core/typed_event.js';\nimport * as ShamanInputs from '../inputs.js';\nimport * as ElementalInputs from './inputs.js';\nimport * as Presets from './presets.js';\n\nconst SPEC_CONFIG = registerSpecConfig(Spec.SpecElementalShaman, {\n\tcssClass: 'elemental-shaman-sim-ui',\n\tcssScheme: PlayerClasses.getCssClass(PlayerClasses.Shaman),\n\t// List any known bugs / issues here and they'll be shown on the site.\n\tknownIssues: [],\n\twarnings: [\n\t\t// Warning to use all 4 totems if T6 2pc bonus is active.\n\t\t(simUI: IndividualSimUI<Spec.SpecElementalShaman>) => {\n\t\t\treturn {\n\t\t\t\tupdateOn: TypedEvent.onAny([simUI.player.rotationChangeEmitter, simUI.player.currentStatsEmitter]),\n\t\t\t\tgetContent: () => {\n\t\t\t\t\tconst hasT62P = simUI.player.getCurrentStats().sets.includes('Skyshatter Regalia (2pc)');\n\t\t\t\t\tconst totems = simUI.player.getSpecOptions().classOptions?.totems;\n\t\t\t\t\tconst hasAll4Totems = totems && totems.earth && totems.air && totems.fire && totems.water;\n\t\t\t\t\tif (hasT62P && !hasAll4Totems) {\n\t\t\t\t\t\treturn 'T6 2pc bonus is equipped, but inactive because not all 4 totem types are being used.';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t],\n\n\t// All stats for which EP should be calculated.\n\tepStats: [Stat.StatIntellect, Stat.StatSpellPower, Stat.StatSpellHit, Stat.StatSpellCrit, Stat.StatSpellHaste, Stat.StatMP5],\n\t// Reference stat against which to calculate EP. I think all classes use either spell power or attack power.\n\tepReferenceStat: Stat.StatSpellPower,\n\t// Which stats to display in the Character Stats section, at the bottom of the left-hand sidebar.\n\tdisplayStats: [\n\t\tStat.StatHealth,\n\t\tStat.StatMana,\n\t\tStat.StatStamina,\n\t\tStat.StatIntellect,\n\t\tStat.StatSpellPower,\n\t\tStat.StatSpellHit,\n\t\tStat.StatSpellCrit,\n\t\tStat.StatSpellHaste,\n\t\tStat.StatMP5,\n\t],\n\t// modifyDisplayStats: (player: Player<Spec.SpecElementalShaman>) => {\n\t// \tlet stats = new Stats();\n\t// \tstats = stats.addStat(Stat.StatSpellHit, player.getTalents().elementalPrecision * Mechanics.SPELL_HIT_RATING_PER_HIT_CHANCE);\n\t// \tstats = stats.addStat(Stat.StatSpellCrit, player.getTalents().tidalMastery * 1 * Mechanics.SPELL_CRIT_RATING_PER_CRIT_CHANCE);\n\t// \treturn {\n\t// \t\ttalents: stats,\n\t// \t};\n\t// },\n\n\tdefaults: {\n\t\t// Default equipped gear.\n\t\tgear: Presets.P3_PRESET_HORDE.gear,\n\t\t// Default EP weights for sorting gear in the gear picker.\n\t\tepWeights: Stats.fromMap({\n\t\t\t[Stat.StatIntellect]: 0.22,\n\t\t\t[Stat.StatSpellPower]: 1,\n\t\t\t[Stat.StatSpellCrit]: 0.67,\n\t\t\t[Stat.StatSpellHaste]: 1.29,\n\t\t\t[Stat.StatMP5]: 0.08,\n\t\t}),\n\t\t// Default consumes settings.\n\t\tconsumes: Presets.DefaultConsumes,\n\t\t// Default talents.\n\t\ttalents: Presets.StandardTalents.data,\n\t\t// Default spec-specific settings.\n\t\tspecOptions: Presets.DefaultOptions,\n\t\tother: Presets.OtherDefaults,\n\t\t// Default raid/party buffs settings.\n\t\traidBuffs: RaidBuffs.create({\n\t\t\tarcaneBrilliance: true,\n\t\t\tdivineSpirit: true,\n\t\t\tgiftOfTheWild: TristateEffect.TristateEffectImproved,\n\t\t\tmoonkinAura: TristateEffect.TristateEffectImproved,\n\t\t\tsanctifiedRetribution: true,\n\t\t\tdemonicPactSp: 500,\n\t\t\twrathOfAirTotem: true,\n\t\t}),\n\t\tpartyBuffs: PartyBuffs.create({}),\n\t\tindividualBuffs: IndividualBuffs.create({\n\t\t\tblessingOfKings: true,\n\t\t\tblessingOfWisdom: 2,\n\t\t\tvampiricTouch: true,\n\t\t}),\n\t\tdebuffs: Debuffs.create({\n\t\t\tfaerieFire: TristateEffect.TristateEffectImproved,\n\t\t\tjudgementOfWisdom: true,\n\t\t\tmisery: true,\n\t\t\tcurseOfElements: true,\n\t\t\tshadowMastery: true,\n\t\t\theartOfTheCrusader: true,\n\t\t}),\n\t},\n\t// IconInputs to include in the 'Player' section on the settings tab.\n\tplayerIconInputs: [ShamanInputs.ShamanShieldInput()],\n\t// Buff and Debuff inputs to include/exclude, overriding the EP-based defaults.\n\tincludeBuffDebuffInputs: [],\n\texcludeBuffDebuffInputs: [],\n\t// Inputs to include in the 'Other' section on the settings tab.\n\totherInputs: {\n\t\tinputs: [ElementalInputs.InThunderstormRange, OtherInputs.TankAssignment],\n\t},\n\tcustomSections: [ShamanInputs.TotemsSection],\n\tencounterPicker: {\n\t\t// Whether to include 'Execute Duration (%)' in the 'Encounter' section of the settings tab.\n\t\tshowExecuteProportion: false,\n\t},\n\n\tpresets: {\n\t\t// Preset talents that the user can quickly select.\n\t\ttalents: [Presets.StandardTalents],\n\t\t// Preset rotations that the user can quickly select.\n\t\trotations: [Presets.ROTATION_PRESET_DEFAULT, Presets.ROTATION_PRESET_ADVANCED],\n\t\t// Preset gear configurations that the user can quickly select.\n\t\tgear: [Presets.PRERAID_PRESET, Presets.P1_PRESET, Presets.P2_PRESET, Presets.P3_PRESET_ALLI, Presets.P3_PRESET_HORDE, Presets.P4_PRESET],\n\t},\n\n\tautoRotation: (_player: Player<Spec.SpecElementalShaman>): APLRotation => {\n\t\treturn Presets.ROTATION_PRESET_DEFAULT.rotation.rotation!;\n\t},\n\n\traidSimPresets: [\n\t\t{\n\t\t\tspec: Spec.SpecElementalShaman,\n\t\t\ttalents: Presets.StandardTalents.data,\n\t\t\tspecOptions: Presets.DefaultOptions,\n\t\t\tconsumes: Presets.DefaultConsumes,\n\t\t\tdefaultFactionRaces: {\n\t\t\t\t[Faction.Unknown]: Race.RaceUnknown,\n\t\t\t\t[Faction.Alliance]: Race.RaceDraenei,\n\t\t\t\t[Faction.Horde]: Race.RaceOrc,\n\t\t\t},\n\t\t\tdefaultGear: {\n\t\t\t\t[Faction.Unknown]: {},\n\t\t\t\t[Faction.Alliance]: {\n\t\t\t\t\t1: Presets.P1_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_PRESET_ALLI.gear,\n\t\t\t\t\t4: Presets.P4_PRESET.gear,\n\t\t\t\t},\n\t\t\t\t[Faction.Horde]: {\n\t\t\t\t\t1: Presets.P1_PRESET.gear,\n\t\t\t\t\t2: Presets.P2_PRESET.gear,\n\t\t\t\t\t3: Presets.P3_PRESET_HORDE.gear,\n\t\t\t\t\t4: Presets.P4_PRESET.gear,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t],\n});\n\nexport class ElementalShamanSimUI extends IndividualSimUI<Spec.SpecElementalShaman> {\n\tconstructor(parentElem: HTMLElement, player: Player<Spec.SpecElementalShaman>) {\n\t\tsuper(parentElem, player, SPEC_CONFIG);\n\t}\n}\n"],"names":["InThunderstormRange","InputHelpers.makeSpecOptionsBooleanInput","fieldName","label","labelTooltip","getValue","player","getSpecOptions","thunderstormRange","ElementalShaman_Options_ThunderstormRange","TSInRange","setValue","eventID","newValue","newOptions","TSOutofRange","setSpecOptions","PRERAID_PRESET","PresetUtils.makePresetGear","P1_PRESET","P1Gear","P2_PRESET","P2Gear","P3_PRESET_ALLI","P3AllianceGear","faction","Faction","Alliance","P3_PRESET_HORDE","P3HordeGear","Horde","P4_PRESET","P4Gear","ROTATION_PRESET_DEFAULT","PresetUtils.makePresetAPLRotation","DefaultApl","ROTATION_PRESET_ADVANCED","AdvancedApl","StandardTalents","name","data","SavedTalents","create","DefaultOptions","ElementalShamanOptions","classOptions","shield","ShamanShield","WaterShield","totems","ShamanTotems","earth","EarthTotem","StrengthOfEarthTotem","air","AirTotem","WrathOfAirTotem","fire","FireTotem","TotemOfWrath","water","WaterTotem","ManaSpringTotem","useFireElemental","OtherDefaults","distanceFromTarget","profession1","Profession","Engineering","profession2","Tailoring","DefaultConsumes","Consumes","defaultPotion","Potions","VolcanicPotion","flask","Flask","FlaskOfTheFrostWyrm","food","Food","FoodFishFeast","SPEC_CONFIG","registerSpecConfig","Spec","SpecElementalShaman","cssClass","cssScheme","PlayerClasses","getCssClass","Shaman","knownIssues","warnings","simUI","updateOn","TypedEvent","onAny","rotationChangeEmitter","currentStatsEmitter","getContent","hasT62P","getCurrentStats","sets","includes","hasAll4Totems","epStats","Stat","StatIntellect","StatSpellPower","StatSpellHit","StatSpellCrit","StatSpellHaste","StatMP5","epReferenceStat","displayStats","StatHealth","StatMana","StatStamina","defaults","gear","Presets.P3_PRESET_HORDE","epWeights","Stats","fromMap","consumes","Presets.DefaultConsumes","talents","Presets.StandardTalents","specOptions","Presets.DefaultOptions","other","Presets.OtherDefaults","raidBuffs","RaidBuffs","arcaneBrilliance","divineSpirit","giftOfTheWild","TristateEffect","TristateEffectImproved","moonkinAura","sanctifiedRetribution","demonicPactSp","wrathOfAirTotem","partyBuffs","PartyBuffs","individualBuffs","IndividualBuffs","blessingOfKings","blessingOfWisdom","vampiricTouch","debuffs","Debuffs","faerieFire","judgementOfWisdom","misery","curseOfElements","shadowMastery","heartOfTheCrusader","playerIconInputs","ShamanInputs.ShamanShieldInput","includeBuffDebuffInputs","excludeBuffDebuffInputs","otherInputs","inputs","ElementalInputs.InThunderstormRange","OtherInputs.TankAssignment","customSections","ShamanInputs.TotemsSection","encounterPicker","showExecuteProportion","presets","rotations","Presets.ROTATION_PRESET_DEFAULT","Presets.ROTATION_PRESET_ADVANCED","Presets.PRERAID_PRESET","Presets.P1_PRESET","Presets.P2_PRESET","Presets.P3_PRESET_ALLI","Presets.P4_PRESET","autoRotation","_player","rotation","raidSimPresets","spec","defaultFactionRaces","Unknown","Race","RaceUnknown","RaceDraenei","RaceOrc","defaultGear","ElementalShamanSimUI","IndividualSimUI","constructor","parentElem","super"],"mappings":"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"}